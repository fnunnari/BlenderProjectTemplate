'''Blender API main module
   
'''


class ops:
   '''Spcecial class, created just to reflect content of bpy.ops'''

   class action:
      '''Spcecial class, created just to reflect content of bpy.ops.action'''

      def clean(threshold=0.001, channels=False):
         '''Simplify F-Curves by removing closely spaced keyframes
            Arguments:
            @threshold (float): in [0, inf], (optional)
            @channels (bool): (optional)
      
         '''
      
         pass

      def clickselect(wait_to_deselect_others=False, mouse_x=0, mouse_y=0, extend=False, deselect_all=False, column=False, channel=False):
         '''Select keyframes by clicking on them
            Arguments:
            @wait_to_deselect_others (bool): (optional)
            @mouse_x (int): in [-inf, inf], (optional)
            @mouse_y (int): in [-inf, inf], (optional)
            @extend (bool): Toggle keyframe selection instead of leaving newly selected keyframes only
               (optional)
            @deselect_all (bool): Deselect all when nothing under the cursor
               (optional)
            @column (bool): Select all keyframes that occur on the same frame as the one under the mouse
               (optional)
            @channel (bool): Select all the keyframes in the channel under the mouse
               (optional)
      
         '''
      
         pass

      def copy():
         '''Copy selected keyframes to the copy/paste buffer
         '''
      
         pass

      def delete():
         '''Remove all selected keyframes
         '''
      
         pass

      def duplicate():
         '''Make a copy of all selected keyframes
         '''
      
         pass

      def duplicate_move(ACTION_OT_duplicate=None, TRANSFORM_OT_transform=None):
         '''Make a copy of all selected keyframes and move them
            Arguments:
            @ACTION_OT_duplicate (ACTION_OT_duplicate): Make a copy of all selected keyframes
               (optional)
            @TRANSFORM_OT_transform (TRANSFORM_OT_transform): Transform selected items by mode type
               (optional)
      
         '''
      
         pass

      def easing_type(type='AUTO'):
         '''Set easing type for the F-Curve segments starting from the selected keyframes
            Arguments:
            @type (str): in ['AUTO', 'EASE_IN', 'EASE_OUT', 'EASE_IN_OUT'], (optional)
      
         '''
      
         pass

      def extrapolation_type(type='CONSTANT'):
         '''Set extrapolation mode for selected F-Curves
            Arguments:
            @type (str): in ['CONSTANT', 'LINEAR', 'MAKE_CYCLIC', 'CLEAR_CYCLIC'], (optional)
      
         '''
      
         pass

      def frame_jump():
         '''Set the current frame to the average frame value of selected keyframes
         '''
      
         pass

      def handle_type(type='FREE'):
         '''Set type of handle for selected keyframes
            Arguments:
            @type (str): in ['FREE', 'ALIGNED', 'VECTOR', 'AUTO', 'AUTO_CLAMPED'], (optional)
      
         '''
      
         pass

      def interpolation_type(type='CONSTANT'):
         '''Set interpolation mode for the F-Curve segments starting from the selected keyframes
            Arguments:
            @type (str): in ['CONSTANT', 'LINEAR', 'BEZIER', 'SINE', 'QUAD', 'CUBIC', 'QUART', 'QUINT', 'EXPO', 'CIRC', 'BACK', 'BOUNCE', 'ELASTIC'], (optional)
      
         '''
      
         pass

      def keyframe_insert(type='ALL'):
         '''Insert keyframes for the specified channels
            Arguments:
            @type (str): in ['ALL', 'SEL', 'GROUP'], (optional)
      
         '''
      
         pass

      def keyframe_type(type='KEYFRAME'):
         '''Set type of keyframe for the selected keyframes
            Arguments:
            @type (str): in ['KEYFRAME', 'BREAKDOWN', 'MOVING_HOLD', 'EXTREME', 'JITTER'], (optional)
      
         '''
      
         pass

      def layer_next():
         '''Switch to editing action in animation layer above the current action in the NLA Stack
         '''
      
         pass

      def layer_prev():
         '''Switch to editing action in animation layer below the current action in the NLA Stack
         '''
      
         pass

      def markers_make_local():
         '''Move selected scene markers to the active Action as local 'pose' markers
         '''
      
         pass

      def mirror(type='CFRA'):
         '''Flip selected keyframes over the selected mirror line
            Arguments:
            @type (str): in ['CFRA', 'XAXIS', 'MARKER'], (optional)
      
         '''
      
         pass

      def new():
         '''Create new action
         '''
      
         pass

      def paste(offset='START', merge='MIX', flipped=False):
         '''Paste keyframes from copy/paste buffer for the selected channels, starting on the current frame
            Arguments:
            @offset (str): Paste time offset of keys
               in ['START', 'END', 'RELATIVE', 'NONE'], (optional)
            @merge (str): Method of merging pasted keys and existing
               in ['MIX', 'OVER_ALL', 'OVER_RANGE', 'OVER_RANGE_ALL'], (optional)
            @flipped (bool): Paste keyframes from mirrored bones if they exist
               (optional)
      
         '''
      
         pass

      def previewrange_set():
         '''Set Preview Range based on extents of selected Keyframes
         '''
      
         pass

      def push_down():
         '''Push action down on to the NLA stack as a new strip
         '''
      
         pass

      def sample():
         '''Add keyframes on every frame between the selected keyframes
         '''
      
         pass

      def select_all(action='TOGGLE'):
         '''Toggle selection of all keyframes
            Arguments:
            @action (str): Selection action to execute
               in ['TOGGLE', 'SELECT', 'DESELECT', 'INVERT'], (optional)
      
         '''
      
         pass

      def select_box(axis_range=False, xmin=0, xmax=0, ymin=0, ymax=0, wait_for_input=True, mode='SET', tweak=False):
         '''Select all keyframes within the specified region
            Arguments:
            @axis_range (bool): (optional)
            @xmin (int): in [-inf, inf], (optional)
            @xmax (int): in [-inf, inf], (optional)
            @ymin (int): in [-inf, inf], (optional)
            @ymax (int): in [-inf, inf], (optional)
            @wait_for_input (bool): (optional)
            @mode (str): in ['SET', 'ADD', 'SUB'], (optional)
            @tweak (bool): Operator has been activated using a tweak event
               (optional)
      
         '''
      
         pass

      def select_circle(x=0, y=0, radius=25, wait_for_input=True, mode='SET'):
         '''Select keyframe points using circle selection
            Arguments:
            @x (int): in [-inf, inf], (optional)
            @y (int): in [-inf, inf], (optional)
            @radius (int): in [1, inf], (optional)
            @wait_for_input (bool): (optional)
            @mode (str): in ['SET', 'ADD', 'SUB'], (optional)
      
         '''
      
         pass

      def select_column(mode='KEYS'):
         '''Select all keyframes on the specified frame(s)
            Arguments:
            @mode (str): in ['KEYS', 'CFRA', 'MARKERS_COLUMN', 'MARKERS_BETWEEN'], (optional)
      
         '''
      
         pass

      def select_lasso(path=None, mode='SET'):
         '''Select keyframe points using lasso selection
            Arguments:
            @path (OperatorMousePath): Collection of , (optional)
            @mode (str): in ['SET', 'ADD', 'SUB'], (optional)
      
         '''
      
         pass

      def select_leftright(mode='CHECK', extend=False):
         '''Select keyframes to the left or the right of the current frame
            Arguments:
            @mode (str): in ['CHECK', 'LEFT', 'RIGHT'], (optional)
            @extend (bool): (optional)
      
         '''
      
         pass

      def select_less():
         '''Deselect keyframes on ends of selection islands
         '''
      
         pass

      def select_linked():
         '''Select keyframes occurring in the same F-Curves as selected ones
         '''
      
         pass

      def select_more():
         '''Select keyframes beside already selected ones
         '''
      
         pass

      def snap(type='CFRA'):
         '''Snap selected keyframes to the times specified
            Arguments:
            @type (str): in ['CFRA', 'NEAREST_FRAME', 'NEAREST_SECOND', 'NEAREST_MARKER'], (optional)
      
         '''
      
         pass

      def stash(create_new=True):
         '''Store this action in the NLA stack as a non-contributing strip for later use
            Arguments:
            @create_new (bool): Create a new action once the existing one has been safely stored
               (optional)
      
         '''
      
         pass

      def stash_and_create():
         '''Store this action in the NLA stack as a non-contributing strip for later use, and create a new action
         '''
      
         pass

      def unlink(force_delete=False):
         '''Unlink this action from the active action slot (and/or exit Tweak Mode)
            Arguments:
            @force_delete (bool): Clear Fake User and remove copy stashed in this data-block's NLA stack
               (optional)
      
         '''
      
         pass

      def view_all():
         '''Reset viewable area to show full keyframe range
         '''
      
         pass

      def view_frame():
         '''Move the view to the playhead
         '''
      
         pass

      def view_selected():
         '''Reset viewable area to show selected keyframes range
         '''
      
         pass

   class anim:
      '''Spcecial class, created just to reflect content of bpy.ops.anim'''

      def change_frame(frame=0.0, snap=False):
         '''Interactively change the current frame number
            Arguments:
            @frame (float): in [-1.04857e+06, 1.04857e+06], (optional)
            @snap (bool): (optional)
      
         '''
      
         pass

      def channel_select_keys(extend=False):
         '''Select all keyframes of channel under mouse
            Arguments:
            @extend (bool): Extend selection
               (optional)
      
         '''
      
         pass

      def channels_clean_empty():
         '''Delete all empty animation data containers from visible data-blocks
         '''
      
         pass

      def channels_click(extend=False, children_only=False):
         '''Handle mouse-clicks over animation channels
            Arguments:
            @extend (bool): (optional)
            @children_only (bool): (optional)
      
         '''
      
         pass

      def channels_collapse(all=True):
         '''Collapse (i.e. close) all selected expandable animation channels
            Arguments:
            @all (bool): Collapse all channels (not just selected ones)
               (optional)
      
         '''
      
         pass

      def channels_delete():
         '''Delete all selected animation channels
         '''
      
         pass

      def channels_editable_toggle(mode='TOGGLE', type='PROTECT'):
         '''Toggle editability of selected channels
            Arguments:
            @mode (str): in ['TOGGLE', 'DISABLE', 'ENABLE', 'INVERT'], (optional)
            @type (str): in ['PROTECT', 'MUTE'], (optional)
      
         '''
      
         pass

      def channels_expand(all=True):
         '''Expand (i.e. open) all selected expandable animation channels
            Arguments:
            @all (bool): Expand all channels (not just selected ones)
               (optional)
      
         '''
      
         pass

      def channels_fcurves_enable():
         '''Clears 'disabled' tag from all F-Curves to get broken F-Curves working again
         '''
      
         pass

      def channels_find(query="Query"):
         '''Filter the set of channels shown to only include those with matching names
            Arguments:
            @query (str): Text to search for in channel names
               (optional, never None)
      
         '''
      
         pass

      def channels_group(name="New Group"):
         '''Add selected F-Curves to a new group
            Arguments:
            @name (str): Name of newly created group
               (optional, never None)
      
         '''
      
         pass

      def channels_move(direction='DOWN'):
         '''Rearrange selected animation channels
            Arguments:
            @direction (str): in ['TOP', 'UP', 'DOWN', 'BOTTOM'], (optional)
      
         '''
      
         pass

      def channels_rename():
         '''Rename animation channel under mouse
         '''
      
         pass

      def channels_select_all(action='TOGGLE'):
         '''Toggle selection of all animation channels
            Arguments:
            @action (str): Selection action to execute
               in ['TOGGLE', 'SELECT', 'DESELECT', 'INVERT'], (optional)
      
         '''
      
         pass

      def channels_select_box(xmin=0, xmax=0, ymin=0, ymax=0, wait_for_input=True, deselect=False, extend=True):
         '''Select all animation channels within the specified region
            Arguments:
            @xmin (int): in [-inf, inf], (optional)
            @xmax (int): in [-inf, inf], (optional)
            @ymin (int): in [-inf, inf], (optional)
            @ymax (int): in [-inf, inf], (optional)
            @wait_for_input (bool): (optional)
            @deselect (bool): Deselect rather than select items
               (optional)
            @extend (bool): Extend selection instead of deselecting everything first
               (optional)
      
         '''
      
         pass

      def channels_setting_disable(mode='DISABLE', type='PROTECT'):
         '''Disable specified setting on all selected animation channels
            Arguments:
            @mode (str): in ['TOGGLE', 'DISABLE', 'ENABLE', 'INVERT'], (optional)
            @type (str): in ['PROTECT', 'MUTE'], (optional)
      
         '''
      
         pass

      def channels_setting_enable(mode='ENABLE', type='PROTECT'):
         '''Enable specified setting on all selected animation channels
            Arguments:
            @mode (str): in ['TOGGLE', 'DISABLE', 'ENABLE', 'INVERT'], (optional)
            @type (str): in ['PROTECT', 'MUTE'], (optional)
      
         '''
      
         pass

      def channels_setting_toggle(mode='TOGGLE', type='PROTECT'):
         '''Toggle specified setting on all selected animation channels
            Arguments:
            @mode (str): in ['TOGGLE', 'DISABLE', 'ENABLE', 'INVERT'], (optional)
            @type (str): in ['PROTECT', 'MUTE'], (optional)
      
         '''
      
         pass

      def channels_ungroup():
         '''Remove selected F-Curves from their current groups
         '''
      
         pass

      def clear_useless_actions(only_unused=True):
         '''Mark actions with no F-Curves for deletion after save & reload of file preserving "action libraries"
            Arguments:
            @only_unused (bool): Only unused (Fake User only) actions get considered
               (optional)
      
         '''
      
         pass

      def copy_driver_button():
         '''Copy the driver for the highlighted button
         '''
      
         pass

      def driver_button_add():
         '''Add driver for the property under the cursor
         '''
      
         pass

      def driver_button_edit():
         '''Edit the drivers for the property connected represented by the highlighted button
         '''
      
         pass

      def driver_button_remove(all=True):
         '''Remove the driver(s) for the property(s) connected represented by the highlighted button
            Arguments:
            @all (bool): Delete drivers for all elements of the array
               (optional)
      
         '''
      
         pass

      def end_frame_set():
         '''Set the current frame as the preview or scene end frame
         '''
      
         pass

      def keyframe_clear_button(all=True):
         '''Clear all keyframes on the currently active property
            Arguments:
            @all (bool): Clear keyframes from all elements of the array
               (optional)
      
         '''
      
         pass

      def keyframe_clear_v3d():
         '''Remove all keyframe animation for selected objects
         '''
      
         pass

      def keyframe_delete(type='DEFAULT', confirm_success=True):
         '''Delete keyframes on the current frame for all properties in the specified Keying Set
            Arguments:
            @type (str): The Keying Set to use
               in ['DEFAULT'], (optional)
            @confirm_success (bool): Show a popup when the keyframes get successfully removed
               (optional)
      
         '''
      
         pass

      def keyframe_delete_button(all=True):
         '''Delete current keyframe of current UI-active property
            Arguments:
            @all (bool): Delete keyframes from all elements of the array
               (optional)
      
         '''
      
         pass

      def keyframe_delete_by_name(type="Type", confirm_success=True):
         '''Alternate access to 'Delete Keyframe' for keymaps to use
            Arguments:
            @type (str): (optional, never None)
            @confirm_success (bool): Show a popup when the keyframes get successfully removed
               (optional)
      
         '''
      
         pass

      def keyframe_delete_v3d():
         '''Remove keyframes on current frame for selected objects and bones
         '''
      
         pass

      def keyframe_insert(type='DEFAULT', confirm_success=True):
         '''Insert keyframes on the current frame for all properties in the specified Keying Set
            Arguments:
            @type (str): The Keying Set to use
               in ['DEFAULT'], (optional)
            @confirm_success (bool): Show a popup when the keyframes get successfully added
               (optional)
      
         '''
      
         pass

      def keyframe_insert_button(all=True):
         '''Insert a keyframe for current UI-active property
            Arguments:
            @all (bool): Insert a keyframe for all element of the array
               (optional)
      
         '''
      
         pass

      def keyframe_insert_by_name(type="Type", confirm_success=True):
         '''Alternate access to 'Insert Keyframe' for keymaps to use
            Arguments:
            @type (str): (optional, never None)
            @confirm_success (bool): Show a popup when the keyframes get successfully added
               (optional)
      
         '''
      
         pass

      def keyframe_insert_menu(type='DEFAULT', confirm_success=False, always_prompt=False):
         '''Insert Keyframes for specified Keying Set, with menu of available Keying Sets if undefined
            Arguments:
            @type (str): The Keying Set to use
               in ['DEFAULT'], (optional)
            @confirm_success (bool): Show a popup when the keyframes get successfully added
               (optional)
            @always_prompt (bool): (optional)
      
         '''
      
         pass

      def keying_set_active_set(type='DEFAULT'):
         '''Select a new keying set as the active one
            Arguments:
            @type (str): The Keying Set to use
               in ['DEFAULT'], (optional)
      
         '''
      
         pass

      def keying_set_add():
         '''Add a new (empty) Keying Set to the active Scene
         '''
      
         pass

      def keying_set_export(filepath="", filter_folder=True, filter_text=True, filter_python=True):
         '''Export Keying Set to a python script
            Arguments:
            @filepath (str): (optional, never None)
            @filter_folder (bool): (optional)
            @filter_text (bool): (optional)
            @filter_python (bool): (optional)
      
         '''
      
         pass

      def keying_set_path_add():
         '''Add empty path to active Keying Set
         '''
      
         pass

      def keying_set_path_remove():
         '''Remove active Path from active Keying Set
         '''
      
         pass

      def keying_set_remove():
         '''Remove the active Keying Set
         '''
      
         pass

      def keyingset_button_add(all=True):
         '''Add current UI-active property to current keying set
            Arguments:
            @all (bool): Add all elements of the array to a Keying Set
               (optional)
      
         '''
      
         pass

      def keyingset_button_remove():
         '''Remove current UI-active property from current keying set
         '''
      
         pass

      def paste_driver_button():
         '''Paste the driver in the copy/paste buffer for the highlighted button
         '''
      
         pass

      def previewrange_clear():
         '''Clear Preview Range
         '''
      
         pass

      def previewrange_set(xmin=0, xmax=0, ymin=0, ymax=0, wait_for_input=True):
         '''Interactively define frame range used for playback
            Arguments:
            @xmin (int): in [-inf, inf], (optional)
            @xmax (int): in [-inf, inf], (optional)
            @ymin (int): in [-inf, inf], (optional)
            @ymax (int): in [-inf, inf], (optional)
            @wait_for_input (bool): (optional)
      
         '''
      
         pass

      def start_frame_set():
         '''Set the current frame as the preview or scene start frame
         '''
      
         pass

      def update_animated_transform_constraints(use_convert_to_radians=True):
         '''Update fcurves/drivers affecting Transform constraints (use it with files from 2.70 and earlier)
            Arguments:
            @use_convert_to_radians (bool): Convert fcurves/drivers affecting rotations to radians (Warning: use this only once!)
               (optional)
      
         '''
      
         pass

   class armature:
      '''Spcecial class, created just to reflect content of bpy.ops.armature'''

      def align():
         '''Align selected bones to the active bone (or to their parent)
         '''
      
         pass

      def armature_layers(layers=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)):
         '''Change the visible armature layers
            Arguments:
            @layers (bool): Armature layers to make visible
               array of 32 items, (optional)
      
         '''
      
         pass

      def autoside_names(type='XAXIS'):
         '''Automatically renames the selected bones according to which side of the target axis they fall on
            Arguments:
            @type (str): Axis tag names with
               in ['XAXIS', 'YAXIS', 'ZAXIS'], (optional)
      
         '''
      
         pass

      def bone_layers(layers=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)):
         '''Change the layers that the selected bones belong to
            Arguments:
            @layers (bool): Armature layers that bone belongs to
               array of 32 items, (optional)
      
         '''
      
         pass

      def bone_primitive_add(name="Bone"):
         '''Add a new bone located at the 3D-Cursor
            Arguments:
            @name (str): Name of the newly created bone
               (optional, never None)
      
         '''
      
         pass

      def calculate_roll(type='POS_X', axis_flip=False, axis_only=False):
         '''Automatically fix alignment of select bones' axes
            Arguments:
            @type (str): in ['POS_X', 'POS_Z', 'GLOBAL_POS_X', 'GLOBAL_POS_Y', 'GLOBAL_POS_Z', 'NEG_X', 'NEG_Z', 'GLOBAL_NEG_X', 'GLOBAL_NEG_Y', 'GLOBAL_NEG_Z', 'ACTIVE', 'VIEW', 'CURSOR'], (optional)
            @axis_flip (bool): Negate the alignment axis
               (optional)
            @axis_only (bool): Ignore the axis direction, use the shortest rotation to align
               (optional)
      
         '''
      
         pass

      def click_extrude():
         '''Create a new bone going from the last selected joint to the mouse position
         '''
      
         pass

      def delete():
         '''Remove selected bones from the armature
         '''
      
         pass

      def dissolve():
         '''Dissolve selected bones from the armature
         '''
      
         pass

      def duplicate(do_flip_names=False):
         '''Make copies of the selected bones within the same armature
            Arguments:
            @do_flip_names (bool): Try to flip names of the bones, if possible, instead of adding a number extension
               (optional)
      
         '''
      
         pass

      def duplicate_move(ARMATURE_OT_duplicate=None, TRANSFORM_OT_translate=None):
         '''Make copies of the selected bones within the same armature and move them
            Arguments:
            @ARMATURE_OT_duplicate (ARMATURE_OT_duplicate): Make copies of the selected bones within the same armature
               (optional)
            @TRANSFORM_OT_translate (TRANSFORM_OT_translate): Move selected items
               (optional)
      
         '''
      
         pass

      def extrude(forked=False):
         '''Create new bones from the selected joints
            Arguments:
            @forked (bool): (optional)
      
         '''
      
         pass

      def extrude_forked(ARMATURE_OT_extrude=None, TRANSFORM_OT_translate=None):
         '''Create new bones from the selected joints and move them
            Arguments:
            @ARMATURE_OT_extrude (ARMATURE_OT_extrude): Create new bones from the selected joints
               (optional)
            @TRANSFORM_OT_translate (TRANSFORM_OT_translate): Move selected items
               (optional)
      
         '''
      
         pass

      def extrude_move(ARMATURE_OT_extrude=None, TRANSFORM_OT_translate=None):
         '''Create new bones from the selected joints and move them
            Arguments:
            @ARMATURE_OT_extrude (ARMATURE_OT_extrude): Create new bones from the selected joints
               (optional)
            @TRANSFORM_OT_translate (TRANSFORM_OT_translate): Move selected items
               (optional)
      
         '''
      
         pass

      def fill():
         '''Add bone between selected joint(s) and/or 3D-Cursor
         '''
      
         pass

      def flip_names(do_strip_numbers=False):
         '''Flips (and corrects) the axis suffixes of the names of selected bones
            Arguments:
            @do_strip_numbers (bool): Try to remove right-most dot-number from flipped names (WARNING: may result in incoherent naming in some cases)
               (optional)
      
         '''
      
         pass

      def hide(unselected=False):
         '''Tag selected bones to not be visible in Edit Mode
            Arguments:
            @unselected (bool): Hide unselected rather than selected
               (optional)
      
         '''
      
         pass

      def layers_show_all(all=True):
         '''Make all armature layers visible
            Arguments:
            @all (bool): Enable all layers or just the first 16 (top row)
               (optional)
      
         '''
      
         pass

      def parent_clear(type='CLEAR'):
         '''Remove the parent-child relationship between selected bones and their parents
            Arguments:
            @type (str): What way to clear parenting
               in ['CLEAR', 'DISCONNECT'], (optional)
      
         '''
      
         pass

      def parent_set(type='CONNECTED'):
         '''Set the active bone as the parent of the selected bones
            Arguments:
            @type (str): Type of parenting
               in ['CONNECTED', 'OFFSET'], (optional)
      
         '''
      
         pass

      def reveal(select=True):
         '''Reveal all bones hidden in Edit Mode
            Arguments:
            @select (bool): (optional)
      
         '''
      
         pass

      def roll_clear(roll=0.0):
         '''Clear roll for selected bones
            Arguments:
            @roll (float): in [-6.28319, 6.28319], (optional)
      
         '''
      
         pass

      def select_all(action='TOGGLE'):
         '''Toggle selection status of all bones
            Arguments:
            @action (str): Selection action to execute
               in ['TOGGLE', 'SELECT', 'DESELECT', 'INVERT'], (optional)
      
         '''
      
         pass

      def select_hierarchy(direction='PARENT', extend=False):
         '''Select immediate parent/children of selected bones
            Arguments:
            @direction (str): in ['PARENT', 'CHILD'], (optional)
            @extend (bool): Extend the selection
               (optional)
      
         '''
      
         pass

      def select_less():
         '''Deselect those bones at the boundary of each selection region
         '''
      
         pass

      def select_linked(all_forks=False):
         '''Select all bones linked by parent/child connections to the current selection
            Arguments:
            @all_forks (bool): Follow forks in the parents chain
               (optional)
      
         '''
      
         pass

      def select_linked_pick(deselect=False, all_forks=False):
         '''(De)select bones linked by parent/child connections under the mouse cursor
            Arguments:
            @deselect (bool): (optional)
            @all_forks (bool): Follow forks in the parents chain
               (optional)
      
         '''
      
         pass

      def select_mirror(only_active=False, extend=False):
         '''Mirror the bone selection
            Arguments:
            @only_active (bool): Only operate on the active bone
               (optional)
            @extend (bool): Extend the selection
               (optional)
      
         '''
      
         pass

      def select_more():
         '''Select those bones connected to the initial selection
         '''
      
         pass

      def select_similar(type='LENGTH', threshold=0.1):
         '''Select similar bones by property types
            Arguments:
            @type (str): in ['CHILDREN', 'CHILDREN_IMMEDIATE', 'SIBLINGS', 'LENGTH', 'DIRECTION', 'PREFIX', 'SUFFIX', 'LAYER', 'GROUP', 'SHAPE'], (optional)
            @threshold (float): in [0, 1], (optional)
      
         '''
      
         pass

      def separate():
         '''Isolate selected bones into a separate armature
         '''
      
         pass

      def shortest_path_pick():
         '''Select shortest path between two bones
         '''
      
         pass

      def split():
         '''Split off selected bones from connected unselected bones
         '''
      
         pass

      def subdivide(number_cuts=1):
         '''Break selected bones into chains of smaller bones
            Arguments:
            @number_cuts (int): in [1, 1000], (optional)
      
         '''
      
         pass

      def switch_direction():
         '''Change the direction that a chain of bones points in (head <-> tail swap)
         '''
      
         pass

      def symmetrize(direction='NEGATIVE_X'):
         '''Enforce symmetry, make copies of the selection or use existing
            Arguments:
            @direction (str): Which sides to copy from and to (when both are selected)
               in ['NEGATIVE_X', 'POSITIVE_X'], (optional)
      
         '''
      
         pass

   class boid:
      '''Spcecial class, created just to reflect content of bpy.ops.boid'''

      def rule_add(type='GOAL'):
         '''Add a boid rule to the current boid state
            Arguments:
            @type (str): in ['GOAL', 'AVOID', 'AVOID_COLLISION', 'SEPARATE', 'FLOCK', 'FOLLOW_LEADER', 'AVERAGE_SPEED', 'FIGHT'], (optional)
      
         '''
      
         pass

      def rule_del():
         '''Delete current boid rule
         '''
      
         pass

      def rule_move_down():
         '''Move boid rule down in the list
         '''
      
         pass

      def rule_move_up():
         '''Move boid rule up in the list
         '''
      
         pass

      def state_add():
         '''Add a boid state to the particle system
         '''
      
         pass

      def state_del():
         '''Delete current boid state
         '''
      
         pass

      def state_move_down():
         '''Move boid state down in the list
         '''
      
         pass

      def state_move_up():
         '''Move boid state up in the list
         '''
      
         pass

   class brush:
      '''Spcecial class, created just to reflect content of bpy.ops.brush'''

      def add():
         '''Add brush by mode type
         '''
      
         pass

      def add_gpencil():
         '''Add brush for Grease Pencil
         '''
      
         pass

      def curve_preset(shape='SMOOTH'):
         '''Set brush shape
            Arguments:
            @shape (str): in ['SHARP', 'SMOOTH', 'MAX', 'LINE', 'ROUND', 'ROOT'], (optional)
      
         '''
      
         pass

      def reset():
         '''Return brush to defaults based on current tool
         '''
      
         pass

      def scale_size(scalar=1.0):
         '''Change brush size by a scalar
            Arguments:
            @scalar (float): Factor to scale brush size by
               in [0, 2], (optional)
      
         '''
      
         pass

      def stencil_control(mode='TRANSLATION', texmode='PRIMARY'):
         '''Control the stencil brush
            Arguments:
            @mode (str): in ['TRANSLATION', 'SCALE', 'ROTATION'], (optional)
            @texmode (str): in ['PRIMARY', 'SECONDARY'], (optional)
      
         '''
      
         pass

      def stencil_fit_image_aspect(use_repeat=True, use_scale=True, mask=False):
         '''When using an image texture, adjust the stencil size to fit the image aspect ratio
            Arguments:
            @use_repeat (bool): Use repeat mapping values
               (optional)
            @use_scale (bool): Use texture scale values
               (optional)
            @mask (bool): Modify either the primary or mask stencil
               (optional)
      
         '''
      
         pass

      def stencil_reset_transform(mask=False):
         '''Reset the stencil transformation to the default
            Arguments:
            @mask (bool): Modify either the primary or mask stencil
               (optional)
      
         '''
      
         pass

   class buttons:
      '''Spcecial class, created just to reflect content of bpy.ops.buttons'''

      def context_menu():
         '''Display properties editor context_menu
         '''
      
         pass

      def directory_browse(directory="", hide_props_region=True, filter_blender=False, filter_backup=False, filter_image=False, filter_movie=False, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=False, filter_blenlib=False, filemode=9, relative_path=True, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA'):
         '''Open a directory browser, Hold Shift to open the file, Alt to browse containing directory
            Arguments:
            @directory (str): Directory of the file
               (optional, never None)
            @hide_props_region (bool): Collapse the region displaying the operator settings
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @relative_path (bool): Select the file relative to the blend file
               (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
      
         '''
      
         pass

      def file_browse(filepath="", hide_props_region=True, filter_blender=False, filter_backup=False, filter_image=False, filter_movie=False, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=False, filter_blenlib=False, filemode=9, relative_path=True, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA'):
         '''Open a file browser, Hold Shift to open the file, Alt to browse containing directory
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @hide_props_region (bool): Collapse the region displaying the operator settings
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @relative_path (bool): Select the file relative to the blend file
               (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
      
         '''
      
         pass

   class cachefile:
      '''Spcecial class, created just to reflect content of bpy.ops.cachefile'''

      def open(filepath="", hide_props_region=True, check_existing=True, filter_blender=False, filter_backup=False, filter_image=False, filter_movie=False, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=True, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=8, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA'):
         '''Load a cache file
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @hide_props_region (bool): Collapse the region displaying the operator settings
               (optional)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
      
         '''
      
         pass

      def reload():
         '''Update objects paths list with new data from the archive
         '''
      
         pass

   class camera:
      '''Spcecial class, created just to reflect content of bpy.ops.camera'''

      def preset_add(name="", remove_name=False, remove_active=False, use_focal_length=False):
         '''Add or remove a Camera Preset
            Arguments:
            @name (str): Name of the preset, used to make the path name
               (optional, never None)
            @remove_name (bool): (optional)
            @remove_active (bool): (optional)
            @use_focal_length (bool): Include focal length into the preset
               (optional)
      
         '''
      
         pass

   class clip:
      '''Spcecial class, created just to reflect content of bpy.ops.clip'''

      def add_marker(location=(0.0, 0.0)):
         '''Place new marker at specified location
            Arguments:
            @location (float): Location of marker on frame
               array of 2 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def add_marker_at_click():
         '''Place new marker at the desired (clicked) position
         '''
      
         pass

      def add_marker_move(CLIP_OT_add_marker=None, TRANSFORM_OT_translate=None):
         '''Add new marker and move it on movie
            Arguments:
            @CLIP_OT_add_marker (CLIP_OT_add_marker): Place new marker at specified location
               (optional)
            @TRANSFORM_OT_translate (TRANSFORM_OT_translate): Move selected items
               (optional)
      
         '''
      
         pass

      def add_marker_slide(CLIP_OT_add_marker=None, TRANSFORM_OT_translate=None):
         '''Add new marker and slide it with mouse until mouse button release
            Arguments:
            @CLIP_OT_add_marker (CLIP_OT_add_marker): Place new marker at specified location
               (optional)
            @TRANSFORM_OT_translate (TRANSFORM_OT_translate): Move selected items
               (optional)
      
         '''
      
         pass

      def apply_solution_scale(distance=0.0):
         '''Apply scale on solution itself to make distance between selected tracks equals to desired
            Arguments:
            @distance (float): Distance between selected tracks
               in [-inf, inf], (optional)
      
         '''
      
         pass

      def bundles_to_mesh():
         '''Create vertex cloud using coordinates of reconstructed tracks
         '''
      
         pass

      def camera_preset_add(name="", remove_name=False, remove_active=False, use_focal_length=True):
         '''Add or remove a Tracking Camera Intrinsics Preset
            Arguments:
            @name (str): Name of the preset, used to make the path name
               (optional, never None)
            @remove_name (bool): (optional)
            @remove_active (bool): (optional)
            @use_focal_length (bool): Include focal length into the preset
               (optional)
      
         '''
      
         pass

      def change_frame(frame=0):
         '''Interactively change the current frame number
            Arguments:
            @frame (int): in [-1048574, 1048574], (optional)
      
         '''
      
         pass

      def clean_tracks(frames=0, error=0.0, action='SELECT'):
         '''Clean tracks with high error values or few frames
            Arguments:
            @frames (int): Effect on tracks which are tracked less than specified amount of frames
               in [0, inf], (optional)
            @error (float): Effect on tracks which have got larger re-projection error
               in [0, inf], (optional)
            @action (str): Cleanup action to execute
               in ['SELECT', 'DELETE_TRACK', 'DELETE_SEGMENTS'], (optional)
      
         '''
      
         pass

      def clear_solution():
         '''Clear all calculated data
         '''
      
         pass

      def clear_track_path(action='REMAINED', clear_active=False):
         '''Clear tracks after/before current position or clear the whole track
            Arguments:
            @action (str): Clear action to execute
               in ['UPTO', 'REMAINED', 'ALL'], (optional)
            @clear_active (bool): Clear active track only instead of all selected tracks
               (optional)
      
         '''
      
         pass

      def constraint_to_fcurve():
         '''Create F-Curves for object which will copy object's movement caused by this constraint
         '''
      
         pass

      def copy_tracks():
         '''Copy selected tracks to clipboard
         '''
      
         pass

      def create_plane_track():
         '''Create new plane track out of selected point tracks
         '''
      
         pass

      def cursor_set(location=(0.0, 0.0)):
         '''Set 2D cursor location
            Arguments:
            @location (float): Cursor location in normalized clip coordinates
               array of 2 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def delete_marker():
         '''Delete marker for current frame from selected tracks
         '''
      
         pass

      def delete_proxy():
         '''Delete movie clip proxy files from the hard drive
         '''
      
         pass

      def delete_track():
         '''Delete selected tracks
         '''
      
         pass

      def detect_features(placement='FRAME', margin=16, threshold=0.5, min_distance=120):
         '''Automatically detect features and place markers to track
            Arguments:
            @placement (str): Placement for detected features
               in ['FRAME', 'INSIDE_GPENCIL', 'OUTSIDE_GPENCIL'], (optional)
            @margin (int): Only features further than margin pixels from the image edges are considered
               in [0, inf], (optional)
            @threshold (float): Threshold level to consider feature good enough for tracking
               in [0.0001, inf], (optional)
            @min_distance (int): Minimal distance accepted between two features
               in [0, inf], (optional)
      
         '''
      
         pass

      def disable_markers(action='DISABLE'):
         '''Disable/enable selected markers
            Arguments:
            @action (str): Disable action to execute
               in ['DISABLE', 'ENABLE', 'TOGGLE'], (optional)
      
         '''
      
         pass

      def dopesheet_select_channel(location=(0.0, 0.0), extend=False):
         '''Select movie tracking channel
            Arguments:
            @location (float): Mouse location to select channel
               array of 2 items in [-inf, inf], (optional)
            @extend (bool): Extend selection rather than clearing the existing selection
               (optional)
      
         '''
      
         pass

      def dopesheet_view_all():
         '''Reset viewable area to show full keyframe range
         '''
      
         pass

      def filter_tracks(track_threshold=5.0):
         '''Filter tracks which has weirdly looking spikes in motion curves
            Arguments:
            @track_threshold (float): Filter Threshold to select problematic tracks
               in [-inf, inf], (optional)
      
         '''
      
         pass

      def frame_jump(position='PATHSTART'):
         '''Jump to special frame
            Arguments:
            @position (str): Position to jump to
               in ['PATHSTART', 'PATHEND', 'FAILEDPREV', 'FAILNEXT'], (optional)
      
         '''
      
         pass

      def graph_center_current_frame():
         '''Scroll view so current frame would be centered
         '''
      
         pass

      def graph_delete_curve():
         '''Delete track corresponding to the selected curve
         '''
      
         pass

      def graph_delete_knot():
         '''Delete curve knots
         '''
      
         pass

      def graph_disable_markers(action='DISABLE'):
         '''Disable/enable selected markers
            Arguments:
            @action (str): Disable action to execute
               in ['DISABLE', 'ENABLE', 'TOGGLE'], (optional)
      
         '''
      
         pass

      def graph_select(location=(0.0, 0.0), extend=False):
         '''Select graph curves
            Arguments:
            @location (float): Mouse location to select nearest entity
               array of 2 items in [-inf, inf], (optional)
            @extend (bool): Extend selection rather than clearing the existing selection
               (optional)
      
         '''
      
         pass

      def graph_select_all_markers(action='TOGGLE'):
         '''Change selection of all markers of active track
            Arguments:
            @action (str): Selection action to execute
               in ['TOGGLE', 'SELECT', 'DESELECT', 'INVERT'], (optional)
      
         '''
      
         pass

      def graph_select_box(xmin=0, xmax=0, ymin=0, ymax=0, wait_for_input=True, deselect=False, extend=True):
         '''Select curve points using box selection
            Arguments:
            @xmin (int): in [-inf, inf], (optional)
            @xmax (int): in [-inf, inf], (optional)
            @ymin (int): in [-inf, inf], (optional)
            @ymax (int): in [-inf, inf], (optional)
            @wait_for_input (bool): (optional)
            @deselect (bool): Deselect rather than select items
               (optional)
            @extend (bool): Extend selection instead of deselecting everything first
               (optional)
      
         '''
      
         pass

      def graph_view_all():
         '''View all curves in editor
         '''
      
         pass

      def hide_tracks(unselected=False):
         '''Hide selected tracks
            Arguments:
            @unselected (bool): Hide unselected tracks
               (optional)
      
         '''
      
         pass

      def hide_tracks_clear():
         '''Clear hide selected tracks
         '''
      
         pass

      def join_tracks():
         '''Join selected tracks
         '''
      
         pass

      def keyframe_delete():
         '''Delete a keyframe from selected tracks at current frame
         '''
      
         pass

      def keyframe_insert():
         '''Insert a keyframe to selected tracks at current frame
         '''
      
         pass

      def lock_selection_toggle():
         '''Toggle Lock Selection option of the current clip editor
         '''
      
         pass

      def lock_tracks(action='LOCK'):
         '''Lock/unlock selected tracks
            Arguments:
            @action (str): Lock action to execute
               in ['LOCK', 'UNLOCK', 'TOGGLE'], (optional)
      
         '''
      
         pass

      def mode_set(mode='TRACKING'):
         '''Set the clip interaction mode
            Arguments:
            @mode (str): in ['TRACKING', 'MASK'], (optional)
      
         '''
      
         pass

      def open(directory="", files=None, hide_props_region=True, filter_blender=False, filter_backup=False, filter_image=True, filter_movie=True, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=9, relative_path=True, show_multiview=False, use_multiview=False, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA'):
         '''Load a sequence of frames or a movie file
            Arguments:
            @directory (str): Directory of the file
               (optional, never None)
            @files (OperatorFileListElement): Collection of , (optional)
            @hide_props_region (bool): Collapse the region displaying the operator settings
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @relative_path (bool): Select the file relative to the blend file
               (optional)
            @show_multiview (bool): (optional)
            @use_multiview (bool): (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
      
         '''
      
         pass

      def paste_tracks():
         '''Paste tracks from clipboard
         '''
      
         pass

      def prefetch():
         '''Prefetch frames from disk for faster playback/tracking
         '''
      
         pass

      def rebuild_proxy():
         '''Rebuild all selected proxies and timecode indices in the background
         '''
      
         pass

      def refine_markers(backwards=False):
         '''Refine selected markers positions by running the tracker from track's reference to current frame
            Arguments:
            @backwards (bool): Do backwards tracking
               (optional)
      
         '''
      
         pass

      def reload():
         '''Reload clip
         '''
      
         pass

      def select(extend=False, deselect_all=False, location=(0.0, 0.0)):
         '''Select tracking markers
            Arguments:
            @extend (bool): Extend selection rather than clearing the existing selection
               (optional)
            @deselect_all (bool): Deselect all when nothing under the cursor
               (optional)
            @location (float): Mouse location in normalized coordinates, 0.0 to 1.0 is within the image bounds
               array of 2 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def select_all(action='TOGGLE'):
         '''Change selection of all tracking markers
            Arguments:
            @action (str): Selection action to execute
               in ['TOGGLE', 'SELECT', 'DESELECT', 'INVERT'], (optional)
      
         '''
      
         pass

      def select_box(xmin=0, xmax=0, ymin=0, ymax=0, wait_for_input=True, mode='SET'):
         '''Select markers using box selection
            Arguments:
            @xmin (int): in [-inf, inf], (optional)
            @xmax (int): in [-inf, inf], (optional)
            @ymin (int): in [-inf, inf], (optional)
            @ymax (int): in [-inf, inf], (optional)
            @wait_for_input (bool): (optional)
            @mode (str): in ['SET', 'ADD', 'SUB'], (optional)
      
         '''
      
         pass

      def select_circle(x=0, y=0, radius=25, wait_for_input=True, mode='SET'):
         '''Select markers using circle selection
            Arguments:
            @x (int): in [-inf, inf], (optional)
            @y (int): in [-inf, inf], (optional)
            @radius (int): in [1, inf], (optional)
            @wait_for_input (bool): (optional)
            @mode (str): in ['SET', 'ADD', 'SUB'], (optional)
      
         '''
      
         pass

      def select_grouped(group='ESTIMATED'):
         '''Select all tracks from specified group
            Arguments:
            @group (str): Clear action to execute
               in ['KEYFRAMED', 'ESTIMATED', 'TRACKED', 'LOCKED', 'DISABLED', 'COLOR', 'FAILED'], (optional)
      
         '''
      
         pass

      def select_lasso(path=None, mode='SET'):
         '''Select markers using lasso selection
            Arguments:
            @path (OperatorMousePath): Collection of , (optional)
            @mode (str): in ['SET', 'ADD', 'SUB'], (optional)
      
         '''
      
         pass

      def set_active_clip():
         '''undocumented
         '''
      
         pass

      def set_axis(axis='X'):
         '''Set direction of scene axis rotating camera (or its parent if present) and assume selected track lies on real axis, joining it with the origin
            Arguments:
            @axis (str): Axis to use to align bundle along
               in ['X', 'Y'], (optional)
      
         '''
      
         pass

      def set_center_principal():
         '''Set optical center to center of footage
         '''
      
         pass

      def set_origin(use_median=False):
         '''Set active marker as origin by moving camera (or its parent if present) in 3D space
            Arguments:
            @use_median (bool): Set origin to median point of selected bundles
               (optional)
      
         '''
      
         pass

      def set_plane(plane='FLOOR'):
         '''Set plane based on 3 selected bundles by moving camera (or its parent if present) in 3D space
            Arguments:
            @plane (str): Plane to be used for orientation
               in ['FLOOR', 'WALL'], (optional)
      
         '''
      
         pass

      def set_scale(distance=0.0):
         '''Set scale of scene by scaling camera (or its parent if present)
            Arguments:
            @distance (float): Distance between selected tracks
               in [-inf, inf], (optional)
      
         '''
      
         pass

      def set_scene_frames():
         '''Set scene's start and end frame to match clip's start frame and length
         '''
      
         pass

      def set_solution_scale(distance=0.0):
         '''Set object solution scale using distance between two selected tracks
            Arguments:
            @distance (float): Distance between selected tracks
               in [-inf, inf], (optional)
      
         '''
      
         pass

      def set_solver_keyframe(keyframe='KEYFRAME_A'):
         '''Set keyframe used by solver
            Arguments:
            @keyframe (str): Keyframe to set
               in ['KEYFRAME_A', 'KEYFRAME_B'], (optional)
      
         '''
      
         pass

      def set_viewport_background():
         '''Set current movie clip as a camera background in 3D view-port (works only when a 3D view-port is visible)
         '''
      
         pass

      def setup_tracking_scene():
         '''Prepare scene for compositing 3D objects into this footage
         '''
      
         pass

      def slide_marker(offset=(0.0, 0.0)):
         '''Slide marker areas
            Arguments:
            @offset (float): Offset in floating point units, 1.0 is the width and height of the image
               array of 2 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def slide_plane_marker():
         '''Slide plane marker areas
         '''
      
         pass

      def solve_camera():
         '''Solve camera motion from tracks
         '''
      
         pass

      def stabilize_2d_add():
         '''Add selected tracks to 2D translation stabilization
         '''
      
         pass

      def stabilize_2d_remove():
         '''Remove selected track from translation stabilization
         '''
      
         pass

      def stabilize_2d_rotation_add():
         '''Add selected tracks to 2D rotation stabilization
         '''
      
         pass

      def stabilize_2d_rotation_remove():
         '''Remove selected track from rotation stabilization
         '''
      
         pass

      def stabilize_2d_rotation_select():
         '''Select tracks which are used for rotation stabilization
         '''
      
         pass

      def stabilize_2d_select():
         '''Select tracks which are used for translation stabilization
         '''
      
         pass

      def track_color_preset_add(name="", remove_name=False, remove_active=False):
         '''Add or remove a Clip Track Color Preset
            Arguments:
            @name (str): Name of the preset, used to make the path name
               (optional, never None)
            @remove_name (bool): (optional)
            @remove_active (bool): (optional)
      
         '''
      
         pass

      def track_copy_color():
         '''Copy color to all selected tracks
         '''
      
         pass

      def track_markers(backwards=False, sequence=False):
         '''Track selected markers
            Arguments:
            @backwards (bool): Do backwards tracking
               (optional)
            @sequence (bool): Track marker during image sequence rather than single image
               (optional)
      
         '''
      
         pass

      def track_settings_as_default():
         '''Copy tracking settings from active track to default settings
         '''
      
         pass

      def track_settings_to_track():
         '''Copy tracking settings from active track to selected tracks
         '''
      
         pass

      def track_to_empty():
         '''Create an Empty object which will be copying movement of active track
         '''
      
         pass

      def tracking_object_new():
         '''Add new object for tracking
         '''
      
         pass

      def tracking_object_remove():
         '''Remove object for tracking
         '''
      
         pass

      def tracking_settings_preset_add(name="", remove_name=False, remove_active=False):
         '''Add or remove a motion tracking settings preset
            Arguments:
            @name (str): Name of the preset, used to make the path name
               (optional, never None)
            @remove_name (bool): (optional)
            @remove_active (bool): (optional)
      
         '''
      
         pass

      def view_all(fit_view=False):
         '''View whole image with markers
            Arguments:
            @fit_view (bool): Fit frame to the viewport
               (optional)
      
         '''
      
         pass

      def view_center_cursor():
         '''Center the view so that the cursor is in the middle of the view
         '''
      
         pass

      def view_ndof():
         '''Use a 3D mouse device to pan/zoom the view
         '''
      
         pass

      def view_pan(offset=(0.0, 0.0)):
         '''Pan the view
            Arguments:
            @offset (float): Offset in floating point units, 1.0 is the width and height of the image
               array of 2 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def view_selected():
         '''View all selected elements
         '''
      
         pass

      def view_zoom(factor=0.0, use_cursor_init=True):
         '''Zoom in/out the view
            Arguments:
            @factor (float): Zoom factor, values higher than 1.0 zoom in, lower values zoom out
               in [-inf, inf], (optional)
            @use_cursor_init (bool): Allow the initial mouse position to be used
               (optional)
      
         '''
      
         pass

      def view_zoom_in(location=(0.0, 0.0)):
         '''Zoom in the view
            Arguments:
            @location (float): Cursor location in screen coordinates
               array of 2 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def view_zoom_out(location=(0.0, 0.0)):
         '''Zoom out the view
            Arguments:
            @location (float): Cursor location in normalized (0.0-1.0) coordinates
               array of 2 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def view_zoom_ratio(ratio=0.0):
         '''Set the zoom ratio (based on clip size)
            Arguments:
            @ratio (float): Zoom ratio, 1.0 is 1:1, higher is zoomed in, lower is zoomed out
               in [-inf, inf], (optional)
      
         '''
      
         pass

   class cloth:
      '''Spcecial class, created just to reflect content of bpy.ops.cloth'''

      def preset_add(name="", remove_name=False, remove_active=False):
         '''Add or remove a Cloth Preset
            Arguments:
            @name (str): Name of the preset, used to make the path name
               (optional, never None)
            @remove_name (bool): (optional)
            @remove_active (bool): (optional)
      
         '''
      
         pass

   class collection:
      '''Spcecial class, created just to reflect content of bpy.ops.collection'''

      def create(name="Collection"):
         '''Create an object collection from selected objects
            Arguments:
            @name (str): Name of the new collection
               (optional, never None)
      
         '''
      
         pass

      def objects_add_active(collection=''):
         '''Add the object to an object collection that contains the active object
            Arguments:
            @collection (str): The collection to add other selected objects to
               in [], (optional)
      
         '''
      
         pass

      def objects_remove(collection=''):
         '''Remove selected objects from a collection
            Arguments:
            @collection (str): The collection to remove this object from
               in [], (optional)
      
         '''
      
         pass

      def objects_remove_active(collection=''):
         '''Remove the object from an object collection that contains the active object
            Arguments:
            @collection (str): The collection to remove other selected objects from
               in [], (optional)
      
         '''
      
         pass

      def objects_remove_all():
         '''Remove selected objects from all collections
         '''
      
         pass

   class console:
      '''Spcecial class, created just to reflect content of bpy.ops.console'''

      def autocomplete():
         '''Evaluate the namespace up until the cursor and give a list of options or complete the name if there is only one
         '''
      
         pass

      def banner():
         '''Print a message when the terminal initializes
         '''
      
         pass

      def clear(scrollback=True, history=False):
         '''Clear text by type
            Arguments:
            @scrollback (bool): Clear the scrollback history
               (optional)
            @history (bool): Clear the command history
               (optional)
      
         '''
      
         pass

      def clear_line():
         '''Clear the line and store in history
         '''
      
         pass

      def copy():
         '''Copy selected text to clipboard
         '''
      
         pass

      def copy_as_script():
         '''Copy the console contents for use in a script
         '''
      
         pass

      def delete(type='NEXT_CHARACTER'):
         '''Delete text by cursor position
            Arguments:
            @type (str): Which part of the text to delete
               in ['NEXT_CHARACTER', 'PREVIOUS_CHARACTER', 'NEXT_WORD', 'PREVIOUS_WORD'], (optional)
      
         '''
      
         pass

      def execute(interactive=False):
         '''Execute the current console line as a python expression
            Arguments:
            @interactive (bool): (optional)
      
         '''
      
         pass

      def history_append(text="", current_character=0, remove_duplicates=False):
         '''Append history at cursor position
            Arguments:
            @text (str): Text to insert at the cursor position
               (optional, never None)
            @current_character (int): The index of the cursor
               in [0, inf], (optional)
            @remove_duplicates (bool): Remove duplicate items in the history
               (optional)
      
         '''
      
         pass

      def history_cycle(reverse=False):
         '''Cycle through history
            Arguments:
            @reverse (bool): Reverse cycle history
               (optional)
      
         '''
      
         pass

      def indent():
         '''Add 4 spaces at line beginning
         '''
      
         pass

      def indent_or_autocomplete():
         '''Indent selected text or autocomplete
         '''
      
         pass

      def insert(text=""):
         '''Insert text at cursor position
            Arguments:
            @text (str): Text to insert at the cursor position
               (optional, never None)
      
         '''
      
         pass

      def language(language=""):
         '''Set the current language for this console
            Arguments:
            @language (str): (optional, never None)
      
         '''
      
         pass

      def move(type='LINE_BEGIN'):
         '''Move cursor position
            Arguments:
            @type (str): Where to move cursor to
               in ['LINE_BEGIN', 'LINE_END', 'PREVIOUS_CHARACTER', 'NEXT_CHARACTER', 'PREVIOUS_WORD', 'NEXT_WORD'], (optional)
      
         '''
      
         pass

      def paste():
         '''Paste text from clipboard
         '''
      
         pass

      def scrollback_append(text="", type='OUTPUT'):
         '''Append scrollback text by type
            Arguments:
            @text (str): Text to insert at the cursor position
               (optional, never None)
            @type (str): Console output type
               in ['OUTPUT', 'INPUT', 'INFO', 'ERROR'], (optional)
      
         '''
      
         pass

      def select_set():
         '''Set the console selection
         '''
      
         pass

      def select_word():
         '''Select word at cursor position
         '''
      
         pass

      def unindent():
         '''Delete 4 spaces from line beginning
         '''
      
         pass

   class constraint:
      '''Spcecial class, created just to reflect content of bpy.ops.constraint'''

      def add_target():
         '''Add a target to the constraint
         '''
      
         pass

      def childof_clear_inverse(constraint="", owner='OBJECT'):
         '''Clear inverse correction for ChildOf constraint
            Arguments:
            @constraint (str): Name of the constraint to edit
               (optional, never None)
            @owner (str): The owner of this constraint
               in ['OBJECT', 'BONE'], (optional)
      
         '''
      
         pass

      def childof_set_inverse(constraint="", owner='OBJECT'):
         '''Set inverse correction for ChildOf constraint
            Arguments:
            @constraint (str): Name of the constraint to edit
               (optional, never None)
            @owner (str): The owner of this constraint
               in ['OBJECT', 'BONE'], (optional)
      
         '''
      
         pass

      def delete():
         '''Remove constraint from constraint stack
         '''
      
         pass

      def disable_keep_transform():
         '''Set the influence of this constraint to zero while trying to maintain the object's transformation. Other active constraints can still influence the final transformation
         '''
      
         pass

      def followpath_path_animate(constraint="", owner='OBJECT', frame_start=1, length=100):
         '''Add default animation for path used by constraint if it isn't animated already
            Arguments:
            @constraint (str): Name of the constraint to edit
               (optional, never None)
            @owner (str): The owner of this constraint
               in ['OBJECT', 'BONE'], (optional)
            @frame_start (int): First frame of path animation
               in [-1048574, 1048574], (optional)
            @length (int): Number of frames that path animation should take
               in [0, 1048574], (optional)
      
         '''
      
         pass

      def limitdistance_reset(constraint="", owner='OBJECT'):
         '''Reset limiting distance for Limit Distance Constraint
            Arguments:
            @constraint (str): Name of the constraint to edit
               (optional, never None)
            @owner (str): The owner of this constraint
               in ['OBJECT', 'BONE'], (optional)
      
         '''
      
         pass

      def move_down(constraint="", owner='OBJECT'):
         '''Move constraint down in constraint stack
            Arguments:
            @constraint (str): Name of the constraint to edit
               (optional, never None)
            @owner (str): The owner of this constraint
               in ['OBJECT', 'BONE'], (optional)
      
         '''
      
         pass

      def move_up(constraint="", owner='OBJECT'):
         '''Move constraint up in constraint stack
            Arguments:
            @constraint (str): Name of the constraint to edit
               (optional, never None)
            @owner (str): The owner of this constraint
               in ['OBJECT', 'BONE'], (optional)
      
         '''
      
         pass

      def normalize_target_weights():
         '''Normalize weights of all target bones
         '''
      
         pass

      def objectsolver_clear_inverse(constraint="", owner='OBJECT'):
         '''Clear inverse correction for ObjectSolver constraint
            Arguments:
            @constraint (str): Name of the constraint to edit
               (optional, never None)
            @owner (str): The owner of this constraint
               in ['OBJECT', 'BONE'], (optional)
      
         '''
      
         pass

      def objectsolver_set_inverse(constraint="", owner='OBJECT'):
         '''Set inverse correction for ObjectSolver constraint
            Arguments:
            @constraint (str): Name of the constraint to edit
               (optional, never None)
            @owner (str): The owner of this constraint
               in ['OBJECT', 'BONE'], (optional)
      
         '''
      
         pass

      def remove_target(index=0):
         '''Remove the target from the constraint
            Arguments:
            @index (int): in [-inf, inf], (optional)
      
         '''
      
         pass

      def stretchto_reset(constraint="", owner='OBJECT'):
         '''Reset original length of bone for Stretch To Constraint
            Arguments:
            @constraint (str): Name of the constraint to edit
               (optional, never None)
            @owner (str): The owner of this constraint
               in ['OBJECT', 'BONE'], (optional)
      
         '''
      
         pass

   class curve:
      '''Spcecial class, created just to reflect content of bpy.ops.curve'''

      def cyclic_toggle(direction='CYCLIC_U'):
         '''Make active spline closed/opened loop
            Arguments:
            @direction (str): Direction to make surface cyclic in
               in ['CYCLIC_U', 'CYCLIC_V'], (optional)
      
         '''
      
         pass

      def de_select_first():
         '''(De)select first of visible part of each NURBS
         '''
      
         pass

      def de_select_last():
         '''(De)select last of visible part of each NURBS
         '''
      
         pass

      def decimate(ratio=1.0):
         '''Simplify selected curves
            Arguments:
            @ratio (float): in [0, 1], (optional)
      
         '''
      
         pass

      def delete(type='VERT'):
         '''Delete selected control points or segments
            Arguments:
            @type (str): Which elements to delete
               in ['VERT', 'SEGMENT'], (optional)
      
         '''
      
         pass

      def dissolve_verts():
         '''Delete selected control points, correcting surrounding handles
         '''
      
         pass

      def draw(error_threshold=0.0, fit_method='REFIT', corner_angle=1.22173, use_cyclic=True, stroke=None, wait_for_input=True):
         '''Draw a freehand spline
            Arguments:
            @error_threshold (float): Error distance threshold (in object units)
               in [0, 10], (optional)
            @fit_method (str): in ['REFIT', 'SPLIT'], (optional)
            @corner_angle (float): in [0, 3.14159], (optional)
            @use_cyclic (bool): (optional)
            @stroke (OperatorStrokeElement): Collection of , (optional)
            @wait_for_input (bool): (optional)
      
         '''
      
         pass

      def duplicate():
         '''Duplicate selected control points
         '''
      
         pass

      def duplicate_move(CURVE_OT_duplicate=None, TRANSFORM_OT_translate=None):
         '''Duplicate curve and move
            Arguments:
            @CURVE_OT_duplicate (CURVE_OT_duplicate): Duplicate selected control points
               (optional)
            @TRANSFORM_OT_translate (TRANSFORM_OT_translate): Move selected items
               (optional)
      
         '''
      
         pass

      def extrude(mode='TRANSLATION'):
         '''Extrude selected control point(s)
            Arguments:
            @mode (str): in ['INIT', 'DUMMY', 'TRANSLATION', 'ROTATION', 'RESIZE', 'SKIN_RESIZE', 'TOSPHERE', 'SHEAR', 'BEND', 'SHRINKFATTEN', 'TILT', 'TRACKBALL', 'PUSHPULL', 'CREASE', 'MIRROR', 'BONE_SIZE', 'BONE_ENVELOPE', 'BONE_ENVELOPE_DIST', 'CURVE_SHRINKFATTEN', 'MASK_SHRINKFATTEN', 'GPENCIL_SHRINKFATTEN', 'BONE_ROLL', 'TIME_TRANSLATE', 'TIME_SLIDE', 'TIME_SCALE', 'TIME_EXTEND', 'BAKE_TIME', 'BWEIGHT', 'ALIGN', 'EDGESLIDE', 'SEQSLIDE', 'GPENCIL_OPACITY'], (optional)
      
         '''
      
         pass

      def extrude_move(CURVE_OT_extrude=None, TRANSFORM_OT_translate=None):
         '''Extrude curve and move result
            Arguments:
            @CURVE_OT_extrude (CURVE_OT_extrude): Extrude selected control point(s)
               (optional)
            @TRANSFORM_OT_translate (TRANSFORM_OT_translate): Move selected items
               (optional)
      
         '''
      
         pass

      def handle_type_set(type='AUTOMATIC'):
         '''Set type of handles for selected control points
            Arguments:
            @type (str): Spline type
               in ['AUTOMATIC', 'VECTOR', 'ALIGNED', 'FREE_ALIGN', 'TOGGLE_FREE_ALIGN'], (optional)
      
         '''
      
         pass

      def hide(unselected=False):
         '''Hide (un)selected control points
            Arguments:
            @unselected (bool): Hide unselected rather than selected
               (optional)
      
         '''
      
         pass

      def make_segment():
         '''Join two curves by their selected ends
         '''
      
         pass

      def match_texture_space():
         '''Match texture space to object's bounding box
         '''
      
         pass

      def normals_make_consistent(calc_length=False):
         '''Recalculate the direction of selected handles
            Arguments:
            @calc_length (bool): Recalculate handle length
               (optional)
      
         '''
      
         pass

      def primitive_bezier_circle_add(radius=1.0, enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Construct a Bezier Circle
            Arguments:
            @radius (float): in [0, inf], (optional)
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def primitive_bezier_curve_add(radius=1.0, enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Construct a Bezier Curve
            Arguments:
            @radius (float): in [0, inf], (optional)
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def primitive_nurbs_circle_add(radius=1.0, enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Construct a Nurbs Circle
            Arguments:
            @radius (float): in [0, inf], (optional)
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def primitive_nurbs_curve_add(radius=1.0, enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Construct a Nurbs Curve
            Arguments:
            @radius (float): in [0, inf], (optional)
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def primitive_nurbs_path_add(radius=1.0, enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Construct a Path
            Arguments:
            @radius (float): in [0, inf], (optional)
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def radius_set(radius=1.0):
         '''Set per-point radius which is used for bevel tapering
            Arguments:
            @radius (float): in [0, inf], (optional)
      
         '''
      
         pass

      def reveal(select=True):
         '''Reveal hidden control points
            Arguments:
            @select (bool): (optional)
      
         '''
      
         pass

      def select_all(action='TOGGLE'):
         '''(De)select all control points
            Arguments:
            @action (str): Selection action to execute
               in ['TOGGLE', 'SELECT', 'DESELECT', 'INVERT'], (optional)
      
         '''
      
         pass

      def select_less():
         '''Reduce current selection by deselecting boundary elements
         '''
      
         pass

      def select_linked():
         '''Select all control points linked to the current selection
         '''
      
         pass

      def select_linked_pick(deselect=False):
         '''Select all control points linked to already selected ones
            Arguments:
            @deselect (bool): Deselect linked control points rather than selecting them
               (optional)
      
         '''
      
         pass

      def select_more():
         '''Select control points directly linked to already selected ones
         '''
      
         pass

      def select_next():
         '''Select control points following already selected ones along the curves
         '''
      
         pass

      def select_nth(skip=1, nth=1, offset=0):
         '''Deselect every Nth point starting from the active one
            Arguments:
            @skip (int): Number of deselected elements in the repetitive sequence
               in [1, inf], (optional)
            @nth (int): Number of selected elements in the repetitive sequence
               in [1, inf], (optional)
            @offset (int): Offset from the starting point
               in [-inf, inf], (optional)
      
         '''
      
         pass

      def select_previous():
         '''Select control points preceding already selected ones along the curves
         '''
      
         pass

      def select_random(percent=50.0, seed=0, action='SELECT'):
         '''Randomly select some control points
            Arguments:
            @percent (float): Percentage of objects to select randomly
               in [0, 100], (optional)
            @seed (int): Seed for the random number generator
               in [0, inf], (optional)
            @action (str): Selection action to execute
               in ['SELECT', 'DESELECT'], (optional)
      
         '''
      
         pass

      def select_row():
         '''Select a row of control points including active one
         '''
      
         pass

      def select_similar(type='WEIGHT', compare='EQUAL', threshold=0.1):
         '''Select similar curve points by property type
            Arguments:
            @type (str): in ['TYPE', 'RADIUS', 'WEIGHT', 'DIRECTION'], (optional)
            @compare (str): in ['EQUAL', 'GREATER', 'LESS'], (optional)
            @threshold (float): in [0, inf], (optional)
      
         '''
      
         pass

      def separate():
         '''Separate selected points from connected unselected points into a new object
         '''
      
         pass

      def shade_flat():
         '''Set shading to flat
         '''
      
         pass

      def shade_smooth():
         '''Set shading to smooth
         '''
      
         pass

      def shortest_path_pick():
         '''Select shortest path between two selections
         '''
      
         pass

      def smooth():
         '''Flatten angles of selected points
         '''
      
         pass

      def smooth_radius():
         '''Interpolate radii of selected points
         '''
      
         pass

      def smooth_tilt():
         '''Interpolate tilt of selected points
         '''
      
         pass

      def smooth_weight():
         '''Interpolate weight of selected points
         '''
      
         pass

      def spin(center=(0.0, 0.0, 0.0), axis=(0.0, 0.0, 0.0)):
         '''Extrude selected boundary row around pivot point and current view axis
            Arguments:
            @center (float): Center in global view space
               array of 3 items in [-inf, inf], (optional)
            @axis (float): Axis in global view space
               array of 3 items in [-1, 1], (optional)
      
         '''
      
         pass

      def spline_type_set(type='POLY', use_handles=False):
         '''Set type of active spline
            Arguments:
            @type (str): Spline type
               in ['POLY', 'BEZIER', 'NURBS'], (optional)
            @use_handles (bool): Use handles when converting bezier curves into polygons
               (optional)
      
         '''
      
         pass

      def spline_weight_set(weight=1.0):
         '''Set softbody goal weight for selected points
            Arguments:
            @weight (float): in [0, 1], (optional)
      
         '''
      
         pass

      def split():
         '''Split off selected points from connected unselected points
         '''
      
         pass

      def subdivide(number_cuts=1):
         '''Subdivide selected segments
            Arguments:
            @number_cuts (int): in [1, 1000], (optional)
      
         '''
      
         pass

      def switch_direction():
         '''Switch direction of selected splines
         '''
      
         pass

      def tilt_clear():
         '''Clear the tilt of selected control points
         '''
      
         pass

      def vertex_add(location=(0.0, 0.0, 0.0)):
         '''Add a new control point (linked to only selected end-curve one, if any)
            Arguments:
            @location (float): Location to add new vertex at
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

   class cycles:
      '''Spcecial class, created just to reflect content of bpy.ops.cycles'''

      def add_aov():
         '''Add an AOV pass
         '''
      
         pass

      def denoise_animation(input_filepath="", output_filepath=""):
         '''Denoise rendered animation sequence using current scene and view layer settings. Requires denoising data passes and output to OpenEXR multilayer files
            Arguments:
            @input_filepath (str): File path for image to denoise. If not specified, uses the render file path and frame range from the scene
               (optional, never None)
            @output_filepath (str): If not specified, renders will be denoised in-place
               (optional, never None)
      
         '''
      
         pass

      def merge_images(input_filepath1="", input_filepath2="", output_filepath=""):
         '''Combine OpenEXR multilayer images rendered with different sample ranges into one image with reduced noise
            Arguments:
            @input_filepath1 (str): File path for image to merge
               (optional, never None)
            @input_filepath2 (str): File path for image to merge
               (optional, never None)
            @output_filepath (str): File path for merged image
               (optional, never None)
      
         '''
      
         pass

      def remove_aov():
         '''Remove an AOV pass
         '''
      
         pass

      def use_shading_nodes():
         '''Enable nodes on a material, world or light
         '''
      
         pass

   class dpaint:
      '''Spcecial class, created just to reflect content of bpy.ops.dpaint'''

      def bake():
         '''Bake dynamic paint image sequence surface
         '''
      
         pass

      def output_toggle(output='A'):
         '''Add or remove Dynamic Paint output data layer
            Arguments:
            @output (str): in ['A', 'B'], (optional)
      
         '''
      
         pass

      def surface_slot_add():
         '''Add a new Dynamic Paint surface slot
         '''
      
         pass

      def surface_slot_remove():
         '''Remove the selected surface slot
         '''
      
         pass

      def type_toggle(type='CANVAS'):
         '''Toggle whether given type is active or not
            Arguments:
            @type (str): in ['CANVAS', 'BRUSH'], (optional)
      
         '''
      
         pass

   class ed:
      '''Spcecial class, created just to reflect content of bpy.ops.ed'''

      def flush_edits():
         '''Flush edit data from active editing modes
         '''
      
         pass

      def redo():
         '''Redo previous action
         '''
      
         pass

      def undo():
         '''Undo previous action
         '''
      
         pass

      def undo_history(item=0):
         '''Redo specific action in history
            Arguments:
            @item (int): in [0, inf], (optional)
      
         '''
      
         pass

      def undo_push(message="Add an undo step *function may be moved*"):
         '''Add an undo state (internal use only)
            Arguments:
            @message (str): (optional, never None)
      
         '''
      
         pass

      def undo_redo():
         '''Undo and redo previous action
         '''
      
         pass

   class export_anim:
      '''Spcecial class, created just to reflect content of bpy.ops.export_anim'''

      def bvh(filepath="", check_existing=True, filter_glob="*.bvh", global_scale=1.0, frame_start=0, frame_end=0, rotate_mode='NATIVE', root_transform_only=False):
         '''Save a BVH motion capture file from an armature
            Arguments:
            @filepath (str): Filepath used for exporting the file
               (optional, never None)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_glob (str): (optional, never None)
            @global_scale (float): Scale the BVH by this value
               in [0.0001, 1e+06], (optional)
            @frame_start (int): Starting frame to export
               in [-inf, inf], (optional)
            @frame_end (int): End frame to export
               in [-inf, inf], (optional)
            @rotate_mode (str): Rotation conversion
               in ['NATIVE', 'XYZ', 'XZY', 'YXZ', 'YZX', 'ZXY', 'ZYX'], (optional)
            @root_transform_only (bool): Only write out translation channels for the root bone
               (optional)
      
         '''
      
         pass

   class export_mesh:
      '''Spcecial class, created just to reflect content of bpy.ops.export_mesh'''

      def ply(filepath="", check_existing=True, filter_glob="*.ply", use_selection=False, use_mesh_modifiers=True, use_normals=True, use_uv_coords=True, use_colors=True, global_scale=1.0, axis_forward='Y', axis_up='Z'):
         '''Export as a Stanford PLY with normals, vertex colors and texture coordinates
            Arguments:
            @filepath (str): Filepath used for exporting the file
               (optional, never None)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_glob (str): (optional, never None)
            @use_selection (bool): Export selected objects only
               (optional)
            @use_mesh_modifiers (bool): Apply Modifiers to the exported mesh
               (optional)
            @use_normals (bool): Export Normals for smooth and hard shaded faces (hard shaded faces will be exported as individual faces)
               (optional)
            @use_uv_coords (bool): Export the active UV layer
               (optional)
            @use_colors (bool): Export the active vertex color layer
               (optional)
            @global_scale (float): in [0.01, 1000], (optional)
            @axis_forward (str): in ['X', 'Y', 'Z', '-X', '-Y', '-Z'], (optional)
            @axis_up (str): in ['X', 'Y', 'Z', '-X', '-Y', '-Z'], (optional)
      
         '''
      
         pass

      def stl(filepath="", check_existing=True, filter_glob="*.stl", use_selection=False, global_scale=1.0, use_scene_unit=False, ascii=False, use_mesh_modifiers=True, batch_mode='OFF', axis_forward='Y', axis_up='Z'):
         '''Save STL triangle mesh data
            Arguments:
            @filepath (str): Filepath used for exporting the file
               (optional, never None)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_glob (str): (optional, never None)
            @use_selection (bool): Export selected objects only
               (optional)
            @global_scale (float): in [0.01, 1000], (optional)
            @use_scene_unit (bool): Apply current scene's unit (as defined by unit scale) to exported data
               (optional)
            @ascii (bool): Save the file in ASCII file format
               (optional)
            @use_mesh_modifiers (bool): Apply the modifiers before saving
               (optional)
            @batch_mode (str): in ['OFF', 'OBJECT'], (optional)
            @axis_forward (str): in ['X', 'Y', 'Z', '-X', '-Y', '-Z'], (optional)
            @axis_up (str): in ['X', 'Y', 'Z', '-X', '-Y', '-Z'], (optional)
      
         '''
      
         pass

   class export_scene:
      '''Spcecial class, created just to reflect content of bpy.ops.export_scene'''

      def fbx(filepath="", check_existing=True, filter_glob="*.fbx", use_selection=False, use_active_collection=False, global_scale=1.0, apply_unit_scale=True, apply_scale_options='FBX_SCALE_NONE', bake_space_transform=False, object_types={'ARMATURE', 'CAMERA', 'EMPTY', 'LIGHT', 'MESH', 'OTHER'}, use_mesh_modifiers=True, use_mesh_modifiers_render=True, mesh_smooth_type='OFF', use_subsurf=False, use_mesh_edges=False, use_tspace=False, use_custom_props=False, add_leaf_bones=True, primary_bone_axis='Y', secondary_bone_axis='X', use_armature_deform_only=False, armature_nodetype='NULL', bake_anim=True, bake_anim_use_all_bones=True, bake_anim_use_nla_strips=True, bake_anim_use_all_actions=True, bake_anim_force_startend_keying=True, bake_anim_step=1.0, bake_anim_simplify_factor=1.0, path_mode='AUTO', embed_textures=False, batch_mode='OFF', use_batch_own_dir=True, use_metadata=True, axis_forward='-Z', axis_up='Y'):
         '''Write a FBX file
            Arguments:
            @filepath (str): Filepath used for exporting the file
               (optional, never None)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_glob (str): (optional, never None)
            @use_selection (bool): Export selected and visible objects only
               (optional)
            @use_active_collection (bool): Export only objects from the active collection (and its children)
               (optional)
            @global_scale (float): Scale all data (Some importers do not support scaled armatures!)
               in [0.001, 1000], (optional)
            @apply_unit_scale (bool): Take into account current Blender units settings (if unset, raw Blender Units values are used as-is)
               (optional)
            @apply_scale_options (str): How to apply custom and units scalings in generated FBX file (Blender uses FBX scale to detect units on import, but many other applications do not handle the same way)
               in ['FBX_SCALE_NONE', 'FBX_SCALE_UNITS', 'FBX_SCALE_CUSTOM', 'FBX_SCALE_ALL'], (optional)
            @bake_space_transform (bool): Bake space transform into object data, avoids getting unwanted rotations to objects when target space is not aligned with Blender's space (WARNING! experimental option, use at own risks, known broken with armatures/animations)
               (optional)
            @object_types (str): Which kind of object to export
               set in {'EMPTY', 'CAMERA', 'LIGHT', 'ARMATURE', 'MESH', 'OTHER'}, (optional)
            @use_mesh_modifiers (bool): Apply modifiers to mesh objects (except Armature ones) - WARNING: prevents exporting shape keys
               (optional)
            @use_mesh_modifiers_render (bool): Use render settings when applying modifiers to mesh objects (DISABLED in Blender 2.8)
               (optional)
            @mesh_smooth_type (str): Export smoothing information (prefer 'Normals Only' option if your target importer understand split normals)
               in ['OFF', 'FACE', 'EDGE'], (optional)
            @use_subsurf (bool): Export the last Catmull-Rom subdivision modifier as FBX subdivision (does not apply the modifier even if 'Apply Modifiers' is enabled)
               (optional)
            @use_mesh_edges (bool): Export loose edges (as two-vertices polygons)
               (optional)
            @use_tspace (bool): Add binormal and tangent vectors, together with normal they form the tangent space (will only work correctly with tris/quads only meshes!)
               (optional)
            @use_custom_props (bool): Export custom properties
               (optional)
            @add_leaf_bones (bool): Append a final bone to the end of each chain to specify last bone length (use this when you intend to edit the armature from exported data)
               (optional)
            @primary_bone_axis (str): in ['X', 'Y', 'Z', '-X', '-Y', '-Z'], (optional)
            @secondary_bone_axis (str): in ['X', 'Y', 'Z', '-X', '-Y', '-Z'], (optional)
            @use_armature_deform_only (bool): Only write deforming bones (and non-deforming ones when they have deforming children)
               (optional)
            @armature_nodetype (str): FBX type of node (object) used to represent Blender's armatures (use Null one unless you experience issues with other app, other choices may no import back perfectly in Blender...)
               in ['NULL', 'ROOT', 'LIMBNODE'], (optional)
            @bake_anim (bool): Export baked keyframe animation
               (optional)
            @bake_anim_use_all_bones (bool): Force exporting at least one key of animation for all bones (needed with some target applications, like UE4)
               (optional)
            @bake_anim_use_nla_strips (bool): Export each non-muted NLA strip as a separated FBX's AnimStack, if any, instead of global scene animation
               (optional)
            @bake_anim_use_all_actions (bool): Export each action as a separated FBX's AnimStack, instead of global scene animation (note that animated objects will get all actions compatible with them, others will get no animation at all)
               (optional)
            @bake_anim_force_startend_keying (bool): Always add a keyframe at start and end of actions for animated channels
               (optional)
            @bake_anim_step (float): How often to evaluate animated values (in frames)
               in [0.01, 100], (optional)
            @bake_anim_simplify_factor (float): How much to simplify baked values (0.0 to disable, the higher the more simplified)
               in [0, 100], (optional)
            @path_mode (str): Method used to reference paths
               in ['AUTO', 'ABSOLUTE', 'RELATIVE', 'MATCH', 'STRIP', 'COPY'], (optional)
            @embed_textures (bool): Embed textures in FBX binary file (only for "Copy" path mode!)
               (optional)
            @batch_mode (str): in ['OFF', 'SCENE', 'COLLECTION', 'SCENE_COLLECTION', 'ACTIVE_SCENE_COLLECTION'], (optional)
            @use_batch_own_dir (bool): Create a dir for each exported file
               (optional)
            @use_metadata (bool): (optional)
            @axis_forward (str): in ['X', 'Y', 'Z', '-X', '-Y', '-Z'], (optional)
            @axis_up (str): in ['X', 'Y', 'Z', '-X', '-Y', '-Z'], (optional)
      
         '''
      
         pass

      def gltf(export_format='GLB', ui_tab='GENERAL', export_copyright="", export_image_format='AUTO', export_texture_dir="", export_texcoords=True, export_normals=True, export_draco_mesh_compression_enable=False, export_draco_mesh_compression_level=6, export_draco_position_quantization=14, export_draco_normal_quantization=10, export_draco_texcoord_quantization=12, export_draco_generic_quantization=12, export_tangents=False, export_materials=True, export_colors=True, export_cameras=False, export_selected=False, use_selection=False, export_extras=False, export_yup=True, export_apply=False, export_animations=True, export_frame_range=True, export_frame_step=1, export_force_sampling=True, export_nla_strips=True, export_def_bones=False, export_current_frame=False, export_skins=True, export_all_influences=False, export_morph=True, export_morph_normal=True, export_morph_tangent=False, export_lights=False, export_displacement=False, will_save_settings=False, filepath="", check_existing=True, filter_glob="*.glb;*.gltf"):
         '''Export scene as glTF 2.0 file
            Arguments:
            @export_format (str): Output format and embedding options. Binary is most efficient, but JSON (embedded or separate) may be easier to edit later
               in ['GLB', 'GLTF_EMBEDDED', 'GLTF_SEPARATE'], (optional)
            @ui_tab (str): Export setting categories
               in ['GENERAL', 'MESHES', 'OBJECTS', 'ANIMATION'], (optional)
            @export_copyright (str): Legal rights and conditions for the model
               (optional, never None)
            @export_image_format (str): Output format for images. PNG is lossless and generally preferred, but JPEG might be preferable for web applications due to the smaller file size
               in ['AUTO', 'JPEG'], (optional)
            @export_texture_dir (str): Folder to place texture files in. Relative to the .gltf file
               (optional, never None)
            @export_texcoords (bool): Export UVs (texture coordinates) with meshes
               (optional)
            @export_normals (bool): Export vertex normals with meshes
               (optional)
            @export_draco_mesh_compression_enable (bool): Compress mesh using Draco
               (optional)
            @export_draco_mesh_compression_level (int): Compression level (0 = most speed, 6 = most compression, higher values currently not supported)
               in [0, 6], (optional)
            @export_draco_position_quantization (int): Quantization bits for position values (0 = no quantization)
               in [0, 30], (optional)
            @export_draco_normal_quantization (int): Quantization bits for normal values (0 = no quantization)
               in [0, 30], (optional)
            @export_draco_texcoord_quantization (int): Quantization bits for texture coordinate values (0 = no quantization)
               in [0, 30], (optional)
            @export_draco_generic_quantization (int): Quantization bits for generic coordinate values like weights or joints (0 = no quantization)
               in [0, 30], (optional)
            @export_tangents (bool): Export vertex tangents with meshes
               (optional)
            @export_materials (bool): Export materials
               (optional)
            @export_colors (bool): Export vertex colors with meshes
               (optional)
            @export_cameras (bool): Export cameras
               (optional)
            @export_selected (bool): Export selected objects only
               (optional)
            @use_selection (bool): Export selected objects only
               (optional)
            @export_extras (bool): Export custom properties as glTF extras
               (optional)
            @export_yup (bool): Export using glTF convention, +Y up
               (optional)
            @export_apply (bool): Apply modifiers (excluding Armatures) to mesh objects -WARNING: prevents exporting shape keys
               (optional)
            @export_animations (bool): Exports active actions and NLA tracks as glTF animations
               (optional)
            @export_frame_range (bool): Clips animations to selected playback range
               (optional)
            @export_frame_step (int): How often to evaluate animated values (in frames)
               in [1, 120], (optional)
            @export_force_sampling (bool): Apply sampling to all animations
               (optional)
            @export_nla_strips (bool): When on, multiple actions become part of the same glTF animation if
            they're pushed onto NLA tracks with the same name.
            When off, all the currently assigned actions become one glTF animation
               (optional)
            @export_def_bones (bool): Export Deformation bones only (and needed bones for hierarchy)
               (optional)
            @export_current_frame (bool): Export the scene in the current animation frame
               (optional)
            @export_skins (bool): Export skinning (armature) data
               (optional)
            @export_all_influences (bool): Allow >4 joint vertex influences. Models may appear incorrectly in many viewers
               (optional)
            @export_morph (bool): Export shape keys (morph targets)
               (optional)
            @export_morph_normal (bool): Export vertex normals with shape keys (morph targets)
               (optional)
            @export_morph_tangent (bool): Export vertex tangents with shape keys (morph targets)
               (optional)
            @export_lights (bool): Export directional, point, and spot lights. Uses "KHR_lights_punctual" glTF extension
               (optional)
            @export_displacement (bool): EXPERIMENTAL: Export displacement textures. Uses incomplete "KHR_materials_displacement" glTF extension
               (optional)
            @will_save_settings (bool): Store glTF export settings in the Blender project
               (optional)
            @filepath (str): Filepath used for exporting the file
               (optional, never None)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

      def obj(filepath="", check_existing=True, filter_glob="*.obj;*.mtl", use_selection=False, use_animation=False, use_mesh_modifiers=True, use_edges=True, use_smooth_groups=False, use_smooth_groups_bitflags=False, use_normals=True, use_uvs=True, use_materials=True, use_triangles=False, use_nurbs=False, use_vertex_groups=False, use_blen_objects=True, group_by_object=False, group_by_material=False, keep_vertex_order=False, global_scale=1.0, path_mode='AUTO', axis_forward='-Z', axis_up='Y'):
         '''Save a Wavefront OBJ File
            Arguments:
            @filepath (str): Filepath used for exporting the file
               (optional, never None)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_glob (str): (optional, never None)
            @use_selection (bool): Export selected objects only
               (optional)
            @use_animation (bool): Write out an OBJ for each frame
               (optional)
            @use_mesh_modifiers (bool): Apply modifiers
               (optional)
            @use_edges (bool): (optional)
            @use_smooth_groups (bool): Write sharp edges as smooth groups
               (optional)
            @use_smooth_groups_bitflags (bool): Same as 'Smooth Groups', but generate smooth groups IDs as bitflags (produces at most 32 different smooth groups, usually much less)
               (optional)
            @use_normals (bool): Export one normal per vertex and per face, to represent flat faces and sharp edges
               (optional)
            @use_uvs (bool): Write out the active UV coordinates
               (optional)
            @use_materials (bool): Write out the MTL file
               (optional)
            @use_triangles (bool): Convert all faces to triangles
               (optional)
            @use_nurbs (bool): Write nurbs curves as OBJ nurbs rather than converting to geometry
               (optional)
            @use_vertex_groups (bool): (optional)
            @use_blen_objects (bool): (optional)
            @group_by_object (bool): (optional)
            @group_by_material (bool): (optional)
            @keep_vertex_order (bool): (optional)
            @global_scale (float): in [0.01, 1000], (optional)
            @path_mode (str): Method used to reference paths
               in ['AUTO', 'ABSOLUTE', 'RELATIVE', 'MATCH', 'STRIP', 'COPY'], (optional)
            @axis_forward (str): in ['X', 'Y', 'Z', '-X', '-Y', '-Z'], (optional)
            @axis_up (str): in ['X', 'Y', 'Z', '-X', '-Y', '-Z'], (optional)
      
         '''
      
         pass

      def x3d(filepath="", check_existing=True, filter_glob="*.x3d", use_selection=False, use_mesh_modifiers=True, use_triangulate=False, use_normals=False, use_compress=False, use_hierarchy=True, name_decorations=True, use_h3d=False, global_scale=1.0, path_mode='AUTO', axis_forward='Z', axis_up='Y'):
         '''Export selection to Extensible 3D file (.x3d)
            Arguments:
            @filepath (str): Filepath used for exporting the file
               (optional, never None)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_glob (str): (optional, never None)
            @use_selection (bool): Export selected objects only
               (optional)
            @use_mesh_modifiers (bool): Use transformed mesh data from each object
               (optional)
            @use_triangulate (bool): Write quads into 'IndexedTriangleSet'
               (optional)
            @use_normals (bool): Write normals with geometry
               (optional)
            @use_compress (bool): Compress the exported file
               (optional)
            @use_hierarchy (bool): Export parent child relationships
               (optional)
            @name_decorations (bool): Add prefixes to the names of exported nodes to indicate their type
               (optional)
            @use_h3d (bool): Export shaders for H3D
               (optional)
            @global_scale (float): in [0.01, 1000], (optional)
            @path_mode (str): Method used to reference paths
               in ['AUTO', 'ABSOLUTE', 'RELATIVE', 'MATCH', 'STRIP', 'COPY'], (optional)
            @axis_forward (str): in ['X', 'Y', 'Z', '-X', '-Y', '-Z'], (optional)
            @axis_up (str): in ['X', 'Y', 'Z', '-X', '-Y', '-Z'], (optional)
      
         '''
      
         pass

   class file:
      '''Spcecial class, created just to reflect content of bpy.ops.file'''

      def autopack_toggle():
         '''Automatically pack all external files into the .blend file
         '''
      
         pass

      def bookmark_add():
         '''Add a bookmark for the selected/active directory
         '''
      
         pass

      def bookmark_cleanup():
         '''Delete all invalid bookmarks
         '''
      
         pass

      def bookmark_delete(index=-1):
         '''Delete selected bookmark
            Arguments:
            @index (int): in [-1, 20000], (optional)
      
         '''
      
         pass

      def bookmark_move(direction='TOP'):
         '''Move the active bookmark up/down in the list
            Arguments:
            @direction (str): Direction to move the active bookmark towards
               in ['TOP', 'UP', 'DOWN', 'BOTTOM'], (optional)
      
         '''
      
         pass

      def cancel():
         '''Cancel loading of selected file
         '''
      
         pass

      def delete():
         '''Move selected files to the trash or recycle bin
         '''
      
         pass

      def directory_new(directory="", open=False, confirm=True):
         '''Create a new directory
            Arguments:
            @directory (str): Name of new directory
               (optional, never None)
            @open (bool): Open new directory
               (optional)
            @confirm (bool): Prompt for confirmation
               (optional)
      
         '''
      
         pass

      def execute(need_active=False):
         '''Execute selected file
            Arguments:
            @need_active (bool): Only execute if there's an active selected file in the file list
               (optional)
      
         '''
      
         pass

      def filenum(increment=1):
         '''Increment number in filename
            Arguments:
            @increment (int): in [-100, 100], (optional)
      
         '''
      
         pass

      def filepath_drop(filepath="Path"):
         '''undocumented
            Arguments:
            @filepath (str): (optional, never None)
      
         '''
      
         pass

      def find_missing_files(find_all=False, directory="", hide_props_region=True, filter_blender=False, filter_backup=False, filter_image=False, filter_movie=False, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=False, filter_blenlib=False, filemode=9, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA'):
         '''Try to find missing external files
            Arguments:
            @find_all (bool): Find all files in the search path (not just missing)
               (optional)
            @directory (str): Directory of the file
               (optional, never None)
            @hide_props_region (bool): Collapse the region displaying the operator settings
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
      
         '''
      
         pass

      def hidedot():
         '''Toggle hide hidden dot files
         '''
      
         pass

      def highlight():
         '''Highlight selected file(s)
         '''
      
         pass

      def make_paths_absolute():
         '''Make all paths to external files absolute
         '''
      
         pass

      def make_paths_relative():
         '''Make all paths to external files relative to current .blend
         '''
      
         pass

      def next():
         '''Move to next folder
         '''
      
         pass

      def pack_all():
         '''Pack all used external files into the .blend
         '''
      
         pass

      def pack_libraries():
         '''Pack all used Blender library files into the current .blend
         '''
      
         pass

      def parent():
         '''Move to parent directory
         '''
      
         pass

      def previous():
         '''Move to previous folder
         '''
      
         pass

      def refresh():
         '''Refresh the file list
         '''
      
         pass

      def rename():
         '''Rename file or file directory
         '''
      
         pass

      def report_missing_files():
         '''Report all missing external files
         '''
      
         pass

      def reset_recent():
         '''Reset Recent files
         '''
      
         pass

      def select(extend=False, fill=False, open=True, deselect_all=False):
         '''Handle mouse clicks to select and activate items
            Arguments:
            @extend (bool): Extend selection instead of deselecting everything first
               (optional)
            @fill (bool): Select everything beginning with the last selection
               (optional)
            @open (bool): Open a directory when selecting it
               (optional)
            @deselect_all (bool): Deselect all when nothing under the cursor
               (optional)
      
         '''
      
         pass

      def select_all(action='TOGGLE'):
         '''Select or deselect all files
            Arguments:
            @action (str): Selection action to execute
               in ['TOGGLE', 'SELECT', 'DESELECT', 'INVERT'], (optional)
      
         '''
      
         pass

      def select_bookmark(dir=""):
         '''Select a bookmarked directory
            Arguments:
            @dir (str): (optional, never None)
      
         '''
      
         pass

      def select_box(xmin=0, xmax=0, ymin=0, ymax=0, wait_for_input=True, mode='SET'):
         '''Activate/select the file(s) contained in the border
            Arguments:
            @xmin (int): in [-inf, inf], (optional)
            @xmax (int): in [-inf, inf], (optional)
            @ymin (int): in [-inf, inf], (optional)
            @ymax (int): in [-inf, inf], (optional)
            @wait_for_input (bool): (optional)
            @mode (str): in ['SET', 'ADD', 'SUB'], (optional)
      
         '''
      
         pass

      def select_walk(direction='UP', extend=False, fill=False):
         '''Select/Deselect files by walking through them
            Arguments:
            @direction (str): Select/Deselect element in this direction
               in ['UP', 'DOWN', 'LEFT', 'RIGHT'], (optional)
            @extend (bool): Extend selection instead of deselecting everything first
               (optional)
            @fill (bool): Select everything beginning with the last selection
               (optional)
      
         '''
      
         pass

      def smoothscroll():
         '''Smooth scroll to make editable file visible
         '''
      
         pass

      def sort_column_ui_context():
         '''Change sorting to use column under cursor
         '''
      
         pass

      def start_filter():
         '''Start entering filter text
         '''
      
         pass

      def unpack_all(method='USE_LOCAL'):
         '''Unpack all files packed into this .blend to external ones
            Arguments:
            @method (str): How to unpack
               in ['USE_LOCAL', 'WRITE_LOCAL', 'USE_ORIGINAL', 'WRITE_ORIGINAL', 'KEEP', 'REMOVE'], (optional)
      
         '''
      
         pass

      def unpack_item(method='USE_LOCAL', id_name="", id_type=19785):
         '''Unpack this file to an external file
            Arguments:
            @method (str): How to unpack
               in ['USE_LOCAL', 'WRITE_LOCAL', 'USE_ORIGINAL', 'WRITE_ORIGINAL'], (optional)
            @id_name (str): Name of ID block to unpack
               (optional, never None)
            @id_type (int): Identifier type of ID block
               in [0, inf], (optional)
      
         '''
      
         pass

      def unpack_libraries():
         '''Unpack all used Blender library files from this .blend file
         '''
      
         pass

   class fluid:
      '''Spcecial class, created just to reflect content of bpy.ops.fluid'''

      def bake_all():
         '''Bake Entire Fluid Simulation
         '''
      
         pass

      def bake_data():
         '''Bake Fluid Data
         '''
      
         pass

      def bake_guides():
         '''Bake Fluid Guiding
         '''
      
         pass

      def bake_mesh():
         '''Bake Fluid Mesh
         '''
      
         pass

      def bake_noise():
         '''Bake Fluid Noise
         '''
      
         pass

      def bake_particles():
         '''Bake Fluid Particles
         '''
      
         pass

      def free_all():
         '''Free Entire Fluid Simulation
         '''
      
         pass

      def free_data():
         '''Free Fluid Data
         '''
      
         pass

      def free_guides():
         '''Free Fluid Guiding
         '''
      
         pass

      def free_mesh():
         '''Free Fluid Mesh
         '''
      
         pass

      def free_noise():
         '''Free Fluid Noise
         '''
      
         pass

      def free_particles():
         '''Free Fluid Particles
         '''
      
         pass

      def pause_bake():
         '''Pause Bake
         '''
      
         pass

      def preset_add(name="", remove_name=False, remove_active=False):
         '''Add or remove a Fluid Preset
            Arguments:
            @name (str): Name of the preset, used to make the path name
               (optional, never None)
            @remove_name (bool): (optional)
            @remove_active (bool): (optional)
      
         '''
      
         pass

   class font:
      '''Spcecial class, created just to reflect content of bpy.ops.font'''

      def case_set(case='LOWER'):
         '''Set font case
            Arguments:
            @case (str): Lower or upper case
               in ['LOWER', 'UPPER'], (optional)
      
         '''
      
         pass

      def case_toggle():
         '''Toggle font case
         '''
      
         pass

      def change_character(delta=1):
         '''Change font character code
            Arguments:
            @delta (int): Number to increase or decrease character code with
               in [-255, 255], (optional)
      
         '''
      
         pass

      def change_spacing(delta=1):
         '''Change font spacing
            Arguments:
            @delta (int): Amount to decrease or increase character spacing with
               in [-20, 20], (optional)
      
         '''
      
         pass

      def delete(type='PREVIOUS_CHARACTER'):
         '''Delete text by cursor position
            Arguments:
            @type (str): Which part of the text to delete
               in ['NEXT_CHARACTER', 'PREVIOUS_CHARACTER', 'NEXT_WORD', 'PREVIOUS_WORD', 'SELECTION', 'NEXT_OR_SELECTION', 'PREVIOUS_OR_SELECTION'], (optional)
      
         '''
      
         pass

      def line_break():
         '''Insert line break at cursor position
         '''
      
         pass

      def move(type='LINE_BEGIN'):
         '''Move cursor to position type
            Arguments:
            @type (str): Where to move cursor to
               in ['LINE_BEGIN', 'LINE_END', 'PREVIOUS_CHARACTER', 'NEXT_CHARACTER', 'PREVIOUS_WORD', 'NEXT_WORD', 'PREVIOUS_LINE', 'NEXT_LINE', 'PREVIOUS_PAGE', 'NEXT_PAGE'], (optional)
      
         '''
      
         pass

      def move_select(type='LINE_BEGIN'):
         '''Move the cursor while selecting
            Arguments:
            @type (str): Where to move cursor to, to make a selection
               in ['LINE_BEGIN', 'LINE_END', 'PREVIOUS_CHARACTER', 'NEXT_CHARACTER', 'PREVIOUS_WORD', 'NEXT_WORD', 'PREVIOUS_LINE', 'NEXT_LINE', 'PREVIOUS_PAGE', 'NEXT_PAGE'], (optional)
      
         '''
      
         pass

      def open(filepath="", hide_props_region=True, filter_blender=False, filter_backup=False, filter_image=False, filter_movie=False, filter_python=False, filter_font=True, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=9, relative_path=True, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA'):
         '''Load a new font from a file
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @hide_props_region (bool): Collapse the region displaying the operator settings
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @relative_path (bool): Select the file relative to the blend file
               (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
      
         '''
      
         pass

      def select_all():
         '''Select all text
         '''
      
         pass

      def style_set(style='BOLD', clear=False):
         '''Set font style
            Arguments:
            @style (str): Style to set selection to
               in ['BOLD', 'ITALIC', 'UNDERLINE', 'SMALL_CAPS'], (optional)
            @clear (bool): Clear style rather than setting it
               (optional)
      
         '''
      
         pass

      def style_toggle(style='BOLD'):
         '''Toggle font style
            Arguments:
            @style (str): Style to set selection to
               in ['BOLD', 'ITALIC', 'UNDERLINE', 'SMALL_CAPS'], (optional)
      
         '''
      
         pass

      def text_copy():
         '''Copy selected text to clipboard
         '''
      
         pass

      def text_cut():
         '''Cut selected text to clipboard
         '''
      
         pass

      def text_insert(text="", accent=False):
         '''Insert text at cursor position
            Arguments:
            @text (str): Text to insert at the cursor position
               (optional, never None)
            @accent (bool): Next typed character will strike through previous, for special character input
               (optional)
      
         '''
      
         pass

      def text_paste():
         '''Paste text from clipboard
         '''
      
         pass

      def text_paste_from_file(filepath="", hide_props_region=True, filter_blender=False, filter_backup=False, filter_image=False, filter_movie=False, filter_python=False, filter_font=False, filter_sound=False, filter_text=True, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=9, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA'):
         '''Paste contents from file
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @hide_props_region (bool): Collapse the region displaying the operator settings
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
      
         '''
      
         pass

      def textbox_add():
         '''Add a new text box
         '''
      
         pass

      def textbox_remove(index=0):
         '''Remove the textbox
            Arguments:
            @index (int): The current text box
               in [0, inf], (optional)
      
         '''
      
         pass

      def unlink():
         '''Unlink active font data-block
         '''
      
         pass

   class gizmogroup:
      '''Spcecial class, created just to reflect content of bpy.ops.gizmogroup'''

      def gizmo_select(extend=False, deselect=False, toggle=False, deselect_all=False):
         '''Select the currently highlighted gizmo
            Arguments:
            @extend (bool): Extend selection instead of deselecting everything first
               (optional)
            @deselect (bool): Remove from selection
               (optional)
            @toggle (bool): Toggle the selection
               (optional)
            @deselect_all (bool): Deselect all when nothing under the cursor
               (optional)
      
         '''
      
         pass

      def gizmo_tweak():
         '''Tweak the active gizmo
         '''
      
         pass

   class gpencil:
      '''Spcecial class, created just to reflect content of bpy.ops.gpencil'''

      def active_frame_delete():
         '''Delete the active frame for the active Grease Pencil Layer
         '''
      
         pass

      def active_frames_delete_all():
         '''Delete the active frame(s) of all editable Grease Pencil layers
         '''
      
         pass

      def annotate(mode='DRAW', stroke=None, wait_for_input=True):
         '''Make annotations on the active data
            Arguments:
            @mode (str): Way to interpret mouse movements
               in ['DRAW', 'DRAW_STRAIGHT', 'DRAW_POLY', 'ERASER'], (optional)
            @stroke (OperatorStrokeElement): Collection of , (optional)
            @wait_for_input (bool): Wait for first click instead of painting immediately
               (optional)
      
         '''
      
         pass

      def annotation_active_frame_delete():
         '''Delete the active frame for the active Annotation Layer
         '''
      
         pass

      def annotation_add():
         '''Add new Annotation data-block
         '''
      
         pass

      def blank_frame_add(all_layers=False):
         '''Insert a blank frame on the current frame (all subsequently existing frames, if any, are shifted right by one frame)
            Arguments:
            @all_layers (bool): Create blank frame in all layers, not only active
               (optional)
      
         '''
      
         pass

      def brush_reset():
         '''Reset Brush to default parameters
         '''
      
         pass

      def brush_reset_all():
         '''Delete all mode brushes and recreate a default set
         '''
      
         pass

      def convert(type='PATH', use_normalize_weights=True, radius_multiplier=1.0, use_link_strokes=False, timing_mode='FULL', frame_range=100, start_frame=1, use_realtime=False, end_frame=250, gap_duration=0.0, gap_randomness=0.0, seed=0, use_timing_data=False):
         '''Convert the active Grease Pencil layer to a new Curve Object
            Arguments:
            @type (str): Which type of curve to convert to
               in ['PATH', 'CURVE', 'POLY'], (optional)
            @use_normalize_weights (bool): Normalize weight (set from stroke width)
               (optional)
            @radius_multiplier (float): Multiplier for the points' radii (set from stroke width)
               in [0, 1000], (optional)
            @use_link_strokes (bool): Whether to link strokes with zero-radius sections of curves
               (optional)
            @timing_mode (str): How to use timing data stored in strokes
               in ['NONE', 'LINEAR', 'FULL', 'CUSTOMGAP'], (optional)
            @frame_range (int): The duration of evaluation of the path control curve
               in [1, 10000], (optional)
            @start_frame (int): The start frame of the path control curve
               in [1, 100000], (optional)
            @use_realtime (bool): Whether the path control curve reproduces the drawing in realtime, starting from Start Frame
               (optional)
            @end_frame (int): The end frame of the path control curve (if Realtime is not set)
               in [1, 100000], (optional)
            @gap_duration (float): Custom Gap mode: (Average) length of gaps, in frames (Note: Realtime value, will be scaled if Realtime is not set)
               in [0, 10000], (optional)
            @gap_randomness (float): Custom Gap mode: Number of frames that gap lengths can vary
               in [0, 10000], (optional)
            @seed (int): Custom Gap mode: Random generator seed
               in [0, 1000], (optional)
            @use_timing_data (bool): Whether the converted Grease Pencil layer has valid timing data (internal use)
               (optional)
      
         '''
      
         pass

      def convert_old_files(annotation=False):
         '''Convert 2.7x grease pencil files to 2.80
            Arguments:
            @annotation (bool): Convert to Annotations
               (optional)
      
         '''
      
         pass

      def copy():
         '''Copy selected Grease Pencil points and strokes
         '''
      
         pass

      def data_unlink():
         '''Unlink active Annotation data-block
         '''
      
         pass

      def delete(type='POINTS'):
         '''Delete selected Grease Pencil strokes, vertices, or frames
            Arguments:
            @type (str): Method used for deleting Grease Pencil data
               in ['POINTS', 'STROKES', 'FRAME'], (optional)
      
         '''
      
         pass

      def dissolve(type='POINTS'):
         '''Delete selected points without splitting strokes
            Arguments:
            @type (str): Method used for dissolving Stroke points
               in ['POINTS', 'BETWEEN', 'UNSELECT'], (optional)
      
         '''
      
         pass

      def draw(mode='DRAW', stroke=None, wait_for_input=True, disable_straight=False, disable_fill=False, guide_last_angle=0.0):
         '''Draw mouse_prv new stroke in the active Grease Pencil Object
            Arguments:
            @mode (str): Way to interpret mouse movements
               in ['DRAW', 'DRAW_STRAIGHT', 'ERASER'], (optional)
            @stroke (OperatorStrokeElement): Collection of , (optional)
            @wait_for_input (bool): Wait for first click instead of painting immediately
               (optional)
            @disable_straight (bool): Disable key for straight lines
               (optional)
            @disable_fill (bool): Disable fill to use stroke as fill boundary
               (optional)
            @guide_last_angle (float): Speed guide angle
               in [-10000, 10000], (optional)
      
         '''
      
         pass

      def duplicate():
         '''Duplicate the selected Grease Pencil strokes
         '''
      
         pass

      def duplicate_move(GPENCIL_OT_duplicate=None, TRANSFORM_OT_translate=None):
         '''Make copies of the selected Grease Pencil strokes and move them
            Arguments:
            @GPENCIL_OT_duplicate (GPENCIL_OT_duplicate): Duplicate the selected Grease Pencil strokes
               (optional)
            @TRANSFORM_OT_translate (TRANSFORM_OT_translate): Move selected items
               (optional)
      
         '''
      
         pass

      def editmode_toggle(back=False):
         '''Enter/Exit edit mode for Grease Pencil strokes
            Arguments:
            @back (bool): Return to previous mode
               (optional)
      
         '''
      
         pass

      def extract_palette_vertex(selected=False, threshold=1):
         '''Extract all colors used in Grease Pencil Vertex and create a Palette
            Arguments:
            @selected (bool): Convert only selected strokes
               (optional)
            @threshold (int): in [1, 4], (optional)
      
         '''
      
         pass

      def extrude():
         '''Extrude the selected Grease Pencil points
         '''
      
         pass

      def extrude_move(GPENCIL_OT_extrude=None, TRANSFORM_OT_translate=None):
         '''Extrude selected points and move them
            Arguments:
            @GPENCIL_OT_extrude (GPENCIL_OT_extrude): Extrude the selected Grease Pencil points
               (optional)
            @TRANSFORM_OT_translate (TRANSFORM_OT_translate): Move selected items
               (optional)
      
         '''
      
         pass

      def fill(on_back=False):
         '''Fill with color the shape formed by strokes
            Arguments:
            @on_back (bool): Send new stroke to Back
               (optional)
      
         '''
      
         pass

      def frame_clean_fill(mode='ACTIVE'):
         '''Remove 'no fill' boundary strokes
            Arguments:
            @mode (str): in ['ACTIVE', 'ALL'], (optional)
      
         '''
      
         pass

      def frame_clean_loose(limit=1):
         '''Remove loose points
            Arguments:
            @limit (int): Number of points to consider stroke as loose
               in [1, inf], (optional)
      
         '''
      
         pass

      def frame_duplicate(mode='ACTIVE'):
         '''Make a copy of the active Grease Pencil Frame
            Arguments:
            @mode (str): in ['ACTIVE', 'ALL'], (optional)
      
         '''
      
         pass

      def generate_weights(mode='NAME', armature='DEFAULT', ratio=0.1, decay=0.8):
         '''Generate automatic weights for armatures (requires armature modifier)
            Arguments:
            @mode (str): in ['NAME', 'AUTO'], (optional)
            @armature (str): Armature to use
               in ['DEFAULT'], (optional)
            @ratio (float): Ratio between bone length and influence radius
               in [0, 2], (optional)
            @decay (float): Factor to reduce influence depending of distance to bone axis
               in [0, 1], (optional)
      
         '''
      
         pass

      def guide_rotate(increment=True, angle=0.0):
         '''Rotate guide angle
            Arguments:
            @increment (bool): Increment angle
               (optional)
            @angle (float): Guide angle
               in [-10000, 10000], (optional)
      
         '''
      
         pass

      def hide(unselected=False):
         '''Hide selected/unselected Grease Pencil layers
            Arguments:
            @unselected (bool): Hide unselected rather than selected layers
               (optional)
      
         '''
      
         pass

      def image_to_grease_pencil(size=0.005, mask=False):
         '''Generate a Grease Pencil Object using Image as source
            Arguments:
            @size (float): Size used for grease pencil points
               in [0.0001, 10], (optional)
            @mask (bool): Create an inverted image for masking using alpha channel
               (optional)
      
         '''
      
         pass

      def interpolate(shift=0.0):
         '''Interpolate grease pencil strokes between frames
            Arguments:
            @shift (float): Bias factor for which frame has more influence on the interpolated strokes
               in [-1, 1], (optional)
      
         '''
      
         pass

      def interpolate_reverse():
         '''Remove breakdown frames generated by interpolating between two Grease Pencil frames
         '''
      
         pass

      def interpolate_sequence():
         '''Generate 'in-betweens' to smoothly interpolate between Grease Pencil frames
         '''
      
         pass

      def layer_active(layer=0):
         '''Active Grease Pencil layer
            Arguments:
            @layer (int): in [0, inf], (optional)
      
         '''
      
         pass

      def layer_add():
         '''Add new layer or note for the active data-block
         '''
      
         pass

      def layer_annotation_add():
         '''Add new Annotation layer or note for the active data-block
         '''
      
         pass

      def layer_annotation_move(type='UP'):
         '''Move the active Annotation layer up/down in the list
            Arguments:
            @type (str): in ['UP', 'DOWN'], (optional)
      
         '''
      
         pass

      def layer_annotation_remove():
         '''Remove active Annotation layer
         '''
      
         pass

      def layer_change(layer='DEFAULT'):
         '''Change active Grease Pencil layer
            Arguments:
            @layer (str): in ['DEFAULT'], (optional)
      
         '''
      
         pass

      def layer_duplicate():
         '''Make a copy of the active Grease Pencil layer
         '''
      
         pass

      def layer_duplicate_object(object="", mode='ALL'):
         '''Make a copy of the active Grease Pencil layer to new object
            Arguments:
            @object (str): Name of the destination object
               (optional, never None)
            @mode (str): in ['ALL', 'ACTIVE'], (optional)
      
         '''
      
         pass

      def layer_isolate(affect_visibility=False):
         '''Toggle whether the active layer is the only one that can be edited and/or visible
            Arguments:
            @affect_visibility (bool): In addition to toggling the editability, also affect the visibility
               (optional)
      
         '''
      
         pass

      def layer_mask_add(name=""):
         '''Add new layer as masking
            Arguments:
            @name (str): Name of the layer
               (optional, never None)
      
         '''
      
         pass

      def layer_mask_remove():
         '''Remove Layer Mask
         '''
      
         pass

      def layer_merge():
         '''Merge the current layer with the layer below
         '''
      
         pass

      def layer_move(type='UP'):
         '''Move the active Grease Pencil layer up/down in the list
            Arguments:
            @type (str): in ['UP', 'DOWN'], (optional)
      
         '''
      
         pass

      def layer_remove():
         '''Remove active Grease Pencil layer
         '''
      
         pass

      def lock_all():
         '''Lock all Grease Pencil layers to prevent them from being accidentally modified
         '''
      
         pass

      def lock_layer():
         '''Lock and hide any color not used in any layer
         '''
      
         pass

      def material_hide(unselected=False):
         '''Hide selected/unselected Grease Pencil materials
            Arguments:
            @unselected (bool): Hide unselected rather than selected colors
               (optional)
      
         '''
      
         pass

      def material_isolate(affect_visibility=False):
         '''Toggle whether the active material is the only one that is editable and/or visible
            Arguments:
            @affect_visibility (bool): In addition to toggling the editability, also affect the visibility
               (optional)
      
         '''
      
         pass

      def material_lock_all():
         '''Lock all Grease Pencil materials to prevent them from being accidentally modified
         '''
      
         pass

      def material_lock_unused():
         '''Lock any material not used in any selected stroke
         '''
      
         pass

      def material_reveal():
         '''Unhide all hidden Grease Pencil materials
         '''
      
         pass

      def material_to_vertex_color(remove=True, palette=True, selected=False, threshold=3):
         '''Replace materials in strokes with Vertex Color
            Arguments:
            @remove (bool): Remove any unused material after the conversion
               (optional)
            @palette (bool): Create a new palette with colors
               (optional)
            @selected (bool): Convert only selected strokes
               (optional)
            @threshold (int): in [1, 4], (optional)
      
         '''
      
         pass

      def material_unlock_all():
         '''Unlock all Grease Pencil materials so that they can be edited
         '''
      
         pass

      def move_to_layer(layer=0):
         '''Move selected strokes to another layer
            Arguments:
            @layer (int): in [-1, inf], (optional)
      
         '''
      
         pass

      def paintmode_toggle(back=False):
         '''Enter/Exit paint mode for Grease Pencil strokes
            Arguments:
            @back (bool): Return to previous mode
               (optional)
      
         '''
      
         pass

      def paste(type='ACTIVE', paste_back=False):
         '''Paste previously copied strokes to active layer or to original layer
            Arguments:
            @type (str): in ['ACTIVE', 'LAYER'], (optional)
            @paste_back (bool): Add pasted strokes behind all strokes
               (optional)
      
         '''
      
         pass

      def primitive(edges=4, type='BOX', wait_for_input=True):
         '''Create predefined grease pencil stroke shapes
            Arguments:
            @edges (int): Number of polygon edges
               in [2, 128], (optional)
            @type (str): Type of shape
               in ['BOX', 'LINE', 'POLYLINE', 'CIRCLE', 'ARC', 'CURVE'], (optional)
            @wait_for_input (bool): (optional)
      
         '''
      
         pass

      def recalc_geometry():
         '''Update all internal geometry data
         '''
      
         pass

      def reproject(type='VIEW'):
         '''Reproject the selected strokes from the current viewpoint as if they had been newly drawn (e.g. to fix problems from accidental 3D cursor movement or accidental viewport changes, or for matching deforming geometry)
            Arguments:
            @type (str): in ['FRONT', 'SIDE', 'TOP', 'VIEW', 'SURFACE', 'CURSOR'], (optional)
      
         '''
      
         pass

      def reset_transform_fill(mode='ALL'):
         '''Reset any UV transformation and back to default values
            Arguments:
            @mode (str): in ['ALL', 'TRANSLATE', 'ROTATE', 'SCALE'], (optional)
      
         '''
      
         pass

      def reveal(select=True):
         '''Show all Grease Pencil layers
            Arguments:
            @select (bool): (optional)
      
         '''
      
         pass

      def sculpt_paint(stroke=None, wait_for_input=True):
         '''Apply tweaks to strokes by painting over the strokes
            Arguments:
            @stroke (OperatorStrokeElement): Collection of , (optional)
            @wait_for_input (bool): Enter a mini 'sculpt-mode' if enabled, otherwise, exit after drawing a single stroke
               (optional)
      
         '''
      
         pass

      def sculptmode_toggle(back=False):
         '''Enter/Exit sculpt mode for Grease Pencil strokes
            Arguments:
            @back (bool): Return to previous mode
               (optional)
      
         '''
      
         pass

      def select(extend=False, deselect=False, toggle=False, deselect_all=False, entire_strokes=False, location=(0, 0), use_shift_extend=False):
         '''Select Grease Pencil strokes and/or stroke points
            Arguments:
            @extend (bool): Extend selection instead of deselecting everything first
               (optional)
            @deselect (bool): Remove from selection
               (optional)
            @toggle (bool): Toggle the selection
               (optional)
            @deselect_all (bool): Deselect all when nothing under the cursor
               (optional)
            @entire_strokes (bool): Select entire strokes instead of just the nearest stroke vertex
               (optional)
            @location (int): Mouse location
               array of 2 items in [-inf, inf], (optional)
            @use_shift_extend (bool): (optional)
      
         '''
      
         pass

      def select_all(action='TOGGLE'):
         '''Change selection of all Grease Pencil strokes currently visible
            Arguments:
            @action (str): Selection action to execute
               in ['TOGGLE', 'SELECT', 'DESELECT', 'INVERT'], (optional)
      
         '''
      
         pass

      def select_alternate(unselect_ends=True):
         '''Select alternative points in same strokes as already selected points
            Arguments:
            @unselect_ends (bool): Do not select the first and last point of the stroke
               (optional)
      
         '''
      
         pass

      def select_box(xmin=0, xmax=0, ymin=0, ymax=0, wait_for_input=True, mode='SET'):
         '''Select Grease Pencil strokes within a rectangular region
            Arguments:
            @xmin (int): in [-inf, inf], (optional)
            @xmax (int): in [-inf, inf], (optional)
            @ymin (int): in [-inf, inf], (optional)
            @ymax (int): in [-inf, inf], (optional)
            @wait_for_input (bool): (optional)
            @mode (str): in ['SET', 'ADD', 'SUB', 'XOR', 'AND'], (optional)
      
         '''
      
         pass

      def select_circle(x=0, y=0, radius=25, wait_for_input=True, mode='SET'):
         '''Select Grease Pencil strokes using brush selection
            Arguments:
            @x (int): in [-inf, inf], (optional)
            @y (int): in [-inf, inf], (optional)
            @radius (int): in [1, inf], (optional)
            @wait_for_input (bool): (optional)
            @mode (str): in ['SET', 'ADD', 'SUB'], (optional)
      
         '''
      
         pass

      def select_first(only_selected_strokes=False, extend=False):
         '''Select first point in Grease Pencil strokes
            Arguments:
            @only_selected_strokes (bool): Only select the first point of strokes that already have points selected
               (optional)
            @extend (bool): Extend selection instead of deselecting all other selected points
               (optional)
      
         '''
      
         pass

      def select_grouped(type='LAYER'):
         '''Select all strokes with similar characteristics
            Arguments:
            @type (str): in ['LAYER', 'MATERIAL'], (optional)
      
         '''
      
         pass

      def select_lasso(mode='SET', path=None):
         '''Select Grease Pencil strokes using lasso selection
            Arguments:
            @mode (str): in ['SET', 'ADD', 'SUB', 'XOR', 'AND'], (optional)
            @path (OperatorMousePath): Collection of , (optional)
      
         '''
      
         pass

      def select_last(only_selected_strokes=False, extend=False):
         '''Select last point in Grease Pencil strokes
            Arguments:
            @only_selected_strokes (bool): Only select the last point of strokes that already have points selected
               (optional)
            @extend (bool): Extend selection instead of deselecting all other selected points
               (optional)
      
         '''
      
         pass

      def select_less():
         '''Shrink sets of selected Grease Pencil points
         '''
      
         pass

      def select_linked():
         '''Select all points in same strokes as already selected points
         '''
      
         pass

      def select_material(deselect=False):
         '''Select/Deselect all Grease Pencil strokes using current material
            Arguments:
            @deselect (bool): Unselect strokes
               (optional)
      
         '''
      
         pass

      def select_more():
         '''Grow sets of selected Grease Pencil points
         '''
      
         pass

      def select_vertex_color(threshold=0):
         '''Select all points with similar vertex color of current selected
            Arguments:
            @threshold (int): Tolerance of the selection. Higher values select a wider range of similar colors
               in [0, 5], (optional)
      
         '''
      
         pass

      def selection_opacity_toggle():
         '''Hide/Unhide selected points for Grease Pencil strokes setting alpha factor
         '''
      
         pass

      def selectmode_toggle(mode=0):
         '''Set selection mode for Grease Pencil strokes
            Arguments:
            @mode (int): Select mode
               in [0, 2], (optional)
      
         '''
      
         pass

      def set_active_material():
         '''Set the selected stroke material as the active material
         '''
      
         pass

      def snap_cursor_to_selected():
         '''Snap cursor to center of selected points
         '''
      
         pass

      def snap_to_cursor(use_offset=True):
         '''Snap selected points/strokes to the cursor
            Arguments:
            @use_offset (bool): Offset the entire stroke instead of selected points only
               (optional)
      
         '''
      
         pass

      def snap_to_grid():
         '''Snap selected points to the nearest grid points
         '''
      
         pass

      def stroke_apply_thickness():
         '''Apply the thickness change of the layer to its strokes
         '''
      
         pass

      def stroke_arrange(direction='UP'):
         '''Arrange selected strokes up/down in the drawing order of the active layer
            Arguments:
            @direction (str): in ['TOP', 'UP', 'DOWN', 'BOTTOM'], (optional)
      
         '''
      
         pass

      def stroke_caps_set(type='TOGGLE'):
         '''Change Stroke caps mode (rounded or flat)
            Arguments:
            @type (str): in ['TOGGLE', 'START', 'END', 'TOGGLE'], (optional)
      
         '''
      
         pass

      def stroke_change_color(material=""):
         '''Move selected strokes to active material
            Arguments:
            @material (str): Name of the material
               (optional, never None)
      
         '''
      
         pass

      def stroke_cutter(path=None):
         '''Select section and cut
            Arguments:
            @path (OperatorMousePath): Collection of , (optional)
      
         '''
      
         pass

      def stroke_cyclical_set(type='TOGGLE', geometry=False):
         '''Close or open the selected stroke adding an edge from last to first point
            Arguments:
            @type (str): in ['CLOSE', 'OPEN', 'TOGGLE'], (optional)
            @geometry (bool): Create new geometry for closing stroke
               (optional)
      
         '''
      
         pass

      def stroke_flip():
         '''Change direction of the points of the selected strokes
         '''
      
         pass

      def stroke_join(type='JOIN', leave_gaps=False):
         '''Join selected strokes (optionally as new stroke)
            Arguments:
            @type (str): in ['JOIN', 'JOINCOPY'], (optional)
            @leave_gaps (bool): Leave gaps between joined strokes instead of linking them
               (optional)
      
         '''
      
         pass

      def stroke_merge(mode='STROKE', back=False, additive=False, cyclic=False, clear_point=False, clear_stroke=False):
         '''Create a new stroke with the selected stroke points
            Arguments:
            @mode (str): in ['STROKE', 'POINT'], (optional)
            @back (bool): Draw new stroke below all previous strokes
               (optional)
            @additive (bool): Add to previous drawing
               (optional)
            @cyclic (bool): Close new stroke
               (optional)
            @clear_point (bool): Dissolve old selected points
               (optional)
            @clear_stroke (bool): Delete old selected strokes
               (optional)
      
         '''
      
         pass

      def stroke_merge_by_distance(threshold=0.001, use_unselected=False):
         '''Merge points by distance
            Arguments:
            @threshold (float): in [0, 100], (optional)
            @use_unselected (bool): Use whole stroke, not only selected points
               (optional)
      
         '''
      
         pass

      def stroke_merge_material(hue_threshold=0.001, sat_threshold=0.001, val_threshold=0.001):
         '''Replace materials in strokes merging similar
            Arguments:
            @hue_threshold (float): in [0, 1], (optional)
            @sat_threshold (float): in [0, 1], (optional)
            @val_threshold (float): in [0, 1], (optional)
      
         '''
      
         pass

      def stroke_sample(length=0.1):
         '''Sample stroke points to predefined segment length
            Arguments:
            @length (float): in [0, 100], (optional)
      
         '''
      
         pass

      def stroke_separate(mode='POINT'):
         '''Separate the selected strokes or layer in a new grease pencil object
            Arguments:
            @mode (str): in ['POINT', 'STROKE', 'LAYER'], (optional)
      
         '''
      
         pass

      def stroke_simplify(factor=0.0):
         '''Simplify selected stroked reducing number of points
            Arguments:
            @factor (float): in [0, 100], (optional)
      
         '''
      
         pass

      def stroke_simplify_fixed(step=1):
         '''Simplify selected stroked reducing number of points using fixed algorithm
            Arguments:
            @step (int): Number of simplify steps
               in [1, 100], (optional)
      
         '''
      
         pass

      def stroke_smooth(repeat=1, factor=0.5, only_selected=True, smooth_position=True, smooth_thickness=True, smooth_strength=False, smooth_uv=False):
         '''Smooth selected strokes
            Arguments:
            @repeat (int): in [1, 50], (optional)
            @factor (float): in [0, 2], (optional)
            @only_selected (bool): Smooth only selected points in the stroke
               (optional)
            @smooth_position (bool): (optional)
            @smooth_thickness (bool): (optional)
            @smooth_strength (bool): (optional)
            @smooth_uv (bool): (optional)
      
         '''
      
         pass

      def stroke_split():
         '''Split selected points as new stroke on same frame
         '''
      
         pass

      def stroke_subdivide(number_cuts=1, factor=0.0, repeat=1, only_selected=True, smooth_position=True, smooth_thickness=True, smooth_strength=False, smooth_uv=False):
         '''Subdivide between continuous selected points of the stroke adding a point half way between them
            Arguments:
            @number_cuts (int): in [1, 10], (optional)
            @factor (float): in [0, 2], (optional)
            @repeat (int): in [1, 10], (optional)
            @only_selected (bool): Smooth only selected points in the stroke
               (optional)
            @smooth_position (bool): (optional)
            @smooth_thickness (bool): (optional)
            @smooth_strength (bool): (optional)
            @smooth_uv (bool): (optional)
      
         '''
      
         pass

      def stroke_trim():
         '''Trim selected stroke to first loop or intersection
         '''
      
         pass

      def tint_flip():
         '''Switch Tint colors
         '''
      
         pass

      def transform_fill(mode='ROTATE', location=(0.0, 0.0), rotation=0.0, scale=0.0, release_confirm=False):
         '''Transform Grease Pencil Stroke Fill
            Arguments:
            @mode (str): in ['TRANSLATE', 'ROTATE', 'SCALE'], (optional)
            @location (float): array of 2 items in [-inf, inf], (optional)
            @rotation (float): in [-6.28319, 6.28319], (optional)
            @scale (float): in [0.001, 100], (optional)
            @release_confirm (bool): (optional)
      
         '''
      
         pass

      def unlock_all():
         '''Unlock all Grease Pencil layers so that they can be edited
         '''
      
         pass

      def vertex_color_brightness_contrast(mode='STROKE', brightness=0.0, contrast=0.0):
         '''Adjust vertex color brightness/contrast
            Arguments:
            @mode (str): in ['STROKE', 'FILL', 'BOTH'], (optional)
            @brightness (float): in [-100, 100], (optional)
            @contrast (float): in [-100, 100], (optional)
      
         '''
      
         pass

      def vertex_color_hsv(mode='STROKE', h=0.5, s=1.0, v=1.0):
         '''Adjust vertex color HSV values
            Arguments:
            @mode (str): in ['STROKE', 'FILL', 'BOTH'], (optional)
            @h (float): in [0, 1], (optional)
            @s (float): in [0, 2], (optional)
            @v (float): in [0, 2], (optional)
      
         '''
      
         pass

      def vertex_color_invert(mode='STROKE'):
         '''Invert RGB values
            Arguments:
            @mode (str): in ['STROKE', 'FILL', 'BOTH'], (optional)
      
         '''
      
         pass

      def vertex_color_levels(mode='STROKE', offset=0.0, gain=1.0):
         '''Adjust levels of vertex colors
            Arguments:
            @mode (str): in ['STROKE', 'FILL', 'BOTH'], (optional)
            @offset (float): Value to add to colors
               in [-1, 1], (optional)
            @gain (float): Value to multiply colors by
               in [0, inf], (optional)
      
         '''
      
         pass

      def vertex_color_set(mode='STROKE', factor=1.0):
         '''Set active color to all selected vertex
            Arguments:
            @mode (str): in ['STROKE', 'FILL', 'BOTH'], (optional)
            @factor (float): Mix Factor
               in [0.001, 1], (optional)
      
         '''
      
         pass

      def vertex_group_assign():
         '''Assign the selected vertices to the active vertex group
         '''
      
         pass

      def vertex_group_deselect():
         '''Deselect all selected vertices assigned to the active vertex group
         '''
      
         pass

      def vertex_group_invert():
         '''Invert weights to the active vertex group
         '''
      
         pass

      def vertex_group_normalize():
         '''Normalize weights to the active vertex group
         '''
      
         pass

      def vertex_group_normalize_all(lock_active=True):
         '''Normalize all weights of all vertex groups, so that for each vertex, the sum of all weights is 1.0
            Arguments:
            @lock_active (bool): Keep the values of the active group while normalizing others
               (optional)
      
         '''
      
         pass

      def vertex_group_remove_from():
         '''Remove the selected vertices from active or all vertex group(s)
         '''
      
         pass

      def vertex_group_select():
         '''Select all the vertices assigned to the active vertex group
         '''
      
         pass

      def vertex_group_smooth(factor=0.5, repeat=1):
         '''Smooth weights to the active vertex group
            Arguments:
            @factor (float): in [0, 1], (optional)
            @repeat (int): in [1, 10000], (optional)
      
         '''
      
         pass

      def vertex_paint(stroke=None, wait_for_input=True):
         '''Paint stroke points with a color
            Arguments:
            @stroke (OperatorStrokeElement): Collection of , (optional)
            @wait_for_input (bool): (optional)
      
         '''
      
         pass

      def vertexmode_toggle(back=False):
         '''Enter/Exit vertex paint mode for Grease Pencil strokes
            Arguments:
            @back (bool): Return to previous mode
               (optional)
      
         '''
      
         pass

      def weight_paint(stroke=None, wait_for_input=True):
         '''Paint stroke points with a color
            Arguments:
            @stroke (OperatorStrokeElement): Collection of , (optional)
            @wait_for_input (bool): (optional)
      
         '''
      
         pass

      def weightmode_toggle(back=False):
         '''Enter/Exit weight paint mode for Grease Pencil strokes
            Arguments:
            @back (bool): Return to previous mode
               (optional)
      
         '''
      
         pass

   class graph:
      '''Spcecial class, created just to reflect content of bpy.ops.graph'''

      def bake():
         '''Bake selected F-Curves to a set of sampled points defining a similar curve
         '''
      
         pass

      def clean(threshold=0.001, channels=False):
         '''Simplify F-Curves by removing closely spaced keyframes
            Arguments:
            @threshold (float): in [0, inf], (optional)
            @channels (bool): (optional)
      
         '''
      
         pass

      def click_insert(frame=1.0, value=1.0, extend=False):
         '''Insert new keyframe at the cursor position for the active F-Curve
            Arguments:
            @frame (float): Frame to insert keyframe on
               in [-inf, inf], (optional)
            @value (float): Value for keyframe on
               in [-inf, inf], (optional)
            @extend (bool): Extend selection instead of deselecting everything first
               (optional)
      
         '''
      
         pass

      def clickselect(wait_to_deselect_others=False, mouse_x=0, mouse_y=0, extend=False, deselect_all=False, column=False, curves=False):
         '''Select keyframes by clicking on them
            Arguments:
            @wait_to_deselect_others (bool): (optional)
            @mouse_x (int): in [-inf, inf], (optional)
            @mouse_y (int): in [-inf, inf], (optional)
            @extend (bool): Toggle keyframe selection instead of leaving newly selected keyframes only
               (optional)
            @deselect_all (bool): Deselect all when nothing under the cursor
               (optional)
            @column (bool): Select all keyframes that occur on the same frame as the one under the mouse
               (optional)
            @curves (bool): Select all the keyframes in the curve
               (optional)
      
         '''
      
         pass

      def copy():
         '''Copy selected keyframes to the copy/paste buffer
         '''
      
         pass

      def cursor_set(frame=0.0, value=0.0):
         '''Interactively set the current frame and value cursor
            Arguments:
            @frame (float): in [-1.04857e+06, 1.04857e+06], (optional)
            @value (float): in [-inf, inf], (optional)
      
         '''
      
         pass

      def decimate(mode='RATIO', remove_ratio=0.333333, remove_error_margin=0.0):
         '''Decimate F-Curves by removing keyframes that influence the curve shape the least
            Arguments:
            @mode (str): Which mode to use for decimation
               in ['RATIO', 'ERROR'], (optional)
            @remove_ratio (float): The percentage of keyframes to remove
               in [0, 1], (optional)
            @remove_error_margin (float): How much the new decimated curve is allowed to deviate from the original
               in [0, inf], (optional)
      
         '''
      
         pass

      def delete():
         '''Remove all selected keyframes
         '''
      
         pass

      def driver_delete_invalid():
         '''Delete all visible drivers considered invalid
         '''
      
         pass

      def driver_variables_copy():
         '''Copy the driver variables of the active driver
         '''
      
         pass

      def driver_variables_paste(replace=False):
         '''Add copied driver variables to the active driver
            Arguments:
            @replace (bool): Replace existing driver variables, instead of just appending to the end of the existing list
               (optional)
      
         '''
      
         pass

      def duplicate(mode='TRANSLATION'):
         '''Make a copy of all selected keyframes
            Arguments:
            @mode (str): in ['INIT', 'DUMMY', 'TRANSLATION', 'ROTATION', 'RESIZE', 'SKIN_RESIZE', 'TOSPHERE', 'SHEAR', 'BEND', 'SHRINKFATTEN', 'TILT', 'TRACKBALL', 'PUSHPULL', 'CREASE', 'MIRROR', 'BONE_SIZE', 'BONE_ENVELOPE', 'BONE_ENVELOPE_DIST', 'CURVE_SHRINKFATTEN', 'MASK_SHRINKFATTEN', 'GPENCIL_SHRINKFATTEN', 'BONE_ROLL', 'TIME_TRANSLATE', 'TIME_SLIDE', 'TIME_SCALE', 'TIME_EXTEND', 'BAKE_TIME', 'BWEIGHT', 'ALIGN', 'EDGESLIDE', 'SEQSLIDE', 'GPENCIL_OPACITY'], (optional)
      
         '''
      
         pass

      def duplicate_move(GRAPH_OT_duplicate=None, TRANSFORM_OT_transform=None):
         '''Make a copy of all selected keyframes and move them
            Arguments:
            @GRAPH_OT_duplicate (GRAPH_OT_duplicate): Make a copy of all selected keyframes
               (optional)
            @TRANSFORM_OT_transform (TRANSFORM_OT_transform): Transform selected items by mode type
               (optional)
      
         '''
      
         pass

      def easing_type(type='AUTO'):
         '''Set easing type for the F-Curve segments starting from the selected keyframes
            Arguments:
            @type (str): in ['AUTO', 'EASE_IN', 'EASE_OUT', 'EASE_IN_OUT'], (optional)
      
         '''
      
         pass

      def euler_filter():
         '''Fix large jumps and flips in the selected Euler Rotation F-Curves arising from rotation values being clipped when baking physics
         '''
      
         pass

      def extrapolation_type(type='CONSTANT'):
         '''Set extrapolation mode for selected F-Curves
            Arguments:
            @type (str): in ['CONSTANT', 'LINEAR', 'MAKE_CYCLIC', 'CLEAR_CYCLIC'], (optional)
      
         '''
      
         pass

      def fmodifier_add(type='NULL', only_active=True):
         '''Add F-Modifier to the active/selected F-Curves
            Arguments:
            @type (str): in ['NULL', 'GENERATOR', 'FNGENERATOR', 'ENVELOPE', 'CYCLES', 'NOISE', 'LIMITS', 'STEPPED'], (optional)
            @only_active (bool): Only add F-Modifier to active F-Curve
               (optional)
      
         '''
      
         pass

      def fmodifier_copy():
         '''Copy the F-Modifier(s) of the active F-Curve
         '''
      
         pass

      def fmodifier_paste(only_active=True, replace=False):
         '''Add copied F-Modifiers to the selected F-Curves
            Arguments:
            @only_active (bool): Only paste F-Modifiers on active F-Curve
               (optional)
            @replace (bool): Replace existing F-Modifiers, instead of just appending to the end of the existing list
               (optional)
      
         '''
      
         pass

      def frame_jump():
         '''Place the cursor on the midpoint of selected keyframes
         '''
      
         pass

      def ghost_curves_clear():
         '''Clear F-Curve snapshots (Ghosts) for active Graph Editor
         '''
      
         pass

      def ghost_curves_create():
         '''Create snapshot (Ghosts) of selected F-Curves as background aid for active Graph Editor
         '''
      
         pass

      def handle_type(type='FREE'):
         '''Set type of handle for selected keyframes
            Arguments:
            @type (str): in ['FREE', 'ALIGNED', 'VECTOR', 'AUTO', 'AUTO_CLAMPED'], (optional)
      
         '''
      
         pass

      def hide(unselected=False):
         '''Hide selected curves from Graph Editor view
            Arguments:
            @unselected (bool): Hide unselected rather than selected curves
               (optional)
      
         '''
      
         pass

      def interpolation_type(type='CONSTANT'):
         '''Set interpolation mode for the F-Curve segments starting from the selected keyframes
            Arguments:
            @type (str): in ['CONSTANT', 'LINEAR', 'BEZIER', 'SINE', 'QUAD', 'CUBIC', 'QUART', 'QUINT', 'EXPO', 'CIRC', 'BACK', 'BOUNCE', 'ELASTIC'], (optional)
      
         '''
      
         pass

      def keyframe_insert(type='ALL'):
         '''Insert keyframes for the specified channels
            Arguments:
            @type (str): in ['ALL', 'SEL', 'CURSOR_ACTIVE', 'CURSOR_SEL'], (optional)
      
         '''
      
         pass

      def mirror(type='CFRA'):
         '''Flip selected keyframes over the selected mirror line
            Arguments:
            @type (str): in ['CFRA', 'VALUE', 'YAXIS', 'XAXIS', 'MARKER'], (optional)
      
         '''
      
         pass

      def paste(offset='START', merge='MIX', flipped=False):
         '''Paste keyframes from copy/paste buffer for the selected channels, starting on the current frame
            Arguments:
            @offset (str): Paste time offset of keys
               in ['START', 'END', 'RELATIVE', 'NONE'], (optional)
            @merge (str): Method of merging pasted keys and existing
               in ['MIX', 'OVER_ALL', 'OVER_RANGE', 'OVER_RANGE_ALL'], (optional)
            @flipped (bool): Paste keyframes from mirrored bones if they exist
               (optional)
      
         '''
      
         pass

      def previewrange_set():
         '''Automatically set Preview Range based on range of keyframes
         '''
      
         pass

      def reveal(select=True):
         '''Make previously hidden curves visible again in Graph Editor view
            Arguments:
            @select (bool): (optional)
      
         '''
      
         pass

      def sample():
         '''Add keyframes on every frame between the selected keyframes
         '''
      
         pass

      def select_all(action='TOGGLE'):
         '''Toggle selection of all keyframes
            Arguments:
            @action (str): Selection action to execute
               in ['TOGGLE', 'SELECT', 'DESELECT', 'INVERT'], (optional)
      
         '''
      
         pass

      def select_box(axis_range=False, include_handles=True, tweak=False, xmin=0, xmax=0, ymin=0, ymax=0, wait_for_input=True, mode='SET'):
         '''Select all keyframes within the specified region
            Arguments:
            @axis_range (bool): (optional)
            @include_handles (bool): Are handles tested individually against the selection criteria
               (optional)
            @tweak (bool): Operator has been activated using a tweak event
               (optional)
            @xmin (int): in [-inf, inf], (optional)
            @xmax (int): in [-inf, inf], (optional)
            @ymin (int): in [-inf, inf], (optional)
            @ymax (int): in [-inf, inf], (optional)
            @wait_for_input (bool): (optional)
            @mode (str): in ['SET', 'ADD', 'SUB'], (optional)
      
         '''
      
         pass

      def select_circle(x=0, y=0, radius=25, wait_for_input=True, mode='SET'):
         '''Select keyframe points using circle selection
            Arguments:
            @x (int): in [-inf, inf], (optional)
            @y (int): in [-inf, inf], (optional)
            @radius (int): in [1, inf], (optional)
            @wait_for_input (bool): (optional)
            @mode (str): in ['SET', 'ADD', 'SUB'], (optional)
      
         '''
      
         pass

      def select_column(mode='KEYS'):
         '''Select all keyframes on the specified frame(s)
            Arguments:
            @mode (str): in ['KEYS', 'CFRA', 'MARKERS_COLUMN', 'MARKERS_BETWEEN'], (optional)
      
         '''
      
         pass

      def select_lasso(path=None, mode='SET'):
         '''Select keyframe points using lasso selection
            Arguments:
            @path (OperatorMousePath): Collection of , (optional)
            @mode (str): in ['SET', 'ADD', 'SUB'], (optional)
      
         '''
      
         pass

      def select_leftright(mode='CHECK', extend=False):
         '''Select keyframes to the left or the right of the current frame
            Arguments:
            @mode (str): in ['CHECK', 'LEFT', 'RIGHT'], (optional)
            @extend (bool): (optional)
      
         '''
      
         pass

      def select_less():
         '''Deselect keyframes on ends of selection islands
         '''
      
         pass

      def select_linked():
         '''Select keyframes occurring in the same F-Curves as selected ones
         '''
      
         pass

      def select_more():
         '''Select keyframes beside already selected ones
         '''
      
         pass

      def smooth():
         '''Apply weighted moving means to make selected F-Curves less bumpy
         '''
      
         pass

      def snap(type='CFRA'):
         '''Snap selected keyframes to the chosen times/values
            Arguments:
            @type (str): in ['CFRA', 'VALUE', 'NEAREST_FRAME', 'NEAREST_SECOND', 'NEAREST_MARKER', 'HORIZONTAL'], (optional)
      
         '''
      
         pass

      def sound_bake(filepath="", filter_blender=False, filter_backup=False, filter_image=False, filter_movie=True, filter_python=False, filter_font=False, filter_sound=True, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=9, show_multiview=False, use_multiview=False, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA', low=0.0, high=100000.0, attack=0.005, release=0.2, threshold=0.0, use_accumulate=False, use_additive=False, use_square=False, sthreshold=0.1):
         '''Bakes a sound wave to selected F-Curves
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @show_multiview (bool): (optional)
            @use_multiview (bool): (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
            @low (float): Cutoff frequency of a high-pass filter that is applied to the audio data
               in [0, 100000], (optional)
            @high (float): Cutoff frequency of a low-pass filter that is applied to the audio data
               in [0, 100000], (optional)
            @attack (float): Value for the hull curve calculation that tells how fast the hull curve can rise (the lower the value the steeper it can rise)
               in [0, 2], (optional)
            @release (float): Value for the hull curve calculation that tells how fast the hull curve can fall (the lower the value the steeper it can fall)
               in [0, 5], (optional)
            @threshold (float): Minimum amplitude value needed to influence the hull curve
               in [0, 1], (optional)
            @use_accumulate (bool): Only the positive differences of the hull curve amplitudes are summarized to produce the output
               (optional)
            @use_additive (bool): The amplitudes of the hull curve are summarized (or, when Accumulate is enabled, both positive and negative differences are accumulated)
               (optional)
            @use_square (bool): The output is a square curve (negative values always result in -1, and positive ones in 1)
               (optional)
            @sthreshold (float): Square only: all values with an absolute amplitude lower than that result in 0
               in [0, 1], (optional)
      
         '''
      
         pass

      def view_all(include_handles=True):
         '''Reset viewable area to show full keyframe range
            Arguments:
            @include_handles (bool): Include handles of keyframes when calculating extents
               (optional)
      
         '''
      
         pass

      def view_frame():
         '''Move the view to the playhead
         '''
      
         pass

      def view_selected(include_handles=True):
         '''Reset viewable area to show selected keyframe range
            Arguments:
            @include_handles (bool): Include handles of keyframes when calculating extents
               (optional)
      
         '''
      
         pass

   class image:
      '''Spcecial class, created just to reflect content of bpy.ops.image'''

      def add_render_slot():
         '''Add a new render slot
         '''
      
         pass

      def change_frame(frame=0):
         '''Interactively change the current frame number
            Arguments:
            @frame (int): in [-1048574, 1048574], (optional)
      
         '''
      
         pass

      def clear_render_border():
         '''Clear the boundaries of the render region and disable render region
         '''
      
         pass

      def clear_render_slot():
         '''Clear the currently selected render slot
         '''
      
         pass

      def curves_point_set(point='BLACK_POINT', size=1):
         '''Set black point or white point for curves
            Arguments:
            @point (str): Set black point or white point for curves
               in ['BLACK_POINT', 'WHITE_POINT'], (optional)
            @size (int): in [1, 128], (optional)
      
         '''
      
         pass

      def cycle_render_slot(reverse=False):
         '''Cycle through all non-void render slots
            Arguments:
            @reverse (bool): (optional)
      
         '''
      
         pass

      def external_edit(filepath=""):
         '''Edit image in an external application
            Arguments:
            @filepath (str): (optional, never None)
      
         '''
      
         pass

      def invert(invert_r=False, invert_g=False, invert_b=False, invert_a=False):
         '''Invert image's channels
            Arguments:
            @invert_r (bool): Invert Red Channel
               (optional)
            @invert_g (bool): Invert Green Channel
               (optional)
            @invert_b (bool): Invert Blue Channel
               (optional)
            @invert_a (bool): Invert Alpha Channel
               (optional)
      
         '''
      
         pass

      def match_movie_length():
         '''Set image's user's length to the one of this video
         '''
      
         pass

      def new(name="Untitled", width=1024, height=1024, color=(0.0, 0.0, 0.0, 1.0), alpha=True, generated_type='BLANK', float=False, use_stereo_3d=False, tiled=False):
         '''Create a new image
            Arguments:
            @name (str): Image data-block name
               (optional, never None)
            @width (int): Image width
               in [1, inf], (optional)
            @height (int): Image height
               in [1, inf], (optional)
            @color (float): Default fill color
               array of 4 items in [0, inf], (optional)
            @alpha (bool): Create an image with an alpha channel
               (optional)
            @generated_type (str): Fill the image with a grid for UV map testing
               in ['BLANK', 'UV_GRID', 'COLOR_GRID'], (optional)
            @float (bool): Create image with 32 bit floating point bit depth
               (optional)
            @use_stereo_3d (bool): Create an image with left and right views
               (optional)
            @tiled (bool): Create a tiled image
               (optional)
      
         '''
      
         pass

      def open(filepath="", directory="", files=None, hide_props_region=True, filter_blender=False, filter_backup=False, filter_image=True, filter_movie=True, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=9, relative_path=True, show_multiview=False, use_multiview=False, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA', use_sequence_detection=True, use_udim_detecting=True):
         '''Open image
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @directory (str): Directory of the file
               (optional, never None)
            @files (OperatorFileListElement): Collection of , (optional)
            @hide_props_region (bool): Collapse the region displaying the operator settings
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @relative_path (bool): Select the file relative to the blend file
               (optional)
            @show_multiview (bool): (optional)
            @use_multiview (bool): (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
            @use_sequence_detection (bool): Automatically detect animated sequences in selected images (based on file names)
               (optional)
            @use_udim_detecting (bool): Detect selected UDIM files and load all matching tiles
               (optional)
      
         '''
      
         pass

      def pack():
         '''Pack an image as embedded data into the .blend file
         '''
      
         pass

      def project_apply():
         '''Project edited image back onto the object
         '''
      
         pass

      def project_edit():
         '''Edit a snapshot of the view-port in an external image editor
         '''
      
         pass

      def read_viewlayers():
         '''Read all the current scene's view layers from cache, as needed
         '''
      
         pass

      def reload():
         '''Reload current image from disk
         '''
      
         pass

      def remove_render_slot():
         '''Remove the current render slot
         '''
      
         pass

      def render_border(xmin=0, xmax=0, ymin=0, ymax=0, wait_for_input=True):
         '''Set the boundaries of the render region and enable render region
            Arguments:
            @xmin (int): in [-inf, inf], (optional)
            @xmax (int): in [-inf, inf], (optional)
            @ymin (int): in [-inf, inf], (optional)
            @ymax (int): in [-inf, inf], (optional)
            @wait_for_input (bool): (optional)
      
         '''
      
         pass

      def replace(filepath="", hide_props_region=True, filter_blender=False, filter_backup=False, filter_image=True, filter_movie=True, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=9, relative_path=True, show_multiview=False, use_multiview=False, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA'):
         '''Replace current image by another one from disk
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @hide_props_region (bool): Collapse the region displaying the operator settings
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @relative_path (bool): Select the file relative to the blend file
               (optional)
            @show_multiview (bool): (optional)
            @use_multiview (bool): (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
      
         '''
      
         pass

      def resize(size=(0, 0)):
         '''Resize the image
            Arguments:
            @size (int): array of 2 items in [1, inf], (optional)
      
         '''
      
         pass

      def sample(size=1):
         '''Use mouse to sample a color in current image
            Arguments:
            @size (int): in [1, 128], (optional)
      
         '''
      
         pass

      def sample_line(xstart=0, xend=0, ystart=0, yend=0, cursor=5):
         '''Sample a line and show it in Scope panels
            Arguments:
            @xstart (int): in [-inf, inf], (optional)
            @xend (int): in [-inf, inf], (optional)
            @ystart (int): in [-inf, inf], (optional)
            @yend (int): in [-inf, inf], (optional)
            @cursor (int): Mouse cursor style to use during the modal operator
               in [0, inf], (optional)
      
         '''
      
         pass

      def save():
         '''Save the image with current name and settings
         '''
      
         pass

      def save_all_modified():
         '''Save all modified images
         '''
      
         pass

      def save_as(save_as_render=False, copy=False, filepath="", check_existing=True, filter_blender=False, filter_backup=False, filter_image=True, filter_movie=True, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=9, relative_path=True, show_multiview=False, use_multiview=False, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA'):
         '''Save the image with another name and/or settings
            Arguments:
            @save_as_render (bool): Apply render part of display transform when saving byte image
               (optional)
            @copy (bool): Create a new image file without modifying the current image in blender
               (optional)
            @filepath (str): Path to file
               (optional, never None)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @relative_path (bool): Select the file relative to the blend file
               (optional)
            @show_multiview (bool): (optional)
            @use_multiview (bool): (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
      
         '''
      
         pass

      def save_sequence():
         '''Save a sequence of images
         '''
      
         pass

      def tile_add(number=1002, count=1, label="", fill=True, color=(0.0, 0.0, 0.0, 1.0), generated_type='BLANK', width=1024, height=1024, float=False, alpha=True):
         '''Adds a tile to the image
            Arguments:
            @number (int): UDIM number of the tile
               in [1001, 1999], (optional)
            @count (int): How many tiles to add
               in [1, inf], (optional)
            @label (str): Optional tile label
               (optional, never None)
            @fill (bool): Fill new tile with a generated image
               (optional)
            @color (float): Default fill color
               array of 4 items in [0, inf], (optional)
            @generated_type (str): Fill the image with a grid for UV map testing
               in ['BLANK', 'UV_GRID', 'COLOR_GRID'], (optional)
            @width (int): Image width
               in [1, inf], (optional)
            @height (int): Image height
               in [1, inf], (optional)
            @float (bool): Create image with 32 bit floating point bit depth
               (optional)
            @alpha (bool): Create an image with an alpha channel
               (optional)
      
         '''
      
         pass

      def tile_fill(color=(0.0, 0.0, 0.0, 1.0), generated_type='BLANK', width=1024, height=1024, float=False, alpha=True):
         '''Fill the current tile with a generated image
            Arguments:
            @color (float): Default fill color
               array of 4 items in [0, inf], (optional)
            @generated_type (str): Fill the image with a grid for UV map testing
               in ['BLANK', 'UV_GRID', 'COLOR_GRID'], (optional)
            @width (int): Image width
               in [1, inf], (optional)
            @height (int): Image height
               in [1, inf], (optional)
            @float (bool): Create image with 32 bit floating point bit depth
               (optional)
            @alpha (bool): Create an image with an alpha channel
               (optional)
      
         '''
      
         pass

      def tile_remove():
         '''Removes a tile from the image
         '''
      
         pass

      def unpack(method='USE_LOCAL', id=""):
         '''Save an image packed in the .blend file to disk
            Arguments:
            @method (str): How to unpack
               in ['REMOVE', 'USE_LOCAL', 'WRITE_LOCAL', 'USE_ORIGINAL', 'WRITE_ORIGINAL'], (optional)
            @id (str): Image data-block name to unpack
               (optional, never None)
      
         '''
      
         pass

      def view_all(fit_view=False):
         '''View the entire image
            Arguments:
            @fit_view (bool): Fit frame to the viewport
               (optional)
      
         '''
      
         pass

      def view_center_cursor():
         '''Center the view so that the cursor is in the middle of the view
         '''
      
         pass

      def view_ndof():
         '''Use a 3D mouse device to pan/zoom the view
         '''
      
         pass

      def view_pan(offset=(0.0, 0.0)):
         '''Pan the view
            Arguments:
            @offset (float): Offset in floating point units, 1.0 is the width and height of the image
               array of 2 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def view_selected():
         '''View all selected UVs
         '''
      
         pass

      def view_zoom(factor=0.0, use_cursor_init=True):
         '''Zoom in/out the image
            Arguments:
            @factor (float): Zoom factor, values higher than 1.0 zoom in, lower values zoom out
               in [-inf, inf], (optional)
            @use_cursor_init (bool): Allow the initial mouse position to be used
               (optional)
      
         '''
      
         pass

      def view_zoom_border(xmin=0, xmax=0, ymin=0, ymax=0, wait_for_input=True, zoom_out=False):
         '''Zoom in the view to the nearest item contained in the border
            Arguments:
            @xmin (int): in [-inf, inf], (optional)
            @xmax (int): in [-inf, inf], (optional)
            @ymin (int): in [-inf, inf], (optional)
            @ymax (int): in [-inf, inf], (optional)
            @wait_for_input (bool): (optional)
            @zoom_out (bool): (optional)
      
         '''
      
         pass

      def view_zoom_in(location=(0.0, 0.0)):
         '''Zoom in the image (centered around 2D cursor)
            Arguments:
            @location (float): Cursor location in screen coordinates
               array of 2 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def view_zoom_out(location=(0.0, 0.0)):
         '''Zoom out the image (centered around 2D cursor)
            Arguments:
            @location (float): Cursor location in screen coordinates
               array of 2 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def view_zoom_ratio(ratio=0.0):
         '''Set zoom ratio of the view
            Arguments:
            @ratio (float): Zoom ratio, 1.0 is 1:1, higher is zoomed in, lower is zoomed out
               in [-inf, inf], (optional)
      
         '''
      
         pass

   class import_anim:
      '''Spcecial class, created just to reflect content of bpy.ops.import_anim'''

      def bvh(filepath="", filter_glob="*.bvh", target='ARMATURE', global_scale=1.0, frame_start=1, use_fps_scale=False, update_scene_fps=False, update_scene_duration=False, use_cyclic=False, rotate_mode='NATIVE', axis_forward='-Z', axis_up='Y'):
         '''Load a BVH motion capture file
            Arguments:
            @filepath (str): Filepath used for importing the file
               (optional, never None)
            @filter_glob (str): (optional, never None)
            @target (str): Import target type
               in ['ARMATURE', 'OBJECT'], (optional)
            @global_scale (float): Scale the BVH by this value
               in [0.0001, 1e+06], (optional)
            @frame_start (int): Starting frame for the animation
               in [-inf, inf], (optional)
            @use_fps_scale (bool): Scale the framerate from the BVH to the current scenes, otherwise each BVH frame maps directly to a Blender frame
               (optional)
            @update_scene_fps (bool): Set the scene framerate to that of the BVH file (note that this nullifies the 'Scale FPS' option, as the scale will be 1:1)
               (optional)
            @update_scene_duration (bool): Extend the scene's duration to the BVH duration (never shortens the scene)
               (optional)
            @use_cyclic (bool): Loop the animation playback
               (optional)
            @rotate_mode (str): Rotation conversion
               in ['QUATERNION', 'NATIVE', 'XYZ', 'XZY', 'YXZ', 'YZX', 'ZXY', 'ZYX'], (optional)
            @axis_forward (str): in ['X', 'Y', 'Z', '-X', '-Y', '-Z'], (optional)
            @axis_up (str): in ['X', 'Y', 'Z', '-X', '-Y', '-Z'], (optional)
      
         '''
      
         pass

   class import_curve:
      '''Spcecial class, created just to reflect content of bpy.ops.import_curve'''

      def svg(filepath="", filter_glob="*.svg"):
         '''Load a SVG file
            Arguments:
            @filepath (str): Filepath used for importing the file
               (optional, never None)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

   class import_mesh:
      '''Spcecial class, created just to reflect content of bpy.ops.import_mesh'''

      def ply(filepath="", files=None, hide_props_region=True, directory="", filter_glob="*.ply"):
         '''Load a PLY geometry file
            Arguments:
            @filepath (str): Filepath used for importing the file
               (optional, never None)
            @files (OperatorFileListElement): File path used for importing the PLY file
               Collection of , (optional)
            @hide_props_region (bool): Collapse the region displaying the operator settings
               (optional)
            @directory (str): (optional, never None)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

      def stl(filepath="", filter_glob="*.stl", files=None, directory="", global_scale=1.0, use_scene_unit=False, use_facet_normal=False, axis_forward='Y', axis_up='Z'):
         '''Load STL triangle mesh data
            Arguments:
            @filepath (str): Filepath used for importing the file
               (optional, never None)
            @filter_glob (str): (optional, never None)
            @files (OperatorFileListElement): Collection of , (optional)
            @directory (str): (optional, never None)
            @global_scale (float): in [1e-06, 1e+06], (optional)
            @use_scene_unit (bool): Apply current scene's unit (as defined by unit scale) to imported data
               (optional)
            @use_facet_normal (bool): Use (import) facet normals (note that this will still give flat shading)
               (optional)
            @axis_forward (str): in ['X', 'Y', 'Z', '-X', '-Y', '-Z'], (optional)
            @axis_up (str): in ['X', 'Y', 'Z', '-X', '-Y', '-Z'], (optional)
      
         '''
      
         pass

   class import_scene:
      '''Spcecial class, created just to reflect content of bpy.ops.import_scene'''

      def fbx(filepath="", directory="", filter_glob="*.fbx", files=None, ui_tab='MAIN', use_manual_orientation=False, global_scale=1.0, bake_space_transform=False, use_custom_normals=True, use_image_search=True, use_alpha_decals=False, decal_offset=0.0, use_anim=True, anim_offset=1.0, use_subsurf=False, use_custom_props=True, use_custom_props_enum_as_string=True, ignore_leaf_bones=False, force_connect_children=False, automatic_bone_orientation=False, primary_bone_axis='Y', secondary_bone_axis='X', use_prepost_rot=True, axis_forward='-Z', axis_up='Y'):
         '''Load a FBX file
            Arguments:
            @filepath (str): Filepath used for importing the file
               (optional, never None)
            @directory (str): (optional, never None)
            @filter_glob (str): (optional, never None)
            @files (OperatorFileListElement): Collection of , (optional)
            @ui_tab (str): Import options categories
               in ['MAIN', 'ARMATURE'], (optional)
            @use_manual_orientation (bool): Specify orientation and scale, instead of using embedded data in FBX file
               (optional)
            @global_scale (float): in [0.001, 1000], (optional)
            @bake_space_transform (bool): Bake space transform into object data, avoids getting unwanted rotations to objects when target space is not aligned with Blender's space (WARNING! experimental option, use at own risks, known broken with armatures/animations)
               (optional)
            @use_custom_normals (bool): Import custom normals, if available (otherwise Blender will recompute them)
               (optional)
            @use_image_search (bool): Search subdirs for any associated images (WARNING: may be slow)
               (optional)
            @use_alpha_decals (bool): Treat materials with alpha as decals (no shadow casting)
               (optional)
            @decal_offset (float): Displace geometry of alpha meshes
               in [0, 1], (optional)
            @use_anim (bool): Import FBX animation
               (optional)
            @anim_offset (float): Offset to apply to animation during import, in frames
               in [-inf, inf], (optional)
            @use_subsurf (bool): Import FBX subdivision information as subdivision surface modifiers
               (optional)
            @use_custom_props (bool): Import user properties as custom properties
               (optional)
            @use_custom_props_enum_as_string (bool): Store enumeration values as strings
               (optional)
            @ignore_leaf_bones (bool): Ignore the last bone at the end of each chain (used to mark the length of the previous bone)
               (optional)
            @force_connect_children (bool): Force connection of children bones to their parent, even if their computed head/tail positions do not match (can be useful with pure-joints-type armatures)
               (optional)
            @automatic_bone_orientation (bool): Try to align the major bone axis with the bone children
               (optional)
            @primary_bone_axis (str): in ['X', 'Y', 'Z', '-X', '-Y', '-Z'], (optional)
            @secondary_bone_axis (str): in ['X', 'Y', 'Z', '-X', '-Y', '-Z'], (optional)
            @use_prepost_rot (bool): Use pre/post rotation from FBX transform (you may have to disable that in some cases)
               (optional)
            @axis_forward (str): in ['X', 'Y', 'Z', '-X', '-Y', '-Z'], (optional)
            @axis_up (str): in ['X', 'Y', 'Z', '-X', '-Y', '-Z'], (optional)
      
         '''
      
         pass

      def gltf(filepath="", filter_glob="*.glb;*.gltf", files=None, loglevel=0, import_pack_images=True, import_shading='NORMALS', bone_heuristic='TEMPERANCE', guess_original_bind_pose=True):
         '''Load a glTF 2.0 file
            Arguments:
            @filepath (str): Filepath used for importing the file
               (optional, never None)
            @filter_glob (str): (optional, never None)
            @files (OperatorFileListElement): Collection of , (optional)
            @loglevel (int): Log Level
               in [-inf, inf], (optional)
            @import_pack_images (bool): Pack all images into .blend file
               (optional)
            @import_shading (str): How normals are computed during import
               in ['NORMALS', 'FLAT', 'SMOOTH'], (optional)
            @bone_heuristic (str): Heuristic for placing bones. Tries to make bones pretty
               in ['BLENDER', 'TEMPERANCE', 'FORTUNE'], (optional)
            @guess_original_bind_pose (bool): Try to guess the original bind pose for skinned meshes from the inverse bind matrices.
            When off, use default/rest pose as bind pose
               (optional)
      
         '''
      
         pass

      def obj(filepath="", filter_glob="*.obj;*.mtl", use_edges=True, use_smooth_groups=True, use_split_objects=True, use_split_groups=False, use_groups_as_vgroups=False, use_image_search=True, split_mode='ON', global_clight_size=0.0, axis_forward='-Z', axis_up='Y'):
         '''Load a Wavefront OBJ File
            Arguments:
            @filepath (str): Filepath used for importing the file
               (optional, never None)
            @filter_glob (str): (optional, never None)
            @use_edges (bool): Import lines and faces with 2 verts as edge
               (optional)
            @use_smooth_groups (bool): Surround smooth groups by sharp edges
               (optional)
            @use_split_objects (bool): Import OBJ Objects into Blender Objects
               (optional)
            @use_split_groups (bool): Import OBJ Groups into Blender Objects
               (optional)
            @use_groups_as_vgroups (bool): Import OBJ groups as vertex groups
               (optional)
            @use_image_search (bool): Search subdirs for any associated images (Warning, may be slow)
               (optional)
            @split_mode (str): in ['ON', 'OFF'], (optional)
            @global_clight_size (float): Clamp bounds under this value (zero to disable)
               in [0, 1000], (optional)
            @axis_forward (str): in ['X', 'Y', 'Z', '-X', '-Y', '-Z'], (optional)
            @axis_up (str): in ['X', 'Y', 'Z', '-X', '-Y', '-Z'], (optional)
      
         '''
      
         pass

      def x3d(filepath="", filter_glob="*.x3d;*.wrl", axis_forward='Z', axis_up='Y'):
         '''Import an X3D or VRML2 file
            Arguments:
            @filepath (str): Filepath used for importing the file
               (optional, never None)
            @filter_glob (str): (optional, never None)
            @axis_forward (str): in ['X', 'Y', 'Z', '-X', '-Y', '-Z'], (optional)
            @axis_up (str): in ['X', 'Y', 'Z', '-X', '-Y', '-Z'], (optional)
      
         '''
      
         pass

   class info:
      '''Spcecial class, created just to reflect content of bpy.ops.info'''

      def report_copy():
         '''Copy selected reports to Clipboard
         '''
      
         pass

      def report_delete():
         '''Delete selected reports
         '''
      
         pass

      def report_replay():
         '''Replay selected reports
         '''
      
         pass

      def reports_display_update():
         '''Update the display of reports in Blender UI (internal use)
         '''
      
         pass

      def select_all(action='SELECT'):
         '''Change selection of all visible reports
            Arguments:
            @action (str): Selection action to execute
               in ['TOGGLE', 'SELECT', 'DESELECT', 'INVERT'], (optional)
      
         '''
      
         pass

      def select_box(xmin=0, xmax=0, ymin=0, ymax=0, wait_for_input=True, mode='SET'):
         '''Toggle box selection
            Arguments:
            @xmin (int): in [-inf, inf], (optional)
            @xmax (int): in [-inf, inf], (optional)
            @ymin (int): in [-inf, inf], (optional)
            @ymax (int): in [-inf, inf], (optional)
            @wait_for_input (bool): (optional)
            @mode (str): in ['SET', 'ADD', 'SUB'], (optional)
      
         '''
      
         pass

      def select_pick(report_index=0, extend=False):
         '''Select reports by index
            Arguments:
            @report_index (int): Index of the report
               in [0, inf], (optional)
            @extend (bool): Extend report selection
               (optional)
      
         '''
      
         pass

   class lattice:
      '''Spcecial class, created just to reflect content of bpy.ops.lattice'''

      def flip(axis='U'):
         '''Mirror all control points without inverting the lattice deform
            Arguments:
            @axis (str): Coordinates along this axis get flipped
               in ['U', 'V', 'W'], (optional)
      
         '''
      
         pass

      def make_regular():
         '''Set UVW control points a uniform distance apart
         '''
      
         pass

      def select_all(action='TOGGLE'):
         '''Change selection of all UVW control points
            Arguments:
            @action (str): Selection action to execute
               in ['TOGGLE', 'SELECT', 'DESELECT', 'INVERT'], (optional)
      
         '''
      
         pass

      def select_less():
         '''Deselect vertices at the boundary of each selection region
         '''
      
         pass

      def select_mirror(axis={'X'}, extend=False):
         '''Select mirrored lattice points
            Arguments:
            @axis (str): set in {'X', 'Y', 'Z'}, (optional)
            @extend (bool): Extend the selection
               (optional)
      
         '''
      
         pass

      def select_more():
         '''Select vertex directly linked to already selected ones
         '''
      
         pass

      def select_random(percent=50.0, seed=0, action='SELECT'):
         '''Randomly select UVW control points
            Arguments:
            @percent (float): Percentage of objects to select randomly
               in [0, 100], (optional)
            @seed (int): Seed for the random number generator
               in [0, inf], (optional)
            @action (str): Selection action to execute
               in ['SELECT', 'DESELECT'], (optional)
      
         '''
      
         pass

      def select_ungrouped(extend=False):
         '''Select vertices without a group
            Arguments:
            @extend (bool): Extend the selection
               (optional)
      
         '''
      
         pass

   class marker:
      '''Spcecial class, created just to reflect content of bpy.ops.marker'''

      def add():
         '''Add a new time marker
         '''
      
         pass

      def camera_bind():
         '''Bind the selected camera to a marker on the current frame
         '''
      
         pass

      def delete():
         '''Delete selected time marker(s)
         '''
      
         pass

      def duplicate(frames=0):
         '''Duplicate selected time marker(s)
            Arguments:
            @frames (int): in [-inf, inf], (optional)
      
         '''
      
         pass

      def make_links_scene(scene=''):
         '''Copy selected markers to another scene
            Arguments:
            @scene (str): in [], (optional)
      
         '''
      
         pass

      def move(frames=0, tweak=False):
         '''Move selected time marker(s)
            Arguments:
            @frames (int): in [-inf, inf], (optional)
            @tweak (bool): Operator has been activated using a tweak event
               (optional)
      
         '''
      
         pass

      def rename(name="RenamedMarker"):
         '''Rename first selected time marker
            Arguments:
            @name (str): New name for marker
               (optional, never None)
      
         '''
      
         pass

      def select(wait_to_deselect_others=False, mouse_x=0, mouse_y=0, extend=False, camera=False):
         '''Select time marker(s)
            Arguments:
            @wait_to_deselect_others (bool): (optional)
            @mouse_x (int): in [-inf, inf], (optional)
            @mouse_y (int): in [-inf, inf], (optional)
            @extend (bool): Extend the selection
               (optional)
            @camera (bool): Select the camera
               (optional)
      
         '''
      
         pass

      def select_all(action='TOGGLE'):
         '''Change selection of all time markers
            Arguments:
            @action (str): Selection action to execute
               in ['TOGGLE', 'SELECT', 'DESELECT', 'INVERT'], (optional)
      
         '''
      
         pass

      def select_box(xmin=0, xmax=0, ymin=0, ymax=0, wait_for_input=True, mode='SET', tweak=False):
         '''Select all time markers using box selection
            Arguments:
            @xmin (int): in [-inf, inf], (optional)
            @xmax (int): in [-inf, inf], (optional)
            @ymin (int): in [-inf, inf], (optional)
            @ymax (int): in [-inf, inf], (optional)
            @wait_for_input (bool): (optional)
            @mode (str): in ['SET', 'ADD', 'SUB'], (optional)
            @tweak (bool): Operator has been activated using a tweak event
               (optional)
      
         '''
      
         pass

   class mask:
      '''Spcecial class, created just to reflect content of bpy.ops.mask'''

      def add_feather_vertex(location=(0.0, 0.0)):
         '''Add vertex to feather
            Arguments:
            @location (float): Location of vertex in normalized space
               array of 2 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def add_feather_vertex_slide(MASK_OT_add_feather_vertex=None, MASK_OT_slide_point=None):
         '''Add new vertex to feather and slide it
            Arguments:
            @MASK_OT_add_feather_vertex (MASK_OT_add_feather_vertex): Add vertex to feather
               (optional)
            @MASK_OT_slide_point (MASK_OT_slide_point): Slide control points
               (optional)
      
         '''
      
         pass

      def add_vertex(location=(0.0, 0.0)):
         '''Add vertex to active spline
            Arguments:
            @location (float): Location of vertex in normalized space
               array of 2 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def add_vertex_slide(MASK_OT_add_vertex=None, MASK_OT_slide_point=None):
         '''Add new vertex and slide it
            Arguments:
            @MASK_OT_add_vertex (MASK_OT_add_vertex): Add vertex to active spline
               (optional)
            @MASK_OT_slide_point (MASK_OT_slide_point): Slide control points
               (optional)
      
         '''
      
         pass

      def copy_splines():
         '''Copy selected splines to clipboard
         '''
      
         pass

      def cyclic_toggle():
         '''Toggle cyclic for selected splines
         '''
      
         pass

      def delete():
         '''Delete selected control points or splines
         '''
      
         pass

      def duplicate():
         '''Duplicate selected control points and segments between them
         '''
      
         pass

      def duplicate_move(MASK_OT_duplicate=None, TRANSFORM_OT_translate=None):
         '''Duplicate mask and move
            Arguments:
            @MASK_OT_duplicate (MASK_OT_duplicate): Duplicate selected control points and segments between them
               (optional)
            @TRANSFORM_OT_translate (TRANSFORM_OT_translate): Move selected items
               (optional)
      
         '''
      
         pass

      def feather_weight_clear():
         '''Reset the feather weight to zero
         '''
      
         pass

      def handle_type_set(type='AUTO'):
         '''Set type of handles for selected control points
            Arguments:
            @type (str): Spline type
               in ['AUTO', 'VECTOR', 'ALIGNED', 'ALIGNED_DOUBLESIDE', 'FREE'], (optional)
      
         '''
      
         pass

      def hide_view_clear(select=True):
         '''Reveal the layer by setting the hide flag
            Arguments:
            @select (bool): (optional)
      
         '''
      
         pass

      def hide_view_set(unselected=False):
         '''Hide the layer by setting the hide flag
            Arguments:
            @unselected (bool): Hide unselected rather than selected layers
               (optional)
      
         '''
      
         pass

      def layer_move(direction='UP'):
         '''Move the active layer up/down in the list
            Arguments:
            @direction (str): Direction to move the active layer
               in ['UP', 'DOWN'], (optional)
      
         '''
      
         pass

      def layer_new(name=""):
         '''Add new mask layer for masking
            Arguments:
            @name (str): Name of new mask layer
               (optional, never None)
      
         '''
      
         pass

      def layer_remove():
         '''Remove mask layer
         '''
      
         pass

      def new(name=""):
         '''Create new mask
            Arguments:
            @name (str): Name of new mask
               (optional, never None)
      
         '''
      
         pass

      def normals_make_consistent():
         '''Re-calculate the direction of selected handles
         '''
      
         pass

      def parent_clear():
         '''Clear the mask's parenting
         '''
      
         pass

      def parent_set():
         '''Set the mask's parenting
         '''
      
         pass

      def paste_splines():
         '''Paste splines from clipboard
         '''
      
         pass

      def primitive_circle_add(size=100.0, location=(0.0, 0.0)):
         '''Add new circle-shaped spline
            Arguments:
            @size (float): Size of new circle
               in [-inf, inf], (optional)
            @location (float): Location of new circle
               array of 2 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def primitive_square_add(size=100.0, location=(0.0, 0.0)):
         '''Add new square-shaped spline
            Arguments:
            @size (float): Size of new circle
               in [-inf, inf], (optional)
            @location (float): Location of new circle
               array of 2 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def select(extend=False, deselect=False, toggle=False, deselect_all=False, location=(0.0, 0.0)):
         '''Select spline points
            Arguments:
            @extend (bool): Extend selection instead of deselecting everything first
               (optional)
            @deselect (bool): Remove from selection
               (optional)
            @toggle (bool): Toggle the selection
               (optional)
            @deselect_all (bool): Deselect all when nothing under the cursor
               (optional)
            @location (float): Location of vertex in normalized space
               array of 2 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def select_all(action='TOGGLE'):
         '''Change selection of all curve points
            Arguments:
            @action (str): Selection action to execute
               in ['TOGGLE', 'SELECT', 'DESELECT', 'INVERT'], (optional)
      
         '''
      
         pass

      def select_box(xmin=0, xmax=0, ymin=0, ymax=0, wait_for_input=True, mode='SET'):
         '''Select curve points using box selection
            Arguments:
            @xmin (int): in [-inf, inf], (optional)
            @xmax (int): in [-inf, inf], (optional)
            @ymin (int): in [-inf, inf], (optional)
            @ymax (int): in [-inf, inf], (optional)
            @wait_for_input (bool): (optional)
            @mode (str): in ['SET', 'ADD', 'SUB'], (optional)
      
         '''
      
         pass

      def select_circle(x=0, y=0, radius=25, wait_for_input=True, mode='SET'):
         '''Select curve points using circle selection
            Arguments:
            @x (int): in [-inf, inf], (optional)
            @y (int): in [-inf, inf], (optional)
            @radius (int): in [1, inf], (optional)
            @wait_for_input (bool): (optional)
            @mode (str): in ['SET', 'ADD', 'SUB'], (optional)
      
         '''
      
         pass

      def select_lasso(path=None, mode='SET'):
         '''Select curve points using lasso selection
            Arguments:
            @path (OperatorMousePath): Collection of , (optional)
            @mode (str): in ['SET', 'ADD', 'SUB'], (optional)
      
         '''
      
         pass

      def select_less():
         '''Deselect spline points at the boundary of each selection region
         '''
      
         pass

      def select_linked():
         '''Select all curve points linked to already selected ones
         '''
      
         pass

      def select_linked_pick(deselect=False):
         '''(De)select all points linked to the curve under the mouse cursor
            Arguments:
            @deselect (bool): (optional)
      
         '''
      
         pass

      def select_more():
         '''Select more spline points connected to initial selection
         '''
      
         pass

      def shape_key_clear():
         '''Remove mask shape keyframe for active mask layer at the current frame
         '''
      
         pass

      def shape_key_feather_reset():
         '''Reset feather weights on all selected points animation values
         '''
      
         pass

      def shape_key_insert():
         '''Insert mask shape keyframe for active mask layer at the current frame
         '''
      
         pass

      def shape_key_rekey(location=True, feather=True):
         '''Recalculate animation data on selected points for frames selected in the dopesheet
            Arguments:
            @location (bool): (optional)
            @feather (bool): (optional)
      
         '''
      
         pass

      def slide_point(slide_feather=False, is_new_point=False):
         '''Slide control points
            Arguments:
            @slide_feather (bool): First try to slide feather instead of vertex
               (optional)
            @is_new_point (bool): Newly created vertex is being slid
               (optional)
      
         '''
      
         pass

      def slide_spline_curvature():
         '''Slide a point on the spline to define it's curvature
         '''
      
         pass

      def switch_direction():
         '''Switch direction of selected splines
         '''
      
         pass

   class material:
      '''Spcecial class, created just to reflect content of bpy.ops.material'''

      def copy():
         '''Copy the material settings and nodes
         '''
      
         pass

      def new():
         '''Add a new material
         '''
      
         pass

      def paste():
         '''Paste the material settings and nodes
         '''
      
         pass

   class mb_lab:
      '''Spcecial class, created just to reflect content of bpy.ops.mb_lab'''

      def updater_check_now():
         '''Check now for an update to the mb_lab addon
         '''
      
         pass

      def updater_install_popup(clean_install=False, ignore_enum='install'):
         '''Popup menu to check and display current updates available
            Arguments:
            @clean_install (bool): If enabled, completely clear the addon's folder before installing new update, creating a fresh install
               (optional)
            @ignore_enum (str): Decide to install, ignore, or defer new addon update
               in ['install', 'ignore', 'defer'], (optional)
      
         '''
      
         pass

      def updater_update_now(clean_install=False):
         '''Update to the latest version of the mb_lab addon
            Arguments:
            @clean_install (bool): If enabled, completely clear the addon's folder before installing new update, creating a fresh install
               (optional)
      
         '''
      
         pass

      def updater_update_target(target='', clean_install=False):
         '''Install a targeted version of the mb_lab addon
            Arguments:
            @target (str): Select the version to install
               in [], (optional)
            @clean_install (bool): If enabled, completely clear the addon's folder before installing new update, creating a fresh install
               (optional)
      
         '''
      
         pass

   class mball:
      '''Spcecial class, created just to reflect content of bpy.ops.mball'''

      def delete_metaelems():
         '''Delete selected metaelement(s)
         '''
      
         pass

      def duplicate_metaelems():
         '''Duplicate selected metaelement(s)
         '''
      
         pass

      def duplicate_move(MBALL_OT_duplicate_metaelems=None, TRANSFORM_OT_translate=None):
         '''Make copies of the selected metaelements and move them
            Arguments:
            @MBALL_OT_duplicate_metaelems (MBALL_OT_duplicate_metaelems): Duplicate selected metaelement(s)
               (optional)
            @TRANSFORM_OT_translate (TRANSFORM_OT_translate): Move selected items
               (optional)
      
         '''
      
         pass

      def hide_metaelems(unselected=False):
         '''Hide (un)selected metaelement(s)
            Arguments:
            @unselected (bool): Hide unselected rather than selected
               (optional)
      
         '''
      
         pass

      def reveal_metaelems(select=True):
         '''Reveal all hidden metaelements
            Arguments:
            @select (bool): (optional)
      
         '''
      
         pass

      def select_all(action='TOGGLE'):
         '''Change selection of all meta elements
            Arguments:
            @action (str): Selection action to execute
               in ['TOGGLE', 'SELECT', 'DESELECT', 'INVERT'], (optional)
      
         '''
      
         pass

      def select_random_metaelems(percent=50.0, seed=0, action='SELECT'):
         '''Randomly select metaelements
            Arguments:
            @percent (float): Percentage of objects to select randomly
               in [0, 100], (optional)
            @seed (int): Seed for the random number generator
               in [0, inf], (optional)
            @action (str): Selection action to execute
               in ['SELECT', 'DESELECT'], (optional)
      
         '''
      
         pass

      def select_similar(type='TYPE', threshold=0.1):
         '''Select similar metaballs by property types
            Arguments:
            @type (str): in ['TYPE', 'RADIUS', 'STIFFNESS', 'ROTATION'], (optional)
            @threshold (float): in [0, inf], (optional)
      
         '''
      
         pass

   class mbast:
      '''Spcecial class, created just to reflect content of bpy.ops.mbast'''

      def add_hair_preset():
         '''Add Hair Color to Presets
         '''
      
         pass

      def auto_modelling():
         '''Analyze the mesh form and return a verisimilar human
         '''
      
         pass

      def auto_modelling_mix():
         '''Return a verisimilar human with multiple interpolations that make it nearest to average
         '''
      
         pass

      def button_adjustrotation():
         '''Correct the animation with an offset to the bone angle
         '''
      
         pass

      def button_assets_off():
         '''Close assets and hair panel
         '''
      
         pass

      def button_assets_on():
         '''Open assets and hair panel
         '''
      
         pass

      def button_automodelling_off():
         '''Close automodelling panel
         '''
      
         pass

      def button_automodelling_on():
         '''Open automodelling panel
         '''
      
         pass

      def button_display_off():
         '''Close skin editor panel
         '''
      
         pass

      def button_display_on():
         '''Open skin editor panel
         '''
      
         pass

      def button_expressions_off():
         '''Close expressions panel
         '''
      
         pass

      def button_expressions_on():
         '''Open expressions panel
         '''
      
         pass

      def button_facerig_off():
         '''Close face rig panel
         '''
      
         pass

      def button_facerig_on():
         '''Open face rig panel
         '''
      
         pass

      def button_file_off():
         '''Close file panel
         '''
      
         pass

      def button_file_on():
         '''Open file panel
         '''
      
         pass

      def button_finalize_off():
         '''Close finalize panel
         '''
      
         pass

      def button_finalize_on():
         '''Open finalize panel
         '''
      
         pass

      def button_library_off():
         '''Close character library panel
         '''
      
         pass

      def button_library_on():
         '''Open character library panel
         '''
      
         pass

      def button_load_base_body(filepath="", filter_glob="*.json"):
         '''Load all vertices as a base body model.
            Arguments:
            @filepath (str): Filepath used for importing the file
               (optional, never None)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

      def button_load_bvh_adjustments(filepath="", filter_glob="*.json"):
         '''Import the json file containing bvh animation adjustments
            Arguments:
            @filepath (str): Filepath used for importing the file
               (optional, never None)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

      def button_load_sculpted_body(filepath="", filter_glob="*.json"):
         '''Load all vertices as a sculpted body model.
            Arguments:
            @filepath (str): Filepath used for importing the file
               (optional, never None)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

      def button_parameters_off():
         '''Close details panel
         '''
      
         pass

      def button_parameters_on():
         '''Open details panel
         '''
      
         pass

      def button_pose_off():
         '''Close pose panel
         '''
      
         pass

      def button_pose_on():
         '''Open pose panel
         '''
      
         pass

      def button_proxy_fit_off():
         '''Close proxy panel
         '''
      
         pass

      def button_proxy_fit_on():
         '''Open proxy panel
         '''
      
         pass

      def button_random_off():
         '''Close random generator panel
         '''
      
         pass

      def button_random_on():
         '''Open random generator panel
         '''
      
         pass

      def button_rest_pose_off():
         '''Close rest pose panel
         '''
      
         pass

      def button_rest_pose_on():
         '''Open rest pose panel
         '''
      
         pass

      def button_save_body_as_is(filepath="", check_existing=True, filter_glob="*.json"):
         '''Save all vertices of the actual body shown on screen in a file.
            Arguments:
            @filepath (str): Filepath used for exporting the file
               (optional, never None)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

      def button_save_bvh_adjustments(filepath="", check_existing=True, filter_glob="*.json"):
         '''Save bone corrections into a local json file
            Arguments:
            @filepath (str): Filepath used for exporting the file
               (optional, never None)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

      def button_save_final_morph():
         '''Finalize the morph, create or open the morphs file, replace or append new morph
         '''
      
         pass

      def button_skin_off():
         '''Close skin editor panel
         '''
      
         pass

      def button_skin_on():
         '''Open skin editor panel
         '''
      
         pass

      def button_store_base_vertices():
         '''!WARNING! UNDO UNAVAILABLE!!!
         '''
      
         pass

      def button_store_work_in_progress():
         '''Name and location are automatic
         '''
      
         pass

      def button_utilities_off():
         '''Close utilities panel
         '''
      
         pass

      def button_utilities_on():
         '''Open utilities panel
         '''
      
         pass

      def change_hair():
         '''Change Selected Hair Color
         '''
      
         pass

      def character_generator():
         '''Generate a new character according the parameters.
         '''
      
         pass

      def corrective_disable():
         '''Disable corrective smooth modifier in viewport
         '''
      
         pass

      def corrective_enable():
         '''Enable corrective smooth modifier in viewport
         '''
      
         pass

      def create_face_rig():
         '''Create the character's face Rig
         '''
      
         pass

      def del_hair_preset():
         '''Remove Hair Color from Presets
         '''
      
         pass

      def delete_face_rig():
         '''Delete the character's face Rig
         '''
      
         pass

      def delete_rotations():
         '''Delete Humanoid Rotation Limits for Character
         '''
      
         pass

      def displacement_disable():
         '''Disable displacement modifier
         '''
      
         pass

      def displacement_enable():
         '''Enable displacement preview (Warning: it will slow down the morphing)
         '''
      
         pass

      def export_allimages(filepath="", check_existing=True, filter_glob="*.png"):
         '''Export all texture maps for the character
            Arguments:
            @filepath (str): Filepath used for exporting the file
               (optional, never None)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

      def export_character(filepath="", check_existing=True, filter_glob="*.json"):
         '''Export parameters for the character
            Arguments:
            @filepath (str): Filepath used for exporting the file
               (optional, never None)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

      def export_dermimage(filepath="", check_existing=True, filter_glob="*.png"):
         '''Export texture maps for the character
            Arguments:
            @filepath (str): Filepath used for exporting the file
               (optional, never None)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

      def export_dispimage(filepath="", check_existing=True, filter_glob="*.png"):
         '''Export texture maps for the character
            Arguments:
            @filepath (str): Filepath used for exporting the file
               (optional, never None)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

      def export_measures(filepath="", check_existing=True, filter_glob="*.json"):
         '''Export parameters for the character
            Arguments:
            @filepath (str): Filepath used for exporting the file
               (optional, never None)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

      def finalize_character():
         '''Finalize converting the parameters in shapekeys. Warning: after the conversion the character will be no longer modifiable using MB-Lab Tools
         '''
      
         pass

      def finalize_character_and_images(filepath="", check_existing=True, filter_glob="*.png"):
         '''Finalize, saving all the textures and converting the parameters in shapekeys. Warning: after the conversion the character will be no longer modifiable using MB-Lab tools
            Arguments:
            @filepath (str): Filepath used for exporting the file
               (optional, never None)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

      def humanoid_rot_limits():
         '''Add Humanoid Rotation Limits to Character
         '''
      
         pass

      def import_character(filepath="", filter_glob="*.json"):
         '''Import parameters for the character
            Arguments:
            @filepath (str): Filepath used for importing the file
               (optional, never None)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

      def import_dermal(filepath="", filter_glob="*.png"):
         '''Import texture maps for the character
            Arguments:
            @filepath (str): Filepath used for importing the file
               (optional, never None)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

      def import_displacement(filepath="", filter_glob="*.png"):
         '''Import texture maps for the character
            Arguments:
            @filepath (str): Filepath used for importing the file
               (optional, never None)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

      def import_measures(filepath="", filter_glob="*.json"):
         '''Import parameters for the character
            Arguments:
            @filepath (str): Filepath used for importing the file
               (optional, never None)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

      def init_character():
         '''Create the character selected above
         '''
      
         pass

      def keyframe_expression():
         '''Insert a keyframe expression at the current time
         '''
      
         pass

      def load_animation(filepath="", filter_glob="*.bvh"):
         '''Import the animation from a bvh motion capture file
            Arguments:
            @filepath (str): Filepath used for importing the file
               (optional, never None)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

      def load_base_template():
         '''Import the humanoid template for proxies reference
         '''
      
         pass

      def manual_hair():
         '''Add Hair to Character from Selected Polygons
         '''
      
         pass

      def measures_apply():
         '''Fit the character to the measures
         '''
      
         pass

      def particle_hair():
         '''Add Hair to Character
         '''
      
         pass

      def pose_load(filepath="", filter_glob="*.json"):
         '''Import parameters for the character
            Arguments:
            @filepath (str): Filepath used for importing the file
               (optional, never None)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

      def pose_reset():
         '''Reset the angles of the armature bones
         '''
      
         pass

      def pose_save(filepath="", check_existing=True, filter_glob="*.json"):
         '''Export pose
            Arguments:
            @filepath (str): Filepath used for exporting the file
               (optional, never None)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

      def proxy_fit():
         '''Fit the selected proxy to the character
         '''
      
         pass

      def proxy_removefit():
         '''Remove fitting, so the proxy can be modified and then fitted again
         '''
      
         pass

      def rep_hair_preset():
         '''Replace Removed Hair Color
         '''
      
         pass

      def reset_allproperties():
         '''Reset all character parameters
         '''
      
         pass

      def reset_categoryonly():
         '''Reset the parameters for the current category
         '''
      
         pass

      def reset_expression():
         '''Reset the expression
         '''
      
         pass

      def restpose_load(filepath="", filter_glob="*.json"):
         '''Import parameters for the character
            Arguments:
            @filepath (str): Filepath used for importing the file
               (optional, never None)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

      def restpose_save(filepath="", check_existing=True, filter_glob="*.json"):
         '''Export pose
            Arguments:
            @filepath (str): Filepath used for exporting the file
               (optional, never None)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

      def skindisplace_calculate():
         '''Calculate and apply the skin details using displace modifier
         '''
      
         pass

      def subdivision_disable():
         '''Disable subdivision modifier
         '''
      
         pass

      def subdivision_enable():
         '''Enable subdivision preview (Warning: it will slow down the morphing)
         '''
      
         pass

   class mbcrea:
      '''Spcecial class, created just to reflect content of bpy.ops.mbcrea'''

      def button_adaptation_tools_off():
         '''All tools to change / adapt from an existing model
         '''
      
         pass

      def button_adaptation_tools_on():
         '''All tools to change / adapt from an existing model
         '''
      
         pass

      def button_backup_morph():
         '''Create a backup of source file
            Name : same_name_aaaa-mm-dd-hh-mn-se
         '''
      
         pass

      def button_check_morphs_file():
         '''Check if morphs file has all needed morphs
            for other topics like measures
            The result is a file named "morphs_name.json.txt"
         '''
      
         pass

      def button_check_transf(filepath="", filter_glob="*.json"):
         '''Check the compatibility of a file to current model.
            The result is stored under same directory, same name+.txt
            Arguments:
            @filepath (str): Filepath used for importing the file
               (optional, never None)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

      def button_compat_tools_off():
         '''All tools to make a model compatible with MB-Lab
         '''
      
         pass

      def button_compat_tools_on():
         '''All tools to make a model compatible with MB-Lab
         '''
      
         pass

      def button_copy_morph():
         '''Copy selected morphs to file
         '''
      
         pass

      def button_create_config():
         '''Save current on-going project
            in a configuration file.
         '''
      
         pass

      def button_create_directories():
         '''Button for create all needed
            directories for the projet
         '''
      
         pass

      def button_create_measures_file():
         '''Create a file about measures for this character
         '''
      
         pass

      def button_create_offset_point():
         '''Create an offset point attached to the current joint.
         '''
      
         pass

      def button_create_polygs():
         '''Button to create the list of polygons
            needed for body types
            Don't forget to select an object first.
         '''
      
         pass

      def button_create_polygs_cancel():
         '''Button to create cancel actual action
         '''
      
         pass

      def button_create_polygs_go():
         '''Button to create the list of faces
            needed for body types
            Don't forget to select an object first.
         '''
      
         pass

      def button_del_chara_content():
         '''Button for delete character's content
         '''
      
         pass

      def button_del_template_content():
         '''Button for delete template's content
         '''
      
         pass

      def button_delete_character():
         '''Button for delete character name and its content
         '''
      
         pass

      def button_delete_morph():
         '''! NO UNDO ! Delete selected morphs
         '''
      
         pass

      def button_delete_offset_point():
         '''Delete the offset point attached to the current joint.
         '''
      
         pass

      def button_delete_template():
         '''Button for delete template name and its content
         '''
      
         pass

      def button_for_tests():
         '''Test things
         '''
      
         pass

      def button_init_compat():
         '''Are you sure ?
            No undo possible !
         '''
      
         pass

      def button_init_compat_off():
         '''Init all names and tools for
            creating a new compatible model
         '''
      
         pass

      def button_init_compat_on():
         '''Init all names and tools for
            creating a new compatible model
         '''
      
         pass

      def button_joints_base_add():
         '''Add the last selected point.
         '''
      
         pass

      def button_joints_base_current():
         '''Seek the current points.
         '''
      
         pass

      def button_joints_base_file():
         '''Create a file with all necessary joints for skeleton.
         '''
      
         pass

      def button_joints_base_next():
         '''Seek the next points.
         '''
      
         pass

      def button_joints_base_previous():
         '''Seek the previous points.
         '''
      
         pass

      def button_joints_base_recover():
         '''Recover all points from file.
         '''
      
         pass

      def button_joints_base_remove_all():
         '''Remove all points.
         '''
      
         pass

      def button_joints_base_remove_last():
         '''Remove the last point on list.
         '''
      
         pass

      def button_joints_base_remove_selected():
         '''Remove the selected point.
         '''
      
         pass

      def button_joints_offset_file():
         '''Create a file for creating all offsets needed for some joints.
         '''
      
         pass

      def button_load_blend():
         '''Load a blend file with needed models
         '''
      
         pass

      def button_load_config():
         '''Load a configuration file
         '''
      
         pass

      def button_load_transf(filepath="", filter_glob="*.json"):
         '''Load a transformation file for the current model.
            Arguments:
            @filepath (str): Filepath used for importing the file
               (optional, never None)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

      def button_measures_add():
         '''Add the last selected point.
         '''
      
         pass

      def button_measures_add_2points():
         '''Show the symmetry of the last selected point.
         '''
      
         pass

      def button_measures_current():
         '''Seek the current points/girth.
         '''
      
         pass

      def button_measures_inconsistancies():
         '''Check the inconsistancies between
            the file and associated morph files
            The result is a file named "measures_name.json.txt"
         '''
      
         pass

      def button_measures_next():
         '''Seek the next points/girth.
         '''
      
         pass

      def button_measures_previous():
         '''Seek the previous points/girth.
         '''
      
         pass

      def button_measures_recover():
         '''Recover all points from file.
         '''
      
         pass

      def button_measures_remove_all():
         '''Remove all points.
         '''
      
         pass

      def button_measures_remove_last():
         '''Remove the last point on list.
         '''
      
         pass

      def button_measures_remove_selected():
         '''Remove the selected point.
         '''
      
         pass

      def button_measures_save_weights():
         '''Save all weights in memory.
            They are not saved in file
         '''
      
         pass

      def button_move_morph():
         '''Move selected morphs to file
         '''
      
         pass

      def button_recover_offset_point():
         '''Recover the deleted offset point.
            Works only
         '''
      
         pass

      def button_rename_morph():
         '''Rename selected morph
         '''
      
         pass

      def button_save_chara_vertices():
         '''Button for saving the character
            as vertices under /data/vertices.
         '''
      
         pass

      def button_save_character():
         '''Button for save the current character.
         '''
      
         pass

      def button_save_config():
         '''Button for save the current state
            of the configuration file.
         '''
      
         pass

      def button_save_final_base_expression():
         '''Finalize the expression,
            ask for min and max files,
            create or open the expression file,
            replace or append new expression
         '''
      
         pass

      def button_save_final_comb_expression():
         '''Finalize the face expression,
            create or open the face expression file,
            replace or create new face expression
         '''
      
         pass

      def button_save_final_comb_morph():
         '''Finalize the combined morph,
            create or open the morphs file,
            replace or append new morph
         '''
      
         pass

      def button_save_joints_base_file():
         '''Button for saving the joints file.
         '''
      
         pass

      def button_save_joints_offset_file():
         '''Button for saving the offset file.
         '''
      
         pass

      def button_save_measures_file():
         '''Button for saving the measures file.
         '''
      
         pass

      def button_save_offset_point():
         '''Set the actual location in data base.
            The file is saved elsewhere.
         '''
      
         pass

      def button_save_phenotype():
         '''Finalize the phenotype
         '''
      
         pass

      def button_save_preset():
         '''Finalize the preset
         '''
      
         pass

      def button_save_template():
         '''Button for save the current template.
         '''
      
         pass

      def button_save_vgroups_base_file():
         '''Save in file the base vgroups.
         '''
      
         pass

      def button_save_vgroups_muscles_file():
         '''Save in file the muscles vgroups.
         '''
      
         pass

      def button_select():
         '''Select vertices, edges or/and faces.
         '''
      
         pass

      def button_template_morphs_file():
         '''Create a file with all necessary morphs for
            engine to work properly.
         '''
      
         pass

      def button_transfor_load():
         '''Button for loading content in selected category and morph
         '''
      
         pass

      def button_transfor_save():
         '''Button for saving content in selected category and morph.
            Same button for a simple step or a finalization
         '''
      
         pass

      def button_transfor_save_current(filter_glob="*.json"):
         '''Export the data base of the current model.
            i.e its data base, not the changes from user.
            Arguments:
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

      def button_vgroups_base_file():
         '''Create a file with all necessary names for vgroups.
         '''
      
         pass

      def button_vgroups_muscles_file():
         '''Create a file with all necessary names for vgroups.
         '''
      
         pass

      def import_expression(filepath="", filter_glob="*.json"):
         '''Import parameters for the character
            Arguments:
            @filepath (str): Filepath used for importing the file
               (optional, never None)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

      def rescan_morph_files():
         '''reset all selected morphs and rescan directory + input file
         '''
      
         pass

      def reset_expressionscategory():
         '''Reset the parameters for expressions
         '''
      
         pass

      def update_comb_morphs():
         '''Update character with actual parameters
         '''
      
         pass

   class mesh:
      '''Spcecial class, created just to reflect content of bpy.ops.mesh'''

      def average_normals(average_type='CUSTOM_NORMAL', weight=50, threshold=0.01):
         '''Average custom normals of selected vertices
            Arguments:
            @average_type (str): Averaging method
               in ['CUSTOM_NORMAL', 'FACE_AREA', 'CORNER_ANGLE'], (optional)
            @weight (int): Weight applied per face
               in [1, 100], (optional)
            @threshold (float): Threshold value for different weights to be considered equal
               in [0, 10], (optional)
      
         '''
      
         pass

      def beautify_fill(angle_limit=3.14159):
         '''Rearrange some faces to try to get less degenerated geometry
            Arguments:
            @angle_limit (float): Angle limit
               in [0, 3.14159], (optional)
      
         '''
      
         pass

      def bevel(offset_type='OFFSET', offset=0.0, offset_pct=0.0, segments=1, profile=0.5, vertex_only=False, clamp_overlap=False, loop_slide=True, mark_seam=False, mark_sharp=False, material=-1, harden_normals=False, face_strength_mode='NONE', miter_outer='SHARP', miter_inner='SHARP', spread=0.1, use_custom_profile=False, vmesh_method='ADJ', release_confirm=False):
         '''Cut into selected items at an angle to create bevel or chamfer
            Arguments:
            @offset_type (str): What distance Width measures
               in ['OFFSET', 'WIDTH', 'DEPTH', 'PERCENT'], (optional)
            @offset (float): Bevel amount
               in [0, 1e+06], (optional)
            @offset_pct (float): Bevel amount for percentage method
               in [0, 100], (optional)
            @segments (int): Segments for curved edge
               in [1, 1000], (optional)
            @profile (float): Controls profile shape (0.5 = round)
               in [0, 1], (optional)
            @vertex_only (bool): Bevel only vertices
               (optional)
            @clamp_overlap (bool): Do not allow beveled edges/vertices to overlap each other
               (optional)
            @loop_slide (bool): Prefer sliding along edges to even widths
               (optional)
            @mark_seam (bool): Mark Seams along beveled edges
               (optional)
            @mark_sharp (bool): Mark beveled edges as sharp
               (optional)
            @material (int): Material for bevel faces (-1 means use adjacent faces)
               in [-1, inf], (optional)
            @harden_normals (bool): Match normals of new faces to adjacent faces
               (optional)
            @face_strength_mode (str): Whether to set face strength, and which faces to set face strength on
               in ['NONE', 'NEW', 'AFFECTED', 'ALL'], (optional)
            @miter_outer (str): Pattern to use for outside of miters
               in ['SHARP', 'PATCH', 'ARC'], (optional)
            @miter_inner (str): Pattern to use for inside of miters
               in ['SHARP', 'ARC'], (optional)
            @spread (float): Amount to spread arcs for arc inner miters
               in [0, 1e+06], (optional)
            @use_custom_profile (bool): Use a custom profile for the bevel
               (optional)
            @vmesh_method (str): The method to use to create meshes at intersections
               in ['ADJ', 'CUTOFF'], (optional)
            @release_confirm (bool): (optional)
      
         '''
      
         pass

      def bisect(plane_co=(0.0, 0.0, 0.0), plane_no=(0.0, 0.0, 0.0), use_fill=False, clear_inner=False, clear_outer=False, threshold=0.0001, xstart=0, xend=0, ystart=0, yend=0, cursor=5):
         '''Cut geometry along a plane (click-drag to define plane)
            Arguments:
            @plane_co (float): A point on the plane
               array of 3 items in [-inf, inf], (optional)
            @plane_no (float): The direction the plane points
               array of 3 items in [-1, 1], (optional)
            @use_fill (bool): Fill in the cut
               (optional)
            @clear_inner (bool): Remove geometry behind the plane
               (optional)
            @clear_outer (bool): Remove geometry in front of the plane
               (optional)
            @threshold (float): Preserves the existing geometry along the cut plane
               in [0, 10], (optional)
            @xstart (int): in [-inf, inf], (optional)
            @xend (int): in [-inf, inf], (optional)
            @ystart (int): in [-inf, inf], (optional)
            @yend (int): in [-inf, inf], (optional)
            @cursor (int): Mouse cursor style to use during the modal operator
               in [0, inf], (optional)
      
         '''
      
         pass

      def blend_from_shape(shape='', blend=1.0, add=True):
         '''Blend in shape from a shape key
            Arguments:
            @shape (str): Shape key to use for blending
               in [], (optional)
            @blend (float): Blending factor
               in [-1000, 1000], (optional)
            @add (bool): Add rather than blend between shapes
               (optional)
      
         '''
      
         pass

      def bridge_edge_loops(type='SINGLE', use_merge=False, merge_factor=0.5, twist_offset=0, number_cuts=0, interpolation='PATH', smoothness=1.0, profile_shape_factor=0.0, profile_shape='SMOOTH'):
         '''Create a bridge of faces between two or more selected edge loops
            Arguments:
            @type (str): Method of bridging multiple loops
               in ['SINGLE', 'CLOSED', 'PAIRS'], (optional)
            @use_merge (bool): Merge rather than creating faces
               (optional)
            @merge_factor (float): in [0, 1], (optional)
            @twist_offset (int): Twist offset for closed loops
               in [-1000, 1000], (optional)
            @number_cuts (int): in [0, 1000], (optional)
            @interpolation (str): Interpolation method
               in ['LINEAR', 'PATH', 'SURFACE'], (optional)
            @smoothness (float): Smoothness factor
               in [0, 1000], (optional)
            @profile_shape_factor (float): How much intermediary new edges are shrunk/expanded
               in [-1000, 1000], (optional)
            @profile_shape (str): Shape of the profile
               in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR'], (optional)
      
         '''
      
         pass

      def colors_reverse():
         '''Flip direction of vertex colors inside faces
         '''
      
         pass

      def colors_rotate(use_ccw=False):
         '''Rotate vertex colors inside faces
            Arguments:
            @use_ccw (bool): (optional)
      
         '''
      
         pass

      def convex_hull(delete_unused=True, use_existing_faces=True, make_holes=False, join_triangles=True, face_threshold=0.698132, shape_threshold=0.698132, uvs=False, vcols=False, seam=False, sharp=False, materials=False):
         '''Enclose selected vertices in a convex polyhedron
            Arguments:
            @delete_unused (bool): Delete selected elements that are not used by the hull
               (optional)
            @use_existing_faces (bool): Skip hull triangles that are covered by a pre-existing face
               (optional)
            @make_holes (bool): Delete selected faces that are used by the hull
               (optional)
            @join_triangles (bool): Merge adjacent triangles into quads
               (optional)
            @face_threshold (float): Face angle limit
               in [0, 3.14159], (optional)
            @shape_threshold (float): Shape angle limit
               in [0, 3.14159], (optional)
            @uvs (bool): (optional)
            @vcols (bool): (optional)
            @seam (bool): (optional)
            @sharp (bool): (optional)
            @materials (bool): (optional)
      
         '''
      
         pass

      def customdata_custom_splitnormals_add():
         '''Add a custom split normals layer, if none exists yet
         '''
      
         pass

      def customdata_custom_splitnormals_clear():
         '''Remove the custom split normals layer, if it exists
         '''
      
         pass

      def customdata_mask_clear():
         '''Clear vertex sculpt masking data from the mesh
         '''
      
         pass

      def customdata_skin_add():
         '''Add a vertex skin layer
         '''
      
         pass

      def customdata_skin_clear():
         '''Clear vertex skin layer
         '''
      
         pass

      def decimate(ratio=1.0, use_vertex_group=False, vertex_group_factor=1.0, invert_vertex_group=False, use_symmetry=False, symmetry_axis='Y'):
         '''Simplify geometry by collapsing edges
            Arguments:
            @ratio (float): in [0, 1], (optional)
            @use_vertex_group (bool): Use active vertex group as an influence
               (optional)
            @vertex_group_factor (float): Vertex group strength
               in [0, 1000], (optional)
            @invert_vertex_group (bool): Invert vertex group influence
               (optional)
            @use_symmetry (bool): Maintain symmetry on an axis
               (optional)
            @symmetry_axis (str): Axis of symmetry
               in ['X', 'Y', 'Z'], (optional)
      
         '''
      
         pass

      def delete(type='VERT'):
         '''Delete selected vertices, edges or faces
            Arguments:
            @type (str): Method used for deleting mesh data
               in ['VERT', 'EDGE', 'FACE', 'EDGE_FACE', 'ONLY_FACE'], (optional)
      
         '''
      
         pass

      def delete_edgeloop(use_face_split=True):
         '''Delete an edge loop by merging the faces on each side
            Arguments:
            @use_face_split (bool): Split off face corners to maintain surrounding geometry
               (optional)
      
         '''
      
         pass

      def delete_loose(use_verts=True, use_edges=True, use_faces=False):
         '''Delete loose vertices, edges or faces
            Arguments:
            @use_verts (bool): Remove loose vertices
               (optional)
            @use_edges (bool): Remove loose edges
               (optional)
            @use_faces (bool): Remove loose faces
               (optional)
      
         '''
      
         pass

      def dissolve_degenerate(threshold=0.0001):
         '''Dissolve zero area faces and zero length edges
            Arguments:
            @threshold (float): Maximum distance between elements to merge
               in [1e-06, 50], (optional)
      
         '''
      
         pass

      def dissolve_edges(use_verts=True, use_face_split=False):
         '''Dissolve edges, merging faces
            Arguments:
            @use_verts (bool): Dissolve remaining vertices
               (optional)
            @use_face_split (bool): Split off face corners to maintain surrounding geometry
               (optional)
      
         '''
      
         pass

      def dissolve_faces(use_verts=False):
         '''Dissolve faces
            Arguments:
            @use_verts (bool): Dissolve remaining vertices
               (optional)
      
         '''
      
         pass

      def dissolve_limited(angle_limit=0.0872665, use_dissolve_boundaries=False, delimit={'NORMAL'}):
         '''Dissolve selected edges and verts, limited by the angle of surrounding geometry
            Arguments:
            @angle_limit (float): Angle limit
               in [0, 3.14159], (optional)
            @use_dissolve_boundaries (bool): Dissolve all vertices in between face boundaries
               (optional)
            @delimit (str): Delimit dissolve operation
               set in {'NORMAL', 'MATERIAL', 'SEAM', 'SHARP', 'UV'}, (optional)
      
         '''
      
         pass

      def dissolve_mode(use_verts=False, use_face_split=False, use_boundary_tear=False):
         '''Dissolve geometry based on the selection mode
            Arguments:
            @use_verts (bool): Dissolve remaining vertices
               (optional)
            @use_face_split (bool): Split off face corners to maintain surrounding geometry
               (optional)
            @use_boundary_tear (bool): Split off face corners instead of merging faces
               (optional)
      
         '''
      
         pass

      def dissolve_verts(use_face_split=False, use_boundary_tear=False):
         '''Dissolve verts, merge edges and faces
            Arguments:
            @use_face_split (bool): Split off face corners to maintain surrounding geometry
               (optional)
            @use_boundary_tear (bool): Split off face corners instead of merging faces
               (optional)
      
         '''
      
         pass

      def dupli_extrude_cursor(rotate_source=True):
         '''Duplicate and extrude selected vertices, edges or faces towards the mouse cursor
            Arguments:
            @rotate_source (bool): Rotate initial selection giving better shape
               (optional)
      
         '''
      
         pass

      def duplicate(mode=1):
         '''Duplicate selected vertices, edges or faces
            Arguments:
            @mode (int): in [0, inf], (optional)
      
         '''
      
         pass

      def duplicate_move(MESH_OT_duplicate=None, TRANSFORM_OT_translate=None):
         '''Duplicate mesh and move
            Arguments:
            @MESH_OT_duplicate (MESH_OT_duplicate): Duplicate selected vertices, edges or faces
               (optional)
            @TRANSFORM_OT_translate (TRANSFORM_OT_translate): Move selected items
               (optional)
      
         '''
      
         pass

      def edge_collapse():
         '''Collapse isolated edges & faces regions, merging data such as UV's and vertex colors. This can collapse edge-rings as well as regions of connected faces into vertices
         '''
      
         pass

      def edge_face_add():
         '''Add an edge or face to selected
         '''
      
         pass

      def edge_rotate(use_ccw=False):
         '''Rotate selected edge or adjoining faces
            Arguments:
            @use_ccw (bool): (optional)
      
         '''
      
         pass

      def edge_split(type='EDGE'):
         '''Split selected edges so that each neighbor face gets its own copy
            Arguments:
            @type (str): Method to use for splitting
               in ['EDGE', 'VERT'], (optional)
      
         '''
      
         pass

      def edgering_select(extend=False, deselect=False, toggle=False, ring=True):
         '''Select an edge ring
            Arguments:
            @extend (bool): Extend the selection
               (optional)
            @deselect (bool): Remove from the selection
               (optional)
            @toggle (bool): Toggle the selection
               (optional)
            @ring (bool): Select ring
               (optional)
      
         '''
      
         pass

      def edges_select_sharp(sharpness=0.523599):
         '''Select all sharp-enough edges
            Arguments:
            @sharpness (float): in [0.000174533, 3.14159], (optional)
      
         '''
      
         pass

      def extrude_context(use_normal_flip=False, mirror=False):
         '''Extrude selection
            Arguments:
            @use_normal_flip (bool): (optional)
            @mirror (bool): (optional)
      
         '''
      
         pass

      def extrude_context_move(MESH_OT_extrude_context=None, TRANSFORM_OT_translate=None):
         '''Extrude region together along the average normal
            Arguments:
            @MESH_OT_extrude_context (MESH_OT_extrude_context): Extrude selection
               (optional)
            @TRANSFORM_OT_translate (TRANSFORM_OT_translate): Move selected items
               (optional)
      
         '''
      
         pass

      def extrude_edges_indiv(use_normal_flip=False, mirror=False):
         '''Extrude individual edges only
            Arguments:
            @use_normal_flip (bool): (optional)
            @mirror (bool): (optional)
      
         '''
      
         pass

      def extrude_edges_move(MESH_OT_extrude_edges_indiv=None, TRANSFORM_OT_translate=None):
         '''Extrude edges and move result
            Arguments:
            @MESH_OT_extrude_edges_indiv (MESH_OT_extrude_edges_indiv): Extrude individual edges only
               (optional)
            @TRANSFORM_OT_translate (TRANSFORM_OT_translate): Move selected items
               (optional)
      
         '''
      
         pass

      def extrude_faces_indiv(mirror=False):
         '''Extrude individual faces only
            Arguments:
            @mirror (bool): (optional)
      
         '''
      
         pass

      def extrude_faces_move(MESH_OT_extrude_faces_indiv=None, TRANSFORM_OT_shrink_fatten=None):
         '''Extrude each individual face separately along local normals
            Arguments:
            @MESH_OT_extrude_faces_indiv (MESH_OT_extrude_faces_indiv): Extrude individual faces only
               (optional)
            @TRANSFORM_OT_shrink_fatten (TRANSFORM_OT_shrink_fatten): Shrink/fatten selected vertices along normals
               (optional)
      
         '''
      
         pass

      def extrude_region(use_normal_flip=False, mirror=False):
         '''Extrude region of faces
            Arguments:
            @use_normal_flip (bool): (optional)
            @mirror (bool): (optional)
      
         '''
      
         pass

      def extrude_region_move(MESH_OT_extrude_region=None, TRANSFORM_OT_translate=None):
         '''Extrude region and move result
            Arguments:
            @MESH_OT_extrude_region (MESH_OT_extrude_region): Extrude region of faces
               (optional)
            @TRANSFORM_OT_translate (TRANSFORM_OT_translate): Move selected items
               (optional)
      
         '''
      
         pass

      def extrude_region_shrink_fatten(MESH_OT_extrude_region=None, TRANSFORM_OT_shrink_fatten=None):
         '''Extrude region together along local normals
            Arguments:
            @MESH_OT_extrude_region (MESH_OT_extrude_region): Extrude region of faces
               (optional)
            @TRANSFORM_OT_shrink_fatten (TRANSFORM_OT_shrink_fatten): Shrink/fatten selected vertices along normals
               (optional)
      
         '''
      
         pass

      def extrude_repeat(steps=10, offset=(0.0, 0.0, 0.0), scale_offset=1.0):
         '''Extrude selected vertices, edges or faces repeatedly
            Arguments:
            @steps (int): in [0, 1000000], (optional)
            @offset (float): Offset vector
               array of 3 items in [-100000, 100000], (optional)
            @scale_offset (float): in [0, inf], (optional)
      
         '''
      
         pass

      def extrude_vertices_move(MESH_OT_extrude_verts_indiv=None, TRANSFORM_OT_translate=None):
         '''Extrude vertices and move result
            Arguments:
            @MESH_OT_extrude_verts_indiv (MESH_OT_extrude_verts_indiv): Extrude individual vertices only
               (optional)
            @TRANSFORM_OT_translate (TRANSFORM_OT_translate): Move selected items
               (optional)
      
         '''
      
         pass

      def extrude_verts_indiv(mirror=False):
         '''Extrude individual vertices only
            Arguments:
            @mirror (bool): (optional)
      
         '''
      
         pass

      def face_make_planar(factor=1.0, repeat=1):
         '''Flatten selected faces
            Arguments:
            @factor (float): in [-10, 10], (optional)
            @repeat (int): in [1, 10000], (optional)
      
         '''
      
         pass

      def face_split_by_edges():
         '''Weld loose edges into faces (splitting them into new faces)
         '''
      
         pass

      def faces_mirror_uv(direction='POSITIVE', precision=3):
         '''Copy mirror UV coordinates on the X axis based on a mirrored mesh
            Arguments:
            @direction (str): in ['POSITIVE', 'NEGATIVE'], (optional)
            @precision (int): Tolerance for finding vertex duplicates
               in [1, 16], (optional)
      
         '''
      
         pass

      def faces_select_linked_flat(sharpness=0.0174533):
         '''Select linked faces by angle
            Arguments:
            @sharpness (float): in [0.000174533, 3.14159], (optional)
      
         '''
      
         pass

      def faces_shade_flat():
         '''Display faces flat
         '''
      
         pass

      def faces_shade_smooth():
         '''Display faces smooth (using vertex normals)
         '''
      
         pass

      def fill(use_beauty=True):
         '''Fill a selected edge loop with faces
            Arguments:
            @use_beauty (bool): Use best triangulation division
               (optional)
      
         '''
      
         pass

      def fill_grid(span=1, offset=0, use_interp_simple=False):
         '''Fill grid from two loops
            Arguments:
            @span (int): Number of grid columns
               in [1, 1000], (optional)
            @offset (int): Vertex that is the corner of the grid
               in [-1000, 1000], (optional)
            @use_interp_simple (bool): Use simple interpolation of grid vertices
               (optional)
      
         '''
      
         pass

      def fill_holes(sides=4):
         '''Fill in holes (boundary edge loops)
            Arguments:
            @sides (int): Number of sides in hole required to fill (zero fills all holes)
               in [0, 1000], (optional)
      
         '''
      
         pass

      def flip_normals():
         '''Flip the direction of selected faces' normals (and of their vertices)
         '''
      
         pass

      def hide(unselected=False):
         '''Hide (un)selected vertices, edges or faces
            Arguments:
            @unselected (bool): Hide unselected rather than selected
               (optional)
      
         '''
      
         pass

      def inset(use_boundary=True, use_even_offset=True, use_relative_offset=False, use_edge_rail=False, thickness=0.0, depth=0.0, use_outset=False, use_select_inset=False, use_individual=False, use_interpolate=True, release_confirm=False):
         '''Inset new faces into selected faces
            Arguments:
            @use_boundary (bool): Inset face boundaries
               (optional)
            @use_even_offset (bool): Scale the offset to give more even thickness
               (optional)
            @use_relative_offset (bool): Scale the offset by surrounding geometry
               (optional)
            @use_edge_rail (bool): Inset the region along existing edges
               (optional)
            @thickness (float): in [0, inf], (optional)
            @depth (float): in [-inf, inf], (optional)
            @use_outset (bool): Outset rather than inset
               (optional)
            @use_select_inset (bool): Select the new inset faces
               (optional)
            @use_individual (bool): Individual Face Inset
               (optional)
            @use_interpolate (bool): Blend face data across the inset
               (optional)
            @release_confirm (bool): (optional)
      
         '''
      
         pass

      def intersect(mode='SELECT_UNSELECT', separate_mode='CUT', threshold=1e-06):
         '''Cut an intersection into faces
            Arguments:
            @mode (str): in ['SELECT', 'SELECT_UNSELECT'], (optional)
            @separate_mode (str): in ['ALL', 'CUT', 'NONE'], (optional)
            @threshold (float): in [0, 0.01], (optional)
      
         '''
      
         pass

      def intersect_boolean(operation='DIFFERENCE', use_swap=False, threshold=1e-06):
         '''Cut solid geometry from selected to unselected
            Arguments:
            @operation (str): in ['INTERSECT', 'UNION', 'DIFFERENCE'], (optional)
            @use_swap (bool): Use with difference intersection to swap which side is kept
               (optional)
            @threshold (float): in [0, 0.01], (optional)
      
         '''
      
         pass

      def knife_project(cut_through=False):
         '''Use other objects outlines & boundaries to project knife cuts
            Arguments:
            @cut_through (bool): Cut through all faces, not just visible ones
               (optional)
      
         '''
      
         pass

      def knife_tool(use_occlude_geometry=True, only_selected=False, wait_for_input=True):
         '''Cut new topology
            Arguments:
            @use_occlude_geometry (bool): Only cut the front most geometry
               (optional)
            @only_selected (bool): Only cut selected geometry
               (optional)
            @wait_for_input (bool): (optional)
      
         '''
      
         pass

      def loop_multi_select(ring=False):
         '''Select a loop of connected edges by connection type
            Arguments:
            @ring (bool): (optional)
      
         '''
      
         pass

      def loop_select(extend=False, deselect=False, toggle=False, ring=False):
         '''Select a loop of connected edges
            Arguments:
            @extend (bool): Extend the selection
               (optional)
            @deselect (bool): Remove from the selection
               (optional)
            @toggle (bool): Toggle the selection
               (optional)
            @ring (bool): Select ring
               (optional)
      
         '''
      
         pass

      def loop_to_region(select_bigger=False):
         '''Select region of faces inside of a selected loop of edges
            Arguments:
            @select_bigger (bool): Select bigger regions instead of smaller ones
               (optional)
      
         '''
      
         pass

      def loopcut(number_cuts=1, smoothness=0.0, falloff='INVERSE_SQUARE', object_index=-1, edge_index=-1, mesh_select_mode_init=(False, False, False)):
         '''Add a new loop between existing loops
            Arguments:
            @number_cuts (int): in [1, 1000000], (optional)
            @smoothness (float): Smoothness factor
               in [-1000, 1000], (optional)
            @falloff (str): Falloff type the feather
               in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR'], (optional)
            @object_index (int): in [-1, inf], (optional)
            @edge_index (int): in [-1, inf], (optional)
            @mesh_select_mode_init (bool): array of 3 items, (optional)
      
         '''
      
         pass

      def loopcut_slide(MESH_OT_loopcut=None, TRANSFORM_OT_edge_slide=None):
         '''Cut mesh loop and slide it
            Arguments:
            @MESH_OT_loopcut (MESH_OT_loopcut): Add a new loop between existing loops
               (optional)
            @TRANSFORM_OT_edge_slide (TRANSFORM_OT_edge_slide): Slide an edge loop along a mesh
               (optional)
      
         '''
      
         pass

      def mark_freestyle_edge(clear=False):
         '''(Un)mark selected edges as Freestyle feature edges
            Arguments:
            @clear (bool): (optional)
      
         '''
      
         pass

      def mark_freestyle_face(clear=False):
         '''(Un)mark selected faces for exclusion from Freestyle feature edge detection
            Arguments:
            @clear (bool): (optional)
      
         '''
      
         pass

      def mark_seam(clear=False):
         '''(Un)mark selected edges as a seam
            Arguments:
            @clear (bool): (optional)
      
         '''
      
         pass

      def mark_sharp(clear=False, use_verts=False):
         '''(Un)mark selected edges as sharp
            Arguments:
            @clear (bool): (optional)
            @use_verts (bool): Consider vertices instead of edges to select which edges to (un)tag as sharp
               (optional)
      
         '''
      
         pass

      def merge(type='CENTER', uvs=False):
         '''Merge selected vertices
            Arguments:
            @type (str): Merge method to use
               in ['FIRST', 'LAST', 'CENTER', 'CURSOR', 'COLLAPSE'], (optional)
            @uvs (bool): Move UVs according to merge
               (optional)
      
         '''
      
         pass

      def merge_normals():
         '''Merge custom normals of selected vertices
         '''
      
         pass

      def mod_weighted_strength(set=False, face_strength='MEDIUM'):
         '''Set/Get strength of face (used in Weighted Normal modifier)
            Arguments:
            @set (bool): Set Value of faces
               (optional)
            @face_strength (str): Strength to use for assigning or selecting face influence for weighted normal modifier
               in ['WEAK', 'MEDIUM', 'STRONG'], (optional)
      
         '''
      
         pass

      def normals_make_consistent(inside=False):
         '''Make face and vertex normals point either outside or inside the mesh
            Arguments:
            @inside (bool): (optional)
      
         '''
      
         pass

      def normals_tools(mode='COPY', absolute=False):
         '''Custom normals tools using Normal Vector of UI
            Arguments:
            @mode (str): Mode of tools taking input from Interface
               in ['COPY', 'PASTE', 'ADD', 'MULTIPLY', 'RESET'], (optional)
            @absolute (bool): Copy Absolute coordinates or Normal vector
               (optional)
      
         '''
      
         pass

      def offset_edge_loops(use_cap_endpoint=False):
         '''Create offset edge loop from the current selection
            Arguments:
            @use_cap_endpoint (bool): Extend loop around end-points
               (optional)
      
         '''
      
         pass

      def offset_edge_loops_slide(MESH_OT_offset_edge_loops=None, TRANSFORM_OT_edge_slide=None):
         '''Offset edge loop slide
            Arguments:
            @MESH_OT_offset_edge_loops (MESH_OT_offset_edge_loops): Create offset edge loop from the current selection
               (optional)
            @TRANSFORM_OT_edge_slide (TRANSFORM_OT_edge_slide): Slide an edge loop along a mesh
               (optional)
      
         '''
      
         pass

      def paint_mask_extract(mask_threshold=0.5, add_boundary_loop=True, smooth_iterations=4, apply_shrinkwrap=True, add_solidify=True):
         '''Create a new mesh object from the current paint mask
            Arguments:
            @mask_threshold (float): Minimum mask value to consider the vertex valid to extract a face from the original mesh
               in [0, 1], (optional)
            @add_boundary_loop (bool): Add an extra edge loop to better preserve the shape when applying a subdivision surface modifier
               (optional)
            @smooth_iterations (int): Smooth iterations applied to the extracted mesh
               in [0, inf], (optional)
            @apply_shrinkwrap (bool): Project the extracted mesh into the original sculpt
               (optional)
            @add_solidify (bool): Extract the mask as a solid object with a solidify modifier
               (optional)
      
         '''
      
         pass

      def paint_mask_slice(mask_threshold=0.5, fill_holes=True, new_object=True):
         '''Slices the paint mask from the mesh
            Arguments:
            @mask_threshold (float): Minimum mask value to consider the vertex valid to extract a face from the original mesh
               in [0, 1], (optional)
            @fill_holes (bool): Fill holes after slicing the mask
               (optional)
            @new_object (bool): Create a new object from the sliced mask
               (optional)
      
         '''
      
         pass

      def point_normals(mode='COORDINATES', invert=False, align=False, target_location=(0.0, 0.0, 0.0), spherize=False, spherize_strength=0.1):
         '''Point selected custom normals to specified Target
            Arguments:
            @mode (str): How to define coordinates to point custom normals to
               in ['COORDINATES', 'MOUSE'], (optional)
            @invert (bool): Invert affected normals
               (optional)
            @align (bool): Make all affected normals parallel
               (optional)
            @target_location (float): Target location to which normals will point
               array of 3 items in [-inf, inf], (optional)
            @spherize (bool): Interpolate between original and new normals
               (optional)
            @spherize_strength (float): Ratio of spherized normal to original normal
               in [0, 1], (optional)
      
         '''
      
         pass

      def poke(offset=0.0, use_relative_offset=False, center_mode='MEDIAN_WEIGHTED'):
         '''Split a face into a fan
            Arguments:
            @offset (float): Poke Offset
               in [-1000, 1000], (optional)
            @use_relative_offset (bool): Scale the offset by surrounding geometry
               (optional)
            @center_mode (str): Poke Face Center Calculation
               in ['MEDIAN_WEIGHTED', 'MEDIAN', 'BOUNDS'], (optional)
      
         '''
      
         pass

      def polybuild_delete_at_cursor(mirror=False, use_proportional_edit=False, proportional_edit_falloff='SMOOTH', proportional_size=1.0, use_proportional_connected=False, use_proportional_projected=False, release_confirm=False, use_accurate=False):
         '''undocumented
            Arguments:
            @mirror (bool): (optional)
            @use_proportional_edit (bool): (optional)
            @proportional_edit_falloff (str): Falloff type for proportional editing mode
               in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR', 'CONSTANT', 'RANDOM'], (optional)
            @proportional_size (float): in [1e-06, inf], (optional)
            @use_proportional_connected (bool): (optional)
            @use_proportional_projected (bool): (optional)
            @release_confirm (bool): Always confirm operation when releasing button
               (optional)
            @use_accurate (bool): Use accurate transformation
               (optional)
      
         '''
      
         pass

      def polybuild_dissolve_at_cursor():
         '''undocumented
         '''
      
         pass

      def polybuild_extrude_at_cursor_move(MESH_OT_polybuild_transform_at_cursor=None, MESH_OT_extrude_edges_indiv=None, TRANSFORM_OT_translate=None):
         '''undocumented
            Arguments:
            @MESH_OT_polybuild_transform_at_cursor (MESH_OT_polybuild_transform_at_cursor): (optional)
            @MESH_OT_extrude_edges_indiv (MESH_OT_extrude_edges_indiv): Extrude individual edges only
               (optional)
            @TRANSFORM_OT_translate (TRANSFORM_OT_translate): Move selected items
               (optional)
      
         '''
      
         pass

      def polybuild_face_at_cursor(create_quads=True, mirror=False, use_proportional_edit=False, proportional_edit_falloff='SMOOTH', proportional_size=1.0, use_proportional_connected=False, use_proportional_projected=False, release_confirm=False, use_accurate=False):
         '''undocumented
            Arguments:
            @create_quads (bool): Automatically split edges in triangles to maintain quad topology
               (optional)
            @mirror (bool): (optional)
            @use_proportional_edit (bool): (optional)
            @proportional_edit_falloff (str): Falloff type for proportional editing mode
               in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR', 'CONSTANT', 'RANDOM'], (optional)
            @proportional_size (float): in [1e-06, inf], (optional)
            @use_proportional_connected (bool): (optional)
            @use_proportional_projected (bool): (optional)
            @release_confirm (bool): Always confirm operation when releasing button
               (optional)
            @use_accurate (bool): Use accurate transformation
               (optional)
      
         '''
      
         pass

      def polybuild_face_at_cursor_move(MESH_OT_polybuild_face_at_cursor=None, TRANSFORM_OT_translate=None):
         '''undocumented
            Arguments:
            @MESH_OT_polybuild_face_at_cursor (MESH_OT_polybuild_face_at_cursor): (optional)
            @TRANSFORM_OT_translate (TRANSFORM_OT_translate): Move selected items
               (optional)
      
         '''
      
         pass

      def polybuild_split_at_cursor(mirror=False, use_proportional_edit=False, proportional_edit_falloff='SMOOTH', proportional_size=1.0, use_proportional_connected=False, use_proportional_projected=False, release_confirm=False, use_accurate=False):
         '''undocumented
            Arguments:
            @mirror (bool): (optional)
            @use_proportional_edit (bool): (optional)
            @proportional_edit_falloff (str): Falloff type for proportional editing mode
               in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR', 'CONSTANT', 'RANDOM'], (optional)
            @proportional_size (float): in [1e-06, inf], (optional)
            @use_proportional_connected (bool): (optional)
            @use_proportional_projected (bool): (optional)
            @release_confirm (bool): Always confirm operation when releasing button
               (optional)
            @use_accurate (bool): Use accurate transformation
               (optional)
      
         '''
      
         pass

      def polybuild_split_at_cursor_move(MESH_OT_polybuild_split_at_cursor=None, TRANSFORM_OT_translate=None):
         '''undocumented
            Arguments:
            @MESH_OT_polybuild_split_at_cursor (MESH_OT_polybuild_split_at_cursor): (optional)
            @TRANSFORM_OT_translate (TRANSFORM_OT_translate): Move selected items
               (optional)
      
         '''
      
         pass

      def polybuild_transform_at_cursor(mirror=False, use_proportional_edit=False, proportional_edit_falloff='SMOOTH', proportional_size=1.0, use_proportional_connected=False, use_proportional_projected=False, release_confirm=False, use_accurate=False):
         '''undocumented
            Arguments:
            @mirror (bool): (optional)
            @use_proportional_edit (bool): (optional)
            @proportional_edit_falloff (str): Falloff type for proportional editing mode
               in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR', 'CONSTANT', 'RANDOM'], (optional)
            @proportional_size (float): in [1e-06, inf], (optional)
            @use_proportional_connected (bool): (optional)
            @use_proportional_projected (bool): (optional)
            @release_confirm (bool): Always confirm operation when releasing button
               (optional)
            @use_accurate (bool): Use accurate transformation
               (optional)
      
         '''
      
         pass

      def polybuild_transform_at_cursor_move(MESH_OT_polybuild_transform_at_cursor=None, TRANSFORM_OT_translate=None):
         '''undocumented
            Arguments:
            @MESH_OT_polybuild_transform_at_cursor (MESH_OT_polybuild_transform_at_cursor): (optional)
            @TRANSFORM_OT_translate (TRANSFORM_OT_translate): Move selected items
               (optional)
      
         '''
      
         pass

      def primitive_circle_add(vertices=32, radius=1.0, fill_type='NOTHING', calc_uvs=True, enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Construct a circle mesh
            Arguments:
            @vertices (int): in [3, 10000000], (optional)
            @radius (float): in [0, inf], (optional)
            @fill_type (str): in ['NOTHING', 'NGON', 'TRIFAN'], (optional)
            @calc_uvs (bool): Generate a default UV map
               (optional)
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def primitive_cone_add(vertices=32, radius1=1.0, radius2=0.0, depth=2.0, end_fill_type='NGON', calc_uvs=True, enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Construct a conic mesh
            Arguments:
            @vertices (int): in [3, 10000000], (optional)
            @radius1 (float): in [0, inf], (optional)
            @radius2 (float): in [0, inf], (optional)
            @depth (float): in [0, inf], (optional)
            @end_fill_type (str): in ['NOTHING', 'NGON', 'TRIFAN'], (optional)
            @calc_uvs (bool): Generate a default UV map
               (optional)
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def primitive_cube_add(size=2.0, calc_uvs=True, enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Construct a cube mesh
            Arguments:
            @size (float): in [0, inf], (optional)
            @calc_uvs (bool): Generate a default UV map
               (optional)
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def primitive_cube_add_gizmo(calc_uvs=True, enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0), matrix=((0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0))):
         '''Construct a cube mesh
            Arguments:
            @calc_uvs (bool): Generate a default UV map
               (optional)
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @matrix (float): multi-dimensional array of 4 * 4 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def primitive_cylinder_add(vertices=32, radius=1.0, depth=2.0, end_fill_type='NGON', calc_uvs=True, enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Construct a cylinder mesh
            Arguments:
            @vertices (int): in [3, 10000000], (optional)
            @radius (float): in [0, inf], (optional)
            @depth (float): in [0, inf], (optional)
            @end_fill_type (str): in ['NOTHING', 'NGON', 'TRIFAN'], (optional)
            @calc_uvs (bool): Generate a default UV map
               (optional)
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def primitive_grid_add(x_subdivisions=10, y_subdivisions=10, size=2.0, calc_uvs=True, enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Construct a grid mesh
            Arguments:
            @x_subdivisions (int): in [2, 10000000], (optional)
            @y_subdivisions (int): in [2, 10000000], (optional)
            @size (float): in [0, inf], (optional)
            @calc_uvs (bool): Generate a default UV map
               (optional)
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def primitive_ico_sphere_add(subdivisions=2, radius=1.0, calc_uvs=True, enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Construct an Icosphere mesh
            Arguments:
            @subdivisions (int): in [1, 10], (optional)
            @radius (float): in [0, inf], (optional)
            @calc_uvs (bool): Generate a default UV map
               (optional)
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def primitive_monkey_add(size=2.0, calc_uvs=True, enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Construct a Suzanne mesh
            Arguments:
            @size (float): in [0, inf], (optional)
            @calc_uvs (bool): Generate a default UV map
               (optional)
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def primitive_plane_add(size=2.0, calc_uvs=True, enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Construct a filled planar mesh with 4 vertices
            Arguments:
            @size (float): in [0, inf], (optional)
            @calc_uvs (bool): Generate a default UV map
               (optional)
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def primitive_torus_add(align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0), major_segments=48, minor_segments=12, mode='MAJOR_MINOR', major_radius=1.0, minor_radius=0.25, abso_major_rad=1.25, abso_minor_rad=0.75, generate_uvs=True):
         '''Construct a torus mesh
            Arguments:
            @align (str): in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): array of 3 items in [-inf, inf], (optional)
            @rotation (float): array of 3 items in [-inf, inf], (optional)
            @major_segments (int): Number of segments for the main ring of the torus
               in [3, 256], (optional)
            @minor_segments (int): Number of segments for the minor ring of the torus
               in [3, 256], (optional)
            @mode (str): in ['MAJOR_MINOR', 'EXT_INT'], (optional)
            @major_radius (float): Radius from the origin to the center of the cross sections
               in [0, 10000], (optional)
            @minor_radius (float): Radius of the torus' cross section
               in [0, 10000], (optional)
            @abso_major_rad (float): Total Exterior Radius of the torus
               in [0, 10000], (optional)
            @abso_minor_rad (float): Total Interior Radius of the torus
               in [0, 10000], (optional)
            @generate_uvs (bool): Generate a default UV map
               (optional)
      
         '''
      
         pass

      def primitive_uv_sphere_add(segments=32, ring_count=16, radius=1.0, calc_uvs=True, enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Construct a UV sphere mesh
            Arguments:
            @segments (int): in [3, 100000], (optional)
            @ring_count (int): in [3, 100000], (optional)
            @radius (float): in [0, inf], (optional)
            @calc_uvs (bool): Generate a default UV map
               (optional)
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def quads_convert_to_tris(quad_method='BEAUTY', ngon_method='BEAUTY'):
         '''Triangulate selected faces
            Arguments:
            @quad_method (str): Method for splitting the quads into triangles
               in ['BEAUTY', 'FIXED', 'FIXED_ALTERNATE', 'SHORTEST_DIAGONAL'], (optional)
            @ngon_method (str): Method for splitting the polygons into triangles
               in ['BEAUTY', 'CLIP'], (optional)
      
         '''
      
         pass

      def region_to_loop():
         '''Select boundary edges around the selected faces
         '''
      
         pass

      def remove_doubles(threshold=0.0001, use_unselected=False):
         '''Merge vertices based on their proximity
            Arguments:
            @threshold (float): Maximum distance between elements to merge
               in [1e-06, 50], (optional)
            @use_unselected (bool): Merge selected to other unselected vertices
               (optional)
      
         '''
      
         pass

      def reveal(select=True):
         '''Reveal all hidden vertices, edges and faces
            Arguments:
            @select (bool): (optional)
      
         '''
      
         pass

      def rip(mirror=False, use_proportional_edit=False, proportional_edit_falloff='SMOOTH', proportional_size=1.0, use_proportional_connected=False, use_proportional_projected=False, release_confirm=False, use_accurate=False, use_fill=False):
         '''Disconnect vertex or edges from connected geometry
            Arguments:
            @mirror (bool): (optional)
            @use_proportional_edit (bool): (optional)
            @proportional_edit_falloff (str): Falloff type for proportional editing mode
               in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR', 'CONSTANT', 'RANDOM'], (optional)
            @proportional_size (float): in [1e-06, inf], (optional)
            @use_proportional_connected (bool): (optional)
            @use_proportional_projected (bool): (optional)
            @release_confirm (bool): Always confirm operation when releasing button
               (optional)
            @use_accurate (bool): Use accurate transformation
               (optional)
            @use_fill (bool): Fill the ripped region
               (optional)
      
         '''
      
         pass

      def rip_edge(mirror=False, use_proportional_edit=False, proportional_edit_falloff='SMOOTH', proportional_size=1.0, use_proportional_connected=False, use_proportional_projected=False, release_confirm=False, use_accurate=False):
         '''Extend vertices along the edge closest to the cursor
            Arguments:
            @mirror (bool): (optional)
            @use_proportional_edit (bool): (optional)
            @proportional_edit_falloff (str): Falloff type for proportional editing mode
               in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR', 'CONSTANT', 'RANDOM'], (optional)
            @proportional_size (float): in [1e-06, inf], (optional)
            @use_proportional_connected (bool): (optional)
            @use_proportional_projected (bool): (optional)
            @release_confirm (bool): Always confirm operation when releasing button
               (optional)
            @use_accurate (bool): Use accurate transformation
               (optional)
      
         '''
      
         pass

      def rip_edge_move(MESH_OT_rip_edge=None, TRANSFORM_OT_translate=None):
         '''Extend vertices and move the result
            Arguments:
            @MESH_OT_rip_edge (MESH_OT_rip_edge): Extend vertices along the edge closest to the cursor
               (optional)
            @TRANSFORM_OT_translate (TRANSFORM_OT_translate): Move selected items
               (optional)
      
         '''
      
         pass

      def rip_move(MESH_OT_rip=None, TRANSFORM_OT_translate=None):
         '''Rip polygons and move the result
            Arguments:
            @MESH_OT_rip (MESH_OT_rip): Disconnect vertex or edges from connected geometry
               (optional)
            @TRANSFORM_OT_translate (TRANSFORM_OT_translate): Move selected items
               (optional)
      
         '''
      
         pass

      def screw(steps=9, turns=1, center=(0.0, 0.0, 0.0), axis=(0.0, 0.0, 0.0)):
         '''Extrude selected vertices in screw-shaped rotation around the cursor in indicated viewport
            Arguments:
            @steps (int): Steps
               in [1, 100000], (optional)
            @turns (int): Turns
               in [1, 100000], (optional)
            @center (float): Center in global view space
               array of 3 items in [-inf, inf], (optional)
            @axis (float): Axis in global view space
               array of 3 items in [-1, 1], (optional)
      
         '''
      
         pass

      def select_all(action='TOGGLE'):
         '''(De)select all vertices, edges or faces
            Arguments:
            @action (str): Selection action to execute
               in ['TOGGLE', 'SELECT', 'DESELECT', 'INVERT'], (optional)
      
         '''
      
         pass

      def select_axis(orientation='LOCAL', sign='POS', axis='X', threshold=0.0001):
         '''Select all data in the mesh on a single axis
            Arguments:
            @orientation (str): Axis orientation
               in ['GLOBAL', 'LOCAL', 'NORMAL', 'GIMBAL', 'VIEW', 'CURSOR'], (optional)
            @sign (str): Side to select
               in ['POS', 'NEG', 'ALIGN'], (optional)
            @axis (str): Select the axis to compare each vertex on
               in ['X', 'Y', 'Z'], (optional)
            @threshold (float): in [1e-06, 50], (optional)
      
         '''
      
         pass

      def select_face_by_sides(number=4, type='EQUAL', extend=True):
         '''Select vertices or faces by the number of polygon sides
            Arguments:
            @number (int): in [3, inf], (optional)
            @type (str): Type of comparison to make
               in ['LESS', 'EQUAL', 'GREATER', 'NOTEQUAL'], (optional)
            @extend (bool): Extend the selection
               (optional)
      
         '''
      
         pass

      def select_interior_faces():
         '''Select faces where all edges have more than 2 face users
         '''
      
         pass

      def select_less(use_face_step=True):
         '''Deselect vertices, edges or faces at the boundary of each selection region
            Arguments:
            @use_face_step (bool): Connected faces (instead of edges)
               (optional)
      
         '''
      
         pass

      def select_linked(delimit={'SEAM'}):
         '''Select all vertices connected to the current selection
            Arguments:
            @delimit (str): Delimit selected region
               set in {'NORMAL', 'MATERIAL', 'SEAM', 'SHARP', 'UV'}, (optional)
      
         '''
      
         pass

      def select_linked_pick(deselect=False, delimit={'SEAM'}, object_index=-1, index=-1):
         '''(De)select all vertices linked to the edge under the mouse cursor
            Arguments:
            @deselect (bool): (optional)
            @delimit (str): Delimit selected region
               set in {'NORMAL', 'MATERIAL', 'SEAM', 'SHARP', 'UV'}, (optional)
            @object_index (int): in [-1, inf], (optional)
            @index (int): in [-1, inf], (optional)
      
         '''
      
         pass

      def select_loose(extend=False):
         '''Select loose geometry based on the selection mode
            Arguments:
            @extend (bool): Extend the selection
               (optional)
      
         '''
      
         pass

      def select_mirror(axis={'X'}, extend=False):
         '''Select mesh items at mirrored locations
            Arguments:
            @axis (str): set in {'X', 'Y', 'Z'}, (optional)
            @extend (bool): Extend the existing selection
               (optional)
      
         '''
      
         pass

      def select_mode(use_extend=False, use_expand=False, type='VERT', action='TOGGLE'):
         '''Change selection mode
            Arguments:
            @use_extend (bool): (optional)
            @use_expand (bool): (optional)
            @type (str): in ['VERT', 'EDGE', 'FACE'], (optional)
            @action (str): Selection action to execute
               in ['DISABLE', 'ENABLE', 'TOGGLE'], (optional)
      
         '''
      
         pass

      def select_more(use_face_step=True):
         '''Select more vertices, edges or faces connected to initial selection
            Arguments:
            @use_face_step (bool): Connected faces (instead of edges)
               (optional)
      
         '''
      
         pass

      def select_next_item():
         '''Select the next element (using selection order)
         '''
      
         pass

      def select_non_manifold(extend=True, use_wire=True, use_boundary=True, use_multi_face=True, use_non_contiguous=True, use_verts=True):
         '''Select all non-manifold vertices or edges
            Arguments:
            @extend (bool): Extend the selection
               (optional)
            @use_wire (bool): Wire edges
               (optional)
            @use_boundary (bool): Boundary edges
               (optional)
            @use_multi_face (bool): Edges shared by 3+ faces
               (optional)
            @use_non_contiguous (bool): Edges between faces pointing in alternate directions
               (optional)
            @use_verts (bool): Vertices connecting multiple face regions
               (optional)
      
         '''
      
         pass

      def select_nth(skip=1, nth=1, offset=0):
         '''Deselect every Nth element starting from the active vertex, edge or face
            Arguments:
            @skip (int): Number of deselected elements in the repetitive sequence
               in [1, inf], (optional)
            @nth (int): Number of selected elements in the repetitive sequence
               in [1, inf], (optional)
            @offset (int): Offset from the starting point
               in [-inf, inf], (optional)
      
         '''
      
         pass

      def select_prev_item():
         '''Select the previous element (using selection order)
         '''
      
         pass

      def select_random(percent=50.0, seed=0, action='SELECT'):
         '''Randomly select vertices
            Arguments:
            @percent (float): Percentage of objects to select randomly
               in [0, 100], (optional)
            @seed (int): Seed for the random number generator
               in [0, inf], (optional)
            @action (str): Selection action to execute
               in ['SELECT', 'DESELECT'], (optional)
      
         '''
      
         pass

      def select_similar(type='NORMAL', compare='EQUAL', threshold=0.0):
         '''Select similar vertices, edges or faces by property types
            Arguments:
            @type (str): in ['NORMAL', 'FACE', 'VGROUP', 'EDGE', 'LENGTH', 'DIR', 'FACE', 'FACE_ANGLE', 'CREASE', 'BEVEL', 'SEAM', 'SHARP', 'FREESTYLE_EDGE', 'MATERIAL', 'AREA', 'SIDES', 'PERIMETER', 'NORMAL', 'COPLANAR', 'SMOOTH', 'FACE_MAP', 'FREESTYLE_FACE'], (optional)
            @compare (str): in ['EQUAL', 'GREATER', 'LESS'], (optional)
            @threshold (float): in [0, 1], (optional)
      
         '''
      
         pass

      def select_similar_region():
         '''Select similar face regions to the current selection
         '''
      
         pass

      def select_ungrouped(extend=False):
         '''Select vertices without a group
            Arguments:
            @extend (bool): Extend the selection
               (optional)
      
         '''
      
         pass

      def separate(type='SELECTED'):
         '''Separate selected geometry into a new mesh
            Arguments:
            @type (str): in ['SELECTED', 'MATERIAL', 'LOOSE'], (optional)
      
         '''
      
         pass

      def set_normals_from_faces(keep_sharp=False):
         '''Set the custom normals from the selected faces ones
            Arguments:
            @keep_sharp (bool): Do not set sharp edges to face
               (optional)
      
         '''
      
         pass

      def shape_propagate_to_all():
         '''Apply selected vertex locations to all other shape keys
         '''
      
         pass

      def shortest_path_pick(edge_mode='SELECT', use_face_step=False, use_topology_distance=False, use_fill=False, skip=0, nth=1, offset=0, index=-1):
         '''Select shortest path between two selections
            Arguments:
            @edge_mode (str): The edge flag to tag when selecting the shortest path
               in ['SELECT', 'SEAM', 'SHARP', 'CREASE', 'BEVEL', 'FREESTYLE'], (optional)
            @use_face_step (bool): Traverse connected faces (includes diagonals and edge-rings)
               (optional)
            @use_topology_distance (bool): Find the minimum number of steps, ignoring spatial distance
               (optional)
            @use_fill (bool): Select all paths between the source/destination elements
               (optional)
            @skip (int): Number of deselected elements in the repetitive sequence
               in [0, inf], (optional)
            @nth (int): Number of selected elements in the repetitive sequence
               in [1, inf], (optional)
            @offset (int): Offset from the starting point
               in [-inf, inf], (optional)
            @index (int): in [-1, inf], (optional)
      
         '''
      
         pass

      def shortest_path_select(edge_mode='SELECT', use_face_step=False, use_topology_distance=False, use_fill=False, skip=0, nth=1, offset=0):
         '''Selected shortest path between two vertices/edges/faces
            Arguments:
            @edge_mode (str): The edge flag to tag when selecting the shortest path
               in ['SELECT', 'SEAM', 'SHARP', 'CREASE', 'BEVEL', 'FREESTYLE'], (optional)
            @use_face_step (bool): Traverse connected faces (includes diagonals and edge-rings)
               (optional)
            @use_topology_distance (bool): Find the minimum number of steps, ignoring spatial distance
               (optional)
            @use_fill (bool): Select all paths between the source/destination elements
               (optional)
            @skip (int): Number of deselected elements in the repetitive sequence
               in [0, inf], (optional)
            @nth (int): Number of selected elements in the repetitive sequence
               in [1, inf], (optional)
            @offset (int): Offset from the starting point
               in [-inf, inf], (optional)
      
         '''
      
         pass

      def smooth_normals(factor=0.5):
         '''Smooth custom normals based on adjacent vertex normals
            Arguments:
            @factor (float): Specifies weight of smooth vs original normal
               in [0, 1], (optional)
      
         '''
      
         pass

      def solidify(thickness=0.01):
         '''Create a solid skin by extruding, compensating for sharp angles
            Arguments:
            @thickness (float): in [-10000, 10000], (optional)
      
         '''
      
         pass

      def sort_elements(type='VIEW_ZAXIS', elements={'VERT'}, reverse=False, seed=0):
         '''The order of selected vertices/edges/faces is modified, based on a given method
            Arguments:
            @type (str): Type of re-ordering operation to apply
               in ['VIEW_ZAXIS', 'VIEW_XAXIS', 'CURSOR_DISTANCE', 'MATERIAL', 'SELECTED', 'RANDOMIZE', 'REVERSE'], (optional)
            @elements (str): Which elements to affect (vertices, edges and/or faces)
               set in {'VERT', 'EDGE', 'FACE'}, (optional)
            @reverse (bool): Reverse the sorting effect
               (optional)
            @seed (int): Seed for random-based operations
               in [0, inf], (optional)
      
         '''
      
         pass

      def spin(steps=12, dupli=False, angle=1.5708, use_auto_merge=True, use_normal_flip=False, center=(0.0, 0.0, 0.0), axis=(0.0, 0.0, 0.0)):
         '''Extrude selected vertices in a circle around the cursor in indicated viewport
            Arguments:
            @steps (int): Steps
               in [0, 1000000], (optional)
            @dupli (bool): (optional)
            @angle (float): Rotation for each step
               in [-inf, inf], (optional)
            @use_auto_merge (bool): Merge first/last when the angle is a full revolution
               (optional)
            @use_normal_flip (bool): (optional)
            @center (float): Center in global view space
               array of 3 items in [-inf, inf], (optional)
            @axis (float): Axis in global view space
               array of 3 items in [-1, 1], (optional)
      
         '''
      
         pass

      def split():
         '''Split off selected geometry from connected unselected geometry
         '''
      
         pass

      def split_normals():
         '''Split custom normals of selected vertices
         '''
      
         pass

      def subdivide(number_cuts=1, smoothness=0.0, ngon=True, quadcorner='STRAIGHT_CUT', fractal=0.0, fractal_along_normal=0.0, seed=0):
         '''Subdivide selected edges
            Arguments:
            @number_cuts (int): in [1, 100], (optional)
            @smoothness (float): Smoothness factor
               in [0, 1000], (optional)
            @ngon (bool): When disabled, newly created faces are limited to 3-4 sided faces
               (optional)
            @quadcorner (str): How to subdivide quad corners (anything other than Straight Cut will prevent ngons)
               in ['INNERVERT', 'PATH', 'STRAIGHT_CUT', 'FAN'], (optional)
            @fractal (float): Fractal randomness factor
               in [0, 1e+06], (optional)
            @fractal_along_normal (float): Apply fractal displacement along normal only
               in [0, 1], (optional)
            @seed (int): Seed for the random number generator
               in [0, inf], (optional)
      
         '''
      
         pass

      def subdivide_edgering(number_cuts=10, interpolation='PATH', smoothness=1.0, profile_shape_factor=0.0, profile_shape='SMOOTH'):
         '''Subdivide perpendicular edges to the selected edge ring
            Arguments:
            @number_cuts (int): in [0, 1000], (optional)
            @interpolation (str): Interpolation method
               in ['LINEAR', 'PATH', 'SURFACE'], (optional)
            @smoothness (float): Smoothness factor
               in [0, 1000], (optional)
            @profile_shape_factor (float): How much intermediary new edges are shrunk/expanded
               in [-1000, 1000], (optional)
            @profile_shape (str): Shape of the profile
               in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR'], (optional)
      
         '''
      
         pass

      def symmetrize(direction='NEGATIVE_X', threshold=0.0001):
         '''Enforce symmetry (both form and topological) across an axis
            Arguments:
            @direction (str): Which sides to copy from and to
               in ['NEGATIVE_X', 'POSITIVE_X', 'NEGATIVE_Y', 'POSITIVE_Y', 'NEGATIVE_Z', 'POSITIVE_Z'], (optional)
            @threshold (float): Limit for snap middle vertices to the axis center
               in [0, 10], (optional)
      
         '''
      
         pass

      def symmetry_snap(direction='NEGATIVE_X', threshold=0.05, factor=0.5, use_center=True):
         '''Snap vertex pairs to their mirrored locations
            Arguments:
            @direction (str): Which sides to copy from and to
               in ['NEGATIVE_X', 'POSITIVE_X', 'NEGATIVE_Y', 'POSITIVE_Y', 'NEGATIVE_Z', 'POSITIVE_Z'], (optional)
            @threshold (float): Distance within which matching vertices are searched
               in [0, 10], (optional)
            @factor (float): Mix factor of the locations of the vertices
               in [0, 1], (optional)
            @use_center (bool): Snap middle vertices to the axis center
               (optional)
      
         '''
      
         pass

      def tris_convert_to_quads(face_threshold=0.698132, shape_threshold=0.698132, uvs=False, vcols=False, seam=False, sharp=False, materials=False):
         '''Join triangles into quads
            Arguments:
            @face_threshold (float): Face angle limit
               in [0, 3.14159], (optional)
            @shape_threshold (float): Shape angle limit
               in [0, 3.14159], (optional)
            @uvs (bool): (optional)
            @vcols (bool): (optional)
            @seam (bool): (optional)
            @sharp (bool): (optional)
            @materials (bool): (optional)
      
         '''
      
         pass

      def unsubdivide(iterations=2):
         '''UnSubdivide selected edges & faces
            Arguments:
            @iterations (int): Number of times to unsubdivide
               in [1, 1000], (optional)
      
         '''
      
         pass

      def uv_texture_add():
         '''Add UV Map
         '''
      
         pass

      def uv_texture_remove():
         '''Remove UV Map
         '''
      
         pass

      def uvs_reverse():
         '''Flip direction of UV coordinates inside faces
         '''
      
         pass

      def uvs_rotate(use_ccw=False):
         '''Rotate UV coordinates inside faces
            Arguments:
            @use_ccw (bool): (optional)
      
         '''
      
         pass

      def vert_connect():
         '''Connect selected vertices of faces, splitting the face
         '''
      
         pass

      def vert_connect_concave():
         '''Make all faces convex
         '''
      
         pass

      def vert_connect_nonplanar(angle_limit=0.0872665):
         '''Split non-planar faces that exceed the angle threshold
            Arguments:
            @angle_limit (float): Angle limit
               in [0, 3.14159], (optional)
      
         '''
      
         pass

      def vert_connect_path():
         '''Connect vertices by their selection order, creating edges, splitting faces
         '''
      
         pass

      def vertex_color_add():
         '''Add vertex color layer
         '''
      
         pass

      def vertex_color_remove():
         '''Remove vertex color layer
         '''
      
         pass

      def vertices_smooth(factor=0.0, repeat=1, xaxis=True, yaxis=True, zaxis=True, wait_for_input=True):
         '''Flatten angles of selected vertices
            Arguments:
            @factor (float): Smoothing factor
               in [-10, 10], (optional)
            @repeat (int): Number of times to smooth the mesh
               in [1, 1000], (optional)
            @xaxis (bool): Smooth along the X axis
               (optional)
            @yaxis (bool): Smooth along the Y axis
               (optional)
            @zaxis (bool): Smooth along the Z axis
               (optional)
            @wait_for_input (bool): (optional)
      
         '''
      
         pass

      def vertices_smooth_laplacian(repeat=1, lambda_factor=1.0, lambda_border=5e-05, use_x=True, use_y=True, use_z=True, preserve_volume=True):
         '''Laplacian smooth of selected vertices
            Arguments:
            @repeat (int): in [1, 1000], (optional)
            @lambda_factor (float): in [1e-07, 1000], (optional)
            @lambda_border (float): in [1e-07, 1000], (optional)
            @use_x (bool): Smooth object along X axis
               (optional)
            @use_y (bool): Smooth object along Y axis
               (optional)
            @use_z (bool): Smooth object along Z axis
               (optional)
            @preserve_volume (bool): Apply volume preservation after smooth
               (optional)
      
         '''
      
         pass

      def wireframe(use_boundary=True, use_even_offset=True, use_relative_offset=False, use_replace=True, thickness=0.01, offset=0.01, use_crease=False, crease_weight=0.01):
         '''Create a solid wire-frame from faces
            Arguments:
            @use_boundary (bool): Inset face boundaries
               (optional)
            @use_even_offset (bool): Scale the offset to give more even thickness
               (optional)
            @use_relative_offset (bool): Scale the offset by surrounding geometry
               (optional)
            @use_replace (bool): Remove original faces
               (optional)
            @thickness (float): in [0, 10000], (optional)
            @offset (float): in [0, 10000], (optional)
            @use_crease (bool): Crease hub edges for improved subsurf
               (optional)
            @crease_weight (float): in [0, 1000], (optional)
      
         '''
      
         pass

   class nla:
      '''Spcecial class, created just to reflect content of bpy.ops.nla'''

      def action_pushdown(channel_index=-1):
         '''Push action down onto the top of the NLA stack as a new strip
            Arguments:
            @channel_index (int): Index of NLA action channel to perform pushdown operation on
               in [-1, inf], (optional)
      
         '''
      
         pass

      def action_sync_length(active=True):
         '''Synchronize the length of the referenced Action with the length used in the strip
            Arguments:
            @active (bool): Only sync the active length for the active strip
               (optional)
      
         '''
      
         pass

      def action_unlink(force_delete=False):
         '''Unlink this action from the active action slot (and/or exit Tweak Mode)
            Arguments:
            @force_delete (bool): Clear Fake User and remove copy stashed in this datablock's NLA stack
               (optional)
      
         '''
      
         pass

      def actionclip_add(action=''):
         '''Add an Action-Clip strip (i.e. an NLA Strip referencing an Action) to the active track
            Arguments:
            @action (str): in [], (optional)
      
         '''
      
         pass

      def apply_scale():
         '''Apply scaling of selected strips to their referenced Actions
         '''
      
         pass

      def bake(frame_start=1, frame_end=250, step=1, only_selected=True, visual_keying=False, clear_constraints=False, clear_parents=False, use_current_action=False, bake_types={'POSE'}):
         '''Bake all selected objects loc/scale/rotation animation to an action
            Arguments:
            @frame_start (int): Start frame for baking
               in [0, 300000], (optional)
            @frame_end (int): End frame for baking
               in [1, 300000], (optional)
            @step (int): Frame Step
               in [1, 120], (optional)
            @only_selected (bool): Only key selected bones (Pose baking only)
               (optional)
            @visual_keying (bool): Keyframe from the final transformations (with constraints applied)
               (optional)
            @clear_constraints (bool): Remove all constraints from keyed object/bones, and do 'visual' keying
               (optional)
            @clear_parents (bool): Bake animation onto the object then clear parents (objects only)
               (optional)
            @use_current_action (bool): Bake animation into current action, instead of creating a new one (useful for baking only part of bones in an armature)
               (optional)
            @bake_types (str): Which data's transformations to bake
               set in {'POSE', 'OBJECT'}, (optional)
      
         '''
      
         pass

      def channels_click(extend=False):
         '''Handle clicks to select NLA channels
            Arguments:
            @extend (bool): (optional)
      
         '''
      
         pass

      def clear_scale():
         '''Reset scaling of selected strips
         '''
      
         pass

      def click_select(wait_to_deselect_others=False, mouse_x=0, mouse_y=0, extend=False, deselect_all=False):
         '''Handle clicks to select NLA Strips
            Arguments:
            @wait_to_deselect_others (bool): (optional)
            @mouse_x (int): in [-inf, inf], (optional)
            @mouse_y (int): in [-inf, inf], (optional)
            @extend (bool): (optional)
            @deselect_all (bool): Deselect all when nothing under the cursor
               (optional)
      
         '''
      
         pass

      def delete():
         '''Delete selected strips
         '''
      
         pass

      def duplicate(linked=False, mode='TRANSLATION'):
         '''Duplicate selected NLA-Strips, adding the new strips in new tracks above the originals
            Arguments:
            @linked (bool): When duplicating strips, assign new copies of the actions they use
               (optional)
            @mode (str): in ['INIT', 'DUMMY', 'TRANSLATION', 'ROTATION', 'RESIZE', 'SKIN_RESIZE', 'TOSPHERE', 'SHEAR', 'BEND', 'SHRINKFATTEN', 'TILT', 'TRACKBALL', 'PUSHPULL', 'CREASE', 'MIRROR', 'BONE_SIZE', 'BONE_ENVELOPE', 'BONE_ENVELOPE_DIST', 'CURVE_SHRINKFATTEN', 'MASK_SHRINKFATTEN', 'GPENCIL_SHRINKFATTEN', 'BONE_ROLL', 'TIME_TRANSLATE', 'TIME_SLIDE', 'TIME_SCALE', 'TIME_EXTEND', 'BAKE_TIME', 'BWEIGHT', 'ALIGN', 'EDGESLIDE', 'SEQSLIDE', 'GPENCIL_OPACITY'], (optional)
      
         '''
      
         pass

      def fmodifier_add(type='NULL', only_active=True):
         '''Add F-Modifier to the active/selected NLA-Strips
            Arguments:
            @type (str): in ['NULL', 'GENERATOR', 'FNGENERATOR', 'ENVELOPE', 'CYCLES', 'NOISE', 'LIMITS', 'STEPPED'], (optional)
            @only_active (bool): Only add a F-Modifier of the specified type to the active strip
               (optional)
      
         '''
      
         pass

      def fmodifier_copy():
         '''Copy the F-Modifier(s) of the active NLA-Strip
         '''
      
         pass

      def fmodifier_paste(only_active=True, replace=False):
         '''Add copied F-Modifiers to the selected NLA-Strips
            Arguments:
            @only_active (bool): Only paste F-Modifiers on active strip
               (optional)
            @replace (bool): Replace existing F-Modifiers, instead of just appending to the end of the existing list
               (optional)
      
         '''
      
         pass

      def make_single_user():
         '''Ensure that each action is only used once in the set of strips selected
         '''
      
         pass

      def meta_add():
         '''Add new meta-strips incorporating the selected strips
         '''
      
         pass

      def meta_remove():
         '''Separate out the strips held by the selected meta-strips
         '''
      
         pass

      def move_down():
         '''Move selected strips down a track if there's room
         '''
      
         pass

      def move_up():
         '''Move selected strips up a track if there's room
         '''
      
         pass

      def mute_toggle():
         '''Mute or un-mute selected strips
         '''
      
         pass

      def previewrange_set():
         '''Automatically set Preview Range based on range of keyframes
         '''
      
         pass

      def select_all(action='TOGGLE'):
         '''Select or deselect all NLA-Strips
            Arguments:
            @action (str): Selection action to execute
               in ['TOGGLE', 'SELECT', 'DESELECT', 'INVERT'], (optional)
      
         '''
      
         pass

      def select_box(axis_range=False, tweak=False, xmin=0, xmax=0, ymin=0, ymax=0, wait_for_input=True, mode='SET'):
         '''Use box selection to grab NLA-Strips
            Arguments:
            @axis_range (bool): (optional)
            @tweak (bool): Operator has been activated using a tweak event
               (optional)
            @xmin (int): in [-inf, inf], (optional)
            @xmax (int): in [-inf, inf], (optional)
            @ymin (int): in [-inf, inf], (optional)
            @ymax (int): in [-inf, inf], (optional)
            @wait_for_input (bool): (optional)
            @mode (str): in ['SET', 'ADD', 'SUB'], (optional)
      
         '''
      
         pass

      def select_leftright(mode='CHECK', extend=False):
         '''Select strips to the left or the right of the current frame
            Arguments:
            @mode (str): in ['CHECK', 'LEFT', 'RIGHT'], (optional)
            @extend (bool): (optional)
      
         '''
      
         pass

      def selected_objects_add():
         '''Make selected objects appear in NLA Editor by adding Animation Data
         '''
      
         pass

      def snap(type='CFRA'):
         '''Move start of strips to specified time
            Arguments:
            @type (str): in ['CFRA', 'NEAREST_FRAME', 'NEAREST_SECOND', 'NEAREST_MARKER'], (optional)
      
         '''
      
         pass

      def soundclip_add():
         '''Add a strip for controlling when speaker plays its sound clip
         '''
      
         pass

      def split():
         '''Split selected strips at their midpoints
         '''
      
         pass

      def swap():
         '''Swap order of selected strips within tracks
         '''
      
         pass

      def tracks_add(above_selected=False):
         '''Add NLA-Tracks above/after the selected tracks
            Arguments:
            @above_selected (bool): Add a new NLA Track above every existing selected one
               (optional)
      
         '''
      
         pass

      def tracks_delete():
         '''Delete selected NLA-Tracks and the strips they contain
         '''
      
         pass

      def transition_add():
         '''Add a transition strip between two adjacent selected strips
         '''
      
         pass

      def tweakmode_enter(isolate_action=False):
         '''Enter tweaking mode for the action referenced by the active strip to edit its keyframes
            Arguments:
            @isolate_action (bool): Enable 'solo' on the NLA Track containing the active strip, to edit it without seeing the effects of the NLA stack
               (optional)
      
         '''
      
         pass

      def tweakmode_exit(isolate_action=False):
         '''Exit tweaking mode for the action referenced by the active strip
            Arguments:
            @isolate_action (bool): Disable 'solo' on any of the NLA Tracks after exiting tweak mode to get things back to normal
               (optional)
      
         '''
      
         pass

      def view_all():
         '''Reset viewable area to show full strips range
         '''
      
         pass

      def view_frame():
         '''Move the view to the playhead
         '''
      
         pass

      def view_selected():
         '''Reset viewable area to show selected strips range
         '''
      
         pass

   class node:
      '''Spcecial class, created just to reflect content of bpy.ops.node'''

      def add_and_link_node(type="", use_transform=False, settings=None, link_socket_index=0):
         '''Add a node to the active tree and link to an existing socket
            Arguments:
            @type (str): Node type
               (optional, never None)
            @use_transform (bool): Start transform operator after inserting the node
               (optional)
            @settings (NodeSetting): Settings to be applied on the newly created node
               Collection of , (optional)
            @link_socket_index (int): Index of the socket to link
               in [-inf, inf], (optional)
      
         '''
      
         pass

      def add_file(filepath="", hide_props_region=True, filter_blender=False, filter_backup=False, filter_image=True, filter_movie=True, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=9, relative_path=True, show_multiview=False, use_multiview=False, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA', name="Image"):
         '''Add a file node to the current node editor
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @hide_props_region (bool): Collapse the region displaying the operator settings
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @relative_path (bool): Select the file relative to the blend file
               (optional)
            @show_multiview (bool): (optional)
            @use_multiview (bool): (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
            @name (str): Data-block name to assign
               (optional, never None)
      
         '''
      
         pass

      def add_mask(name="Mask"):
         '''Add a mask node to the current node editor
            Arguments:
            @name (str): Data-block name to assign
               (optional, never None)
      
         '''
      
         pass

      def add_node(type="", use_transform=False, settings=None):
         '''Add a node to the active tree
            Arguments:
            @type (str): Node type
               (optional, never None)
            @use_transform (bool): Start transform operator after inserting the node
               (optional)
            @settings (NodeSetting): Settings to be applied on the newly created node
               Collection of , (optional)
      
         '''
      
         pass

      def add_reroute(path=None, cursor=8):
         '''Add a reroute node
            Arguments:
            @path (OperatorMousePath): Collection of , (optional)
            @cursor (int): in [0, inf], (optional)
      
         '''
      
         pass

      def add_search(type="", use_transform=False, settings=None, node_item=''):
         '''Add a node to the active tree
            Arguments:
            @type (str): Node type
               (optional, never None)
            @use_transform (bool): Start transform operator after inserting the node
               (optional)
            @settings (NodeSetting): Settings to be applied on the newly created node
               Collection of , (optional)
            @node_item (str): Node type
               in [], (optional)
      
         '''
      
         pass

      def attach():
         '''Attach active node to a frame
         '''
      
         pass

      def backimage_fit():
         '''Fit the background image to the view
         '''
      
         pass

      def backimage_move():
         '''Move Node backdrop
         '''
      
         pass

      def backimage_sample():
         '''Use mouse to sample background image
         '''
      
         pass

      def backimage_zoom(factor=1.2):
         '''Zoom in/out the background image
            Arguments:
            @factor (float): in [0, 10], (optional)
      
         '''
      
         pass

      def clear_viewer_border():
         '''Clear the boundaries for viewer operations
         '''
      
         pass

      def clipboard_copy():
         '''Copies selected nodes to the clipboard
         '''
      
         pass

      def clipboard_paste():
         '''Pastes nodes from the clipboard to the active node tree
         '''
      
         pass

      def collapse_hide_unused_toggle():
         '''Toggle collapsed nodes and hide unused sockets
         '''
      
         pass

      def cryptomatte_layer_add():
         '''Add a new input layer to a Cryptomatte node
         '''
      
         pass

      def cryptomatte_layer_remove():
         '''Remove layer from a Cryptomatte node
         '''
      
         pass

      def delete():
         '''Delete selected nodes
         '''
      
         pass

      def delete_reconnect():
         '''Delete nodes; will reconnect nodes as if deletion was muted
         '''
      
         pass

      def detach():
         '''Detach selected nodes from parents
         '''
      
         pass

      def detach_translate_attach(NODE_OT_detach=None, TRANSFORM_OT_translate=None, NODE_OT_attach=None):
         '''Detach nodes, move and attach to frame
            Arguments:
            @NODE_OT_detach (NODE_OT_detach): Detach selected nodes from parents
               (optional)
            @TRANSFORM_OT_translate (TRANSFORM_OT_translate): Move selected items
               (optional)
            @NODE_OT_attach (NODE_OT_attach): Attach active node to a frame
               (optional)
      
         '''
      
         pass

      def duplicate(keep_inputs=False):
         '''Duplicate selected nodes
            Arguments:
            @keep_inputs (bool): Keep the input links to duplicated nodes
               (optional)
      
         '''
      
         pass

      def duplicate_move(NODE_OT_duplicate=None, NODE_OT_translate_attach=None):
         '''Duplicate selected nodes and move them
            Arguments:
            @NODE_OT_duplicate (NODE_OT_duplicate): Duplicate selected nodes
               (optional)
            @NODE_OT_translate_attach (NODE_OT_translate_attach): Move nodes and attach to frame
               (optional)
      
         '''
      
         pass

      def duplicate_move_keep_inputs(NODE_OT_duplicate=None, NODE_OT_translate_attach=None):
         '''Duplicate selected nodes keeping input links and move them
            Arguments:
            @NODE_OT_duplicate (NODE_OT_duplicate): Duplicate selected nodes
               (optional)
            @NODE_OT_translate_attach (NODE_OT_translate_attach): Move nodes and attach to frame
               (optional)
      
         '''
      
         pass

      def find_node(prev=False):
         '''Search for named node and allow to select and activate it
            Arguments:
            @prev (bool): (optional)
      
         '''
      
         pass

      def group_edit(exit=False):
         '''Edit node group
            Arguments:
            @exit (bool): (optional)
      
         '''
      
         pass

      def group_insert():
         '''Insert selected nodes into a node group
         '''
      
         pass

      def group_make():
         '''Make group from selected nodes
         '''
      
         pass

      def group_separate(type='COPY'):
         '''Separate selected nodes from the node group
            Arguments:
            @type (str): in ['COPY', 'MOVE'], (optional)
      
         '''
      
         pass

      def group_ungroup():
         '''Ungroup selected nodes
         '''
      
         pass

      def hide_socket_toggle():
         '''Toggle unused node socket display
         '''
      
         pass

      def hide_toggle():
         '''Toggle hiding of selected nodes
         '''
      
         pass

      def insert_offset():
         '''Automatically offset nodes on insertion
         '''
      
         pass

      def join():
         '''Attach selected nodes to a new common frame
         '''
      
         pass

      def link(detach=False):
         '''Use the mouse to create a link between two nodes
            Arguments:
            @detach (bool): Detach and redirect existing links
               (optional)
      
         '''
      
         pass

      def link_make(replace=False):
         '''Makes a link between selected output in input sockets
            Arguments:
            @replace (bool): Replace socket connections with the new links
               (optional)
      
         '''
      
         pass

      def link_viewer():
         '''Link to viewer node
         '''
      
         pass

      def links_cut(path=None, cursor=12):
         '''Use the mouse to cut (remove) some links
            Arguments:
            @path (OperatorMousePath): Collection of , (optional)
            @cursor (int): in [0, inf], (optional)
      
         '''
      
         pass

      def links_detach():
         '''Remove all links to selected nodes, and try to connect neighbor nodes together
         '''
      
         pass

      def move_detach_links(NODE_OT_links_detach=None, TRANSFORM_OT_translate=None, NODE_OT_insert_offset=None):
         '''Move a node to detach links
            Arguments:
            @NODE_OT_links_detach (NODE_OT_links_detach): Remove all links to selected nodes, and try to connect neighbor nodes together
               (optional)
            @TRANSFORM_OT_translate (TRANSFORM_OT_translate): Move selected items
               (optional)
            @NODE_OT_insert_offset (NODE_OT_insert_offset): Automatically offset nodes on insertion
               (optional)
      
         '''
      
         pass

      def move_detach_links_release(NODE_OT_links_detach=None, NODE_OT_translate_attach=None):
         '''Move a node to detach links
            Arguments:
            @NODE_OT_links_detach (NODE_OT_links_detach): Remove all links to selected nodes, and try to connect neighbor nodes together
               (optional)
            @NODE_OT_translate_attach (NODE_OT_translate_attach): Move nodes and attach to frame
               (optional)
      
         '''
      
         pass

      def mute_toggle():
         '''Toggle muting of the nodes
         '''
      
         pass

      def new_node_tree(type='', name="NodeTree"):
         '''Create a new node tree
            Arguments:
            @type (str): in [], (optional)
            @name (str): (optional, never None)
      
         '''
      
         pass

      def node_color_preset_add(name="", remove_name=False, remove_active=False):
         '''Add or remove a Node Color Preset
            Arguments:
            @name (str): Name of the preset, used to make the path name
               (optional, never None)
            @remove_name (bool): (optional)
            @remove_active (bool): (optional)
      
         '''
      
         pass

      def node_copy_color():
         '''Copy color to all selected nodes
         '''
      
         pass

      def options_toggle():
         '''Toggle option buttons display for selected nodes
         '''
      
         pass

      def output_file_add_socket(file_path="Image"):
         '''Add a new input to a file output node
            Arguments:
            @file_path (str): Sub-path of the output file
               (optional, never None)
      
         '''
      
         pass

      def output_file_move_active_socket(direction='DOWN'):
         '''Move the active input of a file output node up or down the list
            Arguments:
            @direction (str): in ['UP', 'DOWN'], (optional)
      
         '''
      
         pass

      def output_file_remove_active_socket():
         '''Remove active input from a file output node
         '''
      
         pass

      def parent_set():
         '''Attach selected nodes
         '''
      
         pass

      def preview_toggle():
         '''Toggle preview display for selected nodes
         '''
      
         pass

      def read_viewlayers():
         '''Read all render layers of all used scenes
         '''
      
         pass

      def render_changed():
         '''Render current scene, when input node's layer has been changed
         '''
      
         pass

      def resize():
         '''Resize a node
         '''
      
         pass

      def select(wait_to_deselect_others=False, mouse_x=0, mouse_y=0, extend=False, socket_select=False, deselect_all=False):
         '''Select the node under the cursor
            Arguments:
            @wait_to_deselect_others (bool): (optional)
            @mouse_x (int): in [-inf, inf], (optional)
            @mouse_y (int): in [-inf, inf], (optional)
            @extend (bool): (optional)
            @socket_select (bool): (optional)
            @deselect_all (bool): Deselect all when nothing under the cursor
               (optional)
      
         '''
      
         pass

      def select_all(action='TOGGLE'):
         '''(De)select all nodes
            Arguments:
            @action (str): Selection action to execute
               in ['TOGGLE', 'SELECT', 'DESELECT', 'INVERT'], (optional)
      
         '''
      
         pass

      def select_box(tweak=False, xmin=0, xmax=0, ymin=0, ymax=0, wait_for_input=True, mode='SET'):
         '''Use box selection to select nodes
            Arguments:
            @tweak (bool): Only activate when mouse is not over a node - useful for tweak gesture
               (optional)
            @xmin (int): in [-inf, inf], (optional)
            @xmax (int): in [-inf, inf], (optional)
            @ymin (int): in [-inf, inf], (optional)
            @ymax (int): in [-inf, inf], (optional)
            @wait_for_input (bool): (optional)
            @mode (str): in ['SET', 'ADD', 'SUB'], (optional)
      
         '''
      
         pass

      def select_circle(x=0, y=0, radius=25, wait_for_input=True, mode='SET'):
         '''Use circle selection to select nodes
            Arguments:
            @x (int): in [-inf, inf], (optional)
            @y (int): in [-inf, inf], (optional)
            @radius (int): in [1, inf], (optional)
            @wait_for_input (bool): (optional)
            @mode (str): in ['SET', 'ADD', 'SUB'], (optional)
      
         '''
      
         pass

      def select_grouped(extend=False, type='TYPE'):
         '''Select nodes with similar properties
            Arguments:
            @extend (bool): Extend selection instead of deselecting everything first
               (optional)
            @type (str): in ['TYPE', 'COLOR', 'PREFIX', 'SUFFIX'], (optional)
      
         '''
      
         pass

      def select_lasso(tweak=False, path=None, mode='SET'):
         '''Select nodes using lasso selection
            Arguments:
            @tweak (bool): Only activate when mouse is not over a node - useful for tweak gesture
               (optional)
            @path (OperatorMousePath): Collection of , (optional)
            @mode (str): in ['SET', 'ADD', 'SUB'], (optional)
      
         '''
      
         pass

      def select_link_viewer(NODE_OT_select=None, NODE_OT_link_viewer=None):
         '''Select node and link it to a viewer node
            Arguments:
            @NODE_OT_select (NODE_OT_select): Select the node under the cursor
               (optional)
            @NODE_OT_link_viewer (NODE_OT_link_viewer): Link to viewer node
               (optional)
      
         '''
      
         pass

      def select_linked_from():
         '''Select nodes linked from the selected ones
         '''
      
         pass

      def select_linked_to():
         '''Select nodes linked to the selected ones
         '''
      
         pass

      def select_same_type_step(prev=False):
         '''Activate and view same node type, step by step
            Arguments:
            @prev (bool): (optional)
      
         '''
      
         pass

      def shader_script_update():
         '''Update shader script node with new sockets and options from the script
         '''
      
         pass

      def switch_view_update():
         '''Update views of selected node
         '''
      
         pass

      def translate_attach(TRANSFORM_OT_translate=None, NODE_OT_attach=None, NODE_OT_insert_offset=None):
         '''Move nodes and attach to frame
            Arguments:
            @TRANSFORM_OT_translate (TRANSFORM_OT_translate): Move selected items
               (optional)
            @NODE_OT_attach (NODE_OT_attach): Attach active node to a frame
               (optional)
            @NODE_OT_insert_offset (NODE_OT_insert_offset): Automatically offset nodes on insertion
               (optional)
      
         '''
      
         pass

      def translate_attach_remove_on_cancel(TRANSFORM_OT_translate=None, NODE_OT_attach=None, NODE_OT_insert_offset=None):
         '''Move nodes and attach to frame
            Arguments:
            @TRANSFORM_OT_translate (TRANSFORM_OT_translate): Move selected items
               (optional)
            @NODE_OT_attach (NODE_OT_attach): Attach active node to a frame
               (optional)
            @NODE_OT_insert_offset (NODE_OT_insert_offset): Automatically offset nodes on insertion
               (optional)
      
         '''
      
         pass

      def tree_path_parent():
         '''Go to parent node tree
         '''
      
         pass

      def tree_socket_add(in_out='IN'):
         '''Add an input or output socket to the current node tree
            Arguments:
            @in_out (str): in ['IN', 'OUT'], (optional)
      
         '''
      
         pass

      def tree_socket_move(direction='UP'):
         '''Move a socket up or down in the current node tree's sockets stack
            Arguments:
            @direction (str): in ['UP', 'DOWN'], (optional)
      
         '''
      
         pass

      def tree_socket_remove():
         '''Remove an input or output socket to the current node tree
         '''
      
         pass

      def view_all():
         '''Resize view so you can see all nodes
         '''
      
         pass

      def view_selected():
         '''Resize view so you can see selected nodes
         '''
      
         pass

      def viewer_border(xmin=0, xmax=0, ymin=0, ymax=0, wait_for_input=True, deselect=False, extend=True):
         '''Set the boundaries for viewer operations
            Arguments:
            @xmin (int): in [-inf, inf], (optional)
            @xmax (int): in [-inf, inf], (optional)
            @ymin (int): in [-inf, inf], (optional)
            @ymax (int): in [-inf, inf], (optional)
            @wait_for_input (bool): (optional)
            @deselect (bool): Deselect rather than select items
               (optional)
            @extend (bool): Extend selection instead of deselecting everything first
               (optional)
      
         '''
      
         pass

   class object:
      '''Spcecial class, created just to reflect content of bpy.ops.object'''

      def add(radius=1.0, type='EMPTY', enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Add an object to the scene
            Arguments:
            @radius (float): in [0, inf], (optional)
            @type (str): in ['MESH', 'CURVE', 'SURFACE', 'META', 'FONT', 'VOLUME', 'ARMATURE', 'LATTICE', 'EMPTY', 'GPENCIL', 'CAMERA', 'LIGHT', 'SPEAKER', 'LIGHT_PROBE'], (optional)
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def add_named(linked=False, name=""):
         '''Add named object
            Arguments:
            @linked (bool): Duplicate object but not object data, linking to the original data
               (optional)
            @name (str): Object name to add
               (optional, never None)
      
         '''
      
         pass

      def align(bb_quality=True, align_mode='OPT_2', relative_to='OPT_4', align_axis={}):
         '''Align Objects
            Arguments:
            @bb_quality (bool): Enables high quality calculation of the bounding box for perfect results on complex shape meshes with rotation/scale (Slow)
               (optional)
            @align_mode (str): Side of object to use for alignment
               in ['OPT_1', 'OPT_2', 'OPT_3'], (optional)
            @relative_to (str): Reference location to align to
               in ['OPT_1', 'OPT_2', 'OPT_3', 'OPT_4'], (optional)
            @align_axis (str): Align to axis
               set in {'X', 'Y', 'Z'}, (optional)
      
         '''
      
         pass

      def anim_transforms_to_deltas():
         '''Convert object animation for normal transforms to delta transforms
         '''
      
         pass

      def armature_add(radius=1.0, enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Add an armature object to the scene
            Arguments:
            @radius (float): in [0, inf], (optional)
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def assign_property_defaults(process_data=True, process_bones=True):
         '''Assign the current values of custom properties as their defaults, for use as part of the rest pose state in NLA track mixing
            Arguments:
            @process_data (bool): (optional)
            @process_bones (bool): (optional)
      
         '''
      
         pass

      def bake(type='COMBINED', pass_filter={}, filepath="", width=512, height=512, margin=16, use_selected_to_active=False, cage_extrusion=0.0, cage_object="", normal_space='TANGENT', normal_r='POS_X', normal_g='POS_Y', normal_b='POS_Z', save_mode='INTERNAL', use_clear=False, use_cage=False, use_split_materials=False, use_automatic_name=False, uv_layer=""):
         '''Bake image textures of selected objects
            Arguments:
            @type (str): Type of pass to bake, some of them may not be supported by the current render engine
               in ['COMBINED', 'AO', 'SHADOW', 'NORMAL', 'UV', 'ROUGHNESS', 'EMIT', 'ENVIRONMENT', 'DIFFUSE', 'GLOSSY', 'TRANSMISSION'], (optional)
            @pass_filter (str): Filter to combined, diffuse, glossy, transmission and subsurface passes
               set in {'NONE', 'AO', 'EMIT', 'DIRECT', 'INDIRECT', 'COLOR', 'DIFFUSE', 'GLOSSY', 'TRANSMISSION'}, (optional)
            @filepath (str): Image filepath to use when saving externally
               (optional, never None)
            @width (int): Horizontal dimension of the baking map (external only)
               in [1, inf], (optional)
            @height (int): Vertical dimension of the baking map (external only)
               in [1, inf], (optional)
            @margin (int): Extends the baked result as a post process filter
               in [0, inf], (optional)
            @use_selected_to_active (bool): Bake shading on the surface of selected objects to the active object
               (optional)
            @cage_extrusion (float): Distance to use for the inward ray cast when using selected to active
               in [0, inf], (optional)
            @cage_object (str): Object to use as cage, instead of calculating the cage from the active object with cage extrusion
               (optional, never None)
            @normal_space (str): Choose normal space for baking
               in ['OBJECT', 'TANGENT'], (optional)
            @normal_r (str): Axis to bake in red channel
               in ['POS_X', 'POS_Y', 'POS_Z', 'NEG_X', 'NEG_Y', 'NEG_Z'], (optional)
            @normal_g (str): Axis to bake in green channel
               in ['POS_X', 'POS_Y', 'POS_Z', 'NEG_X', 'NEG_Y', 'NEG_Z'], (optional)
            @normal_b (str): Axis to bake in blue channel
               in ['POS_X', 'POS_Y', 'POS_Z', 'NEG_X', 'NEG_Y', 'NEG_Z'], (optional)
            @save_mode (str): Choose how to save the baking map
               in ['INTERNAL', 'EXTERNAL'], (optional)
            @use_clear (bool): Clear Images before baking (only for internal saving)
               (optional)
            @use_cage (bool): Cast rays to active object from a cage
               (optional)
            @use_split_materials (bool): Split baked maps per material, using material name in output file (external only)
               (optional)
            @use_automatic_name (bool): Automatically name the output file with the pass type
               (optional)
            @uv_layer (str): UV layer to override active
               (optional, never None)
      
         '''
      
         pass

      def bake_image():
         '''Bake image textures of selected objects
         '''
      
         pass

      def camera_add(enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Add a camera object to the scene
            Arguments:
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def collection_add():
         '''Add an object to a new collection
         '''
      
         pass

      def collection_instance_add(name="Collection", collection='', align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Add a collection instance
            Arguments:
            @name (str): Collection name to add
               (optional, never None)
            @collection (str): in [], (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def collection_link(collection=''):
         '''Add an object to an existing collection
            Arguments:
            @collection (str): in [], (optional)
      
         '''
      
         pass

      def collection_objects_select():
         '''Select all objects in collection
         '''
      
         pass

      def collection_remove():
         '''Remove the active object from this collection
         '''
      
         pass

      def collection_unlink():
         '''Unlink the collection from all objects
         '''
      
         pass

      def constraint_add(type=''):
         '''Add a constraint to the active object
            Arguments:
            @type (str): in [], (optional)
      
         '''
      
         pass

      def constraint_add_with_targets(type=''):
         '''Add a constraint to the active object, with target (where applicable) set to the selected Objects/Bones
            Arguments:
            @type (str): in [], (optional)
      
         '''
      
         pass

      def constraints_clear():
         '''Clear all the constraints for the active Object only
         '''
      
         pass

      def constraints_copy():
         '''Copy constraints to other selected objects
         '''
      
         pass

      def convert(target='MESH', keep_original=False):
         '''Convert selected objects to another type
            Arguments:
            @target (str): Type of object to convert to
               in ['CURVE', 'MESH', 'GPENCIL'], (optional)
            @keep_original (bool): Keep original objects instead of replacing them
               (optional)
      
         '''
      
         pass

      def correctivesmooth_bind(modifier=""):
         '''Bind base pose in Corrective Smooth modifier
            Arguments:
            @modifier (str): Name of the modifier to edit
               (optional, never None)
      
         '''
      
         pass

      def data_transfer(use_reverse_transfer=False, use_freeze=False, data_type='', use_create=True, vert_mapping='NEAREST', edge_mapping='NEAREST', loop_mapping='NEAREST_POLYNOR', poly_mapping='NEAREST', use_auto_transform=False, use_object_transform=True, use_max_distance=False, max_distance=1.0, ray_radius=0.0, islands_precision=0.1, layers_select_src='ACTIVE', layers_select_dst='ACTIVE', mix_mode='REPLACE', mix_factor=1.0):
         '''Transfer data layer(s) (weights, edge sharp, ...) from active to selected meshes
            Arguments:
            @use_reverse_transfer (bool): Transfer from selected objects to active one
               (optional)
            @use_freeze (bool): Prevent changes to settings to re-run the operator, handy to change several things at once with heavy geometry
               (optional)
            @data_type (str): Which data to transfer
               in ['VGROUP_WEIGHTS', 'BEVEL_WEIGHT_VERT', 'SHARP_EDGE', 'SEAM', 'CREASE', 'BEVEL_WEIGHT_EDGE', 'FREESTYLE_EDGE', 'CUSTOM_NORMAL', 'VCOL', 'UV', 'SMOOTH', 'FREESTYLE_FACE'], (optional)
            @use_create (bool): Add data layers on destination meshes if needed
               (optional)
            @vert_mapping (str): Method used to map source vertices to destination ones
               in ['TOPOLOGY', 'NEAREST', 'EDGE_NEAREST', 'EDGEINTERP_NEAREST', 'POLY_NEAREST', 'POLYINTERP_NEAREST', 'POLYINTERP_VNORPROJ'], (optional)
            @edge_mapping (str): Method used to map source edges to destination ones
               in ['TOPOLOGY', 'VERT_NEAREST', 'NEAREST', 'POLY_NEAREST', 'EDGEINTERP_VNORPROJ'], (optional)
            @loop_mapping (str): Method used to map source faces' corners to destination ones
               in ['TOPOLOGY', 'NEAREST_NORMAL', 'NEAREST_POLYNOR', 'NEAREST_POLY', 'POLYINTERP_NEAREST', 'POLYINTERP_LNORPROJ'], (optional)
            @poly_mapping (str): Method used to map source faces to destination ones
               in ['TOPOLOGY', 'NEAREST', 'NORMAL', 'POLYINTERP_PNORPROJ'], (optional)
            @use_auto_transform (bool): Automatically compute transformation to get the best possible match between source and destination meshes (WARNING: results will never be as good as manual matching of objects)
               (optional)
            @use_object_transform (bool): Evaluate source and destination meshes in global space
               (optional)
            @use_max_distance (bool): Source elements must be closer than given distance from destination one
               (optional)
            @max_distance (float): Maximum allowed distance between source and destination element, for non-topology mappings
               in [0, inf], (optional)
            @ray_radius (float): 'Width' of rays (especially useful when raycasting against vertices or edges)
               in [0, inf], (optional)
            @islands_precision (float): Factor controlling precision of islands handling (the higher, the better the results)
               in [0, 10], (optional)
            @layers_select_src (str): Which layers to transfer, in case of multi-layers types
               in ['ACTIVE', 'ALL', 'BONE_SELECT', 'BONE_DEFORM'], (optional)
            @layers_select_dst (str): How to match source and destination layers
               in ['ACTIVE', 'NAME', 'INDEX'], (optional)
            @mix_mode (str): How to affect destination elements with source values
               in ['REPLACE', 'ABOVE_THRESHOLD', 'BELOW_THRESHOLD', 'MIX', 'ADD', 'SUB', 'MUL'], (optional)
            @mix_factor (float): Factor to use when applying data to destination (exact behavior depends on mix mode)
               in [0, 1], (optional)
      
         '''
      
         pass

      def datalayout_transfer(modifier="", data_type='', use_delete=False, layers_select_src='ACTIVE', layers_select_dst='ACTIVE'):
         '''Transfer layout of data layer(s) from active to selected meshes
            Arguments:
            @modifier (str): Name of the modifier to edit
               (optional, never None)
            @data_type (str): Which data to transfer
               in ['VGROUP_WEIGHTS', 'BEVEL_WEIGHT_VERT', 'SHARP_EDGE', 'SEAM', 'CREASE', 'BEVEL_WEIGHT_EDGE', 'FREESTYLE_EDGE', 'CUSTOM_NORMAL', 'VCOL', 'UV', 'SMOOTH', 'FREESTYLE_FACE'], (optional)
            @use_delete (bool): Also delete some data layers from destination if necessary, so that it matches exactly source
               (optional)
            @layers_select_src (str): Which layers to transfer, in case of multi-layers types
               in ['ACTIVE', 'ALL', 'BONE_SELECT', 'BONE_DEFORM'], (optional)
            @layers_select_dst (str): How to match source and destination layers
               in ['ACTIVE', 'NAME', 'INDEX'], (optional)
      
         '''
      
         pass

      def delete(use_global=False, confirm=True):
         '''Delete selected objects
            Arguments:
            @use_global (bool): Remove object from all scenes
               (optional)
            @confirm (bool): Prompt for confirmation
               (optional)
      
         '''
      
         pass

      def drop_named_image(filepath="", relative_path=True, name="", align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Add an empty image type to scene with data
            Arguments:
            @filepath (str): Path to image file
               (optional, never None)
            @relative_path (bool): Select the file relative to the blend file
               (optional)
            @name (str): Image name to assign
               (optional, never None)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def drop_named_material(name="Material"):
         '''undocumented
            Arguments:
            @name (str): Material name to assign
               (optional, never None)
      
         '''
      
         pass

      def duplicate(linked=False, mode='TRANSLATION'):
         '''Duplicate selected objects
            Arguments:
            @linked (bool): Duplicate object but not object data, linking to the original data
               (optional)
            @mode (str): in ['INIT', 'DUMMY', 'TRANSLATION', 'ROTATION', 'RESIZE', 'SKIN_RESIZE', 'TOSPHERE', 'SHEAR', 'BEND', 'SHRINKFATTEN', 'TILT', 'TRACKBALL', 'PUSHPULL', 'CREASE', 'MIRROR', 'BONE_SIZE', 'BONE_ENVELOPE', 'BONE_ENVELOPE_DIST', 'CURVE_SHRINKFATTEN', 'MASK_SHRINKFATTEN', 'GPENCIL_SHRINKFATTEN', 'BONE_ROLL', 'TIME_TRANSLATE', 'TIME_SLIDE', 'TIME_SCALE', 'TIME_EXTEND', 'BAKE_TIME', 'BWEIGHT', 'ALIGN', 'EDGESLIDE', 'SEQSLIDE', 'GPENCIL_OPACITY'], (optional)
      
         '''
      
         pass

      def duplicate_move(OBJECT_OT_duplicate=None, TRANSFORM_OT_translate=None):
         '''Duplicate selected objects and move them
            Arguments:
            @OBJECT_OT_duplicate (OBJECT_OT_duplicate): Duplicate selected objects
               (optional)
            @TRANSFORM_OT_translate (TRANSFORM_OT_translate): Move selected items
               (optional)
      
         '''
      
         pass

      def duplicate_move_linked(OBJECT_OT_duplicate=None, TRANSFORM_OT_translate=None):
         '''Duplicate selected objects and move them
            Arguments:
            @OBJECT_OT_duplicate (OBJECT_OT_duplicate): Duplicate selected objects
               (optional)
            @TRANSFORM_OT_translate (TRANSFORM_OT_translate): Move selected items
               (optional)
      
         '''
      
         pass

      def duplicates_make_real(use_base_parent=False, use_hierarchy=False):
         '''Make instanced objects attached to this object real
            Arguments:
            @use_base_parent (bool): Parent newly created objects to the original duplicator
               (optional)
            @use_hierarchy (bool): Maintain parent child relationships
               (optional)
      
         '''
      
         pass

      def editmode_toggle():
         '''Toggle object's editmode
         '''
      
         pass

      def effector_add(type='FORCE', radius=1.0, enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Add an empty object with a physics effector to the scene
            Arguments:
            @type (str): in ['FORCE', 'WIND', 'VORTEX', 'MAGNET', 'HARMONIC', 'CHARGE', 'LENNARDJ', 'TEXTURE', 'GUIDE', 'BOID', 'TURBULENCE', 'DRAG', 'SMOKE'], (optional)
            @radius (float): in [0, inf], (optional)
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def empty_add(type='PLAIN_AXES', radius=1.0, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Add an empty object to the scene
            Arguments:
            @type (str): in ['PLAIN_AXES', 'ARROWS', 'SINGLE_ARROW', 'CIRCLE', 'CUBE', 'SPHERE', 'CONE', 'IMAGE'], (optional)
            @radius (float): in [0, inf], (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def end_background_check():
         '''Stop checking for update in the background
         '''
      
         pass

      def explode_refresh(modifier=""):
         '''Refresh data in the Explode modifier
            Arguments:
            @modifier (str): Name of the modifier to edit
               (optional, never None)
      
         '''
      
         pass

      def face_map_add():
         '''Add a new face map to the active object
         '''
      
         pass

      def face_map_assign():
         '''Assign faces to a face map
         '''
      
         pass

      def face_map_deselect():
         '''Deselect faces belonging to a face map
         '''
      
         pass

      def face_map_move(direction='UP'):
         '''Move the active face map up/down in the list
            Arguments:
            @direction (str): Direction to move, UP or DOWN
               in ['UP', 'DOWN'], (optional)
      
         '''
      
         pass

      def face_map_remove():
         '''Remove a face map from the active object
         '''
      
         pass

      def face_map_remove_from():
         '''Remove faces from a face map
         '''
      
         pass

      def face_map_select():
         '''Select faces belonging to a face map
         '''
      
         pass

      def forcefield_toggle():
         '''Toggle object's force field
         '''
      
         pass

      def gpencil_add(radius=1.0, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0), type='EMPTY'):
         '''Add a Grease Pencil object to the scene
            Arguments:
            @radius (float): in [0, inf], (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @type (str): in ['EMPTY', 'STROKE', 'MONKEY'], (optional)
      
         '''
      
         pass

      def gpencil_modifier_add(type='CURVE'):
         '''Add a procedural operation/effect to the active grease pencil object
            Arguments:
            @type (str): in ['DATA_TRANSFER', 'MESH_CACHE', 'MESH_SEQUENCE_CACHE', 'NORMAL_EDIT', 'WEIGHTED_NORMAL', 'UV_PROJECT', 'UV_WARP', 'VERTEX_WEIGHT_EDIT', 'VERTEX_WEIGHT_MIX', 'VERTEX_WEIGHT_PROXIMITY', 'ARRAY', 'BEVEL', 'BOOLEAN', 'BUILD', 'DECIMATE', 'EDGE_SPLIT', 'MASK', 'MIRROR', 'MULTIRES', 'REMESH', 'SCREW', 'SKIN', 'SOLIDIFY', 'SUBSURF', 'TRIANGULATE', 'WELD', 'WIREFRAME', 'ARMATURE', 'CAST', 'CURVE', 'DISPLACE', 'HOOK', 'LAPLACIANDEFORM', 'LATTICE', 'MESH_DEFORM', 'SHRINKWRAP', 'SIMPLE_DEFORM', 'SMOOTH', 'CORRECTIVE_SMOOTH', 'LAPLACIANSMOOTH', 'SURFACE_DEFORM', 'WARP', 'WAVE', 'CLOTH', 'COLLISION', 'DYNAMIC_PAINT', 'EXPLODE', 'FLUID', 'OCEAN', 'PARTICLE_INSTANCE', 'PARTICLE_SYSTEM', 'SOFT_BODY', 'SURFACE'], (optional)
      
         '''
      
         pass

      def gpencil_modifier_apply(apply_as='DATA', modifier=""):
         '''Apply modifier and remove from the stack
            Arguments:
            @apply_as (str): How to apply the modifier to the geometry
               in ['DATA', 'SHAPE'], (optional)
            @modifier (str): Name of the modifier to edit
               (optional, never None)
      
         '''
      
         pass

      def gpencil_modifier_copy(modifier=""):
         '''Duplicate modifier at the same position in the stack
            Arguments:
            @modifier (str): Name of the modifier to edit
               (optional, never None)
      
         '''
      
         pass

      def gpencil_modifier_move_down(modifier=""):
         '''Move modifier down in the stack
            Arguments:
            @modifier (str): Name of the modifier to edit
               (optional, never None)
      
         '''
      
         pass

      def gpencil_modifier_move_up(modifier=""):
         '''Move modifier up in the stack
            Arguments:
            @modifier (str): Name of the modifier to edit
               (optional, never None)
      
         '''
      
         pass

      def gpencil_modifier_remove(modifier=""):
         '''Remove a modifier from the active grease pencil object
            Arguments:
            @modifier (str): Name of the modifier to edit
               (optional, never None)
      
         '''
      
         pass

      def hide_collection(collection_index=-1, toggle=False):
         '''Show only objects in collection (Shift to extend)
            Arguments:
            @collection_index (int): Index of the collection to change visibility
               in [-1, inf], (optional)
            @toggle (bool): Toggle visibility
               (optional)
      
         '''
      
         pass

      def hide_render_clear_all():
         '''Reveal all render objects by setting the hide render flag
         '''
      
         pass

      def hide_view_clear(select=True):
         '''Reveal temporarily hidden objects
            Arguments:
            @select (bool): (optional)
      
         '''
      
         pass

      def hide_view_set(unselected=False):
         '''Temporarily hide objects from the viewport
            Arguments:
            @unselected (bool): Hide unselected rather than selected objects
               (optional)
      
         '''
      
         pass

      def hook_add_newob():
         '''Hook selected vertices to a newly created object
         '''
      
         pass

      def hook_add_selob(use_bone=False):
         '''Hook selected vertices to the first selected object
            Arguments:
            @use_bone (bool): Assign the hook to the hook objects active bone
               (optional)
      
         '''
      
         pass

      def hook_assign(modifier=''):
         '''Assign the selected vertices to a hook
            Arguments:
            @modifier (str): Modifier number to assign to
               in [], (optional)
      
         '''
      
         pass

      def hook_recenter(modifier=''):
         '''Set hook center to cursor position
            Arguments:
            @modifier (str): Modifier number to assign to
               in [], (optional)
      
         '''
      
         pass

      def hook_remove(modifier=''):
         '''Remove a hook from the active object
            Arguments:
            @modifier (str): Modifier number to remove
               in [], (optional)
      
         '''
      
         pass

      def hook_reset(modifier=''):
         '''Recalculate and clear offset transformation
            Arguments:
            @modifier (str): Modifier number to assign to
               in [], (optional)
      
         '''
      
         pass

      def hook_select(modifier=''):
         '''Select affected vertices on mesh
            Arguments:
            @modifier (str): Modifier number to remove
               in [], (optional)
      
         '''
      
         pass

      def instance_offset_from_cursor():
         '''Set offset used for collection instances based on cursor position
         '''
      
         pass

      def isolate_type_render():
         '''Hide unselected render objects of same type as active by setting the hide render flag
         '''
      
         pass

      def join():
         '''Join selected objects into active object
         '''
      
         pass

      def join_shapes():
         '''Copy the current resulting shape of another selected object to this one
         '''
      
         pass

      def join_uvs():
         '''Transfer UV Maps from active to selected objects (needs matching geometry)
         '''
      
         pass

      def laplaciandeform_bind(modifier=""):
         '''Bind mesh to system in laplacian deform modifier
            Arguments:
            @modifier (str): Name of the modifier to edit
               (optional, never None)
      
         '''
      
         pass

      def light_add(type='POINT', radius=1.0, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Add a light object to the scene
            Arguments:
            @type (str): in ['POINT', 'SUN', 'SPOT', 'AREA'], (optional)
            @radius (float): in [0, inf], (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def lightprobe_add(type='CUBEMAP', radius=1.0, enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Add a light probe object
            Arguments:
            @type (str): in ['CUBEMAP', 'PLANAR', 'GRID'], (optional)
            @radius (float): in [0, inf], (optional)
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def link_to_collection(collection_index=-1, is_new=False, new_collection_name=""):
         '''Link objects to a collection
            Arguments:
            @collection_index (int): Index of the collection to move to
               in [-1, inf], (optional)
            @is_new (bool): Move objects to a new collection
               (optional)
            @new_collection_name (str): Name of the newly added collection
               (optional, never None)
      
         '''
      
         pass

      def load_background_image(filepath="", filter_image=True, filter_folder=True, view_align=True):
         '''Add a reference image into the background behind objects
            Arguments:
            @filepath (str): (optional, never None)
            @filter_image (bool): (optional)
            @filter_folder (bool): (optional)
            @view_align (bool): (optional)
      
         '''
      
         pass

      def load_reference_image(filepath="", filter_image=True, filter_folder=True, view_align=True):
         '''Add a reference image into the scene between objects
            Arguments:
            @filepath (str): (optional, never None)
            @filter_image (bool): (optional)
            @filter_folder (bool): (optional)
            @view_align (bool): (optional)
      
         '''
      
         pass

      def location_clear(clear_delta=False):
         '''Clear the object's location
            Arguments:
            @clear_delta (bool): Clear delta location in addition to clearing the normal location transform
               (optional)
      
         '''
      
         pass

      def make_dupli_face():
         '''Convert objects into instanced faces
         '''
      
         pass

      def make_links_data(type='OBDATA'):
         '''Apply active object links to other selected objects
            Arguments:
            @type (str): in ['OBDATA', 'MATERIAL', 'ANIMATION', 'GROUPS', 'DUPLICOLLECTION', 'MODIFIERS', 'FONTS'], (optional)
      
         '''
      
         pass

      def make_links_scene(scene=''):
         '''Link selection to another scene
            Arguments:
            @scene (str): in [], (optional)
      
         '''
      
         pass

      def make_local(type='SELECT_OBJECT'):
         '''Make library linked data-blocks local to this file
            Arguments:
            @type (str): in ['SELECT_OBJECT', 'SELECT_OBDATA', 'SELECT_OBDATA_MATERIAL', 'ALL'], (optional)
      
         '''
      
         pass

      def make_override_library(object='DEFAULT'):
         '''Make a local override of this library linked data-block
            Arguments:
            @object (str): Name of lib-linked/collection object to make an override from
               in ['DEFAULT'], (optional)
      
         '''
      
         pass

      def make_single_user(type='SELECTED_OBJECTS', object=False, obdata=False, material=False, animation=False):
         '''Make linked data local to each object
            Arguments:
            @type (str): in ['SELECTED_OBJECTS', 'ALL'], (optional)
            @object (bool): Make single user objects
               (optional)
            @obdata (bool): Make single user object data
               (optional)
            @material (bool): Make materials local to each data-block
               (optional)
            @animation (bool): Make animation data local to each object
               (optional)
      
         '''
      
         pass

      def material_slot_add():
         '''Add a new material slot
         '''
      
         pass

      def material_slot_assign():
         '''Assign active material slot to selection
         '''
      
         pass

      def material_slot_copy():
         '''Copy material to selected objects
         '''
      
         pass

      def material_slot_deselect():
         '''Deselect by active material slot
         '''
      
         pass

      def material_slot_move(direction='UP'):
         '''Move the active material up/down in the list
            Arguments:
            @direction (str): Direction to move the active material towards
               in ['UP', 'DOWN'], (optional)
      
         '''
      
         pass

      def material_slot_remove():
         '''Remove the selected material slot
         '''
      
         pass

      def material_slot_remove_unused():
         '''Remove unused material slots
         '''
      
         pass

      def material_slot_select():
         '''Select by active material slot
         '''
      
         pass

      def meshdeform_bind(modifier=""):
         '''Bind mesh to cage in mesh deform modifier
            Arguments:
            @modifier (str): Name of the modifier to edit
               (optional, never None)
      
         '''
      
         pass

      def metaball_add(type='BALL', radius=2.0, enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Add an metaball object to the scene
            Arguments:
            @type (str): in ['BALL', 'CAPSULE', 'PLANE', 'ELLIPSOID', 'CUBE'], (optional)
            @radius (float): in [0, inf], (optional)
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def mode_set(mode='OBJECT', toggle=False):
         '''Sets the object interaction mode
            Arguments:
            @mode (str): in ['OBJECT', 'EDIT', 'POSE', 'SCULPT', 'VERTEX_PAINT', 'WEIGHT_PAINT', 'TEXTURE_PAINT', 'PARTICLE_EDIT', 'EDIT_GPENCIL', 'SCULPT_GPENCIL', 'PAINT_GPENCIL', 'VERTEX_GPENCIL', 'WEIGHT_GPENCIL'], (optional)
            @toggle (bool): (optional)
      
         '''
      
         pass

      def mode_set_with_submode(mode='OBJECT', toggle=False, mesh_select_mode={}):
         '''Sets the object interaction mode
            Arguments:
            @mode (str): in ['OBJECT', 'EDIT', 'POSE', 'SCULPT', 'VERTEX_PAINT', 'WEIGHT_PAINT', 'TEXTURE_PAINT', 'PARTICLE_EDIT', 'EDIT_GPENCIL', 'SCULPT_GPENCIL', 'PAINT_GPENCIL', 'VERTEX_GPENCIL', 'WEIGHT_GPENCIL'], (optional)
            @toggle (bool): (optional)
            @mesh_select_mode (str): set in {'VERT', 'EDGE', 'FACE'}, (optional)
      
         '''
      
         pass

      def modifier_add(type='SUBSURF'):
         '''Add a procedural operation/effect to the active object
            Arguments:
            @type (str): in ['DATA_TRANSFER', 'MESH_CACHE', 'MESH_SEQUENCE_CACHE', 'NORMAL_EDIT', 'WEIGHTED_NORMAL', 'UV_PROJECT', 'UV_WARP', 'VERTEX_WEIGHT_EDIT', 'VERTEX_WEIGHT_MIX', 'VERTEX_WEIGHT_PROXIMITY', 'ARRAY', 'BEVEL', 'BOOLEAN', 'BUILD', 'DECIMATE', 'EDGE_SPLIT', 'MASK', 'MIRROR', 'MULTIRES', 'REMESH', 'SCREW', 'SKIN', 'SOLIDIFY', 'SUBSURF', 'TRIANGULATE', 'WELD', 'WIREFRAME', 'ARMATURE', 'CAST', 'CURVE', 'DISPLACE', 'HOOK', 'LAPLACIANDEFORM', 'LATTICE', 'MESH_DEFORM', 'SHRINKWRAP', 'SIMPLE_DEFORM', 'SMOOTH', 'CORRECTIVE_SMOOTH', 'LAPLACIANSMOOTH', 'SURFACE_DEFORM', 'WARP', 'WAVE', 'CLOTH', 'COLLISION', 'DYNAMIC_PAINT', 'EXPLODE', 'FLUID', 'OCEAN', 'PARTICLE_INSTANCE', 'PARTICLE_SYSTEM', 'SOFT_BODY', 'SURFACE'], (optional)
      
         '''
      
         pass

      def modifier_apply(apply_as='DATA', modifier=""):
         '''Apply modifier and remove from the stack
            Arguments:
            @apply_as (str): How to apply the modifier to the geometry
               in ['DATA', 'SHAPE'], (optional)
            @modifier (str): Name of the modifier to edit
               (optional, never None)
      
         '''
      
         pass

      def modifier_convert(modifier=""):
         '''Convert particles to a mesh object
            Arguments:
            @modifier (str): Name of the modifier to edit
               (optional, never None)
      
         '''
      
         pass

      def modifier_copy(modifier=""):
         '''Duplicate modifier at the same position in the stack
            Arguments:
            @modifier (str): Name of the modifier to edit
               (optional, never None)
      
         '''
      
         pass

      def modifier_move_down(modifier=""):
         '''Move modifier down in the stack
            Arguments:
            @modifier (str): Name of the modifier to edit
               (optional, never None)
      
         '''
      
         pass

      def modifier_move_up(modifier=""):
         '''Move modifier up in the stack
            Arguments:
            @modifier (str): Name of the modifier to edit
               (optional, never None)
      
         '''
      
         pass

      def modifier_remove(modifier=""):
         '''Remove a modifier from the active object
            Arguments:
            @modifier (str): Name of the modifier to edit
               (optional, never None)
      
         '''
      
         pass

      def move_to_collection(collection_index=-1, is_new=False, new_collection_name=""):
         '''Move objects to a collection
            Arguments:
            @collection_index (int): Index of the collection to move to
               in [-1, inf], (optional)
            @is_new (bool): Move objects to a new collection
               (optional)
            @new_collection_name (str): Name of the newly added collection
               (optional, never None)
      
         '''
      
         pass

      def multires_base_apply(modifier=""):
         '''Modify the base mesh to conform to the displaced mesh
            Arguments:
            @modifier (str): Name of the modifier to edit
               (optional, never None)
      
         '''
      
         pass

      def multires_external_pack():
         '''Pack displacements from an external file
         '''
      
         pass

      def multires_external_save(filepath="", hide_props_region=True, check_existing=True, filter_blender=False, filter_backup=False, filter_image=False, filter_movie=False, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=True, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=9, relative_path=True, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA', modifier=""):
         '''Save displacements to an external file
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @hide_props_region (bool): Collapse the region displaying the operator settings
               (optional)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @relative_path (bool): Select the file relative to the blend file
               (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
            @modifier (str): Name of the modifier to edit
               (optional, never None)
      
         '''
      
         pass

      def multires_higher_levels_delete(modifier=""):
         '''Deletes the higher resolution mesh, potential loss of detail
            Arguments:
            @modifier (str): Name of the modifier to edit
               (optional, never None)
      
         '''
      
         pass

      def multires_reshape(modifier=""):
         '''Copy vertex coordinates from other object
            Arguments:
            @modifier (str): Name of the modifier to edit
               (optional, never None)
      
         '''
      
         pass

      def multires_subdivide(modifier=""):
         '''Add a new level of subdivision
            Arguments:
            @modifier (str): Name of the modifier to edit
               (optional, never None)
      
         '''
      
         pass

      def ocean_bake(modifier="", free=False):
         '''Bake an image sequence of ocean data
            Arguments:
            @modifier (str): Name of the modifier to edit
               (optional, never None)
            @free (bool): Free the bake, rather than generating it
               (optional)
      
         '''
      
         pass

      def origin_clear():
         '''Clear the object's origin
         '''
      
         pass

      def origin_set(type='GEOMETRY_ORIGIN', center='MEDIAN'):
         '''Set the object's origin, by either moving the data, or set to center of data, or use 3D cursor
            Arguments:
            @type (str): in ['GEOMETRY_ORIGIN', 'ORIGIN_GEOMETRY', 'ORIGIN_CURSOR', 'ORIGIN_CENTER_OF_MASS', 'ORIGIN_CENTER_OF_VOLUME'], (optional)
            @center (str): in ['MEDIAN', 'BOUNDS'], (optional)
      
         '''
      
         pass

      def parent_clear(type='CLEAR'):
         '''Clear the object's parenting
            Arguments:
            @type (str): in ['CLEAR', 'CLEAR_KEEP_TRANSFORM', 'CLEAR_INVERSE'], (optional)
      
         '''
      
         pass

      def parent_no_inverse_set():
         '''Set the object's parenting without setting the inverse parent correction
         '''
      
         pass

      def parent_set(type='OBJECT', xmirror=False, keep_transform=False):
         '''Set the object's parenting
            Arguments:
            @type (str): in ['OBJECT', 'ARMATURE', 'ARMATURE_NAME', 'ARMATURE_AUTO', 'ARMATURE_ENVELOPE', 'BONE', 'BONE_RELATIVE', 'CURVE', 'FOLLOW', 'PATH_CONST', 'LATTICE', 'VERTEX', 'VERTEX_TRI'], (optional)
            @xmirror (bool): Apply weights symmetrically along X axis, for Envelope/Automatic vertex groups creation
               (optional)
            @keep_transform (bool): Apply transformation before parenting
               (optional)
      
         '''
      
         pass

      def particle_system_add():
         '''Add a particle system
         '''
      
         pass

      def particle_system_remove():
         '''Remove the selected particle system
         '''
      
         pass

      def paths_calculate(start_frame=1, end_frame=250):
         '''Calculate motion paths for the selected objects
            Arguments:
            @start_frame (int): First frame to calculate object paths on
               in [-1048574, 1048574], (optional)
            @end_frame (int): Last frame to calculate object paths on
               in [-1048574, 1048574], (optional)
      
         '''
      
         pass

      def paths_clear(only_selected=False):
         '''Clear path caches for all objects, hold Shift key for selected objects only
            Arguments:
            @only_selected (bool): Only clear paths from selected objects
               (optional)
      
         '''
      
         pass

      def paths_range_update():
         '''Update frame range for motion paths from the Scene's current frame range
         '''
      
         pass

      def paths_update():
         '''Recalculate paths for selected objects
         '''
      
         pass

      def posemode_toggle():
         '''Enable or disable posing/selecting bones
         '''
      
         pass

      def proxy_make(object='DEFAULT'):
         '''Add empty object to become local replacement data of a library-linked object
            Arguments:
            @object (str): Name of lib-linked/collection object to make a proxy for
               in ['DEFAULT'], (optional)
      
         '''
      
         pass

      def quadriflow_remesh(use_paint_symmetry=True, use_preserve_sharp=False, use_preserve_boundary=False, preserve_paint_mask=False, smooth_normals=False, mode='FACES', target_ratio=1.0, target_edge_length=0.1, target_faces=4000, mesh_area=-1, seed=0):
         '''Create a new quad based mesh using the surface data of the current mesh. All data layers will be lost
            Arguments:
            @use_paint_symmetry (bool): Generates a symmetrical mesh using the paint symmetry configuration
               (optional)
            @use_preserve_sharp (bool): Try to preserve sharp features on the mesh
               (optional)
            @use_preserve_boundary (bool): Try to preserve mesh boundary on the mesh
               (optional)
            @preserve_paint_mask (bool): Reproject the paint mask onto the new mesh
               (optional)
            @smooth_normals (bool): Set the output mesh normals to smooth
               (optional)
            @mode (str): How to specify the amount of detail for the new mesh
               in ['RATIO', 'EDGE', 'FACES'], (optional)
            @target_ratio (float): Relative number of faces compared to the current mesh
               in [0, inf], (optional)
            @target_edge_length (float): Target edge length in the new mesh
               in [1e-07, inf], (optional)
            @target_faces (int): Approximate number of faces (quads) in the new mesh
               in [1, inf], (optional)
            @mesh_area (float): This property is only used to cache the object area for later calculations
               in [-inf, inf], (optional)
            @seed (int): Random seed to use with the solver. Different seeds will cause the remesher to come up with different quad layouts on the mesh
               in [0, inf], (optional)
      
         '''
      
         pass

      def quick_explode(style='EXPLODE', amount=100, frame_duration=50, frame_start=1, frame_end=10, velocity=1.0, fade=True):
         '''Make selected objects explode
            Arguments:
            @style (str): in ['EXPLODE', 'BLEND'], (optional)
            @amount (int): in [2, 10000], (optional)
            @frame_duration (int): in [1, 300000], (optional)
            @frame_start (int): in [1, 300000], (optional)
            @frame_end (int): in [1, 300000], (optional)
            @velocity (float): in [0, 300000], (optional)
            @fade (bool): Fade the pieces over time
               (optional)
      
         '''
      
         pass

      def quick_fur(density='MEDIUM', view_percentage=10, length=0.1):
         '''Add fur setup to the selected objects
            Arguments:
            @density (str): in ['LIGHT', 'MEDIUM', 'HEAVY'], (optional)
            @view_percentage (int): in [1, 100], (optional)
            @length (float): in [0.001, 100], (optional)
      
         '''
      
         pass

      def quick_liquid(show_flows=False):
         '''undocumented
            Arguments:
            @show_flows (bool): Keep the liquid objects visible during rendering
               (optional)
      
         '''
      
         pass

      def quick_smoke(style='SMOKE', show_flows=False):
         '''Use selected objects as smoke emitters
            Arguments:
            @style (str): in ['SMOKE', 'FIRE', 'BOTH'], (optional)
            @show_flows (bool): Keep the smoke objects visible during rendering
               (optional)
      
         '''
      
         pass

      def randomize_transform(random_seed=0, use_delta=False, use_loc=True, loc=(0.0, 0.0, 0.0), use_rot=True, rot=(0.0, 0.0, 0.0), use_scale=True, scale_even=False, scale=(1.0, 1.0, 1.0)):
         '''Randomize objects loc/rot/scale
            Arguments:
            @random_seed (int): Seed value for the random generator
               in [0, 10000], (optional)
            @use_delta (bool): Randomize delta transform values instead of regular transform
               (optional)
            @use_loc (bool): Randomize the location values
               (optional)
            @loc (float): Maximum distance the objects can spread over each axis
               array of 3 items in [-100, 100], (optional)
            @use_rot (bool): Randomize the rotation values
               (optional)
            @rot (float): Maximum rotation over each axis
               array of 3 items in [-3.14159, 3.14159], (optional)
            @use_scale (bool): Randomize the scale values
               (optional)
            @scale_even (bool): Use the same scale value for all axis
               (optional)
            @scale (float): Maximum scale randomization over each axis
               array of 3 items in [-100, 100], (optional)
      
         '''
      
         pass

      def rotation_clear(clear_delta=False):
         '''Clear the object's rotation
            Arguments:
            @clear_delta (bool): Clear delta rotation in addition to clearing the normal rotation transform
               (optional)
      
         '''
      
         pass

      def scale_clear(clear_delta=False):
         '''Clear the object's scale
            Arguments:
            @clear_delta (bool): Clear delta scale in addition to clearing the normal scale transform
               (optional)
      
         '''
      
         pass

      def select_all(action='TOGGLE'):
         '''Change selection of all visible objects in scene
            Arguments:
            @action (str): Selection action to execute
               in ['TOGGLE', 'SELECT', 'DESELECT', 'INVERT'], (optional)
      
         '''
      
         pass

      def select_by_type(extend=False, type='MESH'):
         '''Select all visible objects that are of a type
            Arguments:
            @extend (bool): Extend selection instead of deselecting everything first
               (optional)
            @type (str): in ['MESH', 'CURVE', 'SURFACE', 'META', 'FONT', 'VOLUME', 'ARMATURE', 'LATTICE', 'EMPTY', 'GPENCIL', 'CAMERA', 'LIGHT', 'SPEAKER', 'LIGHT_PROBE'], (optional)
      
         '''
      
         pass

      def select_camera(extend=False):
         '''Select the active camera
            Arguments:
            @extend (bool): Extend the selection
               (optional)
      
         '''
      
         pass

      def select_grouped(extend=False, type='CHILDREN_RECURSIVE'):
         '''Select all visible objects grouped by various properties
            Arguments:
            @extend (bool): Extend selection instead of deselecting everything first
               (optional)
            @type (str): in ['CHILDREN_RECURSIVE', 'CHILDREN', 'PARENT', 'SIBLINGS', 'TYPE', 'COLLECTION', 'HOOK', 'PASS', 'COLOR', 'KEYINGSET', 'LIGHT_TYPE'], (optional)
      
         '''
      
         pass

      def select_hierarchy(direction='PARENT', extend=False):
         '''Select object relative to the active object's position in the hierarchy
            Arguments:
            @direction (str): Direction to select in the hierarchy
               in ['PARENT', 'CHILD'], (optional)
            @extend (bool): Extend the existing selection
               (optional)
      
         '''
      
         pass

      def select_less():
         '''Deselect objects at the boundaries of parent/child relationships
         '''
      
         pass

      def select_linked(extend=False, type='OBDATA'):
         '''Select all visible objects that are linked
            Arguments:
            @extend (bool): Extend selection instead of deselecting everything first
               (optional)
            @type (str): in ['OBDATA', 'MATERIAL', 'DUPGROUP', 'PARTICLE', 'LIBRARY', 'LIBRARY_OBDATA'], (optional)
      
         '''
      
         pass

      def select_mirror(extend=False):
         '''Select the Mirror objects of the selected object eg. L.sword -> R.sword
            Arguments:
            @extend (bool): Extend selection instead of deselecting everything first
               (optional)
      
         '''
      
         pass

      def select_more():
         '''Select connected parent/child objects
         '''
      
         pass

      def select_pattern(pattern="*", case_sensitive=False, extend=True):
         '''Select objects matching a naming pattern
            Arguments:
            @pattern (str): Name filter using '*', '?' and '[abc]' unix style wildcards
               (optional, never None)
            @case_sensitive (bool): Do a case sensitive compare
               (optional)
            @extend (bool): Extend the existing selection
               (optional)
      
         '''
      
         pass

      def select_random(percent=50.0, seed=0, action='SELECT'):
         '''Set select on random visible objects
            Arguments:
            @percent (float): Percentage of objects to select randomly
               in [0, 100], (optional)
            @seed (int): Seed for the random number generator
               in [0, inf], (optional)
            @action (str): Selection action to execute
               in ['SELECT', 'DESELECT'], (optional)
      
         '''
      
         pass

      def select_same_collection(collection=""):
         '''Select object in the same collection
            Arguments:
            @collection (str): Name of the collection to select
               (optional, never None)
      
         '''
      
         pass

      def shade_flat():
         '''Render and display faces uniform, using Face Normals
         '''
      
         pass

      def shade_smooth():
         '''Render and display faces smooth, using interpolated Vertex Normals
         '''
      
         pass

      def shaderfx_add(type='FX_BLUR'):
         '''Add a visual effect to the active object
            Arguments:
            @type (str): in ['FX_BLUR', 'FX_COLORIZE', 'FX_FLIP', 'FX_GLOW', 'FX_PIXEL', 'FX_RIM', 'FX_SHADOW', 'FX_SWIRL', 'FX_WAVE'], (optional)
      
         '''
      
         pass

      def shaderfx_move_down(shaderfx=""):
         '''Move shaderfx down in the stack
            Arguments:
            @shaderfx (str): Name of the shaderfx to edit
               (optional, never None)
      
         '''
      
         pass

      def shaderfx_move_up(shaderfx=""):
         '''Move shaderfx up in the stack
            Arguments:
            @shaderfx (str): Name of the shaderfx to edit
               (optional, never None)
      
         '''
      
         pass

      def shaderfx_remove(shaderfx=""):
         '''Remove a shaderfx from the active grease pencil object
            Arguments:
            @shaderfx (str): Name of the shaderfx to edit
               (optional, never None)
      
         '''
      
         pass

      def shape_key_add(from_mix=True):
         '''Add shape key to the object
            Arguments:
            @from_mix (bool): Create the new shape key from the existing mix of keys
               (optional)
      
         '''
      
         pass

      def shape_key_clear():
         '''Clear weights for all shape keys
         '''
      
         pass

      def shape_key_mirror(use_topology=False):
         '''Mirror the current shape key along the local X axis
            Arguments:
            @use_topology (bool): Use topology based mirroring (for when both sides of mesh have matching, unique topology)
               (optional)
      
         '''
      
         pass

      def shape_key_move(type='TOP'):
         '''Move the active shape key up/down in the list
            Arguments:
            @type (str): in ['TOP', 'UP', 'DOWN', 'BOTTOM'], (optional)
      
         '''
      
         pass

      def shape_key_remove(all=False):
         '''Remove shape key from the object
            Arguments:
            @all (bool): Remove all shape keys
               (optional)
      
         '''
      
         pass

      def shape_key_retime():
         '''Resets the timing for absolute shape keys
         '''
      
         pass

      def shape_key_transfer(mode='OFFSET', use_clamp=False):
         '''Copy the active shape key of another selected object to this one
            Arguments:
            @mode (str): Relative shape positions to the new shape method
               in ['OFFSET', 'RELATIVE_FACE', 'RELATIVE_EDGE'], (optional)
            @use_clamp (bool): Clamp the transformation to the distance each vertex moves in the original shape
               (optional)
      
         '''
      
         pass

      def skin_armature_create(modifier=""):
         '''Create an armature that parallels the skin layout
            Arguments:
            @modifier (str): Name of the modifier to edit
               (optional, never None)
      
         '''
      
         pass

      def skin_loose_mark_clear(action='MARK'):
         '''Mark/clear selected vertices as loose
            Arguments:
            @action (str): in ['MARK', 'CLEAR'], (optional)
      
         '''
      
         pass

      def skin_radii_equalize():
         '''Make skin radii of selected vertices equal on each axis
         '''
      
         pass

      def skin_root_mark():
         '''Mark selected vertices as roots
         '''
      
         pass

      def speaker_add(enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Add a speaker object to the scene
            Arguments:
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def subdivision_set(level=1, relative=False):
         '''Sets a Subdivision Surface Level (1-5)
            Arguments:
            @level (int): in [-100, 100], (optional)
            @relative (bool): Apply the subsurf level as an offset relative to the current level
               (optional)
      
         '''
      
         pass

      def surfacedeform_bind(modifier=""):
         '''Bind mesh to target in surface deform modifier
            Arguments:
            @modifier (str): Name of the modifier to edit
               (optional, never None)
      
         '''
      
         pass

      def text_add(radius=1.0, enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Add a text object to the scene
            Arguments:
            @radius (float): in [0, inf], (optional)
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def track_clear(type='CLEAR'):
         '''Clear tracking constraint or flag from object
            Arguments:
            @type (str): in ['CLEAR', 'CLEAR_KEEP_TRANSFORM'], (optional)
      
         '''
      
         pass

      def track_set(type='DAMPTRACK'):
         '''Make the object track another object, using various methods/constraints
            Arguments:
            @type (str): in ['DAMPTRACK', 'TRACKTO', 'LOCKTRACK'], (optional)
      
         '''
      
         pass

      def transform_apply(location=True, rotation=True, scale=True, properties=True):
         '''Apply the object's transformation to its data
            Arguments:
            @location (bool): (optional)
            @rotation (bool): (optional)
            @scale (bool): (optional)
            @properties (bool): Modify properties such as curve vertex radius, font size and bone envelope
               (optional)
      
         '''
      
         pass

      def transform_axis_target():
         '''Interactively point cameras and lights to a location (Ctrl translates)
         '''
      
         pass

      def transforms_to_deltas(mode='ALL', reset_values=True):
         '''Convert normal object transforms to delta transforms, any existing delta transforms will be included as well
            Arguments:
            @mode (str): Which transforms to transfer
               in ['ALL', 'LOC', 'ROT', 'SCALE'], (optional)
            @reset_values (bool): Clear transform values after transferring to deltas
               (optional)
      
         '''
      
         pass

      def unlink_data():
         '''undocumented
         '''
      
         pass

      def updater_ignore():
         '''Ignore update to prevent future popups
         '''
      
         pass

      def updater_install_manually(error=""):
         '''Proceed to manually install update
            Arguments:
            @error (str): (optional, never None)
      
         '''
      
         pass

      def updater_restore_backup():
         '''Restore addon from backup
         '''
      
         pass

      def updater_update_successful(error=""):
         '''Update installation response
            Arguments:
            @error (str): (optional, never None)
      
         '''
      
         pass

      def vertex_group_add():
         '''Add a new vertex group to the active object
         '''
      
         pass

      def vertex_group_assign():
         '''Assign the selected vertices to the active vertex group
         '''
      
         pass

      def vertex_group_assign_new():
         '''Assign the selected vertices to a new vertex group
         '''
      
         pass

      def vertex_group_clean(group_select_mode='', limit=0.0, keep_single=False):
         '''Remove vertex group assignments which are not required
            Arguments:
            @group_select_mode (str): Define which subset of Groups shall be used
               in [], (optional)
            @limit (float): Remove vertices which weight is below or equal to this limit
               in [0, 1], (optional)
            @keep_single (bool): Keep verts assigned to at least one group when cleaning
               (optional)
      
         '''
      
         pass

      def vertex_group_copy():
         '''Make a copy of the active vertex group
         '''
      
         pass

      def vertex_group_copy_to_linked():
         '''Replace vertex groups of all users of the same geometry data by vertex groups of active object
         '''
      
         pass

      def vertex_group_copy_to_selected():
         '''Replace vertex groups of selected objects by vertex groups of active object
         '''
      
         pass

      def vertex_group_deselect():
         '''Deselect all selected vertices assigned to the active vertex group
         '''
      
         pass

      def vertex_group_fix(dist=0.0, strength=1.0, accuracy=1.0):
         '''Modify the position of selected vertices by changing only their respective groups' weights (this tool may be slow for many vertices)
            Arguments:
            @dist (float): The distance to move to
               in [-inf, inf], (optional)
            @strength (float): The distance moved can be changed by this multiplier
               in [-2, inf], (optional)
            @accuracy (float): Change the amount weights are altered with each iteration: lower values are slower
               in [0.05, inf], (optional)
      
         '''
      
         pass

      def vertex_group_invert(group_select_mode='', auto_assign=True, auto_remove=True):
         '''Invert active vertex group's weights
            Arguments:
            @group_select_mode (str): Define which subset of Groups shall be used
               in [], (optional)
            @auto_assign (bool): Add verts from groups that have zero weight before inverting
               (optional)
            @auto_remove (bool): Remove verts from groups that have zero weight after inverting
               (optional)
      
         '''
      
         pass

      def vertex_group_levels(group_select_mode='', offset=0.0, gain=1.0):
         '''Add some offset and multiply with some gain the weights of the active vertex group
            Arguments:
            @group_select_mode (str): Define which subset of Groups shall be used
               in [], (optional)
            @offset (float): Value to add to weights
               in [-1, 1], (optional)
            @gain (float): Value to multiply weights by
               in [0, inf], (optional)
      
         '''
      
         pass

      def vertex_group_limit_total(group_select_mode='', limit=4):
         '''Limit deform weights associated with a vertex to a specified number by removing lowest weights
            Arguments:
            @group_select_mode (str): Define which subset of Groups shall be used
               in [], (optional)
            @limit (int): Maximum number of deform weights
               in [1, 32], (optional)
      
         '''
      
         pass

      def vertex_group_lock(action='TOGGLE', mask='ALL'):
         '''Change the lock state of all or some vertex groups of active object
            Arguments:
            @action (str): Lock action to execute on vertex groups
               in ['TOGGLE', 'LOCK', 'UNLOCK', 'INVERT'], (optional)
            @mask (str): Apply the action based on vertex group selection
               in ['ALL', 'SELECTED', 'UNSELECTED', 'INVERT_UNSELECTED'], (optional)
      
         '''
      
         pass

      def vertex_group_mirror(mirror_weights=True, flip_group_names=True, all_groups=False, use_topology=False):
         '''Mirror vertex group, flip weights and/or names, editing only selected vertices, flipping when both sides are selected otherwise copy from unselected
            Arguments:
            @mirror_weights (bool): Mirror weights
               (optional)
            @flip_group_names (bool): Flip vertex group names
               (optional)
            @all_groups (bool): Mirror all vertex groups weights
               (optional)
            @use_topology (bool): Use topology based mirroring (for when both sides of mesh have matching, unique topology)
               (optional)
      
         '''
      
         pass

      def vertex_group_move(direction='UP'):
         '''Move the active vertex group up/down in the list
            Arguments:
            @direction (str): Direction to move the active vertex group towards
               in ['UP', 'DOWN'], (optional)
      
         '''
      
         pass

      def vertex_group_normalize():
         '''Normalize weights of the active vertex group, so that the highest ones are now 1.0
         '''
      
         pass

      def vertex_group_normalize_all(group_select_mode='', lock_active=True):
         '''Normalize all weights of all vertex groups, so that for each vertex, the sum of all weights is 1.0
            Arguments:
            @group_select_mode (str): Define which subset of Groups shall be used
               in [], (optional)
            @lock_active (bool): Keep the values of the active group while normalizing others
               (optional)
      
         '''
      
         pass

      def vertex_group_quantize(group_select_mode='', steps=4):
         '''Set weights to a fixed number of steps
            Arguments:
            @group_select_mode (str): Define which subset of Groups shall be used
               in [], (optional)
            @steps (int): Number of steps between 0 and 1
               in [1, 1000], (optional)
      
         '''
      
         pass

      def vertex_group_remove(all=False, all_unlocked=False):
         '''Delete the active or all vertex groups from the active object
            Arguments:
            @all (bool): Remove all vertex groups
               (optional)
            @all_unlocked (bool): Remove all unlocked vertex groups
               (optional)
      
         '''
      
         pass

      def vertex_group_remove_from(use_all_groups=False, use_all_verts=False):
         '''Remove the selected vertices from active or all vertex group(s)
            Arguments:
            @use_all_groups (bool): Remove from all groups
               (optional)
            @use_all_verts (bool): Clear the active group
               (optional)
      
         '''
      
         pass

      def vertex_group_select():
         '''Select all the vertices assigned to the active vertex group
         '''
      
         pass

      def vertex_group_set_active(group=''):
         '''Set the active vertex group
            Arguments:
            @group (str): Vertex group to set as active
               in [], (optional)
      
         '''
      
         pass

      def vertex_group_smooth(group_select_mode='', factor=0.5, repeat=1, expand=0.0):
         '''Smooth weights for selected vertices
            Arguments:
            @group_select_mode (str): Define which subset of Groups shall be used
               in [], (optional)
            @factor (float): in [0, 1], (optional)
            @repeat (int): in [1, 10000], (optional)
            @expand (float): Expand/contract weights
               in [-1, 1], (optional)
      
         '''
      
         pass

      def vertex_group_sort(sort_type='NAME'):
         '''Sort vertex groups
            Arguments:
            @sort_type (str): Sort type
               in ['NAME', 'BONE_HIERARCHY'], (optional)
      
         '''
      
         pass

      def vertex_parent_set():
         '''Parent selected objects to the selected vertices
         '''
      
         pass

      def vertex_weight_copy():
         '''Copy weights from active to selected
         '''
      
         pass

      def vertex_weight_delete(weight_group=-1):
         '''Delete this weight from the vertex (disabled if vertex group is locked)
            Arguments:
            @weight_group (int): Index of source weight in active vertex group
               in [-1, inf], (optional)
      
         '''
      
         pass

      def vertex_weight_normalize_active_vertex():
         '''Normalize active vertex's weights
         '''
      
         pass

      def vertex_weight_paste(weight_group=-1):
         '''Copy this group's weight to other selected verts (disabled if vertex group is locked)
            Arguments:
            @weight_group (int): Index of source weight in active vertex group
               in [-1, inf], (optional)
      
         '''
      
         pass

      def vertex_weight_set_active(weight_group=-1):
         '''Set as active vertex group
            Arguments:
            @weight_group (int): Index of source weight in active vertex group
               in [-1, inf], (optional)
      
         '''
      
         pass

      def visual_transform_apply():
         '''Apply the object's visual transformation to its data
         '''
      
         pass

      def volume_add(align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Add a volume object to the scene
            Arguments:
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def volume_import(filepath="", directory="", files=None, hide_props_region=True, filter_blender=False, filter_backup=False, filter_image=False, filter_movie=False, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=True, filter_folder=True, filter_blenlib=False, filemode=9, relative_path=True, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA', use_sequence_detection=True, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Import OpenVDB volume file
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @directory (str): Directory of the file
               (optional, never None)
            @files (OperatorFileListElement): Collection of , (optional)
            @hide_props_region (bool): Collapse the region displaying the operator settings
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @relative_path (bool): Select the file relative to the blend file
               (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
            @use_sequence_detection (bool): Automatically detect animated sequences in selected volume files (based on file names)
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def voxel_remesh():
         '''Calculates a new manifold mesh based on the volume of the current mesh. All data layers will be lost
         '''
      
         pass

      def voxel_size_edit():
         '''Modify the mesh voxel size interactively used in the voxel remesher
         '''
      
         pass

   class outliner:
      '''Spcecial class, created just to reflect content of bpy.ops.outliner'''

      def action_set(action=''):
         '''Change the active action used
            Arguments:
            @action (str): in [], (optional)
      
         '''
      
         pass

      def animdata_operation(type='CLEAR_ANIMDATA'):
         '''undocumented
            Arguments:
            @type (str): in ['CLEAR_ANIMDATA', 'SET_ACT', 'CLEAR_ACT', 'REFRESH_DRIVERS', 'CLEAR_DRIVERS'], (optional)
      
         '''
      
         pass

      def collection_delete(hierarchy=False):
         '''Delete selected collections
            Arguments:
            @hierarchy (bool): Delete child objects and collections
               (optional)
      
         '''
      
         pass

      def collection_disable():
         '''Disable viewport drawing in the view layers
         '''
      
         pass

      def collection_disable_render():
         '''Do not render this collection
         '''
      
         pass

      def collection_drop():
         '''Drag to move to collection in Outliner
         '''
      
         pass

      def collection_duplicate():
         '''Recursively duplicate the collection, all its children, objects and object data
         '''
      
         pass

      def collection_duplicate_linked():
         '''Recursively duplicate the collection, all its children and objects, with linked object data
         '''
      
         pass

      def collection_enable():
         '''Enable viewport drawing in the view layers
         '''
      
         pass

      def collection_enable_render():
         '''Render the collection
         '''
      
         pass

      def collection_exclude_clear():
         '''Include collection in the active view layer
         '''
      
         pass

      def collection_exclude_set():
         '''Exclude collection from the active view layer
         '''
      
         pass

      def collection_hide():
         '''Hide the collection in this view layer
         '''
      
         pass

      def collection_hide_inside():
         '''Hide all the objects and collections inside the collection
         '''
      
         pass

      def collection_holdout_clear():
         '''Clear masking of collection in the active view layer
         '''
      
         pass

      def collection_holdout_set():
         '''Mask collection in the active view layer
         '''
      
         pass

      def collection_indirect_only_clear():
         '''Clear collection contributing only indirectly in the view layer
         '''
      
         pass

      def collection_indirect_only_set():
         '''Set collection to only contribute indirectly (through shadows and reflections) in the view layer
         '''
      
         pass

      def collection_instance():
         '''Instance selected collections to active scene
         '''
      
         pass

      def collection_isolate(extend=False):
         '''Hide all but this collection and its parents
            Arguments:
            @extend (bool): Extend current visible collections
               (optional)
      
         '''
      
         pass

      def collection_link():
         '''Link selected collections to active scene
         '''
      
         pass

      def collection_new(nested=True):
         '''Add a new collection inside selected collection
            Arguments:
            @nested (bool): Add as child of selected collection
               (optional)
      
         '''
      
         pass

      def collection_objects_deselect():
         '''Deselect objects in collection
         '''
      
         pass

      def collection_objects_select():
         '''Select objects in collection
         '''
      
         pass

      def collection_show():
         '''Show the collection in this view layer
         '''
      
         pass

      def collection_show_inside():
         '''Show all the objects and collections inside the collection
         '''
      
         pass

      def constraint_operation(type='ENABLE'):
         '''undocumented
            Arguments:
            @type (str): in ['ENABLE', 'DISABLE', 'DELETE'], (optional)
      
         '''
      
         pass

      def data_operation(type='SELECT'):
         '''undocumented
            Arguments:
            @type (str): in ['SELECT', 'DESELECT', 'HIDE', 'UNHIDE', 'SELECT_LINKED'], (optional)
      
         '''
      
         pass

      def drivers_add_selected():
         '''Add drivers to selected items
         '''
      
         pass

      def drivers_delete_selected():
         '''Delete drivers assigned to selected items
         '''
      
         pass

      def expanded_toggle():
         '''Expand/Collapse all items
         '''
      
         pass

      def hide():
         '''Hide selected objects and collections
         '''
      
         pass

      def highlight_update():
         '''Update the item highlight based on the current mouse position
         '''
      
         pass

      def id_copy():
         '''Selected data-blocks are copied to the clipboard
         '''
      
         pass

      def id_delete():
         '''Delete the ID under cursor
         '''
      
         pass

      def id_operation(type='UNLINK'):
         '''undocumented
            Arguments:
            @type (str): in ['UNLINK', 'LOCAL', 'OVERRIDE_LIBRARY', 'SINGLE', 'DELETE', 'REMAP', 'COPY', 'PASTE', 'ADD_FAKE', 'CLEAR_FAKE', 'RENAME', 'SELECT_LINKED'], (optional)
      
         '''
      
         pass

      def id_paste():
         '''Data-blocks from the clipboard are pasted
         '''
      
         pass

      def id_remap(id_type='OBJECT', old_id='', new_id=''):
         '''undocumented
            Arguments:
            @id_type (str): in ['ACTION', 'ARMATURE', 'BRUSH', 'CAMERA', 'CACHEFILE', 'CURVE', 'FONT', 'GREASEPENCIL', 'COLLECTION', 'IMAGE', 'KEY', 'LIGHT', 'LIBRARY', 'LINESTYLE', 'LATTICE', 'MASK', 'MATERIAL', 'META', 'MESH', 'MOVIECLIP', 'NODETREE', 'OBJECT', 'PAINTCURVE', 'PALETTE', 'PARTICLE', 'LIGHT_PROBE', 'SCENE', 'SOUND', 'SPEAKER', 'TEXT', 'TEXTURE', 'VOLUME', 'WINDOWMANAGER', 'WORLD', 'WORKSPACE'], (optional)
            @old_id (str): Old ID to replace
               in [], (optional)
            @new_id (str): New ID to remap all selected IDs' users to
               in [], (optional)
      
         '''
      
         pass

      def item_activate(extend=True, extend_range=False, deselect_all=False):
         '''Handle mouse clicks to select and activate items
            Arguments:
            @extend (bool): Extend selection for activation
               (optional)
            @extend_range (bool): Select a range from active element
               (optional)
            @deselect_all (bool): Deselect all when nothing under the cursor
               (optional)
      
         '''
      
         pass

      def item_drag_drop():
         '''Drag and drop element to another place
         '''
      
         pass

      def item_openclose(all=False):
         '''Toggle whether item under cursor is enabled or closed
            Arguments:
            @all (bool): Close or open all items
               (optional)
      
         '''
      
         pass

      def item_rename():
         '''Rename the active element
         '''
      
         pass

      def keyingset_add_selected():
         '''Add selected items (blue-gray rows) to active Keying Set
         '''
      
         pass

      def keyingset_remove_selected():
         '''Remove selected items (blue-gray rows) from active Keying Set
         '''
      
         pass

      def lib_operation(type='RENAME'):
         '''undocumented
            Arguments:
            @type (str): in ['RENAME', 'DELETE', 'RELOCATE', 'RELOAD'], (optional)
      
         '''
      
         pass

      def lib_relocate():
         '''Relocate the library under cursor
         '''
      
         pass

      def material_drop():
         '''Drag material to object in Outliner
         '''
      
         pass

      def modifier_operation(type='TOGVIS'):
         '''undocumented
            Arguments:
            @type (str): in ['TOGVIS', 'TOGREN', 'DELETE'], (optional)
      
         '''
      
         pass

      def object_operation(type='SELECT'):
         '''undocumented
            Arguments:
            @type (str): in ['SELECT', 'DESELECT', 'SELECT_HIERARCHY', 'DELETE', 'DELETE_HIERARCHY', 'REMAP', 'RENAME', 'OBJECT_MODE_ENTER', 'OBJECT_MODE_EXIT'], (optional)
      
         '''
      
         pass

      def operation():
         '''Context menu for item operations
         '''
      
         pass

      def orphans_purge(num_deleted=0):
         '''Clear all orphaned data-blocks without any users from the file
            Arguments:
            @num_deleted (int): in [0, inf], (optional)
      
         '''
      
         pass

      def parent_clear():
         '''Drag to clear parent in Outliner
         '''
      
         pass

      def parent_drop():
         '''Drag to parent in Outliner
         '''
      
         pass

      def scene_drop():
         '''Drag object to scene in Outliner
         '''
      
         pass

      def scene_operation(type='DELETE'):
         '''Context menu for scene operations
            Arguments:
            @type (str): in ['DELETE'], (optional)
      
         '''
      
         pass

      def scroll_page(up=False):
         '''Scroll page up or down
            Arguments:
            @up (bool): Scroll up one page
               (optional)
      
         '''
      
         pass

      def select_all(action='TOGGLE'):
         '''Toggle the Outliner selection of items
            Arguments:
            @action (str): Selection action to execute
               in ['TOGGLE', 'SELECT', 'DESELECT', 'INVERT'], (optional)
      
         '''
      
         pass

      def select_box(tweak=False, xmin=0, xmax=0, ymin=0, ymax=0, wait_for_input=True, mode='SET'):
         '''Use box selection to select tree elements
            Arguments:
            @tweak (bool): Tweak gesture from empty space for box selection
               (optional)
            @xmin (int): in [-inf, inf], (optional)
            @xmax (int): in [-inf, inf], (optional)
            @ymin (int): in [-inf, inf], (optional)
            @ymax (int): in [-inf, inf], (optional)
            @wait_for_input (bool): (optional)
            @mode (str): in ['SET', 'ADD', 'SUB'], (optional)
      
         '''
      
         pass

      def select_walk(direction='UP', extend=False, toggle_all=False):
         '''Use walk navigation to select tree elements
            Arguments:
            @direction (str): Select/Deselect element in this direction
               in ['UP', 'DOWN', 'LEFT', 'RIGHT'], (optional)
            @extend (bool): Extend selection on walk
               (optional)
            @toggle_all (bool): Toggle open/close hierarchy
               (optional)
      
         '''
      
         pass

      def show_active():
         '''Open up the tree and adjust the view so that the active Object is shown centered
         '''
      
         pass

      def show_hierarchy():
         '''Open all object entries and close all others
         '''
      
         pass

      def show_one_level(open=True):
         '''Expand/collapse all entries by one level
            Arguments:
            @open (bool): Expand all entries one level deep
               (optional)
      
         '''
      
         pass

      def unhide_all():
         '''Unhide all objects and collections
         '''
      
         pass

   class paint:
      '''Spcecial class, created just to reflect content of bpy.ops.paint'''

      def add_simple_uvs():
         '''Add cube map uvs on mesh
         '''
      
         pass

      def add_texture_paint_slot(type='BASE_COLOR', name="Untitled", width=1024, height=1024, color=(0.0, 0.0, 0.0, 1.0), alpha=True, generated_type='BLANK', float=False):
         '''Add a texture paint slot
            Arguments:
            @type (str): Merge method to use
               in ['BASE_COLOR', 'SPECULAR', 'ROUGHNESS', 'METALLIC', 'NORMAL', 'BUMP', 'DISPLACEMENT'], (optional)
            @name (str): Image data-block name
               (optional, never None)
            @width (int): Image width
               in [1, inf], (optional)
            @height (int): Image height
               in [1, inf], (optional)
            @color (float): Default fill color
               array of 4 items in [0, inf], (optional)
            @alpha (bool): Create an image with an alpha channel
               (optional)
            @generated_type (str): Fill the image with a grid for UV map testing
               in ['BLANK', 'UV_GRID', 'COLOR_GRID'], (optional)
            @float (bool): Create image with 32 bit floating point bit depth
               (optional)
      
         '''
      
         pass

      def brush_colors_flip():
         '''Swap primary and secondary brush colors
         '''
      
         pass

      def brush_select(sculpt_tool='DRAW', vertex_tool='DRAW', weight_tool='DRAW', image_tool='DRAW', gpencil_tool='DRAW', gpencil_vertex_tool='DRAW', gpencil_sculpt_tool='SMOOTH', gpencil_weight_tool='WEIGHT', toggle=False, create_missing=False):
         '''Select a paint mode's brush by tool type
            Arguments:
            @sculpt_tool (str): in ['DRAW', 'DRAW_SHARP', 'CLAY', 'CLAY_STRIPS', 'CLAY_THUMB', 'LAYER', 'INFLATE', 'BLOB', 'CREASE', 'SMOOTH', 'FLATTEN', 'FILL', 'SCRAPE', 'MULTIPLANE_SCRAPE', 'PINCH', 'GRAB', 'ELASTIC_DEFORM', 'SNAKE_HOOK', 'THUMB', 'POSE', 'NUDGE', 'ROTATE', 'TOPOLOGY', 'CLOTH', 'SIMPLIFY', 'MASK', 'DRAW_FACE_SETS'], (optional)
            @vertex_tool (str): in ['DRAW', 'BLUR', 'AVERAGE', 'SMEAR'], (optional)
            @weight_tool (str): in ['DRAW', 'BLUR', 'AVERAGE', 'SMEAR'], (optional)
            @image_tool (str): in ['DRAW', 'SOFTEN', 'SMEAR', 'CLONE', 'FILL', 'MASK'], (optional)
            @gpencil_tool (str): in ['DRAW', 'FILL', 'ERASE', 'TINT'], (optional)
            @gpencil_vertex_tool (str): in ['DRAW', 'BLUR', 'AVERAGE', 'SMEAR', 'REPLACE'], (optional)
            @gpencil_sculpt_tool (str): in ['SMOOTH', 'THICKNESS', 'STRENGTH', 'RANDOMIZE', 'GRAB', 'PUSH', 'TWIST', 'PINCH', 'CLONE'], (optional)
            @gpencil_weight_tool (str): in ['WEIGHT'], (optional)
            @toggle (bool): Toggle between two brushes rather than cycling
               (optional)
            @create_missing (bool): If the requested brush type does not exist, create a new brush
               (optional)
      
         '''
      
         pass

      def face_select_all(action='TOGGLE'):
         '''Change selection for all faces
            Arguments:
            @action (str): Selection action to execute
               in ['TOGGLE', 'SELECT', 'DESELECT', 'INVERT'], (optional)
      
         '''
      
         pass

      def face_select_hide(unselected=False):
         '''Hide selected faces
            Arguments:
            @unselected (bool): Hide unselected rather than selected objects
               (optional)
      
         '''
      
         pass

      def face_select_linked():
         '''Select linked faces
         '''
      
         pass

      def face_select_linked_pick(deselect=False):
         '''Select linked faces under the cursor
            Arguments:
            @deselect (bool): Deselect rather than select items
               (optional)
      
         '''
      
         pass

      def face_select_reveal(select=True):
         '''Reveal hidden faces
            Arguments:
            @select (bool): (optional)
      
         '''
      
         pass

      def grab_clone(delta=(0.0, 0.0)):
         '''Move the clone source image
            Arguments:
            @delta (float): Delta offset of clone image in 0.0..1.0 coordinates
               array of 2 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def hide_show(action='HIDE', area='INSIDE', xmin=0, xmax=0, ymin=0, ymax=0, wait_for_input=True):
         '''Hide/show some vertices
            Arguments:
            @action (str): Whether to hide or show vertices
               in ['HIDE', 'SHOW'], (optional)
            @area (str): Which vertices to hide or show
               in ['OUTSIDE', 'INSIDE', 'ALL', 'MASKED'], (optional)
            @xmin (int): in [-inf, inf], (optional)
            @xmax (int): in [-inf, inf], (optional)
            @ymin (int): in [-inf, inf], (optional)
            @ymax (int): in [-inf, inf], (optional)
            @wait_for_input (bool): (optional)
      
         '''
      
         pass

      def image_from_view(filepath=""):
         '''Make an image from biggest 3D view for re-projection
            Arguments:
            @filepath (str): Name of the file
               (optional, never None)
      
         '''
      
         pass

      def image_paint(stroke=None, mode='NORMAL'):
         '''Paint a stroke into the image
            Arguments:
            @stroke (OperatorStrokeElement): Collection of , (optional)
            @mode (str): Action taken when a paint stroke is made
               in ['NORMAL', 'INVERT', 'SMOOTH'], (optional)
      
         '''
      
         pass

      def mask_flood_fill(mode='VALUE', value=0.0):
         '''Fill the whole mask with a given value, or invert its values
            Arguments:
            @mode (str): in ['VALUE', 'VALUE_INVERSE', 'INVERT'], (optional)
            @value (float): Mask level to use when mode is 'Value'; zero means no masking and one is fully masked
               in [0, 1], (optional)
      
         '''
      
         pass

      def mask_lasso_gesture(path=None, mode='VALUE', value=1.0):
         '''Add mask within the lasso as you move the brush
            Arguments:
            @path (OperatorMousePath): Collection of , (optional)
            @mode (str): in ['VALUE', 'VALUE_INVERSE', 'INVERT'], (optional)
            @value (float): Mask level to use when mode is 'Value'; zero means no masking and one is fully masked
               in [0, 1], (optional)
      
         '''
      
         pass

      def project_image(image=''):
         '''Project an edited render from the active camera back onto the object
            Arguments:
            @image (str): in [], (optional)
      
         '''
      
         pass

      def sample_color(location=(0, 0), merged=False, palette=False):
         '''Use the mouse to sample a color in the image
            Arguments:
            @location (int): array of 2 items in [0, inf], (optional)
            @merged (bool): Sample the output display color
               (optional)
            @palette (bool): (optional)
      
         '''
      
         pass

      def texture_paint_toggle():
         '''Toggle texture paint mode in 3D view
         '''
      
         pass

      def vert_select_all(action='TOGGLE'):
         '''Change selection for all vertices
            Arguments:
            @action (str): Selection action to execute
               in ['TOGGLE', 'SELECT', 'DESELECT', 'INVERT'], (optional)
      
         '''
      
         pass

      def vert_select_ungrouped(extend=False):
         '''Select vertices without a group
            Arguments:
            @extend (bool): Extend the selection
               (optional)
      
         '''
      
         pass

      def vertex_color_brightness_contrast(brightness=0.0, contrast=0.0):
         '''Adjust vertex color brightness/contrast
            Arguments:
            @brightness (float): in [-100, 100], (optional)
            @contrast (float): in [-100, 100], (optional)
      
         '''
      
         pass

      def vertex_color_dirt(blur_strength=1.0, blur_iterations=1, clean_angle=3.14159, dirt_angle=0.0, dirt_only=False):
         '''Generate a dirt map gradient based on cavity
            Arguments:
            @blur_strength (float): Blur strength per iteration
               in [0.01, 1], (optional)
            @blur_iterations (int): Number of times to blur the colors (higher blurs more)
               in [0, 40], (optional)
            @clean_angle (float): Less than 90 limits the angle used in the tonal range
               in [0, 3.14159], (optional)
            @dirt_angle (float): Less than 90 limits the angle used in the tonal range
               in [0, 3.14159], (optional)
            @dirt_only (bool): Don't calculate cleans for convex areas
               (optional)
      
         '''
      
         pass

      def vertex_color_from_weight():
         '''Convert active weight into gray scale vertex colors
         '''
      
         pass

      def vertex_color_hsv(h=0.5, s=1.0, v=1.0):
         '''Adjust vertex color HSV values
            Arguments:
            @h (float): in [0, 1], (optional)
            @s (float): in [0, 2], (optional)
            @v (float): in [0, 2], (optional)
      
         '''
      
         pass

      def vertex_color_invert():
         '''Invert RGB values
         '''
      
         pass

      def vertex_color_levels(offset=0.0, gain=1.0):
         '''Adjust levels of vertex colors
            Arguments:
            @offset (float): Value to add to colors
               in [-1, 1], (optional)
            @gain (float): Value to multiply colors by
               in [0, inf], (optional)
      
         '''
      
         pass

      def vertex_color_set():
         '''Fill the active vertex color layer with the current paint color
         '''
      
         pass

      def vertex_color_smooth():
         '''Smooth colors across vertices
         '''
      
         pass

      def vertex_paint(stroke=None, mode='NORMAL'):
         '''Paint a stroke in the active vertex color layer
            Arguments:
            @stroke (OperatorStrokeElement): Collection of , (optional)
            @mode (str): Action taken when a paint stroke is made
               in ['NORMAL', 'INVERT', 'SMOOTH'], (optional)
      
         '''
      
         pass

      def vertex_paint_toggle():
         '''Toggle the vertex paint mode in 3D view
         '''
      
         pass

      def weight_from_bones(type='AUTOMATIC'):
         '''Set the weights of the groups matching the attached armature's selected bones, using the distance between the vertices and the bones
            Arguments:
            @type (str): Method to use for assigning weights
               in ['AUTOMATIC', 'ENVELOPES'], (optional)
      
         '''
      
         pass

      def weight_gradient(type='LINEAR', xstart=0, xend=0, ystart=0, yend=0, cursor=5):
         '''Draw a line to apply a weight gradient to selected vertices
            Arguments:
            @type (str): in ['LINEAR', 'RADIAL'], (optional)
            @xstart (int): in [-inf, inf], (optional)
            @xend (int): in [-inf, inf], (optional)
            @ystart (int): in [-inf, inf], (optional)
            @yend (int): in [-inf, inf], (optional)
            @cursor (int): Mouse cursor style to use during the modal operator
               in [0, inf], (optional)
      
         '''
      
         pass

      def weight_paint(stroke=None, mode='NORMAL'):
         '''Paint a stroke in the current vertex group's weights
            Arguments:
            @stroke (OperatorStrokeElement): Collection of , (optional)
            @mode (str): Action taken when a paint stroke is made
               in ['NORMAL', 'INVERT', 'SMOOTH'], (optional)
      
         '''
      
         pass

      def weight_paint_toggle():
         '''Toggle weight paint mode in 3D view
         '''
      
         pass

      def weight_sample():
         '''Use the mouse to sample a weight in the 3D view
         '''
      
         pass

      def weight_sample_group(group='DEFAULT'):
         '''Select one of the vertex groups available under current mouse position
            Arguments:
            @group (str): The Keying Set to use
               in ['DEFAULT'], (optional)
      
         '''
      
         pass

      def weight_set():
         '''Fill the active vertex group with the current paint weight
         '''
      
         pass

   class paintcurve:
      '''Spcecial class, created just to reflect content of bpy.ops.paintcurve'''

      def add_point(location=(0, 0)):
         '''Add New Paint Curve Point
            Arguments:
            @location (int): Location of vertex in area space
               array of 2 items in [0, 32767], (optional)
      
         '''
      
         pass

      def add_point_slide(PAINTCURVE_OT_add_point=None, PAINTCURVE_OT_slide=None):
         '''Add new curve point and slide it
            Arguments:
            @PAINTCURVE_OT_add_point (PAINTCURVE_OT_add_point): Add New Paint Curve Point
               (optional)
            @PAINTCURVE_OT_slide (PAINTCURVE_OT_slide): Select and slide paint curve point
               (optional)
      
         '''
      
         pass

      def cursor():
         '''Place cursor
         '''
      
         pass

      def delete_point():
         '''Remove Paint Curve Point
         '''
      
         pass

      def draw():
         '''Draw curve
         '''
      
         pass

      def new():
         '''Add new paint curve
         '''
      
         pass

      def select(location=(0, 0), toggle=False, extend=False):
         '''Select a paint curve point
            Arguments:
            @location (int): Location of vertex in area space
               array of 2 items in [0, 32767], (optional)
            @toggle (bool): (De)select all
               (optional)
            @extend (bool): Extend selection
               (optional)
      
         '''
      
         pass

      def slide(align=False, select=True):
         '''Select and slide paint curve point
            Arguments:
            @align (bool): Aligns opposite point handle during transform
               (optional)
            @select (bool): Attempt to select a point handle before transform
               (optional)
      
         '''
      
         pass

   class palette:
      '''Spcecial class, created just to reflect content of bpy.ops.palette'''

      def color_add():
         '''Add new color to active palette
         '''
      
         pass

      def color_delete():
         '''Remove active color from palette
         '''
      
         pass

      def color_move(type='UP'):
         '''Move the active Color up/down in the list
            Arguments:
            @type (str): in ['UP', 'DOWN'], (optional)
      
         '''
      
         pass

      def extract_from_image(threshold=1):
         '''Extract all colors used in Image and create a Palette
            Arguments:
            @threshold (int): in [1, 4], (optional)
      
         '''
      
         pass

      def join(palette=""):
         '''Join Palette Swatches
            Arguments:
            @palette (str): Name of the Palette
               (optional, never None)
      
         '''
      
         pass

      def new():
         '''Add new palette
         '''
      
         pass

      def sort(type='HSV'):
         '''Sort Palette Colors
            Arguments:
            @type (str): in ['HSV', 'SVH', 'VHS', 'LUMINANCE'], (optional)
      
         '''
      
         pass

   class particle:
      '''Spcecial class, created just to reflect content of bpy.ops.particle'''

      def brush_edit(stroke=None):
         '''Apply a stroke of brush to the particles
            Arguments:
            @stroke (OperatorStrokeElement): Collection of , (optional)
      
         '''
      
         pass

      def connect_hair(all=False):
         '''Connect hair to the emitter mesh
            Arguments:
            @all (bool): Connect all hair systems to the emitter mesh
               (optional)
      
         '''
      
         pass

      def copy_particle_systems(space='OBJECT', remove_target_particles=True, use_active=False):
         '''Copy particle systems from the active object to selected objects
            Arguments:
            @space (str): Space transform for copying from one object to another
               in ['OBJECT', 'WORLD'], (optional)
            @remove_target_particles (bool): Remove particle systems on the target objects
               (optional)
            @use_active (bool): Use the active particle system from the context
               (optional)
      
         '''
      
         pass

      def delete(type='PARTICLE'):
         '''Delete selected particles or keys
            Arguments:
            @type (str): Delete a full particle or only keys
               in ['PARTICLE', 'KEY'], (optional)
      
         '''
      
         pass

      def disconnect_hair(all=False):
         '''Disconnect hair from the emitter mesh
            Arguments:
            @all (bool): Disconnect all hair systems from the emitter mesh
               (optional)
      
         '''
      
         pass

      def duplicate_particle_system(use_duplicate_settings=False):
         '''Duplicate particle system within the active object
            Arguments:
            @use_duplicate_settings (bool): Duplicate settings as well, so the new particle system uses its own settings
               (optional)
      
         '''
      
         pass

      def dupliob_copy():
         '''Duplicate the current dupliobject
         '''
      
         pass

      def dupliob_move_down():
         '''Move dupli object down in the list
         '''
      
         pass

      def dupliob_move_up():
         '''Move dupli object up in the list
         '''
      
         pass

      def dupliob_refresh():
         '''Refresh list of dupli objects and their weights
         '''
      
         pass

      def dupliob_remove():
         '''Remove the selected dupliobject
         '''
      
         pass

      def edited_clear():
         '''Undo all edition performed on the particle system
         '''
      
         pass

      def hair_dynamics_preset_add(name="", remove_name=False, remove_active=False):
         '''Add or remove a Hair Dynamics Preset
            Arguments:
            @name (str): Name of the preset, used to make the path name
               (optional, never None)
            @remove_name (bool): (optional)
            @remove_active (bool): (optional)
      
         '''
      
         pass

      def hide(unselected=False):
         '''Hide selected particles
            Arguments:
            @unselected (bool): Hide unselected rather than selected
               (optional)
      
         '''
      
         pass

      def mirror():
         '''Duplicate and mirror the selected particles along the local X axis
         '''
      
         pass

      def new():
         '''Add new particle settings
         '''
      
         pass

      def new_target():
         '''Add a new particle target
         '''
      
         pass

      def particle_edit_toggle():
         '''Toggle particle edit mode
         '''
      
         pass

      def rekey(keys_number=2):
         '''Change the number of keys of selected particles (root and tip keys included)
            Arguments:
            @keys_number (int): in [2, inf], (optional)
      
         '''
      
         pass

      def remove_doubles(threshold=0.0002):
         '''Remove selected particles close enough of others
            Arguments:
            @threshold (float): Threshold distance within which particles are removed
               in [0, inf], (optional)
      
         '''
      
         pass

      def reveal(select=True):
         '''Show hidden particles
            Arguments:
            @select (bool): (optional)
      
         '''
      
         pass

      def select_all(action='TOGGLE'):
         '''(De)select all particles' keys
            Arguments:
            @action (str): Selection action to execute
               in ['TOGGLE', 'SELECT', 'DESELECT', 'INVERT'], (optional)
      
         '''
      
         pass

      def select_less():
         '''Deselect boundary selected keys of each particle
         '''
      
         pass

      def select_linked():
         '''Select all keys linked to already selected ones
         '''
      
         pass

      def select_linked_pick(deselect=False, location=(0, 0)):
         '''Select nearest particle from mouse pointer
            Arguments:
            @deselect (bool): Deselect linked keys rather than selecting them
               (optional)
            @location (int): array of 2 items in [0, inf], (optional)
      
         '''
      
         pass

      def select_more():
         '''Select keys linked to boundary selected keys of each particle
         '''
      
         pass

      def select_random(percent=50.0, seed=0, action='SELECT', type='HAIR'):
         '''Select a randomly distributed set of hair or points
            Arguments:
            @percent (float): Percentage of objects to select randomly
               in [0, 100], (optional)
            @seed (int): Seed for the random number generator
               in [0, inf], (optional)
            @action (str): Selection action to execute
               in ['SELECT', 'DESELECT'], (optional)
            @type (str): Select either hair or points
               in ['HAIR', 'POINTS'], (optional)
      
         '''
      
         pass

      def select_roots(action='SELECT'):
         '''Select roots of all visible particles
            Arguments:
            @action (str): Selection action to execute
               in ['TOGGLE', 'SELECT', 'DESELECT', 'INVERT'], (optional)
      
         '''
      
         pass

      def select_tips(action='SELECT'):
         '''Select tips of all visible particles
            Arguments:
            @action (str): Selection action to execute
               in ['TOGGLE', 'SELECT', 'DESELECT', 'INVERT'], (optional)
      
         '''
      
         pass

      def shape_cut():
         '''Cut hair to conform to the set shape object
         '''
      
         pass

      def subdivide():
         '''Subdivide selected particles segments (adds keys)
         '''
      
         pass

      def target_move_down():
         '''Move particle target down in the list
         '''
      
         pass

      def target_move_up():
         '''Move particle target up in the list
         '''
      
         pass

      def target_remove():
         '''Remove the selected particle target
         '''
      
         pass

      def unify_length():
         '''Make selected hair the same length
         '''
      
         pass

      def weight_set(factor=1.0):
         '''Set the weight of selected keys
            Arguments:
            @factor (float): Interpolation factor between current brush weight, and keys' weights
               in [0, 1], (optional)
      
         '''
      
         pass

   class pose:
      '''Spcecial class, created just to reflect content of bpy.ops.pose'''

      def armature_apply(selected=False):
         '''Apply the current pose as the new rest pose
            Arguments:
            @selected (bool): Only apply the selected bones (with propagation to children)
               (optional)
      
         '''
      
         pass

      def autoside_names(axis='XAXIS'):
         '''Automatically renames the selected bones according to which side of the target axis they fall on
            Arguments:
            @axis (str): Axis tag names with
               in ['XAXIS', 'YAXIS', 'ZAXIS'], (optional)
      
         '''
      
         pass

      def bone_layers(layers=(False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False)):
         '''Change the layers that the selected bones belong to
            Arguments:
            @layers (bool): Armature layers that bone belongs to
               array of 32 items, (optional)
      
         '''
      
         pass

      def breakdown(percentage=0.5, prev_frame=0, next_frame=0, channels='ALL', axis_lock='FREE'):
         '''Create a suitable breakdown pose on the current frame
            Arguments:
            @percentage (float): Weighting factor for which keyframe is favored more
               in [0, 1], (optional)
            @prev_frame (int): Frame number of keyframe immediately before the current frame
               in [-1048574, 1048574], (optional)
            @next_frame (int): Frame number of keyframe immediately after the current frame
               in [-1048574, 1048574], (optional)
            @channels (str): Set of properties that are affected
               in ['ALL', 'LOC', 'ROT', 'SIZE', 'BBONE', 'CUSTOM'], (optional)
            @axis_lock (str): Transform axis to restrict effects to
               in ['FREE', 'X', 'Y', 'Z'], (optional)
      
         '''
      
         pass

      def constraint_add(type=''):
         '''Add a constraint to the active bone
            Arguments:
            @type (str): in ['CAMERA_SOLVER', 'FOLLOW_TRACK', 'OBJECT_SOLVER', 'COPY_LOCATION', 'COPY_ROTATION', 'COPY_SCALE', 'COPY_TRANSFORMS', 'LIMIT_DISTANCE', 'LIMIT_LOCATION', 'LIMIT_ROTATION', 'LIMIT_SCALE', 'MAINTAIN_VOLUME', 'TRANSFORM', 'TRANSFORM_CACHE', 'CLAMP_TO', 'DAMPED_TRACK', 'IK', 'LOCKED_TRACK', 'SPLINE_IK', 'STRETCH_TO', 'TRACK_TO', 'ACTION', 'ARMATURE', 'CHILD_OF', 'FLOOR', 'FOLLOW_PATH', 'PIVOT', 'SHRINKWRAP'], (optional)
      
         '''
      
         pass

      def constraint_add_with_targets(type=''):
         '''Add a constraint to the active bone, with target (where applicable) set to the selected Objects/Bones
            Arguments:
            @type (str): in ['CAMERA_SOLVER', 'FOLLOW_TRACK', 'OBJECT_SOLVER', 'COPY_LOCATION', 'COPY_ROTATION', 'COPY_SCALE', 'COPY_TRANSFORMS', 'LIMIT_DISTANCE', 'LIMIT_LOCATION', 'LIMIT_ROTATION', 'LIMIT_SCALE', 'MAINTAIN_VOLUME', 'TRANSFORM', 'TRANSFORM_CACHE', 'CLAMP_TO', 'DAMPED_TRACK', 'IK', 'LOCKED_TRACK', 'SPLINE_IK', 'STRETCH_TO', 'TRACK_TO', 'ACTION', 'ARMATURE', 'CHILD_OF', 'FLOOR', 'FOLLOW_PATH', 'PIVOT', 'SHRINKWRAP'], (optional)
      
         '''
      
         pass

      def constraints_clear():
         '''Clear all the constraints for the selected bones
         '''
      
         pass

      def constraints_copy():
         '''Copy constraints to other selected bones
         '''
      
         pass

      def copy():
         '''Copies the current pose of the selected bones to copy/paste buffer
         '''
      
         pass

      def flip_names(do_strip_numbers=False):
         '''Flips (and corrects) the axis suffixes of the names of selected bones
            Arguments:
            @do_strip_numbers (bool): Try to remove right-most dot-number from flipped names (WARNING: may result in incoherent naming in some cases)
               (optional)
      
         '''
      
         pass

      def group_add():
         '''Add a new bone group
         '''
      
         pass

      def group_assign(type=0):
         '''Add selected bones to the chosen bone group
            Arguments:
            @type (int): in [0, inf], (optional)
      
         '''
      
         pass

      def group_deselect():
         '''Deselect bones of active Bone Group
         '''
      
         pass

      def group_move(direction='UP'):
         '''Change position of active Bone Group in list of Bone Groups
            Arguments:
            @direction (str): Direction to move the active Bone Group towards
               in ['UP', 'DOWN'], (optional)
      
         '''
      
         pass

      def group_remove():
         '''Remove the active bone group
         '''
      
         pass

      def group_select():
         '''Select bones in active Bone Group
         '''
      
         pass

      def group_sort():
         '''Sort Bone Groups by their names in ascending order
         '''
      
         pass

      def group_unassign():
         '''Remove selected bones from all bone groups
         '''
      
         pass

      def hide(unselected=False):
         '''Tag selected bones to not be visible in Pose Mode
            Arguments:
            @unselected (bool): (optional)
      
         '''
      
         pass

      def ik_add(with_targets=True):
         '''Add IK Constraint to the active Bone
            Arguments:
            @with_targets (bool): Assign IK Constraint with targets derived from the select bones/objects
               (optional)
      
         '''
      
         pass

      def ik_clear():
         '''Remove all IK Constraints from selected bones
         '''
      
         pass

      def loc_clear():
         '''Reset locations of selected bones to their default values
         '''
      
         pass

      def paste(flipped=False, selected_mask=False):
         '''Paste the stored pose on to the current pose
            Arguments:
            @flipped (bool): Paste the stored pose flipped on to current pose
               (optional)
            @selected_mask (bool): Only paste the stored pose on to selected bones in the current pose
               (optional)
      
         '''
      
         pass

      def paths_calculate(start_frame=1, end_frame=250, bake_location='HEADS'):
         '''Calculate paths for the selected bones
            Arguments:
            @start_frame (int): First frame to calculate bone paths on
               in [-1048574, 1048574], (optional)
            @end_frame (int): Last frame to calculate bone paths on
               in [-1048574, 1048574], (optional)
            @bake_location (str): Which point on the bones is used when calculating paths
               in ['HEADS', 'TAILS'], (optional)
      
         '''
      
         pass

      def paths_clear(only_selected=False):
         '''Clear path caches for all bones, hold Shift key for selected bones only
            Arguments:
            @only_selected (bool): Only clear paths from selected bones
               (optional)
      
         '''
      
         pass

      def paths_range_update():
         '''Update frame range for motion paths from the Scene's current frame range
         '''
      
         pass

      def paths_update():
         '''Recalculate paths for bones that already have them
         '''
      
         pass

      def propagate(mode='WHILE_HELD', end_frame=250.0):
         '''Copy selected aspects of the current pose to subsequent poses already keyframed
            Arguments:
            @mode (str): Method used to determine when to stop propagating pose to keyframes
               in ['WHILE_HELD', 'NEXT_KEY', 'LAST_KEY', 'BEFORE_FRAME', 'BEFORE_END', 'SELECTED_KEYS', 'SELECTED_MARKERS'], (optional)
            @end_frame (float): Frame to stop propagating frames to (for 'Before Frame' mode)
               in [1.17549e-38, inf], (optional)
      
         '''
      
         pass

      def push(percentage=0.5, prev_frame=0, next_frame=0, channels='ALL', axis_lock='FREE'):
         '''Exaggerate the current pose in regards to the breakdown pose
            Arguments:
            @percentage (float): Weighting factor for which keyframe is favored more
               in [0, 1], (optional)
            @prev_frame (int): Frame number of keyframe immediately before the current frame
               in [-1048574, 1048574], (optional)
            @next_frame (int): Frame number of keyframe immediately after the current frame
               in [-1048574, 1048574], (optional)
            @channels (str): Set of properties that are affected
               in ['ALL', 'LOC', 'ROT', 'SIZE', 'BBONE', 'CUSTOM'], (optional)
            @axis_lock (str): Transform axis to restrict effects to
               in ['FREE', 'X', 'Y', 'Z'], (optional)
      
         '''
      
         pass

      def push_rest(percentage=0.5, prev_frame=0, next_frame=0, channels='ALL', axis_lock='FREE'):
         '''Push the current pose further away from the rest pose
            Arguments:
            @percentage (float): Weighting factor for which keyframe is favored more
               in [0, 1], (optional)
            @prev_frame (int): Frame number of keyframe immediately before the current frame
               in [-1048574, 1048574], (optional)
            @next_frame (int): Frame number of keyframe immediately after the current frame
               in [-1048574, 1048574], (optional)
            @channels (str): Set of properties that are affected
               in ['ALL', 'LOC', 'ROT', 'SIZE', 'BBONE', 'CUSTOM'], (optional)
            @axis_lock (str): Transform axis to restrict effects to
               in ['FREE', 'X', 'Y', 'Z'], (optional)
      
         '''
      
         pass

      def quaternions_flip():
         '''Flip quaternion values to achieve desired rotations, while maintaining the same orientations
         '''
      
         pass

      def relax(percentage=0.5, prev_frame=0, next_frame=0, channels='ALL', axis_lock='FREE'):
         '''Make the current pose more similar to its breakdown pose
            Arguments:
            @percentage (float): Weighting factor for which keyframe is favored more
               in [0, 1], (optional)
            @prev_frame (int): Frame number of keyframe immediately before the current frame
               in [-1048574, 1048574], (optional)
            @next_frame (int): Frame number of keyframe immediately after the current frame
               in [-1048574, 1048574], (optional)
            @channels (str): Set of properties that are affected
               in ['ALL', 'LOC', 'ROT', 'SIZE', 'BBONE', 'CUSTOM'], (optional)
            @axis_lock (str): Transform axis to restrict effects to
               in ['FREE', 'X', 'Y', 'Z'], (optional)
      
         '''
      
         pass

      def relax_rest(percentage=0.5, prev_frame=0, next_frame=0, channels='ALL', axis_lock='FREE'):
         '''Make the current pose more similar to the rest pose
            Arguments:
            @percentage (float): Weighting factor for which keyframe is favored more
               in [0, 1], (optional)
            @prev_frame (int): Frame number of keyframe immediately before the current frame
               in [-1048574, 1048574], (optional)
            @next_frame (int): Frame number of keyframe immediately after the current frame
               in [-1048574, 1048574], (optional)
            @channels (str): Set of properties that are affected
               in ['ALL', 'LOC', 'ROT', 'SIZE', 'BBONE', 'CUSTOM'], (optional)
            @axis_lock (str): Transform axis to restrict effects to
               in ['FREE', 'X', 'Y', 'Z'], (optional)
      
         '''
      
         pass

      def reveal(select=True):
         '''Reveal all bones hidden in Pose Mode
            Arguments:
            @select (bool): (optional)
      
         '''
      
         pass

      def rot_clear():
         '''Reset rotations of selected bones to their default values
         '''
      
         pass

      def rotation_mode_set(type='QUATERNION'):
         '''Set the rotation representation used by selected bones
            Arguments:
            @type (str): in ['QUATERNION', 'XYZ', 'XZY', 'YXZ', 'YZX', 'ZXY', 'ZYX', 'AXIS_ANGLE'], (optional)
      
         '''
      
         pass

      def scale_clear():
         '''Reset scaling of selected bones to their default values
         '''
      
         pass

      def select_all(action='TOGGLE'):
         '''Toggle selection status of all bones
            Arguments:
            @action (str): Selection action to execute
               in ['TOGGLE', 'SELECT', 'DESELECT', 'INVERT'], (optional)
      
         '''
      
         pass

      def select_constraint_target():
         '''Select bones used as targets for the currently selected bones
         '''
      
         pass

      def select_grouped(extend=False, type='LAYER'):
         '''Select all visible bones grouped by similar properties
            Arguments:
            @extend (bool): Extend selection instead of deselecting everything first
               (optional)
            @type (str): in ['LAYER', 'GROUP', 'KEYINGSET'], (optional)
      
         '''
      
         pass

      def select_hierarchy(direction='PARENT', extend=False):
         '''Select immediate parent/children of selected bones
            Arguments:
            @direction (str): in ['PARENT', 'CHILD'], (optional)
            @extend (bool): Extend the selection
               (optional)
      
         '''
      
         pass

      def select_linked():
         '''Select all bones linked by parent/child connections to the current selection
         '''
      
         pass

      def select_linked_pick(extend=False):
         '''Select bones linked by parent/child connections under the mouse cursor
            Arguments:
            @extend (bool): Extend selection instead of deselecting everything first
               (optional)
      
         '''
      
         pass

      def select_mirror(only_active=False, extend=False):
         '''Mirror the bone selection
            Arguments:
            @only_active (bool): Only operate on the active bone
               (optional)
            @extend (bool): Extend the selection
               (optional)
      
         '''
      
         pass

      def select_parent():
         '''Select bones that are parents of the currently selected bones
         '''
      
         pass

      def transforms_clear():
         '''Reset location, rotation, and scaling of selected bones to their default values
         '''
      
         pass

      def user_transforms_clear(only_selected=True):
         '''Reset pose on selected bones to keyframed state
            Arguments:
            @only_selected (bool): Only visible/selected bones
               (optional)
      
         '''
      
         pass

      def visual_transform_apply():
         '''Apply final constrained position of pose bones to their transform
         '''
      
         pass

   class poselib:
      '''Spcecial class, created just to reflect content of bpy.ops.poselib'''

      def action_sanitize():
         '''Make action suitable for use as a Pose Library
         '''
      
         pass

      def apply_pose(pose_index=-1):
         '''Apply specified Pose Library pose to the rig
            Arguments:
            @pose_index (int): Index of the pose to apply (-2 for no change to pose, -1 for poselib active pose)
               in [-2, inf], (optional)
      
         '''
      
         pass

      def browse_interactive(pose_index=-1):
         '''Interactively browse poses in 3D-View
            Arguments:
            @pose_index (int): Index of the pose to apply (-2 for no change to pose, -1 for poselib active pose)
               in [-2, inf], (optional)
      
         '''
      
         pass

      def new():
         '''Add New Pose Library to active Object
         '''
      
         pass

      def pose_add(frame=1, name="Pose"):
         '''Add the current Pose to the active Pose Library
            Arguments:
            @frame (int): Frame to store pose on
               in [0, inf], (optional)
            @name (str): Name of newly added Pose
               (optional, never None)
      
         '''
      
         pass

      def pose_move(pose='', direction='UP'):
         '''Move the pose up or down in the active Pose Library
            Arguments:
            @pose (str): The pose to move
               in [], (optional)
            @direction (str): Direction to move the chosen pose towards
               in ['UP', 'DOWN'], (optional)
      
         '''
      
         pass

      def pose_remove(pose=''):
         '''Remove nth pose from the active Pose Library
            Arguments:
            @pose (str): The pose to remove
               in [], (optional)
      
         '''
      
         pass

      def pose_rename(name="RenamedPose", pose=''):
         '''Rename specified pose from the active Pose Library
            Arguments:
            @name (str): New name for pose
               (optional, never None)
            @pose (str): The pose to rename
               in [], (optional)
      
         '''
      
         pass

      def unlink():
         '''Remove Pose Library from active Object
         '''
      
         pass

   class preferences:
      '''Spcecial class, created just to reflect content of bpy.ops.preferences'''

      def addon_disable(module=""):
         '''Disable an add-on
            Arguments:
            @module (str): Module name of the add-on to disable
               (optional, never None)
      
         '''
      
         pass

      def addon_enable(module=""):
         '''Enable an add-on
            Arguments:
            @module (str): Module name of the add-on to enable
               (optional, never None)
      
         '''
      
         pass

      def addon_expand(module=""):
         '''Display information and preferences for this add-on
            Arguments:
            @module (str): Module name of the add-on to expand
               (optional, never None)
      
         '''
      
         pass

      def addon_install(overwrite=True, target='DEFAULT', filepath="", filter_folder=True, filter_python=True, filter_glob="*.py;*.zip"):
         '''Install an add-on
            Arguments:
            @overwrite (bool): Remove existing add-ons with the same ID
               (optional)
            @target (str): in ['DEFAULT', 'PREFS'], (optional)
            @filepath (str): (optional, never None)
            @filter_folder (bool): (optional)
            @filter_python (bool): (optional)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

      def addon_refresh():
         '''Scan add-on directories for new modules
         '''
      
         pass

      def addon_remove(module=""):
         '''Delete the add-on from the file system
            Arguments:
            @module (str): Module name of the add-on to remove
               (optional, never None)
      
         '''
      
         pass

      def addon_show(module=""):
         '''Show add-on preferences
            Arguments:
            @module (str): Module name of the add-on to expand
               (optional, never None)
      
         '''
      
         pass

      def app_template_install(overwrite=True, filepath="", filter_folder=True, filter_glob="*.zip"):
         '''Install an application-template
            Arguments:
            @overwrite (bool): Remove existing template with the same ID
               (optional)
            @filepath (str): (optional, never None)
            @filter_folder (bool): (optional)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

      def copy_prev():
         '''Copy settings from previous version
         '''
      
         pass

      def keyconfig_activate(filepath=""):
         '''undocumented
            Arguments:
            @filepath (str): (optional, never None)
      
         '''
      
         pass

      def keyconfig_export(all=False, filepath="keymap.py", filter_folder=True, filter_text=True, filter_python=True):
         '''Export key configuration to a python script
            Arguments:
            @all (bool): Write all keymaps (not just user modified)
               (optional)
            @filepath (str): (optional, never None)
            @filter_folder (bool): (optional)
            @filter_text (bool): (optional)
            @filter_python (bool): (optional)
      
         '''
      
         pass

      def keyconfig_import(filepath="keymap.py", filter_folder=True, filter_text=True, filter_python=True, keep_original=True):
         '''Import key configuration from a python script
            Arguments:
            @filepath (str): (optional, never None)
            @filter_folder (bool): (optional)
            @filter_text (bool): (optional)
            @filter_python (bool): (optional)
            @keep_original (bool): Keep original file after copying to configuration folder
               (optional)
      
         '''
      
         pass

      def keyconfig_remove():
         '''Remove key config
         '''
      
         pass

      def keyconfig_test():
         '''Test key-config for conflicts
         '''
      
         pass

      def keyitem_add():
         '''Add key map item
         '''
      
         pass

      def keyitem_remove(item_id=0):
         '''Remove key map item
            Arguments:
            @item_id (int): Identifier of the item to remove
               in [-inf, inf], (optional)
      
         '''
      
         pass

      def keyitem_restore(item_id=0):
         '''Restore key map item
            Arguments:
            @item_id (int): Identifier of the item to remove
               in [-inf, inf], (optional)
      
         '''
      
         pass

      def keymap_restore(all=False):
         '''Restore key map(s)
            Arguments:
            @all (bool): Restore all keymaps to default
               (optional)
      
         '''
      
         pass

      def reset_default_theme():
         '''Reset to the default theme colors
         '''
      
         pass

      def studiolight_copy_settings(index=0):
         '''Copy Studio Light settings to the Studio light editor
            Arguments:
            @index (int): in [-inf, inf], (optional)
      
         '''
      
         pass

      def studiolight_install(files=None, directory="", filter_folder=True, filter_glob="*.png;*.jpg;*.hdr;*.exr", type='MATCAP'):
         '''Install a user defined studio light
            Arguments:
            @files (OperatorFileListElement): Collection of , (optional)
            @directory (str): (optional, never None)
            @filter_folder (bool): (optional)
            @filter_glob (str): (optional, never None)
            @type (str): in ['MATCAP', 'WORLD', 'STUDIO'], (optional)
      
         '''
      
         pass

      def studiolight_new(filename="StudioLight"):
         '''Save custom studio light from the studio light editor settings
            Arguments:
            @filename (str): (optional, never None)
      
         '''
      
         pass

      def studiolight_show():
         '''Show light preferences
         '''
      
         pass

      def studiolight_uninstall(index=0):
         '''Delete Studio Light
            Arguments:
            @index (int): in [-inf, inf], (optional)
      
         '''
      
         pass

      def theme_install(overwrite=True, filepath="", filter_folder=True, filter_glob="*.xml"):
         '''Load and apply a Blender XML theme file
            Arguments:
            @overwrite (bool): Remove existing theme file if exists
               (optional)
            @filepath (str): (optional, never None)
            @filter_folder (bool): (optional)
            @filter_glob (str): (optional, never None)
      
         '''
      
         pass

   class ptcache:
      '''Spcecial class, created just to reflect content of bpy.ops.ptcache'''

      def add():
         '''Add new cache
         '''
      
         pass

      def bake(bake=False):
         '''Bake physics
            Arguments:
            @bake (bool): (optional)
      
         '''
      
         pass

      def bake_all(bake=True):
         '''Bake all physics
            Arguments:
            @bake (bool): (optional)
      
         '''
      
         pass

      def bake_from_cache():
         '''Bake from cache
         '''
      
         pass

      def free_bake():
         '''Delete physics bake
         '''
      
         pass

      def free_bake_all():
         '''Delete all baked caches of all objects in the current scene
         '''
      
         pass

      def remove():
         '''Delete current cache
         '''
      
         pass

   class render:
      '''Spcecial class, created just to reflect content of bpy.ops.render'''

      def cycles_integrator_preset_add(name="", remove_name=False, remove_active=False):
         '''Add an Integrator Preset
            Arguments:
            @name (str): Name of the preset, used to make the path name
               (optional, never None)
            @remove_name (bool): (optional)
            @remove_active (bool): (optional)
      
         '''
      
         pass

      def cycles_sampling_preset_add(name="", remove_name=False, remove_active=False):
         '''Add a Sampling Preset
            Arguments:
            @name (str): Name of the preset, used to make the path name
               (optional, never None)
            @remove_name (bool): (optional)
            @remove_active (bool): (optional)
      
         '''
      
         pass

      def opengl(animation=False, render_keyed_only=False, sequencer=False, write_still=False, view_context=True):
         '''Take a snapshot of the active viewport
            Arguments:
            @animation (bool): Render files from the animation range of this scene
               (optional)
            @render_keyed_only (bool): Render only those frames where selected objects have a key in their animation data. Only used when rendering animation
               (optional)
            @sequencer (bool): Render using the sequencer's OpenGL display
               (optional)
            @write_still (bool): Save rendered the image to the output path (used only when animation is disabled)
               (optional)
            @view_context (bool): Use the current 3D view for rendering, else use scene settings
               (optional)
      
         '''
      
         pass

      def play_rendered_anim():
         '''Play back rendered frames/movies using an external player
         '''
      
         pass

      def preset_add(name="", remove_name=False, remove_active=False):
         '''Add or remove a Render Preset
            Arguments:
            @name (str): Name of the preset, used to make the path name
               (optional, never None)
            @remove_name (bool): (optional)
            @remove_active (bool): (optional)
      
         '''
      
         pass

      def render(animation=False, write_still=False, use_viewport=False, layer="", scene=""):
         '''Render active scene
            Arguments:
            @animation (bool): Render files from the animation range of this scene
               (optional)
            @write_still (bool): Save rendered the image to the output path (used only when animation is disabled)
               (optional)
            @use_viewport (bool): When inside a 3D viewport, use layers and camera of the viewport
               (optional)
            @layer (str): Single render layer to re-render (used only when animation is disabled)
               (optional, never None)
            @scene (str): Scene to render, current scene if not specified
               (optional, never None)
      
         '''
      
         pass

      def shutter_curve_preset(shape='SMOOTH'):
         '''Set shutter curve
            Arguments:
            @shape (str): in ['SHARP', 'SMOOTH', 'MAX', 'LINE', 'ROUND', 'ROOT'], (optional)
      
         '''
      
         pass

      def view_cancel():
         '''Cancel show render view
         '''
      
         pass

      def view_show():
         '''Toggle show render view
         '''
      
         pass

   class rigidbody:
      '''Spcecial class, created just to reflect content of bpy.ops.rigidbody'''

      def bake_to_keyframes(frame_start=1, frame_end=250, step=1):
         '''Bake rigid body transformations of selected objects to keyframes
            Arguments:
            @frame_start (int): Start frame for baking
               in [0, 300000], (optional)
            @frame_end (int): End frame for baking
               in [1, 300000], (optional)
            @step (int): Frame Step
               in [1, 120], (optional)
      
         '''
      
         pass

      def connect(con_type='FIXED', pivot_type='CENTER', connection_pattern='SELECTED_TO_ACTIVE'):
         '''Create rigid body constraints between selected rigid bodies
            Arguments:
            @con_type (str): Type of generated constraint
               in ['FIXED', 'POINT', 'HINGE', 'SLIDER', 'PISTON', 'GENERIC', 'GENERIC_SPRING', 'MOTOR'], (optional)
            @pivot_type (str): Constraint pivot location
               in ['CENTER', 'ACTIVE', 'SELECTED'], (optional)
            @connection_pattern (str): Pattern used to connect objects
               in ['SELECTED_TO_ACTIVE', 'CHAIN_DISTANCE'], (optional)
      
         '''
      
         pass

      def constraint_add(type='FIXED'):
         '''Add Rigid Body Constraint to active object
            Arguments:
            @type (str): in ['FIXED', 'POINT', 'HINGE', 'SLIDER', 'PISTON', 'GENERIC', 'GENERIC_SPRING', 'MOTOR'], (optional)
      
         '''
      
         pass

      def constraint_remove():
         '''Remove Rigid Body Constraint from Object
         '''
      
         pass

      def mass_calculate(material='DEFAULT', density=1.0):
         '''Automatically calculate mass values for Rigid Body Objects based on volume
            Arguments:
            @material (str): Type of material that objects are made of (determines material density)
               in ['DEFAULT'], (optional)
            @density (float): Custom density value (kg/m^3) to use instead of material preset
               in [1.17549e-38, inf], (optional)
      
         '''
      
         pass

      def object_add(type='ACTIVE'):
         '''Add active object as Rigid Body
            Arguments:
            @type (str): in ['ACTIVE', 'PASSIVE'], (optional)
      
         '''
      
         pass

      def object_remove():
         '''Remove Rigid Body settings from Object
         '''
      
         pass

      def object_settings_copy():
         '''Copy Rigid Body settings from active object to selected
         '''
      
         pass

      def objects_add(type='ACTIVE'):
         '''Add selected objects as Rigid Bodies
            Arguments:
            @type (str): in ['ACTIVE', 'PASSIVE'], (optional)
      
         '''
      
         pass

      def objects_remove():
         '''Remove selected objects from Rigid Body simulation
         '''
      
         pass

      def shape_change(type='MESH'):
         '''Change collision shapes for selected Rigid Body Objects
            Arguments:
            @type (str): in ['BOX', 'SPHERE', 'CAPSULE', 'CYLINDER', 'CONE', 'CONVEX_HULL', 'MESH'], (optional)
      
         '''
      
         pass

      def world_add():
         '''Add Rigid Body simulation world to the current scene
         '''
      
         pass

      def world_remove():
         '''Remove Rigid Body simulation world from the current scene
         '''
      
         pass

   class safe_areas:
      '''Spcecial class, created just to reflect content of bpy.ops.safe_areas'''

      def preset_add(name="", remove_name=False, remove_active=False):
         '''Add or remove a Safe Areas Preset
            Arguments:
            @name (str): Name of the preset, used to make the path name
               (optional, never None)
            @remove_name (bool): (optional)
            @remove_active (bool): (optional)
      
         '''
      
         pass

   class scene:
      '''Spcecial class, created just to reflect content of bpy.ops.scene'''

      def delete():
         '''Delete active scene
         '''
      
         pass

      def freestyle_add_edge_marks_to_keying_set():
         '''Add the data paths to the Freestyle Edge Mark property of selected edges to the active keying set
         '''
      
         pass

      def freestyle_add_face_marks_to_keying_set():
         '''Add the data paths to the Freestyle Face Mark property of selected polygons to the active keying set
         '''
      
         pass

      def freestyle_alpha_modifier_add(type='ALONG_STROKE'):
         '''Add an alpha transparency modifier to the line style associated with the active lineset
            Arguments:
            @type (str): in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'], (optional)
      
         '''
      
         pass

      def freestyle_color_modifier_add(type='ALONG_STROKE'):
         '''Add a line color modifier to the line style associated with the active lineset
            Arguments:
            @type (str): in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'], (optional)
      
         '''
      
         pass

      def freestyle_fill_range_by_selection(type='COLOR', name=""):
         '''Fill the Range Min/Max entries by the min/max distance between selected mesh objects and the source object
            Arguments:
            @type (str): Type of the modifier to work on
               in ['COLOR', 'ALPHA', 'THICKNESS'], (optional)
            @name (str): Name of the modifier to work on
               (optional, never None)
      
         '''
      
         pass

      def freestyle_geometry_modifier_add(type='2D_OFFSET'):
         '''Add a stroke geometry modifier to the line style associated with the active lineset
            Arguments:
            @type (str): in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER'], (optional)
      
         '''
      
         pass

      def freestyle_lineset_add():
         '''Add a line set into the list of line sets
         '''
      
         pass

      def freestyle_lineset_copy():
         '''Copy the active line set to a buffer
         '''
      
         pass

      def freestyle_lineset_move(direction='UP'):
         '''Change the position of the active line set within the list of line sets
            Arguments:
            @direction (str): Direction to move the active line set towards
               in ['UP', 'DOWN'], (optional)
      
         '''
      
         pass

      def freestyle_lineset_paste():
         '''Paste the buffer content to the active line set
         '''
      
         pass

      def freestyle_lineset_remove():
         '''Remove the active line set from the list of line sets
         '''
      
         pass

      def freestyle_linestyle_new():
         '''Create a new line style, reusable by multiple line sets
         '''
      
         pass

      def freestyle_modifier_copy():
         '''Duplicate the modifier within the list of modifiers
         '''
      
         pass

      def freestyle_modifier_move(direction='UP'):
         '''Move the modifier within the list of modifiers
            Arguments:
            @direction (str): Direction to move the chosen modifier towards
               in ['UP', 'DOWN'], (optional)
      
         '''
      
         pass

      def freestyle_modifier_remove():
         '''Remove the modifier from the list of modifiers
         '''
      
         pass

      def freestyle_module_add():
         '''Add a style module into the list of modules
         '''
      
         pass

      def freestyle_module_move(direction='UP'):
         '''Change the position of the style module within in the list of style modules
            Arguments:
            @direction (str): Direction to move the chosen style module towards
               in ['UP', 'DOWN'], (optional)
      
         '''
      
         pass

      def freestyle_module_open(filepath="", make_internal=True):
         '''Open a style module file
            Arguments:
            @filepath (str): (optional, never None)
            @make_internal (bool): Make module file internal after loading
               (optional)
      
         '''
      
         pass

      def freestyle_module_remove():
         '''Remove the style module from the stack
         '''
      
         pass

      def freestyle_stroke_material_create():
         '''Create Freestyle stroke material for testing
         '''
      
         pass

      def freestyle_thickness_modifier_add(type='ALONG_STROKE'):
         '''Add a line thickness modifier to the line style associated with the active lineset
            Arguments:
            @type (str): in ['ALONG_STROKE', 'CALLIGRAPHY', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT'], (optional)
      
         '''
      
         pass

      def gpencil_brush_preset_add(name="", remove_name=False, remove_active=False):
         '''Add or remove grease pencil brush preset
            Arguments:
            @name (str): Name of the preset, used to make the path name
               (optional, never None)
            @remove_name (bool): (optional)
            @remove_active (bool): (optional)
      
         '''
      
         pass

      def gpencil_material_preset_add(name="", remove_name=False, remove_active=False):
         '''Add or remove grease pencil material preset
            Arguments:
            @name (str): Name of the preset, used to make the path name
               (optional, never None)
            @remove_name (bool): (optional)
            @remove_active (bool): (optional)
      
         '''
      
         pass

      def light_cache_bake(delay=0, subset='ALL'):
         '''Bake the active view layer lighting
            Arguments:
            @delay (int): Delay in millisecond before baking starts
               in [0, 2000], (optional)
            @subset (str): Subset of probes to update
               in ['ALL', 'DIRTY', 'CUBEMAPS'], (optional)
      
         '''
      
         pass

      def light_cache_free():
         '''Delete cached indirect lighting
         '''
      
         pass

      def new(type='NEW'):
         '''Add new scene by type
            Arguments:
            @type (str): in ['NEW', 'EMPTY', 'LINK_COPY', 'FULL_COPY'], (optional)
      
         '''
      
         pass

      def render_view_add():
         '''Add a render view
         '''
      
         pass

      def render_view_remove():
         '''Remove the selected render view
         '''
      
         pass

      def view_layer_add(type='NEW'):
         '''Add a view layer
            Arguments:
            @type (str): in ['NEW', 'COPY', 'EMPTY'], (optional)
      
         '''
      
         pass

      def view_layer_remove():
         '''Remove the selected view layer
         '''
      
         pass

   class screen:
      '''Spcecial class, created just to reflect content of bpy.ops.screen'''

      def actionzone(modifier=0):
         '''Handle area action zones for mouse actions/gestures
            Arguments:
            @modifier (int): Modifier state
               in [0, 2], (optional)
      
         '''
      
         pass

      def animation_cancel(restore_frame=True):
         '''Cancel animation, returning to the original frame
            Arguments:
            @restore_frame (bool): Restore the frame when animation was initialized
               (optional)
      
         '''
      
         pass

      def animation_play(reverse=False, sync=False):
         '''Play animation
            Arguments:
            @reverse (bool): Animation is played backwards
               (optional)
            @sync (bool): Drop frames to maintain framerate
               (optional)
      
         '''
      
         pass

      def animation_step():
         '''Step through animation by position
         '''
      
         pass

      def area_dupli():
         '''Duplicate selected area into new window
         '''
      
         pass

      def area_join(cursor=(0, 0)):
         '''Join selected areas into new window
            Arguments:
            @cursor (int): array of 2 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def area_move(x=0, y=0, delta=0):
         '''Move selected area edges
            Arguments:
            @x (int): in [-inf, inf], (optional)
            @y (int): in [-inf, inf], (optional)
            @delta (int): in [-inf, inf], (optional)
      
         '''
      
         pass

      def area_options():
         '''Operations for splitting and merging
         '''
      
         pass

      def area_split(direction='HORIZONTAL', factor=0.5, cursor=(0, 0)):
         '''Split selected area into new windows
            Arguments:
            @direction (str): in ['HORIZONTAL', 'VERTICAL'], (optional)
            @factor (float): in [0, 1], (optional)
            @cursor (int): array of 2 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def area_swap(cursor=(0, 0)):
         '''Swap selected areas screen positions
            Arguments:
            @cursor (int): array of 2 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def back_to_previous():
         '''Revert back to the original screen layout, before fullscreen area overlay
         '''
      
         pass

      def delete():
         '''Delete active screen
         '''
      
         pass

      def drivers_editor_show():
         '''Show drivers editor in a separate window
         '''
      
         pass

      def frame_jump(end=False):
         '''Jump to first/last frame in frame range
            Arguments:
            @end (bool): Jump to the last frame of the frame range
               (optional)
      
         '''
      
         pass

      def frame_offset(delta=0):
         '''Move current frame forward/backward by a given number
            Arguments:
            @delta (int): in [-inf, inf], (optional)
      
         '''
      
         pass

      def header_toggle_menus():
         '''Expand or collapse the header pulldown menus
         '''
      
         pass

      def info_log_show():
         '''Show info log in a separate window
         '''
      
         pass

      def keyframe_jump(next=True):
         '''Jump to previous/next keyframe
            Arguments:
            @next (bool): (optional)
      
         '''
      
         pass

      def marker_jump(next=True):
         '''Jump to previous/next marker
            Arguments:
            @next (bool): (optional)
      
         '''
      
         pass

      def new():
         '''Add a new screen
         '''
      
         pass

      def redo_last():
         '''Display parameters for last action performed
         '''
      
         pass

      def region_blend():
         '''Blend in and out overlapping region
         '''
      
         pass

      def region_context_menu():
         '''Display region context menu
         '''
      
         pass

      def region_flip():
         '''Toggle the region's alignment (left/right or top/bottom)
         '''
      
         pass

      def region_quadview():
         '''Split selected area into camera, front, right & top views
         '''
      
         pass

      def region_scale():
         '''Scale selected area
         '''
      
         pass

      def region_toggle(region_type='WINDOW'):
         '''Hide or unhide the region
            Arguments:
            @region_type (str): Type of the region to toggle
               in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW', 'HUD', 'NAVIGATION_BAR', 'EXECUTE', 'FOOTER', 'TOOL_HEADER'], (optional)
      
         '''
      
         pass

      def repeat_history(index=0):
         '''Display menu for previous actions performed
            Arguments:
            @index (int): in [0, inf], (optional)
      
         '''
      
         pass

      def repeat_last():
         '''Repeat last action
         '''
      
         pass

      def screen_full_area(use_hide_panels=False):
         '''Toggle display selected area as fullscreen/maximized
            Arguments:
            @use_hide_panels (bool): Hide all the panels
               (optional)
      
         '''
      
         pass

      def screen_set(delta=1):
         '''Cycle through available screens
            Arguments:
            @delta (int): in [-1, 1], (optional)
      
         '''
      
         pass

      def screenshot(filepath="", hide_props_region=True, check_existing=True, filter_blender=False, filter_backup=False, filter_image=True, filter_movie=False, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=9, show_multiview=False, use_multiview=False, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA', full=True):
         '''Capture a picture of the active area or whole Blender window
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @hide_props_region (bool): Collapse the region displaying the operator settings
               (optional)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @show_multiview (bool): (optional)
            @use_multiview (bool): (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
            @full (bool): Capture the whole window (otherwise only capture the active area)
               (optional)
      
         '''
      
         pass

      def space_context_cycle(direction='NEXT'):
         '''Cycle through the editor context by activating the next/previous one
            Arguments:
            @direction (str): Direction to cycle through
               in ['PREV', 'NEXT'], (optional)
      
         '''
      
         pass

      def space_type_set_or_cycle(space_type='EMPTY'):
         '''Set the space type or cycle sub-type
            Arguments:
            @space_type (str): in ['EMPTY', 'VIEW_3D', 'IMAGE_EDITOR', 'NODE_EDITOR', 'SEQUENCE_EDITOR', 'CLIP_EDITOR', 'DOPESHEET_EDITOR', 'GRAPH_EDITOR', 'NLA_EDITOR', 'TEXT_EDITOR', 'CONSOLE', 'INFO', 'TOPBAR', 'STATUSBAR', 'OUTLINER', 'PROPERTIES', 'FILE_BROWSER', 'PREFERENCES'], (optional)
      
         '''
      
         pass

      def spacedata_cleanup():
         '''Remove unused settings for invisible editors
         '''
      
         pass

      def userpref_show():
         '''Edit user preferences and system settings
         '''
      
         pass

      def workspace_cycle(direction='NEXT'):
         '''Cycle through workspaces
            Arguments:
            @direction (str): Direction to cycle through
               in ['PREV', 'NEXT'], (optional)
      
         '''
      
         pass

   class script:
      '''Spcecial class, created just to reflect content of bpy.ops.script'''

      def execute_preset(filepath="", menu_idname=""):
         '''Execute a preset
            Arguments:
            @filepath (str): (optional, never None)
            @menu_idname (str): ID name of the menu this was called from
               (optional, never None)
      
         '''
      
         pass

      def python_file_run(filepath=""):
         '''Run Python file
            Arguments:
            @filepath (str): (optional, never None)
      
         '''
      
         pass

      def reload():
         '''Reload Scripts
         '''
      
         pass

   class sculpt:
      '''Spcecial class, created just to reflect content of bpy.ops.sculpt'''

      def brush_stroke(stroke=None, mode='NORMAL', ignore_background_click=False):
         '''Sculpt a stroke into the geometry
            Arguments:
            @stroke (OperatorStrokeElement): Collection of , (optional)
            @mode (str): Action taken when a paint stroke is made
               in ['NORMAL', 'INVERT', 'SMOOTH'], (optional)
            @ignore_background_click (bool): Clicks on the background do not start the stroke
               (optional)
      
         '''
      
         pass

      def detail_flood_fill():
         '''Flood fill the mesh with the selected detail setting
         '''
      
         pass

      def dirty_mask(dirty_only=False):
         '''Generates a mask based on the geometry cavity and pointiness
            Arguments:
            @dirty_only (bool): Don't calculate cleans for convex areas
               (optional)
      
         '''
      
         pass

      def dynamic_topology_toggle():
         '''Dynamic topology alters the mesh topology while sculpting
         '''
      
         pass

      def face_set_change_visibility(mode='TOGGLE'):
         '''Change the visibility of the Face Sets of the sculpt
            Arguments:
            @mode (str): in ['TOGGLE', 'SHOW_ACTIVE', 'HIDE_ACTIVE', 'INVERT', 'SHOW_ALL'], (optional)
      
         '''
      
         pass

      def face_sets_create(mode='MASKED'):
         '''Create a new Face Set
            Arguments:
            @mode (str): in ['MASKED', 'VISIBLE', 'ALL', 'SELECTION'], (optional)
      
         '''
      
         pass

      def face_sets_init(mode='LOOSE_PARTS', threshold=0.5):
         '''Initializes all Face Sets in the mesh
            Arguments:
            @mode (str): in ['LOOSE_PARTS', 'MATERIALS', 'NORMALS', 'UV_SEAMS', 'CREASES', 'BEVEL_WEIGHT', 'SHARP_EDGES', 'FACE_MAPS'], (optional)
            @threshold (float): Minimum value to consider a certain attribute a boundary when creating the Face Sets
               in [0, 1], (optional)
      
         '''
      
         pass

      def face_sets_randomize_colors():
         '''Generates a new set of random colors to render the Face Sets in the viewport
         '''
      
         pass

      def mask_expand(invert=True, use_cursor=True, update_pivot=True, smooth_iterations=2, mask_speed=5, use_normals=True, keep_previous_mask=False, edge_sensitivity=300, create_face_set=False):
         '''Expands a mask from the initial active vertex under the cursor
            Arguments:
            @invert (bool): Invert the new mask
               (optional)
            @use_cursor (bool): Expand the mask to the cursor position
               (optional)
            @update_pivot (bool): Set the pivot position to the mask border after creating the mask
               (optional)
            @smooth_iterations (int): in [0, 10], (optional)
            @mask_speed (int): in [1, 10], (optional)
            @use_normals (bool): Generate the mask using the normals and curvature of the model
               (optional)
            @keep_previous_mask (bool): Generate the new mask on top of the current one
               (optional)
            @edge_sensitivity (int): Sensitivity for expanding the mask across sculpted sharp edges when using normals to generate the mask
               in [0, 2000], (optional)
            @create_face_set (bool): Expand a new Face Mask instead of the sculpt mask
               (optional)
      
         '''
      
         pass

      def mask_filter(filter_type='SMOOTH', iterations=1, auto_iteration_count=False):
         '''Applies a filter to modify the current mask
            Arguments:
            @filter_type (str): Filter that is going to be applied to the mask
               in ['SMOOTH', 'SHARPEN', 'GROW', 'SHRINK', 'CONTRAST_INCREASE', 'CONTRAST_DECREASE'], (optional)
            @iterations (int): Number of times that the filter is going to be applied
               in [1, 100], (optional)
            @auto_iteration_count (bool): Use a automatic number of iterations based on the number of vertices of the sculpt
               (optional)
      
         '''
      
         pass

      def mesh_filter(type='INFLATE', strength=1.0, deform_axis={'X', 'Y', 'Z'}, use_face_sets=False, surface_smooth_shape_preservation=0.5, surface_smooth_current_vertex=0.5, sharpen_smooth_ratio=0.35):
         '''Applies a filter to modify the current mesh
            Arguments:
            @type (str): Operation that is going to be applied to the mesh
               in ['SMOOTH', 'SCALE', 'INFLATE', 'SPHERE', 'RANDOM', 'RELAX', 'RELAX_FACE_SETS', 'SURFACE_SMOOTH', 'SHARPEN'], (optional)
            @strength (float): Filter Strength
               in [-10, 10], (optional)
            @deform_axis (str): Apply the deformation in the selected axis
               set in {'X', 'Y', 'Z'}, (optional)
            @use_face_sets (bool): Apply the filter only to the Face Mask under the cursor
               (optional)
            @surface_smooth_shape_preservation (float): How much of the original shape is preserved when smoothing
               in [0, 1], (optional)
            @surface_smooth_current_vertex (float): How much the position of each individual vertex influences the final result
               in [0, 1], (optional)
            @sharpen_smooth_ratio (float): How much smoothing is applied to polished surfaces
               in [0, 1], (optional)
      
         '''
      
         pass

      def optimize():
         '''Recalculate the sculpt BVH to improve performance
         '''
      
         pass

      def sample_detail_size(location=(0, 0), mode='DYNTOPO'):
         '''Sample the mesh detail on clicked point
            Arguments:
            @location (int): Screen Coordinates of sampling
               array of 2 items in [0, 32767], (optional)
            @mode (str): Target sculpting workflow that is going to use the sampled size
               in ['DYNTOPO', 'VOXEL'], (optional)
      
         '''
      
         pass

      def sculptmode_toggle():
         '''Toggle sculpt mode in 3D view
         '''
      
         pass

      def set_detail_size():
         '''Set the mesh detail (either relative or constant one, depending on current dyntopo mode)
         '''
      
         pass

      def set_persistent_base():
         '''Reset the copy of the mesh that is being sculpted on
         '''
      
         pass

      def set_pivot_position(mode='UNMASKED', mouse_x=0.0, mouse_y=0.0):
         '''Sets the sculpt transform pivot position
            Arguments:
            @mode (str): in ['ORIGIN', 'UNMASKED', 'BORDER', 'ACTIVE', 'SURFACE'], (optional)
            @mouse_x (float): Position of the mouse used for "Surface" mode
               in [0, inf], (optional)
            @mouse_y (float): Position of the mouse used for "Surface" mode
               in [0, inf], (optional)
      
         '''
      
         pass

      def symmetrize(merge_tolerance=0.001):
         '''Symmetrize the topology modifications
            Arguments:
            @merge_tolerance (float): Distance within which symmetrical vertices are merged
               in [0, inf], (optional)
      
         '''
      
         pass

      def uv_sculpt_stroke(mode='NORMAL'):
         '''Sculpt UVs using a brush
            Arguments:
            @mode (str): Stroke Mode
               in ['NORMAL', 'INVERT', 'RELAX'], (optional)
      
         '''
      
         pass

   class sequencer:
      '''Spcecial class, created just to reflect content of bpy.ops.sequencer'''

      def change_effect_input(swap='A_B'):
         '''undocumented
            Arguments:
            @swap (str): The effect inputs to swap
               in ['A_B', 'B_C', 'A_C'], (optional)
      
         '''
      
         pass

      def change_effect_type(type='CROSS'):
         '''undocumented
            Arguments:
            @type (str): Sequencer effect type
               in ['CROSS', 'ADD', 'SUBTRACT', 'ALPHA_OVER', 'ALPHA_UNDER', 'GAMMA_CROSS', 'MULTIPLY', 'OVER_DROP', 'WIPE', 'GLOW', 'TRANSFORM', 'COLOR', 'SPEED', 'MULTICAM', 'ADJUSTMENT', 'GAUSSIAN_BLUR', 'TEXT', 'COLORMIX'], (optional)
      
         '''
      
         pass

      def change_path(filepath="", directory="", files=None, hide_props_region=True, filter_blender=False, filter_backup=False, filter_image=False, filter_movie=False, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=9, relative_path=True, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA', use_placeholders=False):
         '''undocumented
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @directory (str): Directory of the file
               (optional, never None)
            @files (OperatorFileListElement): Collection of , (optional)
            @hide_props_region (bool): Collapse the region displaying the operator settings
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @relative_path (bool): Select the file relative to the blend file
               (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
            @use_placeholders (bool): Use placeholders for missing frames of the strip
               (optional)
      
         '''
      
         pass

      def copy():
         '''Copy selected strips to clipboard
         '''
      
         pass

      def crossfade_sounds():
         '''Do cross-fading volume animation of two selected sound strips
         '''
      
         pass

      def deinterlace_selected_movies():
         '''Deinterlace all selected movie sources
         '''
      
         pass

      def delete():
         '''Erase selected strips from the sequencer
         '''
      
         pass

      def duplicate():
         '''Duplicate the selected strips
         '''
      
         pass

      def duplicate_move(SEQUENCER_OT_duplicate=None, TRANSFORM_OT_seq_slide=None):
         '''Duplicate selected strips and move them
            Arguments:
            @SEQUENCER_OT_duplicate (SEQUENCER_OT_duplicate): Duplicate the selected strips
               (optional)
            @TRANSFORM_OT_seq_slide (TRANSFORM_OT_seq_slide): Slide a sequence strip in time
               (optional)
      
         '''
      
         pass

      def effect_strip_add(type='CROSS', frame_start=0, frame_end=0, channel=1, replace_sel=True, overlap=False, color=(0.0, 0.0, 0.0)):
         '''Add an effect to the sequencer, most are applied on top of existing strips
            Arguments:
            @type (str): Sequencer effect type
               in ['CROSS', 'ADD', 'SUBTRACT', 'ALPHA_OVER', 'ALPHA_UNDER', 'GAMMA_CROSS', 'MULTIPLY', 'OVER_DROP', 'WIPE', 'GLOW', 'TRANSFORM', 'COLOR', 'SPEED', 'MULTICAM', 'ADJUSTMENT', 'GAUSSIAN_BLUR', 'TEXT', 'COLORMIX'], (optional)
            @frame_start (int): Start frame of the sequence strip
               in [-inf, inf], (optional)
            @frame_end (int): End frame for the color strip
               in [-inf, inf], (optional)
            @channel (int): Channel to place this strip into
               in [1, 32], (optional)
            @replace_sel (bool): Replace the current selection
               (optional)
            @overlap (bool): Don't correct overlap on new sequence strips
               (optional)
            @color (float): Initialize the strip with this color (only used when type='COLOR')
               array of 3 items in [0, 1], (optional)
      
         '''
      
         pass

      def enable_proxies(proxy_25=False, proxy_50=False, proxy_75=False, proxy_100=False, overwrite=False):
         '''Enable selected proxies on all selected Movie, Image and Meta strips
            Arguments:
            @proxy_25 (bool): (optional)
            @proxy_50 (bool): (optional)
            @proxy_75 (bool): (optional)
            @proxy_100 (bool): (optional)
            @overwrite (bool): (optional)
      
         '''
      
         pass

      def export_subtitles(filepath="", hide_props_region=True, check_existing=True, filter_blender=False, filter_backup=False, filter_image=False, filter_movie=False, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=8, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA'):
         '''Export .srt file containing text strips
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @hide_props_region (bool): Collapse the region displaying the operator settings
               (optional)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
      
         '''
      
         pass

      def fades_add(duration_seconds=1.0, type='IN_OUT'):
         '''Adds or updates a fade animation for either visual or audio strips
            Arguments:
            @duration_seconds (float): Duration of the fade in seconds
               in [0.01, inf], (optional)
            @type (str): Fade in, out, both in and out, to, or from the playhead. Default is both in and out
               in ['IN_OUT', 'IN', 'OUT', 'CURSOR_FROM', 'CURSOR_TO'], (optional)
      
         '''
      
         pass

      def fades_clear():
         '''Removes fade animation from selected sequences
         '''
      
         pass

      def gap_insert(frames=10):
         '''Insert gap at current frame to first strips at the right, independent of selection or locked state of strips
            Arguments:
            @frames (int): Frames to insert after current strip
               in [0, inf], (optional)
      
         '''
      
         pass

      def gap_remove(all=False):
         '''Remove gap at current frame to first strip at the right, independent of selection or locked state of strips
            Arguments:
            @all (bool): Do all gaps to right of current frame
               (optional)
      
         '''
      
         pass

      def image_strip_add(directory="", files=None, filter_blender=False, filter_backup=False, filter_image=True, filter_movie=False, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=9, relative_path=True, show_multiview=False, use_multiview=False, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA', frame_start=0, frame_end=0, channel=1, replace_sel=True, overlap=False, use_placeholders=False):
         '''Add an image or image sequence to the sequencer
            Arguments:
            @directory (str): Directory of the file
               (optional, never None)
            @files (OperatorFileListElement): Collection of , (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @relative_path (bool): Select the file relative to the blend file
               (optional)
            @show_multiview (bool): (optional)
            @use_multiview (bool): (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
            @frame_start (int): Start frame of the sequence strip
               in [-inf, inf], (optional)
            @frame_end (int): End frame for the color strip
               in [-inf, inf], (optional)
            @channel (int): Channel to place this strip into
               in [1, 32], (optional)
            @replace_sel (bool): Replace the current selection
               (optional)
            @overlap (bool): Don't correct overlap on new sequence strips
               (optional)
            @use_placeholders (bool): Use placeholders for missing frames of the strip
               (optional)
      
         '''
      
         pass

      def images_separate(length=1):
         '''On image sequence strips, it returns a strip for each image
            Arguments:
            @length (int): Length of each frame
               in [1, inf], (optional)
      
         '''
      
         pass

      def lock():
         '''Lock strips so they can't be transformed
         '''
      
         pass

      def mask_strip_add(frame_start=0, channel=1, replace_sel=True, overlap=False, mask=''):
         '''Add a mask strip to the sequencer
            Arguments:
            @frame_start (int): Start frame of the sequence strip
               in [-inf, inf], (optional)
            @channel (int): Channel to place this strip into
               in [1, 32], (optional)
            @replace_sel (bool): Replace the current selection
               (optional)
            @overlap (bool): Don't correct overlap on new sequence strips
               (optional)
            @mask (str): in [], (optional)
      
         '''
      
         pass

      def meta_make():
         '''Group selected strips into a metastrip
         '''
      
         pass

      def meta_separate():
         '''Put the contents of a metastrip back in the sequencer
         '''
      
         pass

      def meta_toggle():
         '''Toggle a metastrip (to edit enclosed strips)
         '''
      
         pass

      def movie_strip_add(filepath="", directory="", files=None, filter_blender=False, filter_backup=False, filter_image=False, filter_movie=True, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=9, relative_path=True, show_multiview=False, use_multiview=False, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA', frame_start=0, channel=1, replace_sel=True, overlap=False, sound=True, use_framerate=True):
         '''Add a movie strip to the sequencer
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @directory (str): Directory of the file
               (optional, never None)
            @files (OperatorFileListElement): Collection of , (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @relative_path (bool): Select the file relative to the blend file
               (optional)
            @show_multiview (bool): (optional)
            @use_multiview (bool): (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
            @frame_start (int): Start frame of the sequence strip
               in [-inf, inf], (optional)
            @channel (int): Channel to place this strip into
               in [1, 32], (optional)
            @replace_sel (bool): Replace the current selection
               (optional)
            @overlap (bool): Don't correct overlap on new sequence strips
               (optional)
            @sound (bool): Load sound with the movie
               (optional)
            @use_framerate (bool): Use framerate from the movie to keep sound and video in sync
               (optional)
      
         '''
      
         pass

      def movieclip_strip_add(frame_start=0, channel=1, replace_sel=True, overlap=False, clip=''):
         '''Add a movieclip strip to the sequencer
            Arguments:
            @frame_start (int): Start frame of the sequence strip
               in [-inf, inf], (optional)
            @channel (int): Channel to place this strip into
               in [1, 32], (optional)
            @replace_sel (bool): Replace the current selection
               (optional)
            @overlap (bool): Don't correct overlap on new sequence strips
               (optional)
            @clip (str): in [], (optional)
      
         '''
      
         pass

      def mute(unselected=False):
         '''Mute (un)selected strips
            Arguments:
            @unselected (bool): Mute unselected rather than selected strips
               (optional)
      
         '''
      
         pass

      def offset_clear():
         '''Clear strip offsets from the start and end frames
         '''
      
         pass

      def paste():
         '''Paste strips from clipboard
         '''
      
         pass

      def reassign_inputs():
         '''Reassign the inputs for the effect strip
         '''
      
         pass

      def rebuild_proxy():
         '''Rebuild all selected proxies and timecode indices using the job system
         '''
      
         pass

      def refresh_all():
         '''Refresh the sequencer editor
         '''
      
         pass

      def reload(adjust_length=False):
         '''Reload strips in the sequencer
            Arguments:
            @adjust_length (bool): Adjust length of strips to their data length
               (optional)
      
         '''
      
         pass

      def rendersize():
         '''Set render size and aspect from active sequence
         '''
      
         pass

      def sample(size=1):
         '''Use mouse to sample color in current frame
            Arguments:
            @size (int): in [1, 128], (optional)
      
         '''
      
         pass

      def scene_strip_add(frame_start=0, channel=1, replace_sel=True, overlap=False, scene=''):
         '''Add a strip to the sequencer using a blender scene as a source
            Arguments:
            @frame_start (int): Start frame of the sequence strip
               in [-inf, inf], (optional)
            @channel (int): Channel to place this strip into
               in [1, 32], (optional)
            @replace_sel (bool): Replace the current selection
               (optional)
            @overlap (bool): Don't correct overlap on new sequence strips
               (optional)
            @scene (str): in [], (optional)
      
         '''
      
         pass

      def select(wait_to_deselect_others=False, mouse_x=0, mouse_y=0, extend=False, deselect_all=False, linked_handle=False, left_right='NONE', linked_time=False):
         '''Select a strip (last selected becomes the "active strip")
            Arguments:
            @wait_to_deselect_others (bool): (optional)
            @mouse_x (int): in [-inf, inf], (optional)
            @mouse_y (int): in [-inf, inf], (optional)
            @extend (bool): Extend the selection
               (optional)
            @deselect_all (bool): Deselect all when nothing under the cursor
               (optional)
            @linked_handle (bool): Select handles next to the active strip
               (optional)
            @left_right (str): Select based on the current frame side the cursor is on
               in ['NONE', 'MOUSE', 'LEFT', 'RIGHT'], (optional)
            @linked_time (bool): Select other strips at the same time
               (optional)
      
         '''
      
         pass

      def select_all(action='TOGGLE'):
         '''Select or deselect all strips
            Arguments:
            @action (str): Selection action to execute
               in ['TOGGLE', 'SELECT', 'DESELECT', 'INVERT'], (optional)
      
         '''
      
         pass

      def select_box(xmin=0, xmax=0, ymin=0, ymax=0, wait_for_input=True, mode='SET', tweak=False, include_handles=False):
         '''Select strips using box selection
            Arguments:
            @xmin (int): in [-inf, inf], (optional)
            @xmax (int): in [-inf, inf], (optional)
            @ymin (int): in [-inf, inf], (optional)
            @ymax (int): in [-inf, inf], (optional)
            @wait_for_input (bool): (optional)
            @mode (str): in ['SET', 'ADD', 'SUB'], (optional)
            @tweak (bool): Operator has been activated using a tweak event
               (optional)
            @include_handles (bool): Select the strips and their handles
               (optional)
      
         '''
      
         pass

      def select_grouped(type='TYPE', extend=False, use_active_channel=False):
         '''Select all strips grouped by various properties
            Arguments:
            @type (str): in ['TYPE', 'TYPE_BASIC', 'TYPE_EFFECT', 'DATA', 'EFFECT', 'EFFECT_LINK', 'OVERLAP'], (optional)
            @extend (bool): Extend selection instead of deselecting everything first
               (optional)
            @use_active_channel (bool): Only consider strips on the same channel as the active one
               (optional)
      
         '''
      
         pass

      def select_handles(side='BOTH'):
         '''Select gizmo handles on the sides of the selected strip
            Arguments:
            @side (str): The side of the handle that is selected
               in ['MOUSE', 'LEFT', 'RIGHT', 'BOTH', 'NO_CHANGE'], (optional)
      
         '''
      
         pass

      def select_less():
         '''Shrink the current selection of adjacent selected strips
         '''
      
         pass

      def select_linked():
         '''Select all strips adjacent to the current selection
         '''
      
         pass

      def select_linked_pick(extend=False):
         '''Select a chain of linked strips nearest to the mouse pointer
            Arguments:
            @extend (bool): Extend the selection
               (optional)
      
         '''
      
         pass

      def select_more():
         '''Select more strips adjacent to the current selection
         '''
      
         pass

      def select_side(side='BOTH'):
         '''Select strips on the nominated side of the selected strips
            Arguments:
            @side (str): The side to which the selection is applied
               in ['MOUSE', 'LEFT', 'RIGHT', 'BOTH', 'NO_CHANGE'], (optional)
      
         '''
      
         pass

      def set_range_to_strips(preview=False):
         '''Set the frame range to the selected strips start and end
            Arguments:
            @preview (bool): Set the preview range instead
               (optional)
      
         '''
      
         pass

      def slip(offset=0):
         '''Trim the contents of the active strip
            Arguments:
            @offset (int): Offset to the data of the strip
               in [-inf, inf], (optional)
      
         '''
      
         pass

      def snap(frame=0):
         '''Frame where selected strips will be snapped
            Arguments:
            @frame (int): Frame where selected strips will be snapped
               in [-inf, inf], (optional)
      
         '''
      
         pass

      def sound_strip_add(filepath="", directory="", files=None, filter_blender=False, filter_backup=False, filter_image=False, filter_movie=False, filter_python=False, filter_font=False, filter_sound=True, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=9, relative_path=True, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA', frame_start=0, channel=1, replace_sel=True, overlap=False, cache=False, mono=False):
         '''Add a sound strip to the sequencer
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @directory (str): Directory of the file
               (optional, never None)
            @files (OperatorFileListElement): Collection of , (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @relative_path (bool): Select the file relative to the blend file
               (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
            @frame_start (int): Start frame of the sequence strip
               in [-inf, inf], (optional)
            @channel (int): Channel to place this strip into
               in [1, 32], (optional)
            @replace_sel (bool): Replace the current selection
               (optional)
            @overlap (bool): Don't correct overlap on new sequence strips
               (optional)
            @cache (bool): Cache the sound in memory
               (optional)
            @mono (bool): Merge all the sound's channels into one
               (optional)
      
         '''
      
         pass

      def split(frame=0, channel=0, type='SOFT', use_cursor_position=False, side='MOUSE', ignore_selection=False):
         '''Split the selected strips in two
            Arguments:
            @frame (int): Frame where selected strips will be split
               in [-inf, inf], (optional)
            @channel (int): Channel in which strip will be cut
               in [-inf, inf], (optional)
            @type (str): The type of split operation to perform on strips
               in ['SOFT', 'HARD'], (optional)
            @use_cursor_position (bool): Split at position of the cursor instead of playhead
               (optional)
            @side (str): The side that remains selected after splitting
               in ['MOUSE', 'LEFT', 'RIGHT', 'BOTH', 'NO_CHANGE'], (optional)
            @ignore_selection (bool): Make cut event if strip is not selected preserving selection state after cut
               (optional)
      
         '''
      
         pass

      def split_multicam(camera=1):
         '''Split multi-cam strip and select camera
            Arguments:
            @camera (int): in [1, 32], (optional)
      
         '''
      
         pass

      def strip_jump(next=True, center=True):
         '''Move frame to previous edit point
            Arguments:
            @next (bool): (optional)
            @center (bool): (optional)
      
         '''
      
         pass

      def strip_modifier_add(type='COLOR_BALANCE'):
         '''Add a modifier to the strip
            Arguments:
            @type (str): in ['COLOR_BALANCE', 'CURVES', 'HUE_CORRECT', 'BRIGHT_CONTRAST', 'MASK', 'WHITE_BALANCE', 'TONEMAP'], (optional)
      
         '''
      
         pass

      def strip_modifier_copy(type='REPLACE'):
         '''Copy modifiers of the active strip to all selected strips
            Arguments:
            @type (str): in ['REPLACE', 'APPEND'], (optional)
      
         '''
      
         pass

      def strip_modifier_move(name="Name", direction='UP'):
         '''Move modifier up and down in the stack
            Arguments:
            @name (str): Name of modifier to remove
               (optional, never None)
            @direction (str): in ['UP', 'DOWN'], (optional)
      
         '''
      
         pass

      def strip_modifier_remove(name="Name"):
         '''Remove a modifier from the strip
            Arguments:
            @name (str): Name of modifier to remove
               (optional, never None)
      
         '''
      
         pass

      def swap(side='RIGHT'):
         '''Swap active strip with strip to the right or left
            Arguments:
            @side (str): Side of the strip to swap
               in ['LEFT', 'RIGHT'], (optional)
      
         '''
      
         pass

      def swap_data():
         '''Swap 2 sequencer strips
         '''
      
         pass

      def swap_inputs():
         '''Swap the first two inputs for the effect strip
         '''
      
         pass

      def unlock():
         '''Unlock strips so they can be transformed
         '''
      
         pass

      def unmute(unselected=False):
         '''Unmute (un)selected strips
            Arguments:
            @unselected (bool): Unmute unselected rather than selected strips
               (optional)
      
         '''
      
         pass

      def view_all():
         '''View all the strips in the sequencer
         '''
      
         pass

      def view_all_preview():
         '''Zoom preview to fit in the area
         '''
      
         pass

      def view_frame():
         '''Move the view to the playhead
         '''
      
         pass

      def view_ghost_border(xmin=0, xmax=0, ymin=0, ymax=0, wait_for_input=True):
         '''Set the boundaries of the border used for offset-view
            Arguments:
            @xmin (int): in [-inf, inf], (optional)
            @xmax (int): in [-inf, inf], (optional)
            @ymin (int): in [-inf, inf], (optional)
            @ymax (int): in [-inf, inf], (optional)
            @wait_for_input (bool): (optional)
      
         '''
      
         pass

      def view_selected():
         '''Zoom the sequencer on the selected strips
         '''
      
         pass

      def view_toggle():
         '''Toggle between sequencer views (sequence, preview, both)
         '''
      
         pass

      def view_zoom_ratio(ratio=1.0):
         '''Change zoom ratio of sequencer preview
            Arguments:
            @ratio (float): Zoom ratio, 1.0 is 1:1, higher is zoomed in, lower is zoomed out
               in [-inf, inf], (optional)
      
         '''
      
         pass

   class sound:
      '''Spcecial class, created just to reflect content of bpy.ops.sound'''

      def bake_animation():
         '''Update the audio animation cache
         '''
      
         pass

      def mixdown(filepath="", check_existing=True, filter_blender=False, filter_backup=False, filter_image=False, filter_movie=False, filter_python=False, filter_font=False, filter_sound=True, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=9, relative_path=True, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA', accuracy=1024, container='FLAC', codec='FLAC', format='S16', bitrate=192, split_channels=False):
         '''Mix the scene's audio to a sound file
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @relative_path (bool): Select the file relative to the blend file
               (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
            @accuracy (int): Sample accuracy, important for animation data (the lower the value, the more accurate)
               in [1, inf], (optional)
            @container (str): File format
               in ['AC3', 'FLAC', 'MATROSKA', 'MP2', 'MP3', 'OGG', 'WAV'], (optional)
            @codec (str): Audio Codec
               in ['AAC', 'AC3', 'FLAC', 'MP2', 'MP3', 'PCM', 'VORBIS'], (optional)
            @format (str): Sample format
               in ['U8', 'S16', 'S24', 'S32', 'F32', 'F64'], (optional)
            @bitrate (int): Bitrate in kbit/s
               in [32, 512], (optional)
            @split_channels (bool): Each channel will be rendered into a mono file
               (optional)
      
         '''
      
         pass

      def open(filepath="", hide_props_region=True, filter_blender=False, filter_backup=False, filter_image=False, filter_movie=True, filter_python=False, filter_font=False, filter_sound=True, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=9, relative_path=True, show_multiview=False, use_multiview=False, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA', cache=False, mono=False):
         '''Load a sound file
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @hide_props_region (bool): Collapse the region displaying the operator settings
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @relative_path (bool): Select the file relative to the blend file
               (optional)
            @show_multiview (bool): (optional)
            @use_multiview (bool): (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
            @cache (bool): Cache the sound in memory
               (optional)
            @mono (bool): Merge all the sound's channels into one
               (optional)
      
         '''
      
         pass

      def open_mono(filepath="", hide_props_region=True, filter_blender=False, filter_backup=False, filter_image=False, filter_movie=True, filter_python=False, filter_font=False, filter_sound=True, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=9, relative_path=True, show_multiview=False, use_multiview=False, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA', cache=False, mono=True):
         '''Load a sound file as mono
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @hide_props_region (bool): Collapse the region displaying the operator settings
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @relative_path (bool): Select the file relative to the blend file
               (optional)
            @show_multiview (bool): (optional)
            @use_multiview (bool): (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
            @cache (bool): Cache the sound in memory
               (optional)
            @mono (bool): Mixdown the sound to mono
               (optional)
      
         '''
      
         pass

      def pack():
         '''Pack the sound into the current blend file
         '''
      
         pass

      def unpack(method='USE_LOCAL', id=""):
         '''Unpack the sound to the samples filename
            Arguments:
            @method (str): How to unpack
               in ['REMOVE', 'USE_LOCAL', 'WRITE_LOCAL', 'USE_ORIGINAL', 'WRITE_ORIGINAL'], (optional)
            @id (str): Sound data-block name to unpack
               (optional, never None)
      
         '''
      
         pass

      def update_animation_flags():
         '''Update animation flags
         '''
      
         pass

   class surface:
      '''Spcecial class, created just to reflect content of bpy.ops.surface'''

      def primitive_nurbs_surface_circle_add(radius=1.0, enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Construct a Nurbs surface Circle
            Arguments:
            @radius (float): in [0, inf], (optional)
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def primitive_nurbs_surface_curve_add(radius=1.0, enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Construct a Nurbs surface Curve
            Arguments:
            @radius (float): in [0, inf], (optional)
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def primitive_nurbs_surface_cylinder_add(radius=1.0, enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Construct a Nurbs surface Cylinder
            Arguments:
            @radius (float): in [0, inf], (optional)
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def primitive_nurbs_surface_sphere_add(radius=1.0, enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Construct a Nurbs surface Sphere
            Arguments:
            @radius (float): in [0, inf], (optional)
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def primitive_nurbs_surface_surface_add(radius=1.0, enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Construct a Nurbs surface Patch
            Arguments:
            @radius (float): in [0, inf], (optional)
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def primitive_nurbs_surface_torus_add(radius=1.0, enter_editmode=False, align='WORLD', location=(0.0, 0.0, 0.0), rotation=(0.0, 0.0, 0.0)):
         '''Construct a Nurbs surface Torus
            Arguments:
            @radius (float): in [0, inf], (optional)
            @enter_editmode (bool): Enter editmode when adding this object
               (optional)
            @align (str): The alignment of the new object
               in ['WORLD', 'VIEW', 'CURSOR'], (optional)
            @location (float): Location for the newly added object
               array of 3 items in [-inf, inf], (optional)
            @rotation (float): Rotation for the newly added object
               array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

   class text:
      '''Spcecial class, created just to reflect content of bpy.ops.text'''

      def autocomplete():
         '''Show a list of used text in the open document
         '''
      
         pass

      def comment_toggle(type='TOGGLE'):
         '''undocumented
            Arguments:
            @type (str): Add or remove comments
               in ['TOGGLE', 'COMMENT', 'UNCOMMENT'], (optional)
      
         '''
      
         pass

      def convert_whitespace(type='SPACES'):
         '''Convert whitespaces by type
            Arguments:
            @type (str): Type of whitespace to convert to
               in ['SPACES', 'TABS'], (optional)
      
         '''
      
         pass

      def copy():
         '''Copy selected text to clipboard
         '''
      
         pass

      def cursor_set(x=0, y=0):
         '''Set cursor position
            Arguments:
            @x (int): in [-inf, inf], (optional)
            @y (int): in [-inf, inf], (optional)
      
         '''
      
         pass

      def cut():
         '''Cut selected text to clipboard
         '''
      
         pass

      def delete(type='NEXT_CHARACTER'):
         '''Delete text by cursor position
            Arguments:
            @type (str): Which part of the text to delete
               in ['NEXT_CHARACTER', 'PREVIOUS_CHARACTER', 'NEXT_WORD', 'PREVIOUS_WORD'], (optional)
      
         '''
      
         pass

      def duplicate_line():
         '''Duplicate the current line
         '''
      
         pass

      def find():
         '''Find specified text
         '''
      
         pass

      def find_set_selected():
         '''Find specified text and set as selected
         '''
      
         pass

      def indent():
         '''Indent selected text
         '''
      
         pass

      def indent_or_autocomplete():
         '''Indent selected text or autocomplete
         '''
      
         pass

      def insert(text=""):
         '''Insert text at cursor position
            Arguments:
            @text (str): Text to insert at the cursor position
               (optional, never None)
      
         '''
      
         pass

      def jump(line=1):
         '''Jump cursor to line
            Arguments:
            @line (int): Line number to jump to
               in [1, inf], (optional)
      
         '''
      
         pass

      def line_break():
         '''Insert line break at cursor position
         '''
      
         pass

      def line_number():
         '''The current line number
         '''
      
         pass

      def make_internal():
         '''Make active text file internal
         '''
      
         pass

      def move(type='LINE_BEGIN'):
         '''Move cursor to position type
            Arguments:
            @type (str): Where to move cursor to
               in ['LINE_BEGIN', 'LINE_END', 'FILE_TOP', 'FILE_BOTTOM', 'PREVIOUS_CHARACTER', 'NEXT_CHARACTER', 'PREVIOUS_WORD', 'NEXT_WORD', 'PREVIOUS_LINE', 'NEXT_LINE', 'PREVIOUS_PAGE', 'NEXT_PAGE'], (optional)
      
         '''
      
         pass

      def move_lines(direction='DOWN'):
         '''Move the currently selected line(s) up/down
            Arguments:
            @direction (str): in ['UP', 'DOWN'], (optional)
      
         '''
      
         pass

      def move_select(type='LINE_BEGIN'):
         '''Move the cursor while selecting
            Arguments:
            @type (str): Where to move cursor to, to make a selection
               in ['LINE_BEGIN', 'LINE_END', 'FILE_TOP', 'FILE_BOTTOM', 'PREVIOUS_CHARACTER', 'NEXT_CHARACTER', 'PREVIOUS_WORD', 'NEXT_WORD', 'PREVIOUS_LINE', 'NEXT_LINE', 'PREVIOUS_PAGE', 'NEXT_PAGE'], (optional)
      
         '''
      
         pass

      def new():
         '''Create a new text data-block
         '''
      
         pass

      def open(filepath="", hide_props_region=True, filter_blender=False, filter_backup=False, filter_image=False, filter_movie=False, filter_python=True, filter_font=False, filter_sound=False, filter_text=True, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=9, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA', internal=False):
         '''Open a new text data-block
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @hide_props_region (bool): Collapse the region displaying the operator settings
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
            @internal (bool): Make text file internal after loading
               (optional)
      
         '''
      
         pass

      def overwrite_toggle():
         '''Toggle overwrite while typing
         '''
      
         pass

      def paste(selection=False):
         '''Paste text from clipboard
            Arguments:
            @selection (bool): Paste text selected elsewhere rather than copied (X11 only)
               (optional)
      
         '''
      
         pass

      def refresh_pyconstraints():
         '''Refresh all pyconstraints
         '''
      
         pass

      def reload():
         '''Reload active text data-block from its file
         '''
      
         pass

      def replace():
         '''Replace text with the specified text
         '''
      
         pass

      def replace_set_selected():
         '''Replace text with specified text and set as selected
         '''
      
         pass

      def resolve_conflict(resolution='IGNORE'):
         '''When external text is out of sync, resolve the conflict
            Arguments:
            @resolution (str): How to solve conflict due to differences in internal and external text
               in ['IGNORE', 'RELOAD', 'SAVE', 'MAKE_INTERNAL'], (optional)
      
         '''
      
         pass

      def run_script():
         '''Run active script
         '''
      
         pass

      def save():
         '''Save active text data-block
         '''
      
         pass

      def save_as(filepath="", hide_props_region=True, check_existing=True, filter_blender=False, filter_backup=False, filter_image=False, filter_movie=False, filter_python=True, filter_font=False, filter_sound=False, filter_text=True, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=9, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA'):
         '''Save active text file with options
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @hide_props_region (bool): Collapse the region displaying the operator settings
               (optional)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
      
         '''
      
         pass

      def scroll(lines=1):
         '''undocumented
            Arguments:
            @lines (int): Number of lines to scroll
               in [-inf, inf], (optional)
      
         '''
      
         pass

      def scroll_bar(lines=1):
         '''undocumented
            Arguments:
            @lines (int): Number of lines to scroll
               in [-inf, inf], (optional)
      
         '''
      
         pass

      def select_all():
         '''Select all text
         '''
      
         pass

      def select_line():
         '''Select text by line
         '''
      
         pass

      def select_word():
         '''Select word under cursor
         '''
      
         pass

      def selection_set():
         '''Set cursor selection
         '''
      
         pass

      def start_find():
         '''Start searching text
         '''
      
         pass

      def to_3d_object(split_lines=False):
         '''Create 3D text object from active text data-block
            Arguments:
            @split_lines (bool): Create one object per line in the text
               (optional)
      
         '''
      
         pass

      def unindent():
         '''Unindent selected text
         '''
      
         pass

      def unlink():
         '''Unlink active text data-block
         '''
      
         pass

   class texture:
      '''Spcecial class, created just to reflect content of bpy.ops.texture'''

      def new():
         '''Add a new texture
         '''
      
         pass

      def slot_copy():
         '''Copy the material texture settings and nodes
         '''
      
         pass

      def slot_move(type='UP'):
         '''Move texture slots up and down
            Arguments:
            @type (str): in ['UP', 'DOWN'], (optional)
      
         '''
      
         pass

      def slot_paste():
         '''Copy the texture settings and nodes
         '''
      
         pass

   class transform:
      '''Spcecial class, created just to reflect content of bpy.ops.transform'''

      def bbone_resize(value=(1.0, 1.0), orient_type='GLOBAL', orient_matrix=((0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0)), orient_matrix_type='GLOBAL', constraint_axis=(False, False, False), mirror=False, release_confirm=False, use_accurate=False):
         '''Scale selected bendy bones display size
            Arguments:
            @value (float): array of 2 items in [-inf, inf], (optional)
            @orient_type (str): Transformation orientation
               in [], (optional)
            @orient_matrix (float): multi-dimensional array of 3 * 3 items in [-inf, inf], (optional)
            @orient_matrix_type (str): in [], (optional)
            @constraint_axis (bool): array of 3 items, (optional)
            @mirror (bool): (optional)
            @release_confirm (bool): Always confirm operation when releasing button
               (optional)
            @use_accurate (bool): Use accurate transformation
               (optional)
      
         '''
      
         pass

      def bend(value=(0.0), mirror=False, use_proportional_edit=False, proportional_edit_falloff='SMOOTH', proportional_size=1.0, use_proportional_connected=False, use_proportional_projected=False, snap=False, snap_target='CLOSEST', snap_point=(0.0, 0.0, 0.0), snap_align=False, snap_normal=(0.0, 0.0, 0.0), gpencil_strokes=False, center_override=(0.0, 0.0, 0.0), release_confirm=False, use_accurate=False):
         '''Bend selected items between the 3D cursor and the mouse
            Arguments:
            @value (float): array of 1 items in [-inf, inf], (optional)
            @mirror (bool): (optional)
            @use_proportional_edit (bool): (optional)
            @proportional_edit_falloff (str): Falloff type for proportional editing mode
               in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR', 'CONSTANT', 'RANDOM'], (optional)
            @proportional_size (float): in [1e-06, inf], (optional)
            @use_proportional_connected (bool): (optional)
            @use_proportional_projected (bool): (optional)
            @snap (bool): (optional)
            @snap_target (str): in ['CLOSEST', 'CENTER', 'MEDIAN', 'ACTIVE'], (optional)
            @snap_point (float): array of 3 items in [-inf, inf], (optional)
            @snap_align (bool): (optional)
            @snap_normal (float): array of 3 items in [-inf, inf], (optional)
            @gpencil_strokes (bool): Edit selected Grease Pencil strokes
               (optional)
            @center_override (float): Force using this center value (when set)
               array of 3 items in [-inf, inf], (optional)
            @release_confirm (bool): Always confirm operation when releasing button
               (optional)
            @use_accurate (bool): Use accurate transformation
               (optional)
      
         '''
      
         pass

      def create_orientation(name="", use_view=False, use=False, overwrite=False):
         '''Create transformation orientation from selection
            Arguments:
            @name (str): Name of the new custom orientation
               (optional, never None)
            @use_view (bool): Use the current view instead of the active object to create the new orientation
               (optional)
            @use (bool): Select orientation after its creation
               (optional)
            @overwrite (bool): Overwrite previously created orientation with same name
               (optional)
      
         '''
      
         pass

      def delete_orientation():
         '''Delete transformation orientation
         '''
      
         pass

      def edge_bevelweight(value=0.0, snap=False, snap_target='CLOSEST', snap_point=(0.0, 0.0, 0.0), snap_align=False, snap_normal=(0.0, 0.0, 0.0), release_confirm=False, use_accurate=False):
         '''Change the bevel weight of edges
            Arguments:
            @value (float): in [-1, 1], (optional)
            @snap (bool): (optional)
            @snap_target (str): in ['CLOSEST', 'CENTER', 'MEDIAN', 'ACTIVE'], (optional)
            @snap_point (float): array of 3 items in [-inf, inf], (optional)
            @snap_align (bool): (optional)
            @snap_normal (float): array of 3 items in [-inf, inf], (optional)
            @release_confirm (bool): Always confirm operation when releasing button
               (optional)
            @use_accurate (bool): Use accurate transformation
               (optional)
      
         '''
      
         pass

      def edge_crease(value=0.0, snap=False, snap_target='CLOSEST', snap_point=(0.0, 0.0, 0.0), snap_align=False, snap_normal=(0.0, 0.0, 0.0), release_confirm=False, use_accurate=False):
         '''Change the crease of edges
            Arguments:
            @value (float): in [-1, 1], (optional)
            @snap (bool): (optional)
            @snap_target (str): in ['CLOSEST', 'CENTER', 'MEDIAN', 'ACTIVE'], (optional)
            @snap_point (float): array of 3 items in [-inf, inf], (optional)
            @snap_align (bool): (optional)
            @snap_normal (float): array of 3 items in [-inf, inf], (optional)
            @release_confirm (bool): Always confirm operation when releasing button
               (optional)
            @use_accurate (bool): Use accurate transformation
               (optional)
      
         '''
      
         pass

      def edge_slide(value=0.0, single_side=False, use_even=False, flipped=False, use_clamp=True, mirror=False, snap=False, snap_target='CLOSEST', snap_point=(0.0, 0.0, 0.0), snap_align=False, snap_normal=(0.0, 0.0, 0.0), correct_uv=True, release_confirm=False, use_accurate=False):
         '''Slide an edge loop along a mesh
            Arguments:
            @value (float): in [-10, 10], (optional)
            @single_side (bool): (optional)
            @use_even (bool): Make the edge loop match the shape of the adjacent edge loop
               (optional)
            @flipped (bool): When Even mode is active, flips between the two adjacent edge loops
               (optional)
            @use_clamp (bool): Clamp within the edge extents
               (optional)
            @mirror (bool): (optional)
            @snap (bool): (optional)
            @snap_target (str): in ['CLOSEST', 'CENTER', 'MEDIAN', 'ACTIVE'], (optional)
            @snap_point (float): array of 3 items in [-inf, inf], (optional)
            @snap_align (bool): (optional)
            @snap_normal (float): array of 3 items in [-inf, inf], (optional)
            @correct_uv (bool): Correct UV coordinates when transforming
               (optional)
            @release_confirm (bool): Always confirm operation when releasing button
               (optional)
            @use_accurate (bool): Use accurate transformation
               (optional)
      
         '''
      
         pass

      def from_gizmo():
         '''Transform selected items by mode type
         '''
      
         pass

      def mirror(orient_type='GLOBAL', orient_matrix=((0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0)), orient_matrix_type='GLOBAL', constraint_axis=(False, False, False), use_proportional_edit=False, proportional_edit_falloff='SMOOTH', proportional_size=1.0, use_proportional_connected=False, use_proportional_projected=False, gpencil_strokes=False, center_override=(0.0, 0.0, 0.0), release_confirm=False, use_accurate=False):
         '''Mirror selected items around one or more axes
            Arguments:
            @orient_type (str): Transformation orientation
               in [], (optional)
            @orient_matrix (float): multi-dimensional array of 3 * 3 items in [-inf, inf], (optional)
            @orient_matrix_type (str): in [], (optional)
            @constraint_axis (bool): array of 3 items, (optional)
            @use_proportional_edit (bool): (optional)
            @proportional_edit_falloff (str): Falloff type for proportional editing mode
               in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR', 'CONSTANT', 'RANDOM'], (optional)
            @proportional_size (float): in [1e-06, inf], (optional)
            @use_proportional_connected (bool): (optional)
            @use_proportional_projected (bool): (optional)
            @gpencil_strokes (bool): Edit selected Grease Pencil strokes
               (optional)
            @center_override (float): Force using this center value (when set)
               array of 3 items in [-inf, inf], (optional)
            @release_confirm (bool): Always confirm operation when releasing button
               (optional)
            @use_accurate (bool): Use accurate transformation
               (optional)
      
         '''
      
         pass

      def push_pull(value=0.0, mirror=False, use_proportional_edit=False, proportional_edit_falloff='SMOOTH', proportional_size=1.0, use_proportional_connected=False, use_proportional_projected=False, snap=False, snap_target='CLOSEST', snap_point=(0.0, 0.0, 0.0), snap_align=False, snap_normal=(0.0, 0.0, 0.0), center_override=(0.0, 0.0, 0.0), release_confirm=False, use_accurate=False):
         '''Push/Pull selected items
            Arguments:
            @value (float): in [-inf, inf], (optional)
            @mirror (bool): (optional)
            @use_proportional_edit (bool): (optional)
            @proportional_edit_falloff (str): Falloff type for proportional editing mode
               in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR', 'CONSTANT', 'RANDOM'], (optional)
            @proportional_size (float): in [1e-06, inf], (optional)
            @use_proportional_connected (bool): (optional)
            @use_proportional_projected (bool): (optional)
            @snap (bool): (optional)
            @snap_target (str): in ['CLOSEST', 'CENTER', 'MEDIAN', 'ACTIVE'], (optional)
            @snap_point (float): array of 3 items in [-inf, inf], (optional)
            @snap_align (bool): (optional)
            @snap_normal (float): array of 3 items in [-inf, inf], (optional)
            @center_override (float): Force using this center value (when set)
               array of 3 items in [-inf, inf], (optional)
            @release_confirm (bool): Always confirm operation when releasing button
               (optional)
            @use_accurate (bool): Use accurate transformation
               (optional)
      
         '''
      
         pass

      def resize(value=(1.0, 1.0, 1.0), orient_type='GLOBAL', orient_matrix=((0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0)), orient_matrix_type='GLOBAL', constraint_axis=(False, False, False), mirror=False, use_proportional_edit=False, proportional_edit_falloff='SMOOTH', proportional_size=1.0, use_proportional_connected=False, use_proportional_projected=False, snap=False, snap_target='CLOSEST', snap_point=(0.0, 0.0, 0.0), snap_align=False, snap_normal=(0.0, 0.0, 0.0), gpencil_strokes=False, texture_space=False, remove_on_cancel=False, center_override=(0.0, 0.0, 0.0), release_confirm=False, use_accurate=False):
         '''Scale (resize) selected items
            Arguments:
            @value (float): array of 3 items in [-inf, inf], (optional)
            @orient_type (str): Transformation orientation
               in [], (optional)
            @orient_matrix (float): multi-dimensional array of 3 * 3 items in [-inf, inf], (optional)
            @orient_matrix_type (str): in [], (optional)
            @constraint_axis (bool): array of 3 items, (optional)
            @mirror (bool): (optional)
            @use_proportional_edit (bool): (optional)
            @proportional_edit_falloff (str): Falloff type for proportional editing mode
               in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR', 'CONSTANT', 'RANDOM'], (optional)
            @proportional_size (float): in [1e-06, inf], (optional)
            @use_proportional_connected (bool): (optional)
            @use_proportional_projected (bool): (optional)
            @snap (bool): (optional)
            @snap_target (str): in ['CLOSEST', 'CENTER', 'MEDIAN', 'ACTIVE'], (optional)
            @snap_point (float): array of 3 items in [-inf, inf], (optional)
            @snap_align (bool): (optional)
            @snap_normal (float): array of 3 items in [-inf, inf], (optional)
            @gpencil_strokes (bool): Edit selected Grease Pencil strokes
               (optional)
            @texture_space (bool): Edit Object data texture space
               (optional)
            @remove_on_cancel (bool): Remove elements on cancel
               (optional)
            @center_override (float): Force using this center value (when set)
               array of 3 items in [-inf, inf], (optional)
            @release_confirm (bool): Always confirm operation when releasing button
               (optional)
            @use_accurate (bool): Use accurate transformation
               (optional)
      
         '''
      
         pass

      def rotate(value=0.0, orient_axis='Z', orient_type='GLOBAL', orient_matrix=((0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0)), orient_matrix_type='GLOBAL', constraint_axis=(False, False, False), mirror=False, use_proportional_edit=False, proportional_edit_falloff='SMOOTH', proportional_size=1.0, use_proportional_connected=False, use_proportional_projected=False, snap=False, snap_target='CLOSEST', snap_point=(0.0, 0.0, 0.0), snap_align=False, snap_normal=(0.0, 0.0, 0.0), gpencil_strokes=False, center_override=(0.0, 0.0, 0.0), release_confirm=False, use_accurate=False):
         '''Rotate selected items
            Arguments:
            @value (float): in [-inf, inf], (optional)
            @orient_axis (str): in ['X', 'Y', 'Z'], (optional)
            @orient_type (str): Transformation orientation
               in [], (optional)
            @orient_matrix (float): multi-dimensional array of 3 * 3 items in [-inf, inf], (optional)
            @orient_matrix_type (str): in [], (optional)
            @constraint_axis (bool): array of 3 items, (optional)
            @mirror (bool): (optional)
            @use_proportional_edit (bool): (optional)
            @proportional_edit_falloff (str): Falloff type for proportional editing mode
               in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR', 'CONSTANT', 'RANDOM'], (optional)
            @proportional_size (float): in [1e-06, inf], (optional)
            @use_proportional_connected (bool): (optional)
            @use_proportional_projected (bool): (optional)
            @snap (bool): (optional)
            @snap_target (str): in ['CLOSEST', 'CENTER', 'MEDIAN', 'ACTIVE'], (optional)
            @snap_point (float): array of 3 items in [-inf, inf], (optional)
            @snap_align (bool): (optional)
            @snap_normal (float): array of 3 items in [-inf, inf], (optional)
            @gpencil_strokes (bool): Edit selected Grease Pencil strokes
               (optional)
            @center_override (float): Force using this center value (when set)
               array of 3 items in [-inf, inf], (optional)
            @release_confirm (bool): Always confirm operation when releasing button
               (optional)
            @use_accurate (bool): Use accurate transformation
               (optional)
      
         '''
      
         pass

      def rotate_normal(value=0.0, orient_axis='Z', orient_type='GLOBAL', orient_matrix=((0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0)), orient_matrix_type='GLOBAL', constraint_axis=(False, False, False), mirror=False, release_confirm=False, use_accurate=False):
         '''Rotate split normal of selected items
            Arguments:
            @value (float): in [-inf, inf], (optional)
            @orient_axis (str): in ['X', 'Y', 'Z'], (optional)
            @orient_type (str): Transformation orientation
               in [], (optional)
            @orient_matrix (float): multi-dimensional array of 3 * 3 items in [-inf, inf], (optional)
            @orient_matrix_type (str): in [], (optional)
            @constraint_axis (bool): array of 3 items, (optional)
            @mirror (bool): (optional)
            @release_confirm (bool): Always confirm operation when releasing button
               (optional)
            @use_accurate (bool): Use accurate transformation
               (optional)
      
         '''
      
         pass

      def select_orientation(orientation='GLOBAL'):
         '''Select transformation orientation
            Arguments:
            @orientation (str): Transformation orientation
               in [], (optional)
      
         '''
      
         pass

      def seq_slide(value=(0.0, 0.0), snap=False, snap_target='CLOSEST', snap_point=(0.0, 0.0, 0.0), snap_align=False, snap_normal=(0.0, 0.0, 0.0), release_confirm=False, use_accurate=False):
         '''Slide a sequence strip in time
            Arguments:
            @value (float): array of 2 items in [-inf, inf], (optional)
            @snap (bool): (optional)
            @snap_target (str): in ['CLOSEST', 'CENTER', 'MEDIAN', 'ACTIVE'], (optional)
            @snap_point (float): array of 3 items in [-inf, inf], (optional)
            @snap_align (bool): (optional)
            @snap_normal (float): array of 3 items in [-inf, inf], (optional)
            @release_confirm (bool): Always confirm operation when releasing button
               (optional)
            @use_accurate (bool): Use accurate transformation
               (optional)
      
         '''
      
         pass

      def shear(value=0.0, orient_axis='Z', orient_axis_ortho='X', orient_type='GLOBAL', orient_matrix=((0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0)), orient_matrix_type='GLOBAL', mirror=False, use_proportional_edit=False, proportional_edit_falloff='SMOOTH', proportional_size=1.0, use_proportional_connected=False, use_proportional_projected=False, snap=False, snap_target='CLOSEST', snap_point=(0.0, 0.0, 0.0), snap_align=False, snap_normal=(0.0, 0.0, 0.0), gpencil_strokes=False, release_confirm=False, use_accurate=False):
         '''Shear selected items along the horizontal screen axis
            Arguments:
            @value (float): in [-inf, inf], (optional)
            @orient_axis (str): in ['X', 'Y', 'Z'], (optional)
            @orient_axis_ortho (str): in ['X', 'Y', 'Z'], (optional)
            @orient_type (str): Transformation orientation
               in [], (optional)
            @orient_matrix (float): multi-dimensional array of 3 * 3 items in [-inf, inf], (optional)
            @orient_matrix_type (str): in [], (optional)
            @mirror (bool): (optional)
            @use_proportional_edit (bool): (optional)
            @proportional_edit_falloff (str): Falloff type for proportional editing mode
               in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR', 'CONSTANT', 'RANDOM'], (optional)
            @proportional_size (float): in [1e-06, inf], (optional)
            @use_proportional_connected (bool): (optional)
            @use_proportional_projected (bool): (optional)
            @snap (bool): (optional)
            @snap_target (str): in ['CLOSEST', 'CENTER', 'MEDIAN', 'ACTIVE'], (optional)
            @snap_point (float): array of 3 items in [-inf, inf], (optional)
            @snap_align (bool): (optional)
            @snap_normal (float): array of 3 items in [-inf, inf], (optional)
            @gpencil_strokes (bool): Edit selected Grease Pencil strokes
               (optional)
            @release_confirm (bool): Always confirm operation when releasing button
               (optional)
            @use_accurate (bool): Use accurate transformation
               (optional)
      
         '''
      
         pass

      def shrink_fatten(value=0.0, use_even_offset=False, mirror=False, use_proportional_edit=False, proportional_edit_falloff='SMOOTH', proportional_size=1.0, use_proportional_connected=False, use_proportional_projected=False, snap=False, snap_target='CLOSEST', snap_point=(0.0, 0.0, 0.0), snap_align=False, snap_normal=(0.0, 0.0, 0.0), release_confirm=False, use_accurate=False):
         '''Shrink/fatten selected vertices along normals
            Arguments:
            @value (float): in [-inf, inf], (optional)
            @use_even_offset (bool): Scale the offset to give more even thickness
               (optional)
            @mirror (bool): (optional)
            @use_proportional_edit (bool): (optional)
            @proportional_edit_falloff (str): Falloff type for proportional editing mode
               in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR', 'CONSTANT', 'RANDOM'], (optional)
            @proportional_size (float): in [1e-06, inf], (optional)
            @use_proportional_connected (bool): (optional)
            @use_proportional_projected (bool): (optional)
            @snap (bool): (optional)
            @snap_target (str): in ['CLOSEST', 'CENTER', 'MEDIAN', 'ACTIVE'], (optional)
            @snap_point (float): array of 3 items in [-inf, inf], (optional)
            @snap_align (bool): (optional)
            @snap_normal (float): array of 3 items in [-inf, inf], (optional)
            @release_confirm (bool): Always confirm operation when releasing button
               (optional)
            @use_accurate (bool): Use accurate transformation
               (optional)
      
         '''
      
         pass

      def skin_resize(value=(1.0, 1.0, 1.0), orient_type='GLOBAL', orient_matrix=((0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0)), orient_matrix_type='GLOBAL', constraint_axis=(False, False, False), mirror=False, use_proportional_edit=False, proportional_edit_falloff='SMOOTH', proportional_size=1.0, use_proportional_connected=False, use_proportional_projected=False, snap=False, snap_target='CLOSEST', snap_point=(0.0, 0.0, 0.0), snap_align=False, snap_normal=(0.0, 0.0, 0.0), release_confirm=False, use_accurate=False):
         '''Scale selected vertices' skin radii
            Arguments:
            @value (float): array of 3 items in [-inf, inf], (optional)
            @orient_type (str): Transformation orientation
               in [], (optional)
            @orient_matrix (float): multi-dimensional array of 3 * 3 items in [-inf, inf], (optional)
            @orient_matrix_type (str): in [], (optional)
            @constraint_axis (bool): array of 3 items, (optional)
            @mirror (bool): (optional)
            @use_proportional_edit (bool): (optional)
            @proportional_edit_falloff (str): Falloff type for proportional editing mode
               in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR', 'CONSTANT', 'RANDOM'], (optional)
            @proportional_size (float): in [1e-06, inf], (optional)
            @use_proportional_connected (bool): (optional)
            @use_proportional_projected (bool): (optional)
            @snap (bool): (optional)
            @snap_target (str): in ['CLOSEST', 'CENTER', 'MEDIAN', 'ACTIVE'], (optional)
            @snap_point (float): array of 3 items in [-inf, inf], (optional)
            @snap_align (bool): (optional)
            @snap_normal (float): array of 3 items in [-inf, inf], (optional)
            @release_confirm (bool): Always confirm operation when releasing button
               (optional)
            @use_accurate (bool): Use accurate transformation
               (optional)
      
         '''
      
         pass

      def tilt(value=0.0, mirror=False, use_proportional_edit=False, proportional_edit_falloff='SMOOTH', proportional_size=1.0, use_proportional_connected=False, use_proportional_projected=False, snap=False, snap_target='CLOSEST', snap_point=(0.0, 0.0, 0.0), snap_align=False, snap_normal=(0.0, 0.0, 0.0), release_confirm=False, use_accurate=False):
         '''Tilt selected control vertices of 3D curve
            Arguments:
            @value (float): in [-inf, inf], (optional)
            @mirror (bool): (optional)
            @use_proportional_edit (bool): (optional)
            @proportional_edit_falloff (str): Falloff type for proportional editing mode
               in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR', 'CONSTANT', 'RANDOM'], (optional)
            @proportional_size (float): in [1e-06, inf], (optional)
            @use_proportional_connected (bool): (optional)
            @use_proportional_projected (bool): (optional)
            @snap (bool): (optional)
            @snap_target (str): in ['CLOSEST', 'CENTER', 'MEDIAN', 'ACTIVE'], (optional)
            @snap_point (float): array of 3 items in [-inf, inf], (optional)
            @snap_align (bool): (optional)
            @snap_normal (float): array of 3 items in [-inf, inf], (optional)
            @release_confirm (bool): Always confirm operation when releasing button
               (optional)
            @use_accurate (bool): Use accurate transformation
               (optional)
      
         '''
      
         pass

      def tosphere(value=0.0, mirror=False, use_proportional_edit=False, proportional_edit_falloff='SMOOTH', proportional_size=1.0, use_proportional_connected=False, use_proportional_projected=False, snap=False, snap_target='CLOSEST', snap_point=(0.0, 0.0, 0.0), snap_align=False, snap_normal=(0.0, 0.0, 0.0), gpencil_strokes=False, center_override=(0.0, 0.0, 0.0), release_confirm=False, use_accurate=False):
         '''Move selected vertices outward in a spherical shape around mesh center
            Arguments:
            @value (float): in [0, 1], (optional)
            @mirror (bool): (optional)
            @use_proportional_edit (bool): (optional)
            @proportional_edit_falloff (str): Falloff type for proportional editing mode
               in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR', 'CONSTANT', 'RANDOM'], (optional)
            @proportional_size (float): in [1e-06, inf], (optional)
            @use_proportional_connected (bool): (optional)
            @use_proportional_projected (bool): (optional)
            @snap (bool): (optional)
            @snap_target (str): in ['CLOSEST', 'CENTER', 'MEDIAN', 'ACTIVE'], (optional)
            @snap_point (float): array of 3 items in [-inf, inf], (optional)
            @snap_align (bool): (optional)
            @snap_normal (float): array of 3 items in [-inf, inf], (optional)
            @gpencil_strokes (bool): Edit selected Grease Pencil strokes
               (optional)
            @center_override (float): Force using this center value (when set)
               array of 3 items in [-inf, inf], (optional)
            @release_confirm (bool): Always confirm operation when releasing button
               (optional)
            @use_accurate (bool): Use accurate transformation
               (optional)
      
         '''
      
         pass

      def trackball(value=(0.0, 0.0), mirror=False, use_proportional_edit=False, proportional_edit_falloff='SMOOTH', proportional_size=1.0, use_proportional_connected=False, use_proportional_projected=False, snap=False, snap_target='CLOSEST', snap_point=(0.0, 0.0, 0.0), snap_align=False, snap_normal=(0.0, 0.0, 0.0), gpencil_strokes=False, center_override=(0.0, 0.0, 0.0), release_confirm=False, use_accurate=False):
         '''Trackball style rotation of selected items
            Arguments:
            @value (float): array of 2 items in [-inf, inf], (optional)
            @mirror (bool): (optional)
            @use_proportional_edit (bool): (optional)
            @proportional_edit_falloff (str): Falloff type for proportional editing mode
               in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR', 'CONSTANT', 'RANDOM'], (optional)
            @proportional_size (float): in [1e-06, inf], (optional)
            @use_proportional_connected (bool): (optional)
            @use_proportional_projected (bool): (optional)
            @snap (bool): (optional)
            @snap_target (str): in ['CLOSEST', 'CENTER', 'MEDIAN', 'ACTIVE'], (optional)
            @snap_point (float): array of 3 items in [-inf, inf], (optional)
            @snap_align (bool): (optional)
            @snap_normal (float): array of 3 items in [-inf, inf], (optional)
            @gpencil_strokes (bool): Edit selected Grease Pencil strokes
               (optional)
            @center_override (float): Force using this center value (when set)
               array of 3 items in [-inf, inf], (optional)
            @release_confirm (bool): Always confirm operation when releasing button
               (optional)
            @use_accurate (bool): Use accurate transformation
               (optional)
      
         '''
      
         pass

      def transform(mode='TRANSLATION', value=(0.0, 0.0, 0.0, 0.0), orient_axis='Z', orient_type='GLOBAL', orient_matrix=((0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0)), orient_matrix_type='GLOBAL', constraint_axis=(False, False, False), mirror=False, use_proportional_edit=False, proportional_edit_falloff='SMOOTH', proportional_size=1.0, use_proportional_connected=False, use_proportional_projected=False, snap=False, snap_target='CLOSEST', snap_point=(0.0, 0.0, 0.0), snap_align=False, snap_normal=(0.0, 0.0, 0.0), gpencil_strokes=False, center_override=(0.0, 0.0, 0.0), release_confirm=False, use_accurate=False):
         '''Transform selected items by mode type
            Arguments:
            @mode (str): in ['INIT', 'DUMMY', 'TRANSLATION', 'ROTATION', 'RESIZE', 'SKIN_RESIZE', 'TOSPHERE', 'SHEAR', 'BEND', 'SHRINKFATTEN', 'TILT', 'TRACKBALL', 'PUSHPULL', 'CREASE', 'MIRROR', 'BONE_SIZE', 'BONE_ENVELOPE', 'BONE_ENVELOPE_DIST', 'CURVE_SHRINKFATTEN', 'MASK_SHRINKFATTEN', 'GPENCIL_SHRINKFATTEN', 'BONE_ROLL', 'TIME_TRANSLATE', 'TIME_SLIDE', 'TIME_SCALE', 'TIME_EXTEND', 'BAKE_TIME', 'BWEIGHT', 'ALIGN', 'EDGESLIDE', 'SEQSLIDE', 'GPENCIL_OPACITY'], (optional)
            @value (float): array of 4 items in [-inf, inf], (optional)
            @orient_axis (str): in ['X', 'Y', 'Z'], (optional)
            @orient_type (str): Transformation orientation
               in ['GLOBAL', 'LOCAL', 'NORMAL', 'GIMBAL', 'VIEW', 'CURSOR'], (optional)
            @orient_matrix (float): multi-dimensional array of 3 * 3 items in [-inf, inf], (optional)
            @orient_matrix_type (str): in ['GLOBAL', 'LOCAL', 'NORMAL', 'GIMBAL', 'VIEW', 'CURSOR'], (optional)
            @constraint_axis (bool): array of 3 items, (optional)
            @mirror (bool): (optional)
            @use_proportional_edit (bool): (optional)
            @proportional_edit_falloff (str): Falloff type for proportional editing mode
               in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR', 'CONSTANT', 'RANDOM'], (optional)
            @proportional_size (float): in [1e-06, inf], (optional)
            @use_proportional_connected (bool): (optional)
            @use_proportional_projected (bool): (optional)
            @snap (bool): (optional)
            @snap_target (str): in ['CLOSEST', 'CENTER', 'MEDIAN', 'ACTIVE'], (optional)
            @snap_point (float): array of 3 items in [-inf, inf], (optional)
            @snap_align (bool): (optional)
            @snap_normal (float): array of 3 items in [-inf, inf], (optional)
            @gpencil_strokes (bool): Edit selected Grease Pencil strokes
               (optional)
            @center_override (float): Force using this center value (when set)
               array of 3 items in [-inf, inf], (optional)
            @release_confirm (bool): Always confirm operation when releasing button
               (optional)
            @use_accurate (bool): Use accurate transformation
               (optional)
      
         '''
      
         pass

      def translate(value=(0.0, 0.0, 0.0), orient_type='GLOBAL', orient_matrix=((0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0)), orient_matrix_type='GLOBAL', constraint_axis=(False, False, False), mirror=False, use_proportional_edit=False, proportional_edit_falloff='SMOOTH', proportional_size=1.0, use_proportional_connected=False, use_proportional_projected=False, snap=False, snap_target='CLOSEST', snap_point=(0.0, 0.0, 0.0), snap_align=False, snap_normal=(0.0, 0.0, 0.0), gpencil_strokes=False, cursor_transform=False, texture_space=False, remove_on_cancel=False, release_confirm=False, use_accurate=False):
         '''Move selected items
            Arguments:
            @value (float): array of 3 items in [-inf, inf], (optional)
            @orient_type (str): Transformation orientation
               in ['GLOBAL', 'LOCAL', 'NORMAL', 'GIMBAL', 'VIEW', 'CURSOR'], (optional)
            @orient_matrix (float): multi-dimensional array of 3 * 3 items in [-inf, inf], (optional)
            @orient_matrix_type (str): in ['GLOBAL', 'LOCAL', 'NORMAL', 'GIMBAL', 'VIEW', 'CURSOR'], (optional)
            @constraint_axis (bool): array of 3 items, (optional)
            @mirror (bool): (optional)
            @use_proportional_edit (bool): (optional)
            @proportional_edit_falloff (str): Falloff type for proportional editing mode
               in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR', 'CONSTANT', 'RANDOM'], (optional)
            @proportional_size (float): in [1e-06, inf], (optional)
            @use_proportional_connected (bool): (optional)
            @use_proportional_projected (bool): (optional)
            @snap (bool): (optional)
            @snap_target (str): in ['CLOSEST', 'CENTER', 'MEDIAN', 'ACTIVE'], (optional)
            @snap_point (float): array of 3 items in [-inf, inf], (optional)
            @snap_align (bool): (optional)
            @snap_normal (float): array of 3 items in [-inf, inf], (optional)
            @gpencil_strokes (bool): Edit selected Grease Pencil strokes
               (optional)
            @cursor_transform (bool): (optional)
            @texture_space (bool): Edit Object data texture space
               (optional)
            @remove_on_cancel (bool): Remove elements on cancel
               (optional)
            @release_confirm (bool): Always confirm operation when releasing button
               (optional)
            @use_accurate (bool): Use accurate transformation
               (optional)
      
         '''
      
         pass

      def vert_slide(value=0.0, use_even=False, flipped=False, use_clamp=True, mirror=False, snap=False, snap_target='CLOSEST', snap_point=(0.0, 0.0, 0.0), snap_align=False, snap_normal=(0.0, 0.0, 0.0), correct_uv=True, release_confirm=False, use_accurate=False):
         '''Slide a vertex along a mesh
            Arguments:
            @value (float): in [-10, 10], (optional)
            @use_even (bool): Make the edge loop match the shape of the adjacent edge loop
               (optional)
            @flipped (bool): When Even mode is active, flips between the two adjacent edge loops
               (optional)
            @use_clamp (bool): Clamp within the edge extents
               (optional)
            @mirror (bool): (optional)
            @snap (bool): (optional)
            @snap_target (str): in ['CLOSEST', 'CENTER', 'MEDIAN', 'ACTIVE'], (optional)
            @snap_point (float): array of 3 items in [-inf, inf], (optional)
            @snap_align (bool): (optional)
            @snap_normal (float): array of 3 items in [-inf, inf], (optional)
            @correct_uv (bool): Correct UV coordinates when transforming
               (optional)
            @release_confirm (bool): Always confirm operation when releasing button
               (optional)
            @use_accurate (bool): Use accurate transformation
               (optional)
      
         '''
      
         pass

      def vertex_random(offset=0.0, uniform=0.0, normal=0.0, seed=0, wait_for_input=True):
         '''Randomize vertices
            Arguments:
            @offset (float): Distance to offset
               in [-inf, inf], (optional)
            @uniform (float): Increase for uniform offset distance
               in [0, 1], (optional)
            @normal (float): Align offset direction to normals
               in [0, 1], (optional)
            @seed (int): Seed for the random number generator
               in [0, 10000], (optional)
            @wait_for_input (bool): (optional)
      
         '''
      
         pass

      def vertex_warp(warp_angle=6.28319, offset_angle=0.0, min=-1, max=1.0, viewmat=((0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0)), center=(0.0, 0.0, 0.0)):
         '''Warp vertices around the cursor
            Arguments:
            @warp_angle (float): Amount to warp about the cursor
               in [-inf, inf], (optional)
            @offset_angle (float): Angle to use as the basis for warping
               in [-inf, inf], (optional)
            @min (float): in [-inf, inf], (optional)
            @max (float): in [-inf, inf], (optional)
            @viewmat (float): multi-dimensional array of 4 * 4 items in [-inf, inf], (optional)
            @center (float): array of 3 items in [-inf, inf], (optional)
      
         '''
      
         pass

   class ui:
      '''Spcecial class, created just to reflect content of bpy.ops.ui'''

      def assign_default_button():
         '''Set this property's current value as the new default
         '''
      
         pass

      def button_execute(skip_depressed=False):
         '''Presses active button
            Arguments:
            @skip_depressed (bool): (optional)
      
         '''
      
         pass

      def button_string_clear():
         '''Unsets the text of the active button
         '''
      
         pass

      def copy_as_driver_button():
         '''Create a new driver with this property as input, and copy it to the clipboard. Use Paste Driver to add it to the target property, or Paste Driver Variables to extend an existing driver
         '''
      
         pass

      def copy_data_path_button(full_path=False):
         '''Copy the RNA data path for this property to the clipboard
            Arguments:
            @full_path (bool): Copy full data path
               (optional)
      
         '''
      
         pass

      def copy_python_command_button():
         '''Copy the Python command matching this button
         '''
      
         pass

      def copy_to_selected_button(all=True):
         '''Copy property from this object to selected objects or bones
            Arguments:
            @all (bool): Copy to selected all elements of the array
               (optional)
      
         '''
      
         pass

      def drop_color(color=(0.0, 0.0, 0.0), gamma=False):
         '''Drop colors to buttons
            Arguments:
            @color (float): Source color
               array of 3 items in [0, inf], (optional)
            @gamma (bool): The source color is gamma corrected
               (optional)
      
         '''
      
         pass

      def editsource():
         '''Edit UI source code of the active button
         '''
      
         pass

      def edittranslation_init():
         '''Edit i18n in current language for the active button
         '''
      
         pass

      def eyedropper_color(use_accumulate=True):
         '''Sample a color from the Blender window to store in a property
            Arguments:
            @use_accumulate (bool): (optional)
      
         '''
      
         pass

      def eyedropper_colorramp():
         '''Sample a color band
         '''
      
         pass

      def eyedropper_colorramp_point():
         '''Point-sample a color band
         '''
      
         pass

      def eyedropper_depth():
         '''Sample depth from the 3D view
         '''
      
         pass

      def eyedropper_driver(mapping_type='SINGLE_MANY'):
         '''Pick a property to use as a driver target
            Arguments:
            @mapping_type (str): Method used to match target and driven properties
               in ['SINGLE_MANY', 'DIRECT', 'MATCH', 'NONE_ALL', 'NONE_SINGLE'], (optional)
      
         '''
      
         pass

      def eyedropper_gpencil_color(mode='MATERIAL'):
         '''Sample a color from the Blender Window and create Grease Pencil material
            Arguments:
            @mode (str): in ['MATERIAL', 'PALETTE'], (optional)
      
         '''
      
         pass

      def eyedropper_id():
         '''Sample a data-block from the 3D View to store in a property
         '''
      
         pass

      def jump_to_target_button():
         '''Switch to the target object or bone
         '''
      
         pass

      def override_remove_button(all=True):
         '''Remove an override operation
            Arguments:
            @all (bool): Reset to default values all elements of the array
               (optional)
      
         '''
      
         pass

      def override_type_set_button(all=True, type='REPLACE'):
         '''Create an override operation, or set the type of an existing one
            Arguments:
            @all (bool): Reset to default values all elements of the array
               (optional)
            @type (str): Type of override operation
               in ['NOOP', 'REPLACE', 'DIFFERENCE', 'FACTOR'], (optional)
      
         '''
      
         pass

      def reloadtranslation():
         '''Force a full reload of UI translation
         '''
      
         pass

      def reset_default_button(all=True):
         '''Reset this property's value to its default value
            Arguments:
            @all (bool): Reset to default values all elements of the array
               (optional)
      
         '''
      
         pass

      def unset_property_button():
         '''Clear the property and use default or generated value in operators
         '''
      
         pass

   class uv:
      '''Spcecial class, created just to reflect content of bpy.ops.uv'''

      def align(axis='ALIGN_AUTO'):
         '''Align selected UV vertices to an axis
            Arguments:
            @axis (str): Axis to align UV locations on
               in ['ALIGN_S', 'ALIGN_T', 'ALIGN_U', 'ALIGN_AUTO', 'ALIGN_X', 'ALIGN_Y'], (optional)
      
         '''
      
         pass

      def average_islands_scale():
         '''Average the size of separate UV islands, based on their area in 3D space
         '''
      
         pass

      def cube_project(cube_size=1.0, correct_aspect=True, clip_to_bounds=False, scale_to_bounds=False):
         '''Project the UV vertices of the mesh over the six faces of a cube
            Arguments:
            @cube_size (float): Size of the cube to project on
               in [0, inf], (optional)
            @correct_aspect (bool): Map UVs taking image aspect ratio into account
               (optional)
            @clip_to_bounds (bool): Clip UV coordinates to bounds after unwrapping
               (optional)
            @scale_to_bounds (bool): Scale UV coordinates to bounds after unwrapping
               (optional)
      
         '''
      
         pass

      def cursor_set(location=(0.0, 0.0)):
         '''Set 2D cursor location
            Arguments:
            @location (float): Cursor location in normalized (0.0-1.0) coordinates
               array of 2 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def cylinder_project(direction='VIEW_ON_EQUATOR', align='POLAR_ZX', radius=1.0, correct_aspect=True, clip_to_bounds=False, scale_to_bounds=False):
         '''Project the UV vertices of the mesh over the curved wall of a cylinder
            Arguments:
            @direction (str): Direction of the sphere or cylinder
               in ['VIEW_ON_EQUATOR', 'VIEW_ON_POLES', 'ALIGN_TO_OBJECT'], (optional)
            @align (str): How to determine rotation around the pole
               in ['POLAR_ZX', 'POLAR_ZY'], (optional)
            @radius (float): Radius of the sphere or cylinder
               in [0, inf], (optional)
            @correct_aspect (bool): Map UVs taking image aspect ratio into account
               (optional)
            @clip_to_bounds (bool): Clip UV coordinates to bounds after unwrapping
               (optional)
            @scale_to_bounds (bool): Scale UV coordinates to bounds after unwrapping
               (optional)
      
         '''
      
         pass

      def export_layout(filepath="", export_all=False, modified=False, mode='PNG', size=(1024, 1024), opacity=0.25, check_existing=True):
         '''Export UV layout to file
            Arguments:
            @filepath (str): (optional, never None)
            @export_all (bool): Export all UVs in this mesh (not just visible ones)
               (optional)
            @modified (bool): Exports UVs from the modified mesh
               (optional)
            @mode (str): File format to export the UV layout to
               in ['SVG', 'EPS', 'PNG'], (optional)
            @size (int): Dimensions of the exported file
               array of 2 items in [8, 32768], (optional)
            @opacity (float): Set amount of opacity for exported UV layout
               in [0, 1], (optional)
            @check_existing (bool): (optional)
      
         '''
      
         pass

      def follow_active_quads(mode='LENGTH_AVERAGE'):
         '''Follow UVs from active quads along continuous face loops
            Arguments:
            @mode (str): Method to space UV edge loops
               in ['EVEN', 'LENGTH', 'LENGTH_AVERAGE'], (optional)
      
         '''
      
         pass

      def hide(unselected=False):
         '''Hide (un)selected UV vertices
            Arguments:
            @unselected (bool): Hide unselected rather than selected
               (optional)
      
         '''
      
         pass

      def lightmap_pack(PREF_CONTEXT='SEL_FACES', PREF_PACK_IN_ONE=True, PREF_NEW_UVLAYER=False, PREF_APPLY_IMAGE=False, PREF_IMG_PX_SIZE=512, PREF_BOX_DIV=12, PREF_MARGIN_DIV=0.1):
         '''Pack each faces UV's into the UV bounds
            Arguments:
            @PREF_CONTEXT (str): in ['SEL_FACES', 'ALL_FACES'], (optional)
            @PREF_PACK_IN_ONE (bool): Objects Share texture space, map all objects into 1 uvmap
               (optional)
            @PREF_NEW_UVLAYER (bool): Create a new UV map for every mesh packed
               (optional)
            @PREF_APPLY_IMAGE (bool): Assign new images for every mesh (only one if shared tex space enabled)
               (optional)
            @PREF_IMG_PX_SIZE (int): Width and Height for the new image
               in [64, 5000], (optional)
            @PREF_BOX_DIV (int): Pre Packing before the complex boxpack
               in [1, 48], (optional)
            @PREF_MARGIN_DIV (float): Size of the margin as a division of the UV
               in [0.001, 1], (optional)
      
         '''
      
         pass

      def mark_seam(clear=False):
         '''Mark selected UV edges as seams
            Arguments:
            @clear (bool): Clear instead of marking seams
               (optional)
      
         '''
      
         pass

      def minimize_stretch(fill_holes=True, blend=0.0, iterations=0):
         '''Reduce UV stretching by relaxing angles
            Arguments:
            @fill_holes (bool): Virtual fill holes in mesh before unwrapping, to better avoid overlaps and preserve symmetry
               (optional)
            @blend (float): Blend factor between stretch minimized and original
               in [0, 1], (optional)
            @iterations (int): Number of iterations to run, 0 is unlimited when run interactively
               in [0, inf], (optional)
      
         '''
      
         pass

      def pack_islands(rotate=True, margin=0.001):
         '''Transform all islands so that they fill up the UV space as much as possible
            Arguments:
            @rotate (bool): Rotate islands for best fit
               (optional)
            @margin (float): Space between islands
               in [0, 1], (optional)
      
         '''
      
         pass

      def pin(clear=False):
         '''Set/clear selected UV vertices as anchored between multiple unwrap operations
            Arguments:
            @clear (bool): Clear pinning for the selection instead of setting it
               (optional)
      
         '''
      
         pass

      def project_from_view(orthographic=False, camera_bounds=True, correct_aspect=True, clip_to_bounds=False, scale_to_bounds=False):
         '''Project the UV vertices of the mesh as seen in current 3D view
            Arguments:
            @orthographic (bool): Use orthographic projection
               (optional)
            @camera_bounds (bool): Map UVs to the camera region taking resolution and aspect into account
               (optional)
            @correct_aspect (bool): Map UVs taking image aspect ratio into account
               (optional)
            @clip_to_bounds (bool): Clip UV coordinates to bounds after unwrapping
               (optional)
            @scale_to_bounds (bool): Scale UV coordinates to bounds after unwrapping
               (optional)
      
         '''
      
         pass

      def remove_doubles(threshold=0.02, use_unselected=False):
         '''Selected UV vertices that are within a radius of each other are welded together
            Arguments:
            @threshold (float): Maximum distance between welded vertices
               in [0, 10], (optional)
            @use_unselected (bool): Merge selected to other unselected vertices
               (optional)
      
         '''
      
         pass

      def reset():
         '''Reset UV projection
         '''
      
         pass

      def reveal(select=True):
         '''Reveal all hidden UV vertices
            Arguments:
            @select (bool): (optional)
      
         '''
      
         pass

      def seams_from_islands(mark_seams=True, mark_sharp=False):
         '''Set mesh seams according to island setup in the UV editor
            Arguments:
            @mark_seams (bool): Mark boundary edges as seams
               (optional)
            @mark_sharp (bool): Mark boundary edges as sharp
               (optional)
      
         '''
      
         pass

      def select(extend=False, deselect_all=False, location=(0.0, 0.0)):
         '''Select UV vertices
            Arguments:
            @extend (bool): Extend selection rather than clearing the existing selection
               (optional)
            @deselect_all (bool): Deselect all when nothing under the cursor
               (optional)
            @location (float): Mouse location in normalized coordinates, 0.0 to 1.0 is within the image bounds
               array of 2 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def select_all(action='TOGGLE'):
         '''Change selection of all UV vertices
            Arguments:
            @action (str): Selection action to execute
               in ['TOGGLE', 'SELECT', 'DESELECT', 'INVERT'], (optional)
      
         '''
      
         pass

      def select_box(pinned=False, xmin=0, xmax=0, ymin=0, ymax=0, wait_for_input=True, mode='SET'):
         '''Select UV vertices using box selection
            Arguments:
            @pinned (bool): Border select pinned UVs only
               (optional)
            @xmin (int): in [-inf, inf], (optional)
            @xmax (int): in [-inf, inf], (optional)
            @ymin (int): in [-inf, inf], (optional)
            @ymax (int): in [-inf, inf], (optional)
            @wait_for_input (bool): (optional)
            @mode (str): in ['SET', 'ADD', 'SUB'], (optional)
      
         '''
      
         pass

      def select_circle(x=0, y=0, radius=25, wait_for_input=True, mode='SET'):
         '''Select UV vertices using circle selection
            Arguments:
            @x (int): in [-inf, inf], (optional)
            @y (int): in [-inf, inf], (optional)
            @radius (int): in [1, inf], (optional)
            @wait_for_input (bool): (optional)
            @mode (str): in ['SET', 'ADD', 'SUB'], (optional)
      
         '''
      
         pass

      def select_lasso(path=None, mode='SET'):
         '''Select UVs using lasso selection
            Arguments:
            @path (OperatorMousePath): Collection of , (optional)
            @mode (str): in ['SET', 'ADD', 'SUB'], (optional)
      
         '''
      
         pass

      def select_less():
         '''Deselect UV vertices at the boundary of each selection region
         '''
      
         pass

      def select_linked():
         '''Select all UV vertices linked to the active UV map
         '''
      
         pass

      def select_linked_pick(extend=False, deselect=False, location=(0.0, 0.0)):
         '''Select all UV vertices linked under the mouse
            Arguments:
            @extend (bool): Extend selection rather than clearing the existing selection
               (optional)
            @deselect (bool): Deselect linked UV vertices rather than selecting them
               (optional)
            @location (float): Mouse location in normalized coordinates, 0.0 to 1.0 is within the image bounds
               array of 2 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def select_loop(extend=False, location=(0.0, 0.0)):
         '''Select a loop of connected UV vertices
            Arguments:
            @extend (bool): Extend selection rather than clearing the existing selection
               (optional)
            @location (float): Mouse location in normalized coordinates, 0.0 to 1.0 is within the image bounds
               array of 2 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def select_more():
         '''Select more UV vertices connected to initial selection
         '''
      
         pass

      def select_overlap(extend=False):
         '''Select all UV faces which overlap each other
            Arguments:
            @extend (bool): Extend selection rather than clearing the existing selection
               (optional)
      
         '''
      
         pass

      def select_pinned():
         '''Select all pinned UV vertices
         '''
      
         pass

      def select_split():
         '''Select only entirely selected faces
         '''
      
         pass

      def smart_project(angle_limit=66.0, island_margin=0.0, user_area_weight=0.0, use_aspect=True, stretch_to_bounds=True):
         '''This script projection unwraps the selected faces of a mesh (it operates on all selected mesh objects, and can be used to unwrap selected faces, or all faces)
            Arguments:
            @angle_limit (float): Lower for more projection groups, higher for less distortion
               in [1, 89], (optional)
            @island_margin (float): Margin to reduce bleed from adjacent islands
               in [0, 1], (optional)
            @user_area_weight (float): Weight projections vector by faces with larger areas
               in [0, 1], (optional)
            @use_aspect (bool): Map UVs taking image aspect ratio into account
               (optional)
            @stretch_to_bounds (bool): Stretch the final output to texture bounds
               (optional)
      
         '''
      
         pass

      def snap_cursor(target='PIXELS'):
         '''Snap cursor to target type
            Arguments:
            @target (str): Target to snap the selected UVs to
               in ['PIXELS', 'SELECTED'], (optional)
      
         '''
      
         pass

      def snap_selected(target='PIXELS'):
         '''Snap selected UV vertices to target type
            Arguments:
            @target (str): Target to snap the selected UVs to
               in ['PIXELS', 'CURSOR', 'CURSOR_OFFSET', 'ADJACENT_UNSELECTED'], (optional)
      
         '''
      
         pass

      def sphere_project(direction='VIEW_ON_EQUATOR', align='POLAR_ZX', correct_aspect=True, clip_to_bounds=False, scale_to_bounds=False):
         '''Project the UV vertices of the mesh over the curved surface of a sphere
            Arguments:
            @direction (str): Direction of the sphere or cylinder
               in ['VIEW_ON_EQUATOR', 'VIEW_ON_POLES', 'ALIGN_TO_OBJECT'], (optional)
            @align (str): How to determine rotation around the pole
               in ['POLAR_ZX', 'POLAR_ZY'], (optional)
            @correct_aspect (bool): Map UVs taking image aspect ratio into account
               (optional)
            @clip_to_bounds (bool): Clip UV coordinates to bounds after unwrapping
               (optional)
            @scale_to_bounds (bool): Scale UV coordinates to bounds after unwrapping
               (optional)
      
         '''
      
         pass

      def stitch(use_limit=False, snap_islands=True, limit=0.01, static_island=0, active_object_index=0, midpoint_snap=False, clear_seams=True, mode='VERTEX', stored_mode='VERTEX', selection=None, objects_selection_count=(0, 0, 0, 0, 0, 0)):
         '''Stitch selected UV vertices by proximity
            Arguments:
            @use_limit (bool): Stitch UVs within a specified limit distance
               (optional)
            @snap_islands (bool): Snap islands together (on edge stitch mode, rotates the islands too)
               (optional)
            @limit (float): Limit distance in normalized coordinates
               in [0, inf], (optional)
            @static_island (int): Island that stays in place when stitching islands
               in [0, inf], (optional)
            @active_object_index (int): Index of the active object
               in [0, inf], (optional)
            @midpoint_snap (bool): UVs are stitched at midpoint instead of at static island
               (optional)
            @clear_seams (bool): Clear seams of stitched edges
               (optional)
            @mode (str): Use vertex or edge stitching
               in ['VERTEX', 'EDGE'], (optional)
            @stored_mode (str): Use vertex or edge stitching
               in ['VERTEX', 'EDGE'], (optional)
            @selection (SelectedUvElement): Collection of , (optional)
            @objects_selection_count (int): array of 6 items in [0, inf], (optional)
      
         '''
      
         pass

      def unwrap(method='ANGLE_BASED', fill_holes=True, correct_aspect=True, use_subsurf_data=False, margin=0.001):
         '''Unwrap the mesh of the object being edited
            Arguments:
            @method (str): Unwrapping method (Angle Based usually gives better results than Conformal, while being somewhat slower)
               in ['ANGLE_BASED', 'CONFORMAL'], (optional)
            @fill_holes (bool): Virtual fill holes in mesh before unwrapping, to better avoid overlaps and preserve symmetry
               (optional)
            @correct_aspect (bool): Map UVs taking image aspect ratio into account
               (optional)
            @use_subsurf_data (bool): Map UVs taking vertex position after Subdivision Surface modifier has been applied
               (optional)
            @margin (float): Space between islands
               in [0, 1], (optional)
      
         '''
      
         pass

      def weld():
         '''Weld selected UV vertices together
         '''
      
         pass

   class view2d:
      '''Spcecial class, created just to reflect content of bpy.ops.view2d'''

      def ndof():
         '''Use a 3D mouse device to pan/zoom the view
         '''
      
         pass

      def pan(deltax=0, deltay=0):
         '''Pan the view
            Arguments:
            @deltax (int): in [-inf, inf], (optional)
            @deltay (int): in [-inf, inf], (optional)
      
         '''
      
         pass

      def reset():
         '''Reset the view
         '''
      
         pass

      def scroll_down(deltax=0, deltay=0, page=False):
         '''Scroll the view down
            Arguments:
            @deltax (int): in [-inf, inf], (optional)
            @deltay (int): in [-inf, inf], (optional)
            @page (bool): Scroll down one page
               (optional)
      
         '''
      
         pass

      def scroll_left(deltax=0, deltay=0):
         '''Scroll the view left
            Arguments:
            @deltax (int): in [-inf, inf], (optional)
            @deltay (int): in [-inf, inf], (optional)
      
         '''
      
         pass

      def scroll_right(deltax=0, deltay=0):
         '''Scroll the view right
            Arguments:
            @deltax (int): in [-inf, inf], (optional)
            @deltay (int): in [-inf, inf], (optional)
      
         '''
      
         pass

      def scroll_up(deltax=0, deltay=0, page=False):
         '''Scroll the view up
            Arguments:
            @deltax (int): in [-inf, inf], (optional)
            @deltay (int): in [-inf, inf], (optional)
            @page (bool): Scroll up one page
               (optional)
      
         '''
      
         pass

      def scroller_activate():
         '''Scroll view by mouse click and drag
         '''
      
         pass

      def smoothview(xmin=0, xmax=0, ymin=0, ymax=0, wait_for_input=True):
         '''undocumented
            Arguments:
            @xmin (int): in [-inf, inf], (optional)
            @xmax (int): in [-inf, inf], (optional)
            @ymin (int): in [-inf, inf], (optional)
            @ymax (int): in [-inf, inf], (optional)
            @wait_for_input (bool): (optional)
      
         '''
      
         pass

      def zoom(deltax=0.0, deltay=0.0, use_cursor_init=True):
         '''Zoom in/out the view
            Arguments:
            @deltax (float): in [-inf, inf], (optional)
            @deltay (float): in [-inf, inf], (optional)
            @use_cursor_init (bool): Allow the initial mouse position to be used
               (optional)
      
         '''
      
         pass

      def zoom_border(xmin=0, xmax=0, ymin=0, ymax=0, wait_for_input=True, zoom_out=False):
         '''Zoom in the view to the nearest item contained in the border
            Arguments:
            @xmin (int): in [-inf, inf], (optional)
            @xmax (int): in [-inf, inf], (optional)
            @ymin (int): in [-inf, inf], (optional)
            @ymax (int): in [-inf, inf], (optional)
            @wait_for_input (bool): (optional)
            @zoom_out (bool): (optional)
      
         '''
      
         pass

      def zoom_in(zoomfacx=0.0, zoomfacy=0.0):
         '''Zoom in the view
            Arguments:
            @zoomfacx (float): in [-inf, inf], (optional)
            @zoomfacy (float): in [-inf, inf], (optional)
      
         '''
      
         pass

      def zoom_out(zoomfacx=0.0, zoomfacy=0.0):
         '''Zoom out the view
            Arguments:
            @zoomfacx (float): in [-inf, inf], (optional)
            @zoomfacy (float): in [-inf, inf], (optional)
      
         '''
      
         pass

   class view3d:
      '''Spcecial class, created just to reflect content of bpy.ops.view3d'''

      def background_image_add(name="Image", filepath="", hide_props_region=True, filter_blender=False, filter_backup=False, filter_image=True, filter_movie=True, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=9, relative_path=True, show_multiview=False, use_multiview=False, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA'):
         '''Add a new background image
            Arguments:
            @name (str): Image name to assign
               (optional, never None)
            @filepath (str): Path to file
               (optional, never None)
            @hide_props_region (bool): Collapse the region displaying the operator settings
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @relative_path (bool): Select the file relative to the blend file
               (optional)
            @show_multiview (bool): (optional)
            @use_multiview (bool): (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
      
         '''
      
         pass

      def background_image_remove(index=0):
         '''Remove a background image from the 3D view
            Arguments:
            @index (int): Background image index to remove
               in [0, inf], (optional)
      
         '''
      
         pass

      def camera_to_view():
         '''Set camera view to active view
         '''
      
         pass

      def camera_to_view_selected():
         '''Move the camera so selected objects are framed
         '''
      
         pass

      def clear_render_border():
         '''Clear the boundaries of the border render and disable border render
         '''
      
         pass

      def clip_border(xmin=0, xmax=0, ymin=0, ymax=0, wait_for_input=True):
         '''Set the view clipping region
            Arguments:
            @xmin (int): in [-inf, inf], (optional)
            @xmax (int): in [-inf, inf], (optional)
            @ymin (int): in [-inf, inf], (optional)
            @ymax (int): in [-inf, inf], (optional)
            @wait_for_input (bool): (optional)
      
         '''
      
         pass

      def copybuffer():
         '''Selected objects are copied to the clipboard
         '''
      
         pass

      def cursor3d(use_depth=True, orientation='VIEW'):
         '''Set the location of the 3D cursor
            Arguments:
            @use_depth (bool): Project onto the surface
               (optional)
            @orientation (str): Preset viewpoint to use
               in ['NONE', 'VIEW', 'XFORM', 'GEOM'], (optional)
      
         '''
      
         pass

      def dolly(mx=0, my=0, delta=0, use_cursor_init=True):
         '''Dolly in/out in the view
            Arguments:
            @mx (int): in [0, inf], (optional)
            @my (int): in [0, inf], (optional)
            @delta (int): in [-inf, inf], (optional)
            @use_cursor_init (bool): Allow the initial mouse position to be used
               (optional)
      
         '''
      
         pass

      def edit_mesh_extrude_individual_move():
         '''Extrude each individual face separately along local normals
         '''
      
         pass

      def edit_mesh_extrude_move_normal():
         '''Extrude region together along the average normal
         '''
      
         pass

      def edit_mesh_extrude_move_shrink_fatten():
         '''Extrude region together along local normals
         '''
      
         pass

      def fly():
         '''Interactively fly around the scene
         '''
      
         pass

      def localview(frame_selected=True):
         '''Toggle display of selected object(s) separately and centered in view
            Arguments:
            @frame_selected (bool): Move the view to frame the selected objects
               (optional)
      
         '''
      
         pass

      def localview_remove_from():
         '''Move selected objects out of local view
         '''
      
         pass

      def move(use_cursor_init=True):
         '''Move the view
            Arguments:
            @use_cursor_init (bool): Allow the initial mouse position to be used
               (optional)
      
         '''
      
         pass

      def navigate():
         '''Interactively navigate around the scene (uses the mode (walk/fly) preference)
         '''
      
         pass

      def ndof_all():
         '''Pan and rotate the view with the 3D mouse
         '''
      
         pass

      def ndof_orbit():
         '''Orbit the view using the 3D mouse
         '''
      
         pass

      def ndof_orbit_zoom():
         '''Orbit and zoom the view using the 3D mouse
         '''
      
         pass

      def ndof_pan():
         '''Pan the view with the 3D mouse
         '''
      
         pass

      def object_as_camera():
         '''Set the active object as the active camera for this view or scene
         '''
      
         pass

      def object_mode_pie_or_toggle():
         '''undocumented
         '''
      
         pass

      def pastebuffer(autoselect=True, active_collection=True):
         '''Objects from the clipboard are pasted
            Arguments:
            @autoselect (bool): Select pasted objects
               (optional)
            @active_collection (bool): Put pasted objects in the active collection
               (optional)
      
         '''
      
         pass

      def render_border(xmin=0, xmax=0, ymin=0, ymax=0, wait_for_input=True):
         '''Set the boundaries of the border render and enable border render
            Arguments:
            @xmin (int): in [-inf, inf], (optional)
            @xmax (int): in [-inf, inf], (optional)
            @ymin (int): in [-inf, inf], (optional)
            @ymax (int): in [-inf, inf], (optional)
            @wait_for_input (bool): (optional)
      
         '''
      
         pass

      def rotate(use_cursor_init=True):
         '''Rotate the view
            Arguments:
            @use_cursor_init (bool): Allow the initial mouse position to be used
               (optional)
      
         '''
      
         pass

      def ruler_add():
         '''undocumented
         '''
      
         pass

      def ruler_remove():
         '''undocumented
         '''
      
         pass

      def select(extend=False, deselect=False, toggle=False, deselect_all=False, center=False, enumerate=False, object=False, location=(0, 0)):
         '''Select and activate item(s)
            Arguments:
            @extend (bool): Extend selection instead of deselecting everything first
               (optional)
            @deselect (bool): Remove from selection
               (optional)
            @toggle (bool): Toggle the selection
               (optional)
            @deselect_all (bool): Deselect all when nothing under the cursor
               (optional)
            @center (bool): Use the object center when selecting, in edit-mode used to extend object selection
               (optional)
            @enumerate (bool): List objects under the mouse (object mode only)
               (optional)
            @object (bool): Use object selection (edit-mode only)
               (optional)
            @location (int): Mouse location
               array of 2 items in [-inf, inf], (optional)
      
         '''
      
         pass

      def select_box(xmin=0, xmax=0, ymin=0, ymax=0, wait_for_input=True, mode='SET'):
         '''Select items using box selection
            Arguments:
            @xmin (int): in [-inf, inf], (optional)
            @xmax (int): in [-inf, inf], (optional)
            @ymin (int): in [-inf, inf], (optional)
            @ymax (int): in [-inf, inf], (optional)
            @wait_for_input (bool): (optional)
            @mode (str): in ['SET', 'ADD', 'SUB', 'XOR', 'AND'], (optional)
      
         '''
      
         pass

      def select_circle(x=0, y=0, radius=25, wait_for_input=True, mode='SET'):
         '''Select items using circle selection
            Arguments:
            @x (int): in [-inf, inf], (optional)
            @y (int): in [-inf, inf], (optional)
            @radius (int): in [1, inf], (optional)
            @wait_for_input (bool): (optional)
            @mode (str): in ['SET', 'ADD', 'SUB'], (optional)
      
         '''
      
         pass

      def select_lasso(path=None, mode='SET'):
         '''Select items using lasso selection
            Arguments:
            @path (OperatorMousePath): Collection of , (optional)
            @mode (str): in ['SET', 'ADD', 'SUB', 'XOR', 'AND'], (optional)
      
         '''
      
         pass

      def select_menu(name='', extend=False, deselect=False, toggle=False):
         '''Menu object selection
            Arguments:
            @name (str): in [], (optional)
            @extend (bool): (optional)
            @deselect (bool): (optional)
            @toggle (bool): (optional)
      
         '''
      
         pass

      def smoothview():
         '''undocumented
         '''
      
         pass

      def snap_cursor_to_active():
         '''Snap 3D cursor to the active item
         '''
      
         pass

      def snap_cursor_to_center():
         '''Snap 3D cursor to the world origin
         '''
      
         pass

      def snap_cursor_to_grid():
         '''Snap 3D cursor to the nearest grid division
         '''
      
         pass

      def snap_cursor_to_selected():
         '''Snap 3D cursor to the middle of the selected item(s)
         '''
      
         pass

      def snap_selected_to_active():
         '''Snap selected item(s) to the active item
         '''
      
         pass

      def snap_selected_to_cursor(use_offset=True):
         '''Snap selected item(s) to the 3D cursor
            Arguments:
            @use_offset (bool): If the selection should be snapped as a whole or by each object center
               (optional)
      
         '''
      
         pass

      def snap_selected_to_grid():
         '''Snap selected item(s) to their nearest grid division
         '''
      
         pass

      def toggle_matcap_flip():
         '''Flip MatCap
         '''
      
         pass

      def toggle_shading(type='WIREFRAME'):
         '''Toggle shading type in 3D viewport
            Arguments:
            @type (str): Shading type to toggle
               in ['WIREFRAME', 'SOLID', 'MATERIAL', 'RENDERED'], (optional)
      
         '''
      
         pass

      def toggle_xray():
         '''undocumented
         '''
      
         pass

      def transform_gizmo_set(extend=False, type={}):
         '''Set the current transform gizmo
            Arguments:
            @extend (bool): (optional)
            @type (str): set in {'TRANSLATE', 'ROTATE', 'SCALE'}, (optional)
      
         '''
      
         pass

      def view_all(use_all_regions=False, center=False):
         '''View all objects in scene
            Arguments:
            @use_all_regions (bool): View selected for all regions
               (optional)
            @center (bool): (optional)
      
         '''
      
         pass

      def view_axis(type='LEFT', align_active=False, relative=False):
         '''Use a preset viewpoint
            Arguments:
            @type (str): Preset viewpoint to use
               in ['LEFT', 'RIGHT', 'BOTTOM', 'TOP', 'FRONT', 'BACK'], (optional)
            @align_active (bool): Align to the active object's axis
               (optional)
            @relative (bool): Rotate relative to the current orientation
               (optional)
      
         '''
      
         pass

      def view_camera():
         '''Toggle the camera view
         '''
      
         pass

      def view_center_camera():
         '''Center the camera view
         '''
      
         pass

      def view_center_cursor():
         '''Center the view so that the cursor is in the middle of the view
         '''
      
         pass

      def view_center_lock():
         '''Center the view lock offset
         '''
      
         pass

      def view_center_pick():
         '''Center the view to the Z-depth position under the mouse cursor
         '''
      
         pass

      def view_lock_clear():
         '''Clear all view locking
         '''
      
         pass

      def view_lock_to_active():
         '''Lock the view to the active object/bone
         '''
      
         pass

      def view_orbit(angle=0.0, type='ORBITLEFT'):
         '''Orbit the view
            Arguments:
            @angle (float): in [-inf, inf], (optional)
            @type (str): Direction of View Orbit
               in ['ORBITLEFT', 'ORBITRIGHT', 'ORBITUP', 'ORBITDOWN'], (optional)
      
         '''
      
         pass

      def view_pan(type='PANLEFT'):
         '''Pan the view in a given direction
            Arguments:
            @type (str): Direction of View Pan
               in ['PANLEFT', 'PANRIGHT', 'PANUP', 'PANDOWN'], (optional)
      
         '''
      
         pass

      def view_persportho():
         '''Switch the current view from perspective/orthographic projection
         '''
      
         pass

      def view_roll(angle=0.0, type='ANGLE'):
         '''Roll the view
            Arguments:
            @angle (float): in [-inf, inf], (optional)
            @type (str): How roll angle is calculated
               in ['ANGLE', 'LEFT', 'RIGHT'], (optional)
      
         '''
      
         pass

      def view_selected(use_all_regions=False):
         '''Move the view to the selection center
            Arguments:
            @use_all_regions (bool): View selected for all regions
               (optional)
      
         '''
      
         pass

      def walk():
         '''Interactively walk around the scene
         '''
      
         pass

      def zoom(mx=0, my=0, delta=0, use_cursor_init=True):
         '''Zoom in/out in the view
            Arguments:
            @mx (int): in [0, inf], (optional)
            @my (int): in [0, inf], (optional)
            @delta (int): in [-inf, inf], (optional)
            @use_cursor_init (bool): Allow the initial mouse position to be used
               (optional)
      
         '''
      
         pass

      def zoom_border(xmin=0, xmax=0, ymin=0, ymax=0, wait_for_input=True, zoom_out=False):
         '''Zoom in the view to the nearest object contained in the border
            Arguments:
            @xmin (int): in [-inf, inf], (optional)
            @xmax (int): in [-inf, inf], (optional)
            @ymin (int): in [-inf, inf], (optional)
            @ymax (int): in [-inf, inf], (optional)
            @wait_for_input (bool): (optional)
            @zoom_out (bool): (optional)
      
         '''
      
         pass

      def zoom_camera_1_to_1():
         '''Match the camera to 1:1 to the render output
         '''
      
         pass

   class wm:
      '''Spcecial class, created just to reflect content of bpy.ops.wm'''

      def alembic_export(filepath="", check_existing=True, filter_blender=False, filter_backup=False, filter_image=False, filter_movie=False, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=True, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=8, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA', start=-2147483648, end=-2147483648, xsamples=1, gsamples=1, sh_open=0.0, sh_close=1.0, selected=False, renderable_only=True, visible_objects_only=False, flatten=False, uvs=True, packuv=True, normals=True, vcolors=False, face_sets=False, subdiv_schema=False, apply_subdiv=False, curves_as_mesh=False, compression_type='OGAWA', global_scale=1.0, triangulate=False, quad_method='SHORTEST_DIAGONAL', ngon_method='BEAUTY', export_hair=True, export_particles=True, as_background_job=False, init_scene_frame_range=False):
         '''Export current scene in an Alembic archive
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
            @start (int): Start frame of the export, use the default value to take the start frame of the current scene
               in [-inf, inf], (optional)
            @end (int): End frame of the export, use the default value to take the end frame of the current scene
               in [-inf, inf], (optional)
            @xsamples (int): Number of times per frame transformations are sampled
               in [1, 128], (optional)
            @gsamples (int): Number of times per frame object data are sampled
               in [1, 128], (optional)
            @sh_open (float): Time at which the shutter is open
               in [-1, 1], (optional)
            @sh_close (float): Time at which the shutter is closed
               in [-1, 1], (optional)
            @selected (bool): Export only selected objects
               (optional)
            @renderable_only (bool): Export only objects marked renderable in the outliner
               (optional)
            @visible_objects_only (bool): Export only objects that are visible
               (optional)
            @flatten (bool): Do not preserve objects' parent/children relationship
               (optional)
            @uvs (bool): Export UVs
               (optional)
            @packuv (bool): Export UVs with packed island
               (optional)
            @normals (bool): Export normals
               (optional)
            @vcolors (bool): Export vertex colors
               (optional)
            @face_sets (bool): Export per face shading group assignments
               (optional)
            @subdiv_schema (bool): Export meshes using Alembic's subdivision schema
               (optional)
            @apply_subdiv (bool): Export subdivision surfaces as meshes
               (optional)
            @curves_as_mesh (bool): Export curves and NURBS surfaces as meshes
               (optional)
            @compression_type (str): in ['OGAWA', 'HDF5'], (optional)
            @global_scale (float): Value by which to enlarge or shrink the objects with respect to the world's origin
               in [0.0001, 1000], (optional)
            @triangulate (bool): Export Polygons (Quads & NGons) as Triangles
               (optional)
            @quad_method (str): Method for splitting the quads into triangles
               in ['BEAUTY', 'FIXED', 'FIXED_ALTERNATE', 'SHORTEST_DIAGONAL'], (optional)
            @ngon_method (str): Method for splitting the polygons into triangles
               in ['BEAUTY', 'FIXED', 'FIXED_ALTERNATE', 'SHORTEST_DIAGONAL'], (optional)
            @export_hair (bool): Exports hair particle systems as animated curves
               (optional)
            @export_particles (bool): Exports non-hair particle systems
               (optional)
            @as_background_job (bool): Enable this to run the import in the background, disable to block Blender while importing. This option is deprecated; EXECUTE this operator to run in the foreground, and INVOKE it to run as a background job
               (optional)
            @init_scene_frame_range (bool): (optional)
      
         '''
      
         pass

      def alembic_import(filepath="", check_existing=True, filter_blender=False, filter_backup=False, filter_image=False, filter_movie=False, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=True, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=8, relative_path=True, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA', scale=1.0, set_frame_range=True, validate_meshes=False, is_sequence=False, as_background_job=False):
         '''Load an Alembic archive
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @relative_path (bool): Select the file relative to the blend file
               (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
            @scale (float): Value by which to enlarge or shrink the objects with respect to the world's origin
               in [0.0001, 1000], (optional)
            @set_frame_range (bool): If checked, update scene's start and end frame to match those of the Alembic archive
               (optional)
            @validate_meshes (bool): Check imported mesh objects for invalid data (slow)
               (optional)
            @is_sequence (bool): Set to true if the cache is split into separate files
               (optional)
            @as_background_job (bool): Enable this to run the export in the background, disable to block Blender while exporting. This option is deprecated; EXECUTE this operator to run in the foreground, and INVOKE it to run as a background job
               (optional)
      
         '''
      
         pass

      def append(filepath="", directory="", filename="", files=None, filter_blender=True, filter_backup=False, filter_image=False, filter_movie=False, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=True, filemode=1, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA', link=False, autoselect=True, active_collection=True, instance_collections=False, set_fake=False, use_recursive=True):
         '''Append from a Library .blend file
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @directory (str): Directory of the file
               (optional, never None)
            @filename (str): Name of the file
               (optional, never None)
            @files (OperatorFileListElement): Collection of , (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
            @link (bool): Link the objects or data-blocks rather than appending
               (optional)
            @autoselect (bool): Select new objects
               (optional)
            @active_collection (bool): Put new objects on the active collection
               (optional)
            @instance_collections (bool): Create instances for collections, rather than adding them directly to the scene
               (optional)
            @set_fake (bool): Set Fake User for appended items (except Objects and Groups)
               (optional)
            @use_recursive (bool): Localize all appended data, including those indirectly linked from other libraries
               (optional)
      
         '''
      
         pass

      def batch_rename(data_type='OBJECT', data_source='SELECT', actions=None):
         '''undocumented
            Arguments:
            @data_type (str): Type of data to rename
               in ['OBJECT', 'MATERIAL', 'MESH', 'CURVE', 'META', 'ARMATURE', 'LATTICE', 'GPENCIL', 'CAMERA', 'SPEAKER', 'LIGHT_PROBE', 'BONE', 'NODE', 'SEQUENCE_STRIP'], (optional)
            @data_source (str): in ['SELECT', 'ALL'], (optional)
            @actions (BatchRenameAction): Collection of , (optional)
      
         '''
      
         pass

      def blend_strings_utf8_validate():
         '''Check and fix all strings in current .blend file to be valid UTF-8 Unicode (needed for some old, 2.4x area files)
         '''
      
         pass

      def call_menu(name=""):
         '''Call (draw) a pre-defined menu
            Arguments:
            @name (str): Name of the menu
               (optional, never None)
      
         '''
      
         pass

      def call_menu_pie(name=""):
         '''Call (draw) a pre-defined pie menu
            Arguments:
            @name (str): Name of the pie menu
               (optional, never None)
      
         '''
      
         pass

      def call_panel(name="", keep_open=True):
         '''Call (draw) a pre-defined panel
            Arguments:
            @name (str): Name of the menu
               (optional, never None)
            @keep_open (bool): (optional)
      
         '''
      
         pass

      def collada_export(filepath="", check_existing=True, filter_blender=False, filter_backup=False, filter_image=False, filter_movie=False, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=True, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=8, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA', prop_bc_export_ui_section='main', apply_modifiers=False, export_mesh_type=0, export_mesh_type_selection='view', export_global_forward_selection='Y', export_global_up_selection='Z', apply_global_orientation=False, selected=False, include_children=False, include_armatures=False, include_shapekeys=False, deform_bones_only=False, include_animations=True, include_all_actions=True, export_animation_type_selection='sample', sampling_rate=1, keep_smooth_curves=False, keep_keyframes=False, keep_flat_curves=False, active_uv_only=False, use_texture_copies=True, triangulate=True, use_object_instantiation=True, use_blender_profile=True, sort_by_name=False, export_object_transformation_type=0, export_object_transformation_type_selection='matrix', export_animation_transformation_type=0, export_animation_transformation_type_selection='matrix', open_sim=False, limit_precision=False, keep_bind_info=False):
         '''Save a Collada file
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
            @prop_bc_export_ui_section (str): Only for User Interface organization
               in ['main', 'geometry', 'armature', 'animation', 'collada'], (optional)
            @apply_modifiers (bool): Apply modifiers to exported mesh (non destructive))
               (optional)
            @export_mesh_type (int): Modifier resolution for export
               in [-inf, inf], (optional)
            @export_mesh_type_selection (str): Modifier resolution for export
               in ['view', 'render'], (optional)
            @export_global_forward_selection (str): Global Forward axis for export
               in ['X', 'Y', 'Z', '-X', '-Y', '-Z'], (optional)
            @export_global_up_selection (str): Global Up axis for export
               in ['X', 'Y', 'Z', '-X', '-Y', '-Z'], (optional)
            @apply_global_orientation (bool): Rotate all root objects to match the global orientation settings otherwise set the global orientation per Collada asset
               (optional)
            @selected (bool): Export only selected elements
               (optional)
            @include_children (bool): Export all children of selected objects (even if not selected)
               (optional)
            @include_armatures (bool): Export related armatures (even if not selected)
               (optional)
            @include_shapekeys (bool): Export all Shape Keys from Mesh Objects
               (optional)
            @deform_bones_only (bool): Only export deforming bones with armatures
               (optional)
            @include_animations (bool): Export animations if available (exporting animations will enforce the decomposition of node transforms into  <translation> <rotation> and <scale> components)
               (optional)
            @include_all_actions (bool): Export also unassigned actions (this allows you to export entire animation libraries for your character(s))
               (optional)
            @export_animation_type_selection (str): Type for exported animations (use sample keys or Curve keys)
               in ['sample', 'keys'], (optional)
            @sampling_rate (int): The distance between 2 keyframes (1 to key every frame)
               in [1, inf], (optional)
            @keep_smooth_curves (bool): Export also the curve handles (if available) (this does only work when the inverse parent matrix is the unity matrix, otherwise you may end up with odd results)
               (optional)
            @keep_keyframes (bool): Use existing keyframes as additional sample points (this helps when you want to keep manual tweaks)
               (optional)
            @keep_flat_curves (bool): Export also curves which have only one key or are totally flat
               (optional)
            @active_uv_only (bool): Export only the selected UV Map
               (optional)
            @use_texture_copies (bool): Copy textures to same folder where the .dae file is exported
               (optional)
            @triangulate (bool): Export Polygons (Quads & NGons) as Triangles
               (optional)
            @use_object_instantiation (bool): Instantiate multiple Objects from same Data
               (optional)
            @use_blender_profile (bool): Export additional Blender specific information (for material, shaders, bones, etc.)
               (optional)
            @sort_by_name (bool): Sort exported data by Object name
               (optional)
            @export_object_transformation_type (int): Object Transformation type for translation, scale and rotation
               in [-inf, inf], (optional)
            @export_object_transformation_type_selection (str): Object Transformation type for translation, scale and rotation
               in ['matrix', 'decomposed'], (optional)
            @export_animation_transformation_type (int): Transformation type for translation, scale and rotation. Note: The Animation transformation type in the Anim Tab is always equal to the Object transformation type in the Geom tab
               in [-inf, inf], (optional)
            @export_animation_transformation_type_selection (str): Transformation type for translation, scale and rotation. Note: The Animation transformation type in the Anim Tab is always equal to the Object transformation type in the Geom tab
               in ['matrix', 'decomposed'], (optional)
            @open_sim (bool): Compatibility mode for SL, OpenSim and other compatible online worlds
               (optional)
            @limit_precision (bool): Reduce the precision of the exported data to 6 digits
               (optional)
            @keep_bind_info (bool): Store Bindpose information in custom bone properties for later use during Collada export
               (optional)
      
         '''
      
         pass

      def collada_import(filepath="", filter_blender=False, filter_backup=False, filter_image=False, filter_movie=False, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=True, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=8, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA', import_units=False, fix_orientation=False, find_chains=False, auto_connect=False, min_chain_length=0, keep_bind_info=False):
         '''Load a Collada file
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
            @import_units (bool): If disabled match import to Blender's current Unit settings, otherwise use the settings from the Imported scene
               (optional)
            @fix_orientation (bool): Fix Orientation of Leaf Bones (Collada does only support Joints)
               (optional)
            @find_chains (bool): Find best matching Bone Chains and ensure bones in chain are connected
               (optional)
            @auto_connect (bool): Set use_connect for parent bones which have exactly one child bone
               (optional)
            @min_chain_length (int): When searching Bone Chains disregard chains of length below this value
               in [0, inf], (optional)
            @keep_bind_info (bool): Store Bindpose information in custom bone properties for later use during Collada export
               (optional)
      
         '''
      
         pass

      def context_collection_boolean_set(data_path_iter="", data_path_item="", type='TOGGLE'):
         '''Set boolean values for a collection of items
            Arguments:
            @data_path_iter (str): The data path relative to the context, must point to an iterable
               (optional, never None)
            @data_path_item (str): The data path from each iterable to the value (int or float)
               (optional, never None)
            @type (str): in ['TOGGLE', 'ENABLE', 'DISABLE'], (optional)
      
         '''
      
         pass

      def context_cycle_array(data_path="", reverse=False):
         '''Set a context array value (useful for cycling the active mesh edit mode)
            Arguments:
            @data_path (str): RNA context string
               (optional, never None)
            @reverse (bool): Cycle backwards
               (optional)
      
         '''
      
         pass

      def context_cycle_enum(data_path="", reverse=False, wrap=False):
         '''Toggle a context value
            Arguments:
            @data_path (str): RNA context string
               (optional, never None)
            @reverse (bool): Cycle backwards
               (optional)
            @wrap (bool): Wrap back to the first/last values
               (optional)
      
         '''
      
         pass

      def context_cycle_int(data_path="", reverse=False, wrap=False):
         '''Set a context value (useful for cycling active material, vertex keys, groups, etc.)
            Arguments:
            @data_path (str): RNA context string
               (optional, never None)
            @reverse (bool): Cycle backwards
               (optional)
            @wrap (bool): Wrap back to the first/last values
               (optional)
      
         '''
      
         pass

      def context_menu_enum(data_path=""):
         '''undocumented
            Arguments:
            @data_path (str): RNA context string
               (optional, never None)
      
         '''
      
         pass

      def context_modal_mouse(data_path_iter="", data_path_item="", header_text="", input_scale=0.01, invert=False, initial_x=0):
         '''Adjust arbitrary values with mouse input
            Arguments:
            @data_path_iter (str): The data path relative to the context, must point to an iterable
               (optional, never None)
            @data_path_item (str): The data path from each iterable to the value (int or float)
               (optional, never None)
            @header_text (str): Text to display in header during scale
               (optional, never None)
            @input_scale (float): Scale the mouse movement by this value before applying the delta
               in [-inf, inf], (optional)
            @invert (bool): Invert the mouse input
               (optional)
            @initial_x (int): in [-inf, inf], (optional)
      
         '''
      
         pass

      def context_pie_enum(data_path=""):
         '''undocumented
            Arguments:
            @data_path (str): RNA context string
               (optional, never None)
      
         '''
      
         pass

      def context_scale_float(data_path="", value=1.0):
         '''Scale a float context value
            Arguments:
            @data_path (str): RNA context string
               (optional, never None)
            @value (float): Assign value
               in [-inf, inf], (optional)
      
         '''
      
         pass

      def context_scale_int(data_path="", value=1.0, always_step=True):
         '''Scale an int context value
            Arguments:
            @data_path (str): RNA context string
               (optional, never None)
            @value (float): Assign value
               in [-inf, inf], (optional)
            @always_step (bool): Always adjust the value by a minimum of 1 when 'value' is not 1.0
               (optional)
      
         '''
      
         pass

      def context_set_boolean(data_path="", value=True):
         '''Set a context value
            Arguments:
            @data_path (str): RNA context string
               (optional, never None)
            @value (bool): Assignment value
               (optional)
      
         '''
      
         pass

      def context_set_enum(data_path="", value=""):
         '''Set a context value
            Arguments:
            @data_path (str): RNA context string
               (optional, never None)
            @value (str): Assignment value (as a string)
               (optional, never None)
      
         '''
      
         pass

      def context_set_float(data_path="", value=0.0, relative=False):
         '''Set a context value
            Arguments:
            @data_path (str): RNA context string
               (optional, never None)
            @value (float): Assignment value
               in [-inf, inf], (optional)
            @relative (bool): Apply relative to the current value (delta)
               (optional)
      
         '''
      
         pass

      def context_set_id(data_path="", value=""):
         '''Set a context value to an ID data-block
            Arguments:
            @data_path (str): RNA context string
               (optional, never None)
            @value (str): Assign value
               (optional, never None)
      
         '''
      
         pass

      def context_set_int(data_path="", value=0, relative=False):
         '''Set a context value
            Arguments:
            @data_path (str): RNA context string
               (optional, never None)
            @value (int): Assign value
               in [-inf, inf], (optional)
            @relative (bool): Apply relative to the current value (delta)
               (optional)
      
         '''
      
         pass

      def context_set_string(data_path="", value=""):
         '''Set a context value
            Arguments:
            @data_path (str): RNA context string
               (optional, never None)
            @value (str): Assign value
               (optional, never None)
      
         '''
      
         pass

      def context_set_value(data_path="", value=""):
         '''Set a context value
            Arguments:
            @data_path (str): RNA context string
               (optional, never None)
            @value (str): Assignment value (as a string)
               (optional, never None)
      
         '''
      
         pass

      def context_toggle(data_path="", module=""):
         '''Toggle a context value
            Arguments:
            @data_path (str): RNA context string
               (optional, never None)
            @module (str): Optionally override the context with a module
               (optional, never None)
      
         '''
      
         pass

      def context_toggle_enum(data_path="", value_1="", value_2=""):
         '''Toggle a context value
            Arguments:
            @data_path (str): RNA context string
               (optional, never None)
            @value_1 (str): Toggle enum
               (optional, never None)
            @value_2 (str): Toggle enum
               (optional, never None)
      
         '''
      
         pass

      def debug_menu(debug_value=0):
         '''Open a popup to set the debug level
            Arguments:
            @debug_value (int): in [-32768, 32767], (optional)
      
         '''
      
         pass

      def doc_view(doc_id=""):
         '''Open online reference docs in a web browser
            Arguments:
            @doc_id (str): (optional, never None)
      
         '''
      
         pass

      def doc_view_manual(doc_id=""):
         '''Load online manual
            Arguments:
            @doc_id (str): (optional, never None)
      
         '''
      
         pass

      def doc_view_manual_ui_context():
         '''View a context based online manual in a web browser
         '''
      
         pass

      def drop_blend_file(filepath=""):
         '''undocumented
            Arguments:
            @filepath (str): (optional, never None)
      
         '''
      
         pass

      def interface_theme_preset_add(name="", remove_name=False, remove_active=False):
         '''Add or remove a theme preset
            Arguments:
            @name (str): Name of the preset, used to make the path name
               (optional, never None)
            @remove_name (bool): (optional)
            @remove_active (bool): (optional)
      
         '''
      
         pass

      def keyconfig_preset_add(name="", remove_name=False, remove_active=False):
         '''Add or remove a Key-config Preset
            Arguments:
            @name (str): Name of the preset, used to make the path name
               (optional, never None)
            @remove_name (bool): (optional)
            @remove_active (bool): (optional)
      
         '''
      
         pass

      def lib_reload(library="", filepath="", directory="", filename="", hide_props_region=True, filter_blender=True, filter_backup=False, filter_image=False, filter_movie=False, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=8, relative_path=True, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA'):
         '''Reload the given library
            Arguments:
            @library (str): Library to reload
               (optional, never None)
            @filepath (str): Path to file
               (optional, never None)
            @directory (str): Directory of the file
               (optional, never None)
            @filename (str): Name of the file
               (optional, never None)
            @hide_props_region (bool): Collapse the region displaying the operator settings
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @relative_path (bool): Select the file relative to the blend file
               (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
      
         '''
      
         pass

      def lib_relocate(library="", filepath="", directory="", filename="", files=None, hide_props_region=True, filter_blender=True, filter_backup=False, filter_image=False, filter_movie=False, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=8, relative_path=True, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA'):
         '''Relocate the given library to one or several others
            Arguments:
            @library (str): Library to relocate
               (optional, never None)
            @filepath (str): Path to file
               (optional, never None)
            @directory (str): Directory of the file
               (optional, never None)
            @filename (str): Name of the file
               (optional, never None)
            @files (OperatorFileListElement): Collection of , (optional)
            @hide_props_region (bool): Collapse the region displaying the operator settings
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @relative_path (bool): Select the file relative to the blend file
               (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
      
         '''
      
         pass

      def link(filepath="", directory="", filename="", files=None, filter_blender=True, filter_backup=False, filter_image=False, filter_movie=False, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=True, filemode=1, relative_path=True, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA', link=True, autoselect=True, active_collection=True, instance_collections=True):
         '''Link from a Library .blend file
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @directory (str): Directory of the file
               (optional, never None)
            @filename (str): Name of the file
               (optional, never None)
            @files (OperatorFileListElement): Collection of , (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @relative_path (bool): Select the file relative to the blend file
               (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
            @link (bool): Link the objects or data-blocks rather than appending
               (optional)
            @autoselect (bool): Select new objects
               (optional)
            @active_collection (bool): Put new objects on the active collection
               (optional)
            @instance_collections (bool): Create instances for collections, rather than adding them directly to the scene
               (optional)
      
         '''
      
         pass

      def memory_statistics():
         '''Print memory statistics to the console
         '''
      
         pass

      def open_mainfile(filepath="", hide_props_region=True, filter_blender=True, filter_backup=False, filter_image=False, filter_movie=False, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=8, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA', load_ui=True, use_scripts=True, display_file_selector=True, state=0):
         '''Open a Blender file
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @hide_props_region (bool): Collapse the region displaying the operator settings
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
            @load_ui (bool): Load user interface setup in the .blend file
               (optional)
            @use_scripts (bool): Allow .blend file to execute scripts automatically, default available from system preferences
               (optional)
            @display_file_selector (bool): (optional)
            @state (int): in [-inf, inf], (optional)
      
         '''
      
         pass

      def operator_cheat_sheet():
         '''List all the Operators in a text-block, useful for scripting
         '''
      
         pass

      def operator_defaults():
         '''Set the active operator to its default values
         '''
      
         pass

      def operator_pie_enum(data_path="", prop_string=""):
         '''undocumented
            Arguments:
            @data_path (str): Operator name (in python as string)
               (optional, never None)
            @prop_string (str): Property name (as a string)
               (optional, never None)
      
         '''
      
         pass

      def operator_preset_add(name="", remove_name=False, remove_active=False, operator=""):
         '''Add or remove an Operator Preset
            Arguments:
            @name (str): Name of the preset, used to make the path name
               (optional, never None)
            @remove_name (bool): (optional)
            @remove_active (bool): (optional)
            @operator (str): (optional, never None)
      
         '''
      
         pass

      def owner_disable(owner_id=""):
         '''Enable workspace owner ID
            Arguments:
            @owner_id (str): (optional, never None)
      
         '''
      
         pass

      def owner_enable(owner_id=""):
         '''Enable workspace owner ID
            Arguments:
            @owner_id (str): (optional, never None)
      
         '''
      
         pass

      def path_open(filepath=""):
         '''Open a path in a file browser
            Arguments:
            @filepath (str): (optional, never None)
      
         '''
      
         pass

      def previews_batch_clear(files=None, directory="", filter_blender=True, filter_folder=True, use_scenes=True, use_collections=True, use_objects=True, use_intern_data=True, use_trusted=False, use_backups=True):
         '''Clear selected .blend file's previews
            Arguments:
            @files (OperatorFileListElement): Collection of , (optional)
            @directory (str): (optional, never None)
            @filter_blender (bool): (optional)
            @filter_folder (bool): (optional)
            @use_scenes (bool): Clear scenes' previews
               (optional)
            @use_collections (bool): Clear collections' previews
               (optional)
            @use_objects (bool): Clear objects' previews
               (optional)
            @use_intern_data (bool): Clear 'internal' previews (materials, textures, images, etc.)
               (optional)
            @use_trusted (bool): Enable python evaluation for selected files
               (optional)
            @use_backups (bool): Keep a backup (.blend1) version of the files when saving with cleared previews
               (optional)
      
         '''
      
         pass

      def previews_batch_generate(files=None, directory="", filter_blender=True, filter_folder=True, use_scenes=True, use_collections=True, use_objects=True, use_intern_data=True, use_trusted=False, use_backups=True):
         '''Generate selected .blend file's previews
            Arguments:
            @files (OperatorFileListElement): Collection of , (optional)
            @directory (str): (optional, never None)
            @filter_blender (bool): (optional)
            @filter_folder (bool): (optional)
            @use_scenes (bool): Generate scenes' previews
               (optional)
            @use_collections (bool): Generate collections' previews
               (optional)
            @use_objects (bool): Generate objects' previews
               (optional)
            @use_intern_data (bool): Generate 'internal' previews (materials, textures, images, etc.)
               (optional)
            @use_trusted (bool): Enable python evaluation for selected files
               (optional)
            @use_backups (bool): Keep a backup (.blend1) version of the files when saving with generated previews
               (optional)
      
         '''
      
         pass

      def previews_clear(id_type={}):
         '''Clear data-block previews (only for some types like objects, materials, textures, etc.)
            Arguments:
            @id_type (str): Which data-block previews to clear
               set in {'ALL', 'GEOMETRY', 'SHADING', 'SCENE', 'COLLECTION', 'OBJECT', 'MATERIAL', 'LIGHT', 'WORLD', 'TEXTURE', 'IMAGE'}, (optional)
      
         '''
      
         pass

      def previews_ensure():
         '''Ensure data-block previews are available and up-to-date (to be saved in .blend file, only for some types like materials, textures, etc.)
         '''
      
         pass

      def properties_add(data_path=""):
         '''Add your own property to the data-block
            Arguments:
            @data_path (str): Property data_path edit
               (optional, never None)
      
         '''
      
         pass

      def properties_context_change(context=""):
         '''Jump to a different tab inside the properties editor
            Arguments:
            @context (str): (optional, never None)
      
         '''
      
         pass

      def properties_edit(data_path="", property="", value="", default="", min=-10000, max=10000.0, use_soft_limits=False, is_overridable_library=False, soft_min=-10000, soft_max=10000.0, description="", subtype=''):
         '''Edit the attributes of the property
            Arguments:
            @data_path (str): Property data_path edit
               (optional, never None)
            @property (str): Property name edit
               (optional, never None)
            @value (str): Property value edit
               (optional, never None)
            @default (str): Default value of the property. Important for NLA mixing
               (optional, never None)
            @min (float): Minimum value of the property
               in [-inf, inf], (optional)
            @max (float): Maximum value of the property
               in [-inf, inf], (optional)
            @use_soft_limits (bool): Limits the Property Value slider to a range, values outside the range must be inputted numerically
               (optional)
            @is_overridable_library (bool): Allow the property to be overridden when the Data-Block is linked
               (optional)
            @soft_min (float): Minimum value of the property
               in [-inf, inf], (optional)
            @soft_max (float): Maximum value of the property
               in [-inf, inf], (optional)
            @description (str): (optional, never None)
            @subtype (str): in [], (optional)
      
         '''
      
         pass

      def properties_remove(data_path="", property=""):
         '''Internal use (edit a property data_path)
            Arguments:
            @data_path (str): Property data_path edit
               (optional, never None)
            @property (str): Property name edit
               (optional, never None)
      
         '''
      
         pass

      def quit_blender():
         '''Quit Blender
         '''
      
         pass

      def radial_control(data_path_primary="", data_path_secondary="", use_secondary="", rotation_path="", color_path="", fill_color_path="", fill_color_override_path="", fill_color_override_test_path="", zoom_path="", image_id="", secondary_tex=False):
         '''Set some size property (like e.g. brush size) with mouse wheel
            Arguments:
            @data_path_primary (str): Primary path of property to be set by the radial control
               (optional, never None)
            @data_path_secondary (str): Secondary path of property to be set by the radial control
               (optional, never None)
            @use_secondary (str): Path of property to select between the primary and secondary data paths
               (optional, never None)
            @rotation_path (str): Path of property used to rotate the texture display
               (optional, never None)
            @color_path (str): Path of property used to set the color of the control
               (optional, never None)
            @fill_color_path (str): Path of property used to set the fill color of the control
               (optional, never None)
            @fill_color_override_path (str): (optional, never None)
            @fill_color_override_test_path (str): (optional, never None)
            @zoom_path (str): Path of property used to set the zoom level for the control
               (optional, never None)
            @image_id (str): Path of ID that is used to generate an image for the control
               (optional, never None)
            @secondary_tex (bool): Tweak brush secondary/mask texture
               (optional)
      
         '''
      
         pass

      def read_factory_settings(app_template="Template", use_empty=False):
         '''Load factory default startup file and preferences. To make changes permanent, use "Save Startup File" and "Save Preferences"
            Arguments:
            @app_template (str): (optional, never None)
            @use_empty (bool): (optional)
      
         '''
      
         pass

      def read_factory_userpref():
         '''Load factory default preferences. To make changes to preferences permanent, use "Save Preferences"
         '''
      
         pass

      def read_history():
         '''Reloads history and bookmarks
         '''
      
         pass

      def read_homefile(filepath="", load_ui=True, use_splash=False, app_template="Template", use_empty=False):
         '''Open the default file (doesn't save the current file)
            Arguments:
            @filepath (str): Path to an alternative start-up file
               (optional, never None)
            @load_ui (bool): Load user interface setup from the .blend file
               (optional)
            @use_splash (bool): (optional)
            @app_template (str): (optional, never None)
            @use_empty (bool): (optional)
      
         '''
      
         pass

      def read_userpref():
         '''Load last saved preferences
         '''
      
         pass

      def recover_auto_save(filepath="", hide_props_region=True, filter_blender=True, filter_backup=False, filter_image=False, filter_movie=False, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=False, filter_blenlib=False, filemode=8, display_type='LIST_VERTICAL', sort_method='FILE_SORT_TIME'):
         '''Open an automatically saved file to recover it
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @hide_props_region (bool): Collapse the region displaying the operator settings
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
      
         '''
      
         pass

      def recover_last_session():
         '''Open the last closed file ("quit.blend")
         '''
      
         pass

      def redraw_timer(type='DRAW', iterations=10, time_limit=0.0):
         '''Simple redraw timer to test the speed of updating the interface
            Arguments:
            @type (str): in ['DRAW', 'DRAW_SWAP', 'DRAW_WIN', 'DRAW_WIN_SWAP', 'ANIM_STEP', 'ANIM_PLAY', 'UNDO'], (optional)
            @iterations (int): Number of times to redraw
               in [1, inf], (optional)
            @time_limit (float): Seconds to run the test for (override iterations)
               in [0, inf], (optional)
      
         '''
      
         pass

      def revert_mainfile(use_scripts=True):
         '''Reload the saved file
            Arguments:
            @use_scripts (bool): Allow .blend file to execute scripts automatically, default available from system preferences
               (optional)
      
         '''
      
         pass

      def save_as_mainfile(filepath="", hide_props_region=True, check_existing=True, filter_blender=True, filter_backup=False, filter_image=False, filter_movie=False, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=8, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA', compress=False, relative_remap=True, copy=False):
         '''Save the current file in the desired location
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @hide_props_region (bool): Collapse the region displaying the operator settings
               (optional)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
            @compress (bool): Write compressed .blend file
               (optional)
            @relative_remap (bool): Remap relative paths when saving to a different directory
               (optional)
            @copy (bool): Save a copy of the actual working state but does not make saved file active
               (optional)
      
         '''
      
         pass

      def save_homefile():
         '''Make the current file the default .blend file
         '''
      
         pass

      def save_mainfile(filepath="", hide_props_region=True, check_existing=True, filter_blender=True, filter_backup=False, filter_image=False, filter_movie=False, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=False, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=8, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA', compress=False, relative_remap=False, exit=False):
         '''Save the current Blender file
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @hide_props_region (bool): Collapse the region displaying the operator settings
               (optional)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
            @compress (bool): Write compressed .blend file
               (optional)
            @relative_remap (bool): Remap relative paths when saving to a different directory
               (optional)
            @exit (bool): Exit Blender after saving
               (optional)
      
         '''
      
         pass

      def save_userpref():
         '''Make the current preferences default
         '''
      
         pass

      def search_menu(type='OPERATOR'):
         '''Pop-up a search menu over all available operators in current context
            Arguments:
            @type (str): in ['OPERATOR', 'MENU'], (optional)
      
         '''
      
         pass

      def set_stereo_3d(display_mode='ANAGLYPH', anaglyph_type='RED_CYAN', interlace_type='ROW_INTERLEAVED', use_interlace_swap=False, use_sidebyside_crosseyed=False):
         '''Toggle 3D stereo support for current window (or change the display mode)
            Arguments:
            @display_mode (str): in ['ANAGLYPH', 'INTERLACE', 'TIMESEQUENTIAL', 'SIDEBYSIDE', 'TOPBOTTOM'], (optional)
            @anaglyph_type (str): in ['RED_CYAN', 'GREEN_MAGENTA', 'YELLOW_BLUE'], (optional)
            @interlace_type (str): in ['ROW_INTERLEAVED', 'COLUMN_INTERLEAVED', 'CHECKERBOARD_INTERLEAVED'], (optional)
            @use_interlace_swap (bool): Swap left and right stereo channels
               (optional)
            @use_sidebyside_crosseyed (bool): Right eye should see left image and vice-versa
               (optional)
      
         '''
      
         pass

      def splash():
         '''Open the splash screen with release info
         '''
      
         pass

      def sysinfo(filepath=""):
         '''Generate system information, saved into a text file
            Arguments:
            @filepath (str): (optional, never None)
      
         '''
      
         pass

      def tool_set_by_id(name="", cycle=False, as_fallback=False, space_type='EMPTY'):
         '''Set the tool by name (for keymaps)
            Arguments:
            @name (str): Identifier of the tool
               (optional, never None)
            @cycle (bool): Cycle through tools in this group
               (optional)
            @as_fallback (bool): Set the fallback tool instead of the primary tool
               (optional)
            @space_type (str): in ['EMPTY', 'VIEW_3D', 'IMAGE_EDITOR', 'NODE_EDITOR', 'SEQUENCE_EDITOR', 'CLIP_EDITOR', 'DOPESHEET_EDITOR', 'GRAPH_EDITOR', 'NLA_EDITOR', 'TEXT_EDITOR', 'CONSOLE', 'INFO', 'TOPBAR', 'STATUSBAR', 'OUTLINER', 'PROPERTIES', 'FILE_BROWSER', 'PREFERENCES'], (optional)
      
         '''
      
         pass

      def tool_set_by_index(index=0, cycle=False, expand=True, as_fallback=False, space_type='EMPTY'):
         '''Set the tool by index (for keymaps)
            Arguments:
            @index (int): in [-inf, inf], (optional)
            @cycle (bool): Cycle through tools in this group
               (optional)
            @expand (bool): Include tool sub-groups
               (optional)
            @as_fallback (bool): Set the fallback tool instead of the primary
               (optional)
            @space_type (str): in ['EMPTY', 'VIEW_3D', 'IMAGE_EDITOR', 'NODE_EDITOR', 'SEQUENCE_EDITOR', 'CLIP_EDITOR', 'DOPESHEET_EDITOR', 'GRAPH_EDITOR', 'NLA_EDITOR', 'TEXT_EDITOR', 'CONSOLE', 'INFO', 'TOPBAR', 'STATUSBAR', 'OUTLINER', 'PROPERTIES', 'FILE_BROWSER', 'PREFERENCES'], (optional)
      
         '''
      
         pass

      def toolbar():
         '''undocumented
         '''
      
         pass

      def toolbar_fallback_pie():
         '''undocumented
         '''
      
         pass

      def toolbar_prompt():
         '''Leader key like functionality for accessing tools
         '''
      
         pass

      def url_open(url=""):
         '''Open a website in the web-browser
            Arguments:
            @url (str): URL to open
               (optional, never None)
      
         '''
      
         pass

      def url_open_preset(type='', id=""):
         '''Open a preset website in the web-browser
            Arguments:
            @type (str): in [], (optional)
            @id (str): Optional identifier
               (optional, never None)
      
         '''
      
         pass

      def usd_export(filepath="", check_existing=True, filter_blender=False, filter_backup=False, filter_image=False, filter_movie=False, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_archive=False, filter_btx=False, filter_collada=False, filter_alembic=False, filter_usd=True, filter_volume=False, filter_folder=True, filter_blenlib=False, filemode=8, display_type='DEFAULT', sort_method='FILE_SORT_ALPHA', selected_objects_only=False, export_animation=False, export_hair=False, export_uvmaps=True, export_normals=True, export_materials=True, use_instancing=False, evaluation_mode='RENDER'):
         '''Export current scene in a USD archive
            Arguments:
            @filepath (str): Path to file
               (optional, never None)
            @check_existing (bool): Check and warn on overwriting existing files
               (optional)
            @filter_blender (bool): (optional)
            @filter_backup (bool): (optional)
            @filter_image (bool): (optional)
            @filter_movie (bool): (optional)
            @filter_python (bool): (optional)
            @filter_font (bool): (optional)
            @filter_sound (bool): (optional)
            @filter_text (bool): (optional)
            @filter_archive (bool): (optional)
            @filter_btx (bool): (optional)
            @filter_collada (bool): (optional)
            @filter_alembic (bool): (optional)
            @filter_usd (bool): (optional)
            @filter_volume (bool): (optional)
            @filter_folder (bool): (optional)
            @filter_blenlib (bool): (optional)
            @filemode (int): The setting for the file browser mode to load a .blend file, a library or a special file
               in [1, 9], (optional)
            @display_type (str): in ['DEFAULT', 'LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL'], (optional)
            @sort_method (str): in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE'], (optional)
            @selected_objects_only (bool): Only selected objects are exported. Unselected parents of selected objects are exported as empty transform
               (optional)
            @export_animation (bool): When checked, the render frame range is exported. When false, only the current frame is exported
               (optional)
            @export_hair (bool): When checked, hair is exported as USD curves
               (optional)
            @export_uvmaps (bool): When checked, all UV maps of exported meshes are included in the export
               (optional)
            @export_normals (bool): When checked, normals of exported meshes are included in the export
               (optional)
            @export_materials (bool): When checked, the viewport settings of materials are exported as USD preview materials, and material assignments are exported as geometry subsets
               (optional)
            @use_instancing (bool): When checked, instanced objects are exported as references in USD. When unchecked, instanced objects are exported as real objects
               (optional)
            @evaluation_mode (str): Determines visibility of objects, modifier settings, and other areas where there are different settings for viewport and rendering
               in ['RENDER', 'VIEWPORT'], (optional)
      
         '''
      
         pass

      def userpref_autoexec_path_add():
         '''Add path to exclude from autoexecution
         '''
      
         pass

      def userpref_autoexec_path_remove(index=0):
         '''Remove path to exclude from autoexecution
            Arguments:
            @index (int): in [0, inf], (optional)
      
         '''
      
         pass

      def window_close():
         '''Close the current window
         '''
      
         pass

      def window_fullscreen_toggle():
         '''Toggle the current window fullscreen
         '''
      
         pass

      def window_new():
         '''Create a new window
         '''
      
         pass

      def window_new_main():
         '''Create a new main window with its own workspace and scene selection
         '''
      
         pass

   class workspace:
      '''Spcecial class, created just to reflect content of bpy.ops.workspace'''

      def add():
         '''Add a new workspace by duplicating the current one or appending one from the user configuration
         '''
      
         pass

      def append_activate(idname="", filepath=""):
         '''Append a workspace and make it the active one in the current window
            Arguments:
            @idname (str): Name of the workspace to append and activate
               (optional, never None)
            @filepath (str): Path to the library
               (optional, never None)
      
         '''
      
         pass

      def delete():
         '''Delete the active workspace
         '''
      
         pass

      def duplicate():
         '''Add a new workspace
         '''
      
         pass

      def reorder_to_back():
         '''Reorder workspace to be first in the list
         '''
      
         pass

      def reorder_to_front():
         '''Reorder workspace to be first in the list
         '''
      
         pass

   class world:
      '''Spcecial class, created just to reflect content of bpy.ops.world'''

      def new():
         '''Create a new world Data-Block
         '''
      
         pass

class types:
   '''A container for all Blender types'''
   
   class bpy_struct:
      '''built-in base class for all classes in bpy.types.

         Note that bpy.types.bpy_struct is not actually available from within blender, it only exists for the purpose of documentation.
      '''

      def as_pointer():
         '''Returns the memory address which holds a pointer to Blender's internal data
            
            @returns (int): int (memory address).
            Note: This is intended only for advanced script writers who need topass blender data to their own C/Python modules.
            
         '''
      
         return int
      

      def driver_add(path, index=-1):
         '''Adds driver(s) to the given property
            
            Arguments:
            @path (string): path to the property to drive, analogous to the fcurve's data path.
            @index (int): array index of the property drive. Defaults to -1 for all indices or a single channel if the property is not an array.
      
            @returns (bpy.types.FCurve): The driver(s) added.
         '''
      
         return bpy.types.FCurve
      

      def driver_remove(path, index=-1):
         '''Remove driver(s) from the given property
            
            Arguments:
            @path (string): path to the property to drive, analogous to the fcurve's data path.
            @index (int): array index of the property drive. Defaults to -1 for all indices or a single channel if the property is not an array.
      
            @returns (bool): Success of driver removal.
         '''
      
         return bool
      

      def get(key, default=None):
         '''Returns the value of the custom property assigned to key or default
            when not found (matches Python's dictionary function of the same name).
            
            Arguments:
            @key (string): The key associated with the custom property.
            @default (Undefined): Optional argument for the value to return if*key* is not found.
            .. note::
            Only the bpy.types.ID, bpy.types.Bone and
            bpy.types.PoseBone classes support custom properties.
            
      
         '''
      
         pass
      

      def is_property_hidden(property):
         '''Check if a property is hidden.
            
            @returns (bool): True when the property is hidden.
         '''
      
         return bool
      

      def is_property_overridable_library(property):
         '''Check if a property is overridable.
            
            @returns (bool): True when the property is overridable.
         '''
      
         return bool
      

      def is_property_readonly(property):
         '''Check if a property is readonly.
            
            @returns (bool): True when the property is readonly (not writable).
         '''
      
         return bool
      

      def is_property_set(property):
         '''Check if a property is set, use for testing operator properties.
            
            @returns (bool): True when the property has been set.
         '''
      
         return bool
      

      def items():
         '''Returns the items of this objects custom properties (matches Python's
            dictionary function of the same name).
            
            @returns ([(str, types.bpy_struct)]): custom property key, value pairs... note::
            Only the bpy.types.ID, bpy.types.Bone and
            bpy.types.PoseBone classes support custom properties.
            
         '''
      
         return [(str, types.bpy_struct)]
      

      def keyframe_delete(data_path, index=-1, frame=bpy.context.scene.frame_current, group=""):
         '''Remove a keyframe from this properties fcurve.
            
            Arguments:
            @data_path (string): path to the property to remove a key, analogous to the fcurve's data path.
            @index (int): array index of the property to remove a key. Defaults to -1 removing all indices or a single channel if the property is not an array.
            @frame (float): The frame on which the keyframe is deleted, defaulting to the current frame.
            @group (str): The name of the group the F-Curve should be added to if it doesn't exist yet.
      
            @returns (bool): Success of keyframe deleation.
         '''
      
         return bool
      

      def keyframe_insert(data_path, index=-1, frame=bpy.context.scene.frame_current, group="", options=set()):
         '''Insert a keyframe on the property given, adding fcurves and animation data when necessary.
            
            Arguments:
            @data_path (string): path to the property to key, analogous to the fcurve's data path.
            @index (int): array index of the property to key.Defaults to -1 which will key all indices or a single channel if the property is not an array.
            
            @frame (float): The frame on which the keyframe is inserted, defaulting to the current frame.
            @group (str): The name of the group the F-Curve should be added to if it doesn't exist yet.
            @options: Optional set of flags:- INSERTKEY_NEEDED Only insert keyframes where they're needed in the relevant F-Curves.
            - INSERTKEY_VISUAL Insert keyframes based on 'visual transforms'.
            - INSERTKEY_XYZ_TO_RGB Color for newly added transformation F-Curves (Location, Rotation, Scale) is based on the transform axis.
            - INSERTKEY_REPLACE Only replace already existing keyframes.
            - INSERTKEY_AVAILABLE Only insert into already existing F-Curves.
            - INSERTKEY_CYCLE_AWARE Take cyclic extrapolation into account (Cycle-Aware Keying option).
            
      
            @returns (bool): Success of keyframe insertion.
         '''
      
         return bool
      

      def keys():
         '''Returns the keys of this objects custom properties (matches Python's
            dictionary function of the same name).
            
            @returns ([str]): custom property keys... note::
            Only the bpy.types.ID, bpy.types.Bone and
            bpy.types.PoseBone classes support custom properties.
            
         '''
      
         return [str]
      

      def path_from_id(property=""):
         '''Returns the data path from the ID to this object (string).
            
            Arguments:
            @property (string): Optional property name which can be used if the path isto a property of this object.
            
      
            @returns (str): The path from bpy.types.bpy_struct.id_datato this struct and property (when given).
            
         '''
      
         return str
      

      def path_resolve(path, coerce=True):
         '''Returns the property from the path, raise an exception when not found.
            
            Arguments:
            @path (string): path which this property resolves.
            @coerce (boolean): optional argument, when True, the property will be convertedinto its Python representation.
            
      
         '''
      
         pass
      

      def pop(key, default=None):
         '''Remove and return the value of the custom property assigned to key or default
            when not found (matches Python's dictionary function of the same name).
            
            Arguments:
            @key (string): The key associated with the custom property.
            @default (Undefined): Optional argument for the value to return if*key* is not found.
            .. note::
            Only the bpy.types.ID, bpy.types.Bone and
            bpy.types.PoseBone classes support custom properties.
            
      
         '''
      
         pass
      

      def property_overridable_library_set(property, overridable):
         '''Define a property as overridable or not (only for custom properties!).
            
            @returns (bool): True when the overridable status of the property was successfully set.
         '''
      
         return bool
      

      def property_unset(property):
         '''Unset a property, will use default value afterward.
            
         '''
      
         pass
      

      def type_recast():
         '''Return a new instance, this is needed because types
            such as textures can be changed at runtime.
            
            @returns (bpy_struct): a new instance of this object with the type initialized again.
         '''
      
         return bpy_struct
      

      def values():
         '''Returns the values of this objects custom properties (matches Python's
            dictionary function of the same name).
            
            @returns (list): custom property values... note::
            Only the bpy.types.ID, bpy.types.Bone and
            bpy.types.PoseBone classes support custom properties.
            
         '''
      
         return list
      

      id_data = None
      '''The bpy.types.ID object this datablock is from or None, (not available for all data types)
         
      '''
      



   class Action(types.ID):
      '''A collection of F-Curves for animation
      '''
   
      fcurves = types.ActionFCurves # (read only)
      '''The individual F-Curves that make up the action
         @returns: ActionFCurves Collection of FCurve
      '''
      
      frame_range = float # (read only)
      '''The final frame range of all F-Curves within this action
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      groups = types.ActionGroups # (read only)
      '''Convenient groupings of F-Curves
         @returns: ActionGroups Collection of ActionGroup
      '''
      
      id_root = str
      '''Type of ID block that action can be used on - DO NOT CHANGE UNLESS YOU KNOW WHAT YOU ARE DOING
         @returns: enum in ['ACTION', 'ARMATURE', 'BRUSH', 'CAMERA', 'CACHEFILE', 'CURVE', 'FONT', 'GREASEPENCIL', 'COLLECTION', 'IMAGE', 'KEY', 'LIGHT', 'LIBRARY', 'LINESTYLE', 'LATTICE', 'MASK', 'MATERIAL', 'META', 'MESH', 'MOVIECLIP', 'NODETREE', 'OBJECT', 'PAINTCURVE', 'PALETTE', 'PARTICLE', 'LIGHT_PROBE', 'SCENE', 'SOUND', 'SPEAKER', 'TEXT', 'TEXTURE', 'VOLUME', 'WINDOWMANAGER', 'WORLD', 'WORKSPACE']
      '''
      
      pose_markers = types.ActionPoseMarkers # (read only)
      '''Markers specific to this action, for labeling poses
         @returns: ActionPoseMarkers Collection of TimelineMarker
      '''
      
   class ActionConstraint(types.Constraint):
      '''Map an action to the transform axes of a bone
      '''
   
      action = types.Action
      '''The constraining action
         @returns: Action
      '''
      
      frame_end = int
      '''Last frame of the Action to use
         @returns: int in [-1048574, 1048574]
      '''
      
      frame_start = int
      '''First frame of the Action to use
         @returns: int in [-1048574, 1048574]
      '''
      
      max = float
      '''Maximum value for target channel range
         @returns: float in [-1000, 1000]
      '''
      
      min = float
      '''Minimum value for target channel range
         @returns: float in [-1000, 1000]
      '''
      
      mix_mode = str
      '''Specify how existing transformations and the action channels are combined
         @returns: enum in ['BEFORE', 'AFTER', 'AFTER_FULL']
      '''
      
      subtarget = str
      '''Armature bone, mesh or lattice vertex group, ...
         @returns: string, (never None)
      '''
      
      target = types.Object
      '''Target object
         @returns: Object
      '''
      
      transform_channel = str
      '''Transformation channel from the target that is used to key the Action
         @returns: enum in ['LOCATION_X', 'LOCATION_Y', 'LOCATION_Z', 'ROTATION_X', 'ROTATION_Y', 'ROTATION_Z', 'SCALE_X', 'SCALE_Y', 'SCALE_Z']
      '''
      
      use_bone_object_action = bool
      '''Bones only: apply the object's transformation channels of the action to the constrained bone, instead of bone's channels
         @returns: boolean
      '''
      
   class ActionFCurves(types.bpy_struct):
      '''Collection of action F-Curves
      '''
   
      def new(data_path, index=0, action_group=""):
         '''Add an F-Curve to the action
            Arguments:
            @data_path (str): F-Curve data path to use
               (never None)
            @index (int): Array index
               in [0, inf], (optional)
            @action_group (str): Acton group to add this F-Curve into
               (optional, never None)
      
            @returns (types.FCurve): Newly created F-Curve
               
         '''
      
         return types.FCurve

      def find(data_path, index=0):
         '''Find an F-Curve. Note that this function performs a linear scan of all F-Curves in the action.
            Arguments:
            @data_path (str): F-Curve data path
               (never None)
            @index (int): Array index
               in [0, inf], (optional)
      
            @returns (types.FCurve): The found F-Curve, or None if it doesn't exist
               
         '''
      
         return types.FCurve

      def remove(fcurve):
         '''Remove action group
            Arguments:
            @fcurve (FCurve): F-Curve to remove
               (never None)
      
         '''
      
         pass

   class ActionGroup(types.bpy_struct):
      '''Groups of F-Curves
      '''
   
      channels = types.FCurve # (read only)
      '''F-Curves in this group
         @returns: Collection of FCurve
      '''
      
      color_set = str
      '''Custom color set to use
         @returns: enum in ['DEFAULT', 'THEME01', 'THEME02', 'THEME03', 'THEME04', 'THEME05', 'THEME06', 'THEME07', 'THEME08', 'THEME09', 'THEME10', 'THEME11', 'THEME12', 'THEME13', 'THEME14', 'THEME15', 'THEME16', 'THEME17', 'THEME18', 'THEME19', 'THEME20', 'CUSTOM']
      '''
      
      colors = types.ThemeBoneColorSet # (read only)
      '''Copy of the colors associated with the group's color set
         @returns: ThemeBoneColorSet, (never None)
      '''
      
      is_custom_color_set = bool # (read only)
      '''Color set is user-defined instead of a fixed theme color set
         @returns: boolean
      '''
      
      lock = bool
      '''Action group is locked
         @returns: boolean
      '''
      
      name = str
      '''
         @returns: string, (never None)
      '''
      
      select = bool
      '''Action group is selected
         @returns: boolean
      '''
      
      show_expanded = bool
      '''Action group is expanded except in graph editor
         @returns: boolean
      '''
      
      show_expanded_graph = bool
      '''Action group is expanded in graph editor
         @returns: boolean
      '''
      
      use_pin = bool
      '''
         @returns: boolean
      '''
      
   class ActionGroups(types.bpy_struct):
      '''Collection of action groups
      '''
   
      def new(name):
         '''Create a new action group and add it to the action
            Arguments:
            @name (str): New name for the action group
               (never None)
      
            @returns (types.ActionGroup): Newly created action group
               
         '''
      
         return types.ActionGroup

      def remove(action_group):
         '''Remove action group
            Arguments:
            @action_group (ActionGroup): Action group to remove
               (never None)
      
         '''
      
         pass

   class ActionPoseMarkers(types.bpy_struct):
      '''Collection of timeline markers
      '''
   
      active = types.TimelineMarker
      '''Active pose marker for this action
         @returns: TimelineMarker
      '''
      
      active_index = int
      '''Index of active pose marker
         @returns: int in [0, inf]
      '''
      
      def new(name):
         '''Add a pose marker to the action
            Arguments:
            @name (str): New name for the marker (not unique)
               (never None)
      
            @returns (types.TimelineMarker): Newly created marker
               
         '''
      
         return types.TimelineMarker

      def remove(marker):
         '''Remove a timeline marker
            Arguments:
            @marker (TimelineMarker): Timeline marker to remove
               (never None)
      
         '''
      
         pass

   class AddSequence(types.EffectSequence):
      '''Add Sequence
      '''
   
      input_1 = types.Sequence
      '''First input for the effect strip
         @returns: Sequence, (never None)
      '''
      
      input_2 = types.Sequence
      '''Second input for the effect strip
         @returns: Sequence, (never None)
      '''
      
      input_count = int # (read only)
      '''
         @returns: int in [0, inf]
      '''
      
   class Addon(types.bpy_struct):
      '''Python add-ons to be loaded automatically
      '''
   
      module = str
      '''Module name
         @returns: string, (never None)
      '''
      
      preferences = types.AddonPreferences # (read only)
      '''
         @returns: AddonPreferences
      '''
      
   class AddonPreferences(types.bpy_struct):
      '''
      '''
   
      bl_idname = str
      '''
         @returns: string, (never None)
      '''
      
   class Addons(types.bpy_struct):
      '''Collection of add-ons
      '''
   
      @classmethod
      def new():
         '''Add a new add-on
            @returns (types.Addon): Add-on data
               
         '''
      
         return types.Addon

      @classmethod
      def remove(addon):
         '''Remove add-on
            Arguments:
            @addon (Addon): Add-on to remove
               (never None)
      
         '''
      
         pass

   class AdjustmentSequence(types.EffectSequence):
      '''Sequence strip to perform filter adjustments to layers below
      '''
   
      animation_offset_end = int
      '''Animation end offset (trim end)
         @returns: int in [0, inf]
      '''
      
      animation_offset_start = int
      '''Animation start offset (trim start)
         @returns: int in [0, inf]
      '''
      
      input_count = int # (read only)
      '''
         @returns: int in [0, inf]
      '''
      
   class AlembicObjectPath(types.bpy_struct):
      '''Path of an object inside of an Alembic archive
      '''
   
      path = str
      '''Object path
         @returns: string, (never None)
      '''
      
   class AlembicObjectPaths(types.bpy_struct):
      '''Collection of object paths
      '''
   
   class AlphaOverSequence(types.EffectSequence):
      '''Alpha Over Sequence
      '''
   
      input_1 = types.Sequence
      '''First input for the effect strip
         @returns: Sequence, (never None)
      '''
      
      input_2 = types.Sequence
      '''Second input for the effect strip
         @returns: Sequence, (never None)
      '''
      
      input_count = int # (read only)
      '''
         @returns: int in [0, inf]
      '''
      
   class AlphaUnderSequence(types.EffectSequence):
      '''Alpha Under Sequence
      '''
   
      input_1 = types.Sequence
      '''First input for the effect strip
         @returns: Sequence, (never None)
      '''
      
      input_2 = types.Sequence
      '''Second input for the effect strip
         @returns: Sequence, (never None)
      '''
      
      input_count = int # (read only)
      '''
         @returns: int in [0, inf]
      '''
      
   class AnimData(types.bpy_struct):
      '''Animation data for data-block
      '''
   
      action = types.Action
      '''Active Action for this data-block
         @returns: Action
      '''
      
      action_blend_type = str
      '''Method used for combining Active Action's result with result of NLA stack
         @returns: enum in ['REPLACE', 'COMBINE', 'ADD', 'SUBTRACT', 'MULTIPLY']
      '''
      
      action_extrapolation = str
      '''Action to take for gaps past the Active Action's range (when evaluating with NLA)
         @returns: enum in ['NOTHING', 'HOLD', 'HOLD_FORWARD']
      '''
      
      action_influence = float
      '''Amount the Active Action contributes to the result of the NLA stack
         @returns: float in [0, 1]
      '''
      
      drivers = types.AnimDataDrivers # (read only)
      '''The Drivers/Expressions for this data-block
         @returns: AnimDataDrivers Collection of FCurve
      '''
      
      nla_tracks = types.NlaTracks # (read only)
      '''NLA Tracks (i.e. Animation Layers)
         @returns: NlaTracks Collection of NlaTrack
      '''
      
      use_nla = bool
      '''NLA stack is evaluated when evaluating this block
         @returns: boolean
      '''
      
      use_pin = bool
      '''
         @returns: boolean
      '''
      
      use_tweak_mode = bool
      '''Whether to enable or disable tweak mode in NLA
         @returns: boolean
      '''
      
      def nla_tweak_strip_time_to_scene(frame, invert=False):
         '''Convert a time value from the local time of the tweaked strip to scene time, exactly as done by built-in key editing tools. Returns the input time unchanged if not tweaking.
            Arguments:
            @frame (float): Input time
               in [-1.04857e+06, 1.04857e+06]
            @invert (bool): Convert scene time to action time
               (optional)
      
            @returns (float): Converted time
               in [-1.04857e+06, 1.04857e+06]
         '''
      
         return float

   class AnimDataDrivers(types.bpy_struct):
      '''Collection of Driver F-Curves
      '''
   
      def new(data_path, index=0):
         '''new
            Arguments:
            @data_path (str): F-Curve data path to use
               (never None)
            @index (int): Array index
               in [0, inf], (optional)
      
            @returns (types.FCurve): Newly Driver F-Curve
               
         '''
      
         return types.FCurve

      def remove(driver):
         '''remove
            Arguments:
            @driver (FCurve): (never None)
      
         '''
      
         pass

      def from_existing(src_driver=None):
         '''Add a new driver given an existing one
            Arguments:
            @src_driver (FCurve): Existing Driver F-Curve to use as template for a new one
               (optional)
      
            @returns (types.FCurve): New Driver F-Curve
               
         '''
      
         return types.FCurve

      def find(data_path, index=0):
         '''Find a driver F-Curve. Note that this function performs a linear scan of all driver F-Curves.
            Arguments:
            @data_path (str): F-Curve data path
               (never None)
            @index (int): Array index
               in [0, inf], (optional)
      
            @returns (types.FCurve): The found F-Curve, or None if it doesn't exist
               
         '''
      
         return types.FCurve

   class AnimViz(types.bpy_struct):
      '''Settings for the visualization of motion
      '''
   
      motion_path = types.AnimVizMotionPaths # (read only)
      '''Motion Path settings for visualization
         @returns: AnimVizMotionPaths, (never None)
      '''
      
   class AnimVizMotionPaths(types.bpy_struct):
      '''Motion Path settings for animation visualization
      '''
   
      bake_location = str
      '''When calculating Bone Paths, use Head or Tips
         @returns: enum in ['HEADS', 'TAILS']
      '''
      
      frame_after = int
      '''Number of frames to show after the current frame (only for 'Around Current Frame' Onion-skinning method)
         @returns: int in [1, 524287]
      '''
      
      frame_before = int
      '''Number of frames to show before the current frame (only for 'Around Current Frame' Onion-skinning method)
         @returns: int in [1, 524287]
      '''
      
      frame_end = int
      '''End frame of range of paths to display/calculate (not for 'Around Current Frame' Onion-skinning method)
         @returns: int in [-inf, inf]
      '''
      
      frame_start = int
      '''Starting frame of range of paths to display/calculate (not for 'Around Current Frame' Onion-skinning method)
         @returns: int in [-inf, inf]
      '''
      
      frame_step = int
      '''Number of frames between paths shown (not for 'On Keyframes' Onion-skinning method)
         @returns: int in [1, 100]
      '''
      
      has_motion_paths = bool # (read only)
      '''Are there any bone paths that will need updating (read-only)
         @returns: boolean
      '''
      
      show_frame_numbers = bool
      '''Show frame numbers on Motion Paths
         @returns: boolean
      '''
      
      show_keyframe_action_all = bool
      '''For bone motion paths, search whole Action for keyframes instead of in group with matching name only (is slower)
         @returns: boolean
      '''
      
      show_keyframe_highlight = bool
      '''Emphasize position of keyframes on Motion Paths
         @returns: boolean
      '''
      
      show_keyframe_numbers = bool
      '''Show frame numbers of Keyframes on Motion Paths
         @returns: boolean
      '''
      
      type = str
      '''Type of range to show for Motion Paths
         @returns: enum in ['CURRENT_FRAME', 'RANGE']
      '''
      
   class AnyType(types.bpy_struct):
      '''RNA type used for pointers to any possible data
      '''
   
   class Area(types.bpy_struct):
      '''Area in a subdivided screen, containing an editor
      '''
   
      height = int # (read only)
      '''Area height
         @returns: int in [0, 32767]
      '''
      
      regions = types.Region # (read only)
      '''Regions this area is subdivided in
         @returns: Collection of Region
      '''
      
      show_menus = bool
      '''Show menus in the header
         @returns: boolean
      '''
      
      spaces = types.AreaSpaces # (read only)
      '''Spaces contained in this area, the first being the active space (NOTE: Useful for example to restore a previously used 3D view space in a certain area to get the old view orientation)
         @returns: AreaSpaces Collection of Space
      '''
      
      type = str
      '''Current editor type for this area
         @returns: enum in ['EMPTY', 'VIEW_3D', 'IMAGE_EDITOR', 'NODE_EDITOR', 'SEQUENCE_EDITOR', 'CLIP_EDITOR', 'DOPESHEET_EDITOR', 'GRAPH_EDITOR', 'NLA_EDITOR', 'TEXT_EDITOR', 'CONSOLE', 'INFO', 'TOPBAR', 'STATUSBAR', 'OUTLINER', 'PROPERTIES', 'FILE_BROWSER', 'PREFERENCES']
      '''
      
      ui_type = str
      '''Current editor type for this area
         @returns: enum in []
      '''
      
      width = int # (read only)
      '''Area width
         @returns: int in [0, 32767]
      '''
      
      x = int # (read only)
      '''The window relative vertical location of the area
         @returns: int in [-inf, inf]
      '''
      
      y = int # (read only)
      '''The window relative horizontal location of the area
         @returns: int in [-inf, inf]
      '''
      
      def tag_redraw():
         '''tag_redraw
         '''
      
         pass

      def header_text_set(text):
         '''Set the header status text
            Arguments:
            @text (str): New string for the header, None clears the text
               
      
         '''
      
         pass

   class AreaLight(types.Light):
      '''Directional area Light
      '''
   
      constant_coefficient = float
      '''Constant distance attenuation coefficient
         @returns: float in [0, inf]
      '''
      
      contact_shadow_bias = float
      '''Bias to avoid self shadowing
         @returns: float in [0.001, 9999]
      '''
      
      contact_shadow_distance = float
      '''World space distance in which to search for screen space occluder
         @returns: float in [0, 9999]
      '''
      
      contact_shadow_thickness = float
      '''Pixel thickness used to detect occlusion
         @returns: float in [0, 9999]
      '''
      
      energy = float
      '''Amount of light emitted
         @returns: float in [-inf, inf]
      '''
      
      falloff_curve = types.CurveMapping # (read only)
      '''Custom light falloff curve
         @returns: CurveMapping
      '''
      
      falloff_type = str
      '''Intensity Decay with distance
         @returns: enum in ['CONSTANT', 'INVERSE_LINEAR', 'INVERSE_SQUARE', 'INVERSE_COEFFICIENTS', 'CUSTOM_CURVE', 'LINEAR_QUADRATIC_WEIGHTED']
      '''
      
      linear_attenuation = float
      '''Linear distance attenuation
         @returns: float in [0, 1]
      '''
      
      linear_coefficient = float
      '''Linear distance attenuation coefficient
         @returns: float in [0, inf]
      '''
      
      quadratic_attenuation = float
      '''Quadratic distance attenuation
         @returns: float in [0, 1]
      '''
      
      quadratic_coefficient = float
      '''Quadratic distance attenuation coefficient
         @returns: float in [0, inf]
      '''
      
      shadow_buffer_bias = float
      '''Bias for reducing self shadowing
         @returns: float in [0, inf]
      '''
      
      shadow_buffer_clip_start = float
      '''Shadow map clip start, below which objects will not generate shadows
         @returns: float in [1e-06, inf]
      '''
      
      shadow_buffer_samples = int
      '''Number of shadow buffer samples
         @returns: int in [1, 16]
      '''
      
      shadow_buffer_size = int
      '''Resolution of the shadow buffer, higher values give crisper shadows but use more memory
         @returns: int in [128, 10240]
      '''
      
      shadow_color = float
      '''Color of shadows cast by the light
         @returns: float array of 3 items in [0, inf]
      '''
      
      shadow_soft_size = float
      '''Light size for ray shadow sampling (Raytraced shadows)
         @returns: float in [0, inf]
      '''
      
      shape = str
      '''Shape of the area Light
         @returns: enum in ['SQUARE', 'RECTANGLE', 'DISK', 'ELLIPSE']
      '''
      
      size = float
      '''Size of the area of the area light, X direction size for rectangle shapes
         @returns: float in [0, inf]
      '''
      
      size_y = float
      '''Size of the area of the area light in the Y direction for rectangle shapes
         @returns: float in [0, inf]
      '''
      
      use_contact_shadow = bool
      '''Use screen space raytracing to have correct shadowing near occluder, or for small features that does not appear in shadow maps
         @returns: boolean
      '''
      
      use_shadow = bool
      '''
         @returns: boolean
      '''
      
   class AreaSpaces(types.bpy_struct):
      '''Collection of spaces
      '''
   
      active = types.Space # (read only)
      '''Space currently being displayed in this area
         @returns: Space
      '''
      
   class Armature(types.ID):
      '''Armature data-block containing a hierarchy of bones, usually used for rigging characters
      '''
   
      animation_data = types.AnimData # (read only)
      '''Animation data for this data-block
         @returns: AnimData
      '''
      
      bones = types.ArmatureBones # (read only)
      '''
         @returns: ArmatureBones Collection of Bone
      '''
      
      display_type = str
      '''
         @returns: enum in ['OCTAHEDRAL', 'STICK', 'BBONE', 'ENVELOPE', 'WIRE']
      '''
      
      edit_bones = types.ArmatureEditBones # (read only)
      '''
         @returns: ArmatureEditBones Collection of EditBone
      '''
      
      is_editmode = bool # (read only)
      '''True when used in editmode
         @returns: boolean
      '''
      
      layers = bool
      '''Armature layer visibility
         @returns: boolean array of 32 items
      '''
      
      layers_protected = bool
      '''Protected layers in Proxy Instances are restored to Proxy settings on file reload and undo
         @returns: boolean array of 32 items
      '''
      
      pose_position = str
      '''Show armature in binding pose or final posed state
         @returns: enum in ['POSE', 'REST']
      '''
      
      show_axes = bool
      '''Display bone axes
         @returns: boolean
      '''
      
      show_bone_custom_shapes = bool
      '''Display bones with their custom shapes
         @returns: boolean
      '''
      
      show_group_colors = bool
      '''Display bone group colors
         @returns: boolean
      '''
      
      show_names = bool
      '''Display bone names
         @returns: boolean
      '''
      
      use_mirror_x = bool
      '''Apply changes to matching bone on opposite side of X-Axis
         @returns: boolean
      '''
      
      def transform(matrix):
         '''Transform armature bones by a matrix
            Arguments:
            @matrix (float): Matrix
               multi-dimensional array of 4 * 4 items in [-inf, inf]
      
         '''
      
         pass

   class ArmatureBones(types.bpy_struct):
      '''Collection of armature bones
      '''
   
      active = types.Bone
      '''Armature's active bone
         @returns: Bone
      '''
      
   class ArmatureConstraint(types.Constraint):
      '''Applies transformations done by the Armature modifier
      '''
   
      targets = types.ArmatureConstraintTargets # (read only)
      '''Target Bones
         @returns: ArmatureConstraintTargets Collection of ConstraintTargetBone
      '''
      
      use_bone_envelopes = bool
      '''Multiply weights by envelope for all bones, instead of acting like Vertex Group based blending. The specified weights are still used, and only the listed bones are considered
         @returns: boolean
      '''
      
      use_current_location = bool
      '''Use the current bone location for envelopes and choosing B-Bone segments instead of rest position
         @returns: boolean
      '''
      
      use_deform_preserve_volume = bool
      '''Deform rotation interpolation with quaternions
         @returns: boolean
      '''
      
   class ArmatureConstraintTargets(types.bpy_struct):
      '''Collection of target bones and weights
      '''
   
      def new():
         '''Add a new target to the constraint
            @returns (types.ConstraintTargetBone): New target bone
               
         '''
      
         return types.ConstraintTargetBone

      def remove(target):
         '''Delete target from the constraint
            Arguments:
            @target (ConstraintTargetBone): Target to remove
               (never None)
      
         '''
      
         pass

      def clear():
         '''Delete all targets from object
         '''
      
         pass

   class ArmatureEditBones(types.bpy_struct):
      '''Collection of armature edit bones
      '''
   
      active = types.EditBone
      '''Armatures active edit bone
         @returns: EditBone
      '''
      
      def new(name):
         '''Add a new bone
            Arguments:
            @name (str): New name for the bone
               (never None)
      
            @returns (types.EditBone): Newly created edit bone
               
         '''
      
         return types.EditBone

      def remove(bone):
         '''Remove an existing bone from the armature
            Arguments:
            @bone (EditBone): EditBone to remove
               (never None)
      
         '''
      
         pass

   class ArmatureGpencilModifier(types.GpencilModifier):
      '''Change stroke using armature to deform modifier
      '''
   
      invert_vertex_group = bool
      '''Invert vertex group influence
         @returns: boolean
      '''
      
      object = types.Object
      '''Armature object to deform with
         @returns: Object
      '''
      
      use_bone_envelopes = bool
      '''Bind Bone envelopes to armature modifier
         @returns: boolean
      '''
      
      use_deform_preserve_volume = bool
      '''Deform rotation interpolation with quaternions
         @returns: boolean
      '''
      
      use_vertex_groups = bool
      '''Bind vertex groups to armature modifier
         @returns: boolean
      '''
      
      vertex_group = str
      '''Name of Vertex Group which determines influence of modifier per point
         @returns: string, (never None)
      '''
      
   class ArmatureModifier(types.Modifier):
      '''Armature deformation modifier
      '''
   
      invert_vertex_group = bool
      '''Invert vertex group influence
         @returns: boolean
      '''
      
      object = types.Object
      '''Armature object to deform with
         @returns: Object
      '''
      
      use_bone_envelopes = bool
      '''Bind Bone envelopes to armature modifier
         @returns: boolean
      '''
      
      use_deform_preserve_volume = bool
      '''Deform rotation interpolation with quaternions
         @returns: boolean
      '''
      
      use_multi_modifier = bool
      '''Use same input as previous modifier, and mix results using overall vgroup
         @returns: boolean
      '''
      
      use_vertex_groups = bool
      '''Bind vertex groups to armature modifier
         @returns: boolean
      '''
      
      vertex_group = str
      '''Name of Vertex Group which determines influence of modifier per point
         @returns: string, (never None)
      '''
      
   class ArrayGpencilModifier(types.GpencilModifier):
      '''Create grid of duplicate instances
      '''
   
      constant_offset = float
      '''Value for the distance between items
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      count = int
      '''Number of items
         @returns: int in [1, 32767]
      '''
      
      invert_layer_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_layers = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_material_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_materials = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      layer = str
      '''Layer name
         @returns: string, (never None)
      '''
      
      layer_pass = int
      '''Layer pass index
         @returns: int in [0, 100]
      '''
      
      material = str
      '''Material name
         @returns: string, (never None)
      '''
      
      offset_object = types.Object
      '''Use the location and rotation of another object to determine the distance and rotational change between arrayed items
         @returns: Object
      '''
      
      pass_index = int
      '''Pass index
         @returns: int in [0, 100]
      '''
      
      random_offset = float
      '''Value for changes in location
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      random_rotation = float
      '''Value for changes in rotation
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      random_scale = float
      '''Value for changes in scale
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      relative_offset = float
      '''The size of the geometry will determine the distance between arrayed items
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      replace_material = int
      '''Index of the material used for generated strokes (0 keep original material)
         @returns: int in [0, 32767]
      '''
      
      seed = int
      '''Random seed
         @returns: int in [0, inf]
      '''
      
      use_constant_offset = bool
      '''Enable offset
         @returns: boolean
      '''
      
      use_object_offset = bool
      '''Enable object offset
         @returns: boolean
      '''
      
      use_relative_offset = bool
      '''Enable shift
         @returns: boolean
      '''
      
   class ArrayModifier(types.Modifier):
      '''Array duplication modifier
      '''
   
      constant_offset_displace = float
      '''Value for the distance between arrayed items
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      count = int
      '''Number of duplicates to make
         @returns: int in [1, inf]
      '''
      
      curve = types.Object
      '''Curve object to fit array length to
         @returns: Object
      '''
      
      end_cap = types.Object
      '''Mesh object to use as an end cap
         @returns: Object
      '''
      
      fit_length = float
      '''Length to fit array within
         @returns: float in [0, inf]
      '''
      
      fit_type = str
      '''Array length calculation method
         @returns: enum in ['FIXED_COUNT', 'FIT_LENGTH', 'FIT_CURVE']
      '''
      
      merge_threshold = float
      '''Limit below which to merge vertices
         @returns: float in [0, inf]
      '''
      
      offset_object = types.Object
      '''Use the location and rotation of another object to determine the distance and rotational change between arrayed items
         @returns: Object
      '''
      
      offset_u = float
      '''Amount to offset array UVs on the U axis
         @returns: float in [-1, 1]
      '''
      
      offset_v = float
      '''Amount to offset array UVs on the V axis
         @returns: float in [-1, 1]
      '''
      
      relative_offset_displace = float
      '''The size of the geometry will determine the distance between arrayed items
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      start_cap = types.Object
      '''Mesh object to use as a start cap
         @returns: Object
      '''
      
      use_constant_offset = bool
      '''Add a constant offset
         @returns: boolean
      '''
      
      use_merge_vertices = bool
      '''Merge vertices in adjacent duplicates
         @returns: boolean
      '''
      
      use_merge_vertices_cap = bool
      '''Merge vertices in first and last duplicates
         @returns: boolean
      '''
      
      use_object_offset = bool
      '''Add another object's transformation to the total offset
         @returns: boolean
      '''
      
      use_relative_offset = bool
      '''Add an offset relative to the object's bounding box
         @returns: boolean
      '''
      
   class Available(types.KeyingSetInfo):
      '''
      '''
   
      def generate(_ksi, _context, ks, data):
         
      
         pass
      
      def iterator(ksi, context, ks):
         
      
         pass
      
      def poll(ksi, context):
         
      
         pass
      
   class BakePixel(types.bpy_struct):
      '''
      '''
   
      du_dx = float # (read only)
      '''
         @returns: float in [-inf, inf]
      '''
      
      du_dy = float # (read only)
      '''
         @returns: float in [-inf, inf]
      '''
      
      dv_dx = float # (read only)
      '''
         @returns: float in [-inf, inf]
      '''
      
      dv_dy = float # (read only)
      '''
         @returns: float in [-inf, inf]
      '''
      
      next = types.BakePixel # (read only)
      '''
         @returns: BakePixel
      '''
      
      object_id = int # (read only)
      '''
         @returns: int in [-inf, inf]
      '''
      
      primitive_id = int # (read only)
      '''
         @returns: int in [-inf, inf]
      '''
      
      uv = float # (read only)
      '''
         @returns: float array of 2 items in [-inf, inf]
      '''
      
   class BakeSettings(types.bpy_struct):
      '''Bake data for a Scene data-block
      '''
   
      cage_extrusion = float
      '''Distance to use for the inward ray cast when using selected to active
         @returns: float in [0, inf]
      '''
      
      cage_object = types.Object
      '''Object to use as cage instead of calculating the cage from the active object with cage extrusion
         @returns: Object
      '''
      
      filepath = str
      '''Image filepath to use when saving externally
         @returns: string, (never None)
      '''
      
      height = int
      '''Vertical dimension of the baking map
         @returns: int in [4, 10000]
      '''
      
      image_settings = types.ImageFormatSettings # (read only)
      '''
         @returns: ImageFormatSettings, (never None)
      '''
      
      margin = int
      '''Extends the baked result as a post process filter
         @returns: int in [0, 32767]
      '''
      
      normal_b = str
      '''Axis to bake in blue channel
         @returns: enum in ['POS_X', 'POS_Y', 'POS_Z', 'NEG_X', 'NEG_Y', 'NEG_Z']
      '''
      
      normal_g = str
      '''Axis to bake in green channel
         @returns: enum in ['POS_X', 'POS_Y', 'POS_Z', 'NEG_X', 'NEG_Y', 'NEG_Z']
      '''
      
      normal_r = str
      '''Axis to bake in red channel
         @returns: enum in ['POS_X', 'POS_Y', 'POS_Z', 'NEG_X', 'NEG_Y', 'NEG_Z']
      '''
      
      normal_space = str
      '''Choose normal space for baking
         @returns: enum in ['OBJECT', 'TANGENT']
      '''
      
      pass_filter = str # (read only)
      '''Passes to include in the active baking pass
         @returns: enum set in {'NONE', 'AO', 'EMIT', 'DIRECT', 'INDIRECT', 'COLOR', 'DIFFUSE', 'GLOSSY', 'TRANSMISSION'}
      '''
      
      save_mode = str
      '''Choose how to save the baking map
         @returns: enum in ['INTERNAL', 'EXTERNAL']
      '''
      
      use_automatic_name = bool
      '''Automatically name the output file with the pass type (external only)
         @returns: boolean
      '''
      
      use_cage = bool
      '''Cast rays to active object from a cage
         @returns: boolean
      '''
      
      use_clear = bool
      '''Clear Images before baking (internal only)
         @returns: boolean
      '''
      
      use_pass_ambient_occlusion = bool
      '''Add ambient occlusion contribution
         @returns: boolean
      '''
      
      use_pass_color = bool
      '''Color the pass
         @returns: boolean
      '''
      
      use_pass_diffuse = bool
      '''Add diffuse contribution
         @returns: boolean
      '''
      
      use_pass_direct = bool
      '''Add direct lighting contribution
         @returns: boolean
      '''
      
      use_pass_emit = bool
      '''Add emission contribution
         @returns: boolean
      '''
      
      use_pass_glossy = bool
      '''Add glossy contribution
         @returns: boolean
      '''
      
      use_pass_indirect = bool
      '''Add indirect lighting contribution
         @returns: boolean
      '''
      
      use_pass_transmission = bool
      '''Add transmission contribution
         @returns: boolean
      '''
      
      use_selected_to_active = bool
      '''Bake shading on the surface of selected objects to the active object
         @returns: boolean
      '''
      
      use_split_materials = bool
      '''Split external images per material (external only)
         @returns: boolean
      '''
      
      width = int
      '''Horizontal dimension of the baking map
         @returns: int in [4, 10000]
      '''
      
   class BatchRenameAction(types.PropertyGroup):
      '''
      '''
   
      case_method = str
      '''
         @returns: enum in ['UPPER', 'LOWER', 'TITLE']
      '''
      
      op_add = bool
      '''
         @returns: boolean
      '''
      
      op_remove = bool
      '''
         @returns: boolean
      '''
      
      replace_dst = str
      '''
         @returns: string, (never None)
      '''
      
      replace_match_case = bool
      '''
         @returns: boolean
      '''
      
      replace_src = str
      '''
         @returns: string, (never None)
      '''
      
      set_method = str
      '''
         @returns: enum in ['NEW', 'PREFIX', 'SUFFIX']
      '''
      
      set_name = str
      '''
         @returns: string, (never None)
      '''
      
      strip_chars = str
      '''
         @returns: enum set in {'SPACE', 'DIGIT', 'PUNCT'}
      '''
      
      strip_part = str
      '''
         @returns: enum set in {'START', 'END'}
      '''
      
      type = str
      '''
         @returns: enum in ['REPLACE', 'SET', 'STRIP', 'CASE']
      '''
      
      use_replace_regex_dst = bool
      '''Use regular expression for the replacement text (supporting groups)
         @returns: boolean
      '''
      
      use_replace_regex_src = bool
      '''Use regular expressions to match text in the 'Find' field
         @returns: boolean
      '''
      
   class BevelModifier(types.Modifier):
      '''Bevel modifier to make edges and vertices more rounded
      '''
   
      angle_limit = float
      '''Angle above which to bevel edges
         @returns: float in [0, 3.14159]
      '''
      
      custom_profile = types.CurveProfile # (read only)
      '''The path for the custom profile
         @returns: CurveProfile
      '''
      
      face_strength_mode = str
      '''Whether to set face strength, and which faces to set it on
         @returns: enum in ['FSTR_NONE', 'FSTR_NEW', 'FSTR_AFFECTED', 'FSTR_ALL']
      '''
      
      harden_normals = bool
      '''Match normals of new faces to adjacent faces
         @returns: boolean
      '''
      
      invert_vertex_group = bool
      '''Invert vertex group influence
         @returns: boolean
      '''
      
      limit_method = str
      '''
         @returns: enum in ['NONE', 'ANGLE', 'WEIGHT', 'VGROUP']
      '''
      
      loop_slide = bool
      '''Prefer sliding along edges to having even widths
         @returns: boolean
      '''
      
      mark_seam = bool
      '''Mark Seams along beveled edges
         @returns: boolean
      '''
      
      mark_sharp = bool
      '''Mark beveled edges as sharp
         @returns: boolean
      '''
      
      material = int
      '''Material index of generated faces, -1 for automatic
         @returns: int in [-1, 32767]
      '''
      
      miter_inner = str
      '''Pattern to use for inside of miters
         @returns: enum in ['MITER_SHARP', 'MITER_ARC']
      '''
      
      miter_outer = str
      '''Pattern to use for outside of miters
         @returns: enum in ['MITER_SHARP', 'MITER_PATCH', 'MITER_ARC']
      '''
      
      offset_type = str
      '''What distance Width measures
         @returns: enum in ['OFFSET', 'WIDTH', 'DEPTH', 'PERCENT']
      '''
      
      profile = float
      '''The profile shape (0.5 = round)
         @returns: float in [0, 1]
      '''
      
      segments = int
      '''Number of segments for round edges/verts
         @returns: int in [1, 100]
      '''
      
      spread = float
      '''Spread distance for inner miter arcs
         @returns: float in [0, inf]
      '''
      
      use_clamp_overlap = bool
      '''Clamp the width to avoid overlap
         @returns: boolean
      '''
      
      use_custom_profile = bool
      '''Whether to use a user inputted curve for the bevel's profile
         @returns: boolean
      '''
      
      use_only_vertices = bool
      '''Bevel verts/corners, not edges
         @returns: boolean
      '''
      
      vertex_group = str
      '''Vertex group name
         @returns: string, (never None)
      '''
      
      vmesh_method = str
      '''The method to use to create the mesh at intersections
         @returns: enum in ['ADJ', 'CUTOFF']
      '''
      
      width = float
      '''Bevel amount
         @returns: float in [0, inf]
      '''
      
      width_pct = float
      '''Bevel amount for percentage method
         @returns: float in [0, inf]
      '''
      
   class BezierSplinePoint(types.bpy_struct):
      '''Bezier curve point with two handles
      '''
   
      co = float
      '''Coordinates of the control point
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      handle_left = float
      '''Coordinates of the first handle
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      handle_left_type = str
      '''Handle types
         @returns: enum in ['FREE', 'VECTOR', 'ALIGNED', 'AUTO']
      '''
      
      handle_right = float
      '''Coordinates of the second handle
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      handle_right_type = str
      '''Handle types
         @returns: enum in ['FREE', 'VECTOR', 'ALIGNED', 'AUTO']
      '''
      
      hide = bool
      '''Visibility status
         @returns: boolean
      '''
      
      radius = float
      '''Radius for beveling
         @returns: float in [0, inf]
      '''
      
      select_control_point = bool
      '''Control point selection status
         @returns: boolean
      '''
      
      select_left_handle = bool
      '''Handle 1 selection status
         @returns: boolean
      '''
      
      select_right_handle = bool
      '''Handle 2 selection status
         @returns: boolean
      '''
      
      tilt = float
      '''Tilt in 3D View
         @returns: float in [-376.991, 376.991]
      '''
      
      weight_softbody = float
      '''Softbody goal weight
         @returns: float in [0.01, 100]
      '''
      
   class BlendData(types.bpy_struct):
      '''Main data structure representing a .blend file and all its data-blocks
      '''
   
      actions = types.BlendDataActions # (read only)
      '''Action data-blocks
         @returns: BlendDataActions Collection of Action
      '''
      
      armatures = types.BlendDataArmatures # (read only)
      '''Armature data-blocks
         @returns: BlendDataArmatures Collection of Armature
      '''
      
      brushes = types.BlendDataBrushes # (read only)
      '''Brush data-blocks
         @returns: BlendDataBrushes Collection of Brush
      '''
      
      cache_files = types.BlendDataCacheFiles # (read only)
      '''Cache Files data-blocks
         @returns: BlendDataCacheFiles Collection of CacheFile
      '''
      
      cameras = types.BlendDataCameras # (read only)
      '''Camera data-blocks
         @returns: BlendDataCameras Collection of Camera
      '''
      
      collections = types.BlendDataCollections # (read only)
      '''Collection data-blocks
         @returns: BlendDataCollections Collection of Collection
      '''
      
      curves = types.BlendDataCurves # (read only)
      '''Curve data-blocks
         @returns: BlendDataCurves Collection of Curve
      '''
      
      filepath = str # (read only)
      '''Path to the .blend file
         @returns: string, (never None)
      '''
      
      fonts = types.BlendDataFonts # (read only)
      '''Vector font data-blocks
         @returns: BlendDataFonts Collection of VectorFont
      '''
      
      grease_pencils = types.BlendDataGreasePencils # (read only)
      '''Grease Pencil data-blocks
         @returns: BlendDataGreasePencils Collection of GreasePencil
      '''
      
      images = types.BlendDataImages # (read only)
      '''Image data-blocks
         @returns: BlendDataImages Collection of Image
      '''
      
      is_dirty = bool # (read only)
      '''Have recent edits been saved to disk
         @returns: boolean
      '''
      
      is_saved = bool # (read only)
      '''Has the current session been saved to disk as a .blend file
         @returns: boolean
      '''
      
      lattices = types.BlendDataLattices # (read only)
      '''Lattice data-blocks
         @returns: BlendDataLattices Collection of Lattice
      '''
      
      libraries = types.BlendDataLibraries # (read only)
      '''Library data-blocks
         @returns: BlendDataLibraries Collection of Library
      '''
      
      lightprobes = types.BlendDataProbes # (read only)
      '''LightProbe data-blocks
         @returns: BlendDataProbes Collection of LightProbe
      '''
      
      lights = types.BlendDataLights # (read only)
      '''Light data-blocks
         @returns: BlendDataLights Collection of Light
      '''
      
      linestyles = types.BlendDataLineStyles # (read only)
      '''Line Style data-blocks
         @returns: BlendDataLineStyles Collection of FreestyleLineStyle
      '''
      
      masks = types.BlendDataMasks # (read only)
      '''Masks data-blocks
         @returns: BlendDataMasks Collection of Mask
      '''
      
      materials = types.BlendDataMaterials # (read only)
      '''Material data-blocks
         @returns: BlendDataMaterials Collection of Material
      '''
      
      meshes = types.BlendDataMeshes # (read only)
      '''Mesh data-blocks
         @returns: BlendDataMeshes Collection of Mesh
      '''
      
      metaballs = types.BlendDataMetaBalls # (read only)
      '''Metaball data-blocks
         @returns: BlendDataMetaBalls Collection of MetaBall
      '''
      
      movieclips = types.BlendDataMovieClips # (read only)
      '''Movie Clip data-blocks
         @returns: BlendDataMovieClips Collection of MovieClip
      '''
      
      node_groups = types.BlendDataNodeTrees # (read only)
      '''Node group data-blocks
         @returns: BlendDataNodeTrees Collection of NodeTree
      '''
      
      objects = types.BlendDataObjects # (read only)
      '''Object data-blocks
         @returns: BlendDataObjects Collection of Object
      '''
      
      paint_curves = types.BlendDataPaintCurves # (read only)
      '''Paint Curves data-blocks
         @returns: BlendDataPaintCurves Collection of PaintCurve
      '''
      
      palettes = types.BlendDataPalettes # (read only)
      '''Palette data-blocks
         @returns: BlendDataPalettes Collection of Palette
      '''
      
      particles = types.BlendDataParticles # (read only)
      '''Particle data-blocks
         @returns: BlendDataParticles Collection of ParticleSettings
      '''
      
      scenes = types.BlendDataScenes # (read only)
      '''Scene data-blocks
         @returns: BlendDataScenes Collection of Scene
      '''
      
      screens = types.BlendDataScreens # (read only)
      '''Screen data-blocks
         @returns: BlendDataScreens Collection of Screen
      '''
      
      shape_keys = types.Key # (read only)
      '''Shape Key data-blocks
         @returns: Collection of Key
      '''
      
      sounds = types.BlendDataSounds # (read only)
      '''Sound data-blocks
         @returns: BlendDataSounds Collection of Sound
      '''
      
      speakers = types.BlendDataSpeakers # (read only)
      '''Speaker data-blocks
         @returns: BlendDataSpeakers Collection of Speaker
      '''
      
      texts = types.BlendDataTexts # (read only)
      '''Text data-blocks
         @returns: BlendDataTexts Collection of Text
      '''
      
      textures = types.BlendDataTextures # (read only)
      '''Texture data-blocks
         @returns: BlendDataTextures Collection of Texture
      '''
      
      use_autopack = bool
      '''Automatically pack all external data into .blend file
         @returns: boolean
      '''
      
      version = int # (read only)
      '''Version of Blender the .blend was saved with
         @returns: int array of 3 items in [0, inf]
      '''
      
      volumes = types.BlendDataVolumes # (read only)
      '''Volume data-blocks
         @returns: BlendDataVolumes Collection of Volume
      '''
      
      window_managers = types.BlendDataWindowManagers # (read only)
      '''Window manager data-blocks
         @returns: BlendDataWindowManagers Collection of WindowManager
      '''
      
      workspaces = types.BlendDataWorkSpaces # (read only)
      '''Workspace data-blocks
         @returns: BlendDataWorkSpaces Collection of WorkSpace
      '''
      
      worlds = types.BlendDataWorlds # (read only)
      '''World data-blocks
         @returns: BlendDataWorlds Collection of World
      '''
      
   class BlendDataActions(types.bpy_struct):
      '''Collection of actions
      '''
   
      def new(name):
         '''Add a new action to the main database
            Arguments:
            @name (str): New name for the data-block
               (never None)
      
            @returns (types.Action): New action data-block
               
         '''
      
         return types.Action

      def remove(action, do_unlink=True, do_id_user=True, do_ui_user=True):
         '''Remove a action from the current blendfile
            Arguments:
            @action (Action): Action to remove
               (never None)
            @do_unlink (bool): Unlink all usages of this action before deleting it
               (optional)
            @do_id_user (bool): Decrement user counter of all datablocks used by this action
               (optional)
            @do_ui_user (bool): Make sure interface does not reference this action
               (optional)
      
         '''
      
         pass

      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataArmatures(types.bpy_struct):
      '''Collection of armatures
      '''
   
      def new(name):
         '''Add a new armature to the main database
            Arguments:
            @name (str): New name for the data-block
               (never None)
      
            @returns (types.Armature): New armature data-block
               
         '''
      
         return types.Armature

      def remove(armature, do_unlink=True, do_id_user=True, do_ui_user=True):
         '''Remove a armature from the current blendfile
            Arguments:
            @armature (Armature): Armature to remove
               (never None)
            @do_unlink (bool): Unlink all usages of this armature before deleting it (WARNING: will also delete objects instancing that armature data)
               (optional)
            @do_id_user (bool): Decrement user counter of all datablocks used by this armature data
               (optional)
            @do_ui_user (bool): Make sure interface does not reference this armature data
               (optional)
      
         '''
      
         pass

      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataBrushes(types.bpy_struct):
      '''Collection of brushes
      '''
   
      def new(name, mode='TEXTURE_PAINT'):
         '''Add a new brush to the main database
            Arguments:
            @name (str): New name for the data-block
               (never None)
            @mode (str): Paint Mode for the new brush
               in ['OBJECT', 'EDIT', 'POSE', 'SCULPT', 'VERTEX_PAINT', 'WEIGHT_PAINT', 'TEXTURE_PAINT', 'PARTICLE_EDIT', 'EDIT_GPENCIL', 'SCULPT_GPENCIL', 'PAINT_GPENCIL', 'VERTEX_GPENCIL', 'WEIGHT_GPENCIL'], (optional)
      
            @returns (types.Brush): New brush data-block
               
         '''
      
         return types.Brush

      def remove(brush, do_unlink=True, do_id_user=True, do_ui_user=True):
         '''Remove a brush from the current blendfile
            Arguments:
            @brush (Brush): Brush to remove
               (never None)
            @do_unlink (bool): Unlink all usages of this brush before deleting it
               (optional)
            @do_id_user (bool): Decrement user counter of all datablocks used by this brush
               (optional)
            @do_ui_user (bool): Make sure interface does not reference this brush
               (optional)
      
         '''
      
         pass

      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

      def create_gpencil_data(brush):
         '''Add grease pencil brush settings
            Arguments:
            @brush (Brush): Brush
               (never None)
      
         '''
      
         pass

   class BlendDataCacheFiles(types.bpy_struct):
      '''Collection of cache files
      '''
   
      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataCameras(types.bpy_struct):
      '''Collection of cameras
      '''
   
      def new(name):
         '''Add a new camera to the main database
            Arguments:
            @name (str): New name for the data-block
               (never None)
      
            @returns (types.Camera): New camera data-block
               
         '''
      
         return types.Camera

      def remove(camera, do_unlink=True, do_id_user=True, do_ui_user=True):
         '''Remove a camera from the current blendfile
            Arguments:
            @camera (Camera): Camera to remove
               (never None)
            @do_unlink (bool): Unlink all usages of this camera before deleting it (WARNING: will also delete objects instancing that camera data)
               (optional)
            @do_id_user (bool): Decrement user counter of all datablocks used by this camera
               (optional)
            @do_ui_user (bool): Make sure interface does not reference this camera
               (optional)
      
         '''
      
         pass

      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataCollections(types.bpy_struct):
      '''Collection of collections
      '''
   
      def new(name):
         '''Add a new collection to the main database
            Arguments:
            @name (str): New name for the data-block
               (never None)
      
            @returns (types.Collection): New collection data-block
               
         '''
      
         return types.Collection

      def remove(collection, do_unlink=True, do_id_user=True, do_ui_user=True):
         '''Remove a collection from the current blendfile
            Arguments:
            @collection (Collection): Collection to remove
               (never None)
            @do_unlink (bool): Unlink all usages of this collection before deleting it
               (optional)
            @do_id_user (bool): Decrement user counter of all datablocks used by this collection
               (optional)
            @do_ui_user (bool): Make sure interface does not reference this collection
               (optional)
      
         '''
      
         pass

      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataCurves(types.bpy_struct):
      '''Collection of curves
      '''
   
      def new(name, type):
         '''Add a new curve to the main database
            Arguments:
            @name (str): New name for the data-block
               (never None)
            @type (str): The type of curve to add
               in ['CURVE', 'SURFACE', 'FONT']
      
            @returns (types.Curve): New curve data-block
               
         '''
      
         return types.Curve

      def remove(curve, do_unlink=True, do_id_user=True, do_ui_user=True):
         '''Remove a curve from the current blendfile
            Arguments:
            @curve (Curve): Curve to remove
               (never None)
            @do_unlink (bool): Unlink all usages of this curve before deleting it (WARNING: will also delete objects instancing that curve data)
               (optional)
            @do_id_user (bool): Decrement user counter of all datablocks used by this curve data
               (optional)
            @do_ui_user (bool): Make sure interface does not reference this curve data
               (optional)
      
         '''
      
         pass

      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataFonts(types.bpy_struct):
      '''Collection of fonts
      '''
   
      def load(filepath, check_existing=False):
         '''Load a new font into the main database
            Arguments:
            @filepath (str): path of the font to load
               (never None)
            @check_existing (bool): Using existing data-block if this file is already loaded
               (optional)
      
            @returns (types.VectorFont): New font data-block
               
         '''
      
         return types.VectorFont

      def remove(vfont, do_unlink=True, do_id_user=True, do_ui_user=True):
         '''Remove a font from the current blendfile
            Arguments:
            @vfont (VectorFont): Font to remove
               (never None)
            @do_unlink (bool): Unlink all usages of this font before deleting it
               (optional)
            @do_id_user (bool): Decrement user counter of all datablocks used by this font
               (optional)
            @do_ui_user (bool): Make sure interface does not reference this font
               (optional)
      
         '''
      
         pass

      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataGreasePencils(types.bpy_struct):
      '''Collection of grease pencils
      '''
   
      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

      def new(name):
         '''Add a new grease pencil datablock to the main database
            Arguments:
            @name (str): New name for the data-block
               (never None)
      
            @returns (types.GreasePencil): New grease pencil data-block
               
         '''
      
         return types.GreasePencil

      def remove(grease_pencil, do_unlink=True, do_id_user=True, do_ui_user=True):
         '''Remove a grease pencil instance from the current blendfile
            Arguments:
            @grease_pencil (GreasePencil): Grease Pencil to remove
               (never None)
            @do_unlink (bool): Unlink all usages of this grease pencil before deleting it
               (optional)
            @do_id_user (bool): Decrement user counter of all datablocks used by this grease pencil
               (optional)
            @do_ui_user (bool): Make sure interface does not reference this grease pencil
               (optional)
      
         '''
      
         pass

   class BlendDataImages(types.bpy_struct):
      '''Collection of images
      '''
   
      def new(name, width, height, alpha=False, float_buffer=False, stereo3d=False, is_data=False, tiled=False):
         '''Add a new image to the main database
            Arguments:
            @name (str): New name for the data-block
               (never None)
            @width (int): Width of the image
               in [1, inf]
            @height (int): Height of the image
               in [1, inf]
            @alpha (bool): Use alpha channel
               (optional)
            @float_buffer (bool): Create an image with floating point color
               (optional)
            @stereo3d (bool): Create left and right views
               (optional)
            @is_data (bool): Create image with non-color data color space
               (optional)
            @tiled (bool): Create a tiled image
               (optional)
      
            @returns (types.Image): New image data-block
               
         '''
      
         return types.Image

      def load(filepath, check_existing=False):
         '''Load a new image into the main database
            Arguments:
            @filepath (str): path of the file to load
               (never None)
            @check_existing (bool): Using existing data-block if this file is already loaded
               (optional)
      
            @returns (types.Image): New image data-block
               
         '''
      
         return types.Image

      def remove(image, do_unlink=True, do_id_user=True, do_ui_user=True):
         '''Remove an image from the current blendfile
            Arguments:
            @image (Image): Image to remove
               (never None)
            @do_unlink (bool): Unlink all usages of this image before deleting it
               (optional)
            @do_id_user (bool): Decrement user counter of all datablocks used by this image
               (optional)
            @do_ui_user (bool): Make sure interface does not reference this image
               (optional)
      
         '''
      
         pass

      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataLattices(types.bpy_struct):
      '''Collection of lattices
      '''
   
      def new(name):
         '''Add a new lattice to the main database
            Arguments:
            @name (str): New name for the data-block
               (never None)
      
            @returns (types.Lattice): New lattices data-block
               
         '''
      
         return types.Lattice

      def remove(lattice, do_unlink=True, do_id_user=True, do_ui_user=True):
         '''Remove a lattice from the current blendfile
            Arguments:
            @lattice (Lattice): Lattice to remove
               (never None)
            @do_unlink (bool): Unlink all usages of this lattice before deleting it (WARNING: will also delete objects instancing that lattice data)
               (optional)
            @do_id_user (bool): Decrement user counter of all datablocks used by this lattice data
               (optional)
            @do_ui_user (bool): Make sure interface does not reference this lattice data
               (optional)
      
         '''
      
         pass

      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataLibraries(types.bpy_struct):
      '''Collection of libraries
      '''
   
      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataLights(types.bpy_struct):
      '''Collection of lights
      '''
   
      def new(name, type):
         '''Add a new light to the main database
            Arguments:
            @name (str): New name for the data-block
               (never None)
            @type (str): The type of texture to add
               in ['POINT', 'SUN', 'SPOT', 'AREA']
      
            @returns (types.Light): New light data-block
               
         '''
      
         return types.Light

      def remove(light, do_unlink=True, do_id_user=True, do_ui_user=True):
         '''Remove a light from the current blendfile
            Arguments:
            @light (Light): Light to remove
               (never None)
            @do_unlink (bool): Unlink all usages of this Light before deleting it (WARNING: will also delete objects instancing that light data)
               (optional)
            @do_id_user (bool): Decrement user counter of all datablocks used by this light data
               (optional)
            @do_ui_user (bool): Make sure interface does not reference this light data
               (optional)
      
         '''
      
         pass

      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataLineStyles(types.bpy_struct):
      '''Collection of line styles
      '''
   
      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

      def new(name):
         '''Add a new line style instance to the main database
            Arguments:
            @name (str): New name for the data-block
               (never None)
      
            @returns (types.FreestyleLineStyle): New line style data-block
               
         '''
      
         return types.FreestyleLineStyle

      def remove(linestyle, do_unlink=True, do_id_user=True, do_ui_user=True):
         '''Remove a line style instance from the current blendfile
            Arguments:
            @linestyle (FreestyleLineStyle): Line style to remove
               (never None)
            @do_unlink (bool): Unlink all usages of this line style before deleting it
               (optional)
            @do_id_user (bool): Decrement user counter of all datablocks used by this line style
               (optional)
            @do_ui_user (bool): Make sure interface does not reference this line style
               (optional)
      
         '''
      
         pass

   class BlendDataMasks(types.bpy_struct):
      '''Collection of masks
      '''
   
      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

      def new(name):
         '''Add a new mask with a given name to the main database
            Arguments:
            @name (str): Name of new mask data-block
               (never None)
      
            @returns (types.Mask): New mask data-block
               
         '''
      
         return types.Mask

      def remove(mask, do_unlink=True, do_id_user=True, do_ui_user=True):
         '''Remove a masks from the current blendfile.
            Arguments:
            @mask (Mask): Mask to remove
               (never None)
            @do_unlink (bool): Unlink all usages of this mask before deleting it
               (optional)
            @do_id_user (bool): Decrement user counter of all datablocks used by this mask
               (optional)
            @do_ui_user (bool): Make sure interface does not reference this mask
               (optional)
      
         '''
      
         pass

   class BlendDataMaterials(types.bpy_struct):
      '''Collection of materials
      '''
   
      def new(name):
         '''Add a new material to the main database
            Arguments:
            @name (str): New name for the data-block
               (never None)
      
            @returns (types.Material): New material data-block
               
         '''
      
         return types.Material

      def create_gpencil_data(material):
         '''Add grease pencil material settings
            Arguments:
            @material (Material): Material
               (never None)
      
         '''
      
         pass

      def remove_gpencil_data(material):
         '''Remove grease pencil material settings
            Arguments:
            @material (Material): Material
               (never None)
      
         '''
      
         pass

      def remove(material, do_unlink=True, do_id_user=True, do_ui_user=True):
         '''Remove a material from the current blendfile
            Arguments:
            @material (Material): Material to remove
               (never None)
            @do_unlink (bool): Unlink all usages of this material before deleting it
               (optional)
            @do_id_user (bool): Decrement user counter of all datablocks used by this material
               (optional)
            @do_ui_user (bool): Make sure interface does not reference this material
               (optional)
      
         '''
      
         pass

      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataMeshes(types.bpy_struct):
      '''Collection of meshes
      '''
   
      def new(name):
         '''Add a new mesh to the main database
            Arguments:
            @name (str): New name for the data-block
               (never None)
      
            @returns (types.Mesh): New mesh data-block
               
         '''
      
         return types.Mesh

      def new_from_object(object, preserve_all_data_layers=False, depsgraph=None):
         '''Add a new mesh created from given object (undeformed geometry if object is original, and final evaluated geometry, with all modifiers etc., if object is evaluated)
            Arguments:
            @object (Object): Object to create mesh from
               (never None)
            @preserve_all_data_layers (bool): Preserve all data layers in the mesh, like UV maps and vertex groups. By default Blender only computes the subset of data layers needed for viewport display and rendering, for better performance
               (optional)
            @depsgraph (Depsgraph): Evaluated dependency graph which is required when preserve_all_data_layers is true
               (optional)
      
            @returns (types.Mesh): Mesh created from object, remove it if it is only used for export
               
         '''
      
         return types.Mesh

      def remove(mesh, do_unlink=True, do_id_user=True, do_ui_user=True):
         '''Remove a mesh from the current blendfile
            Arguments:
            @mesh (Mesh): Mesh to remove
               (never None)
            @do_unlink (bool): Unlink all usages of this mesh before deleting it (WARNING: will also delete objects instancing that mesh data)
               (optional)
            @do_id_user (bool): Decrement user counter of all datablocks used by this mesh data
               (optional)
            @do_ui_user (bool): Make sure interface does not reference this mesh data
               (optional)
      
         '''
      
         pass

      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataMetaBalls(types.bpy_struct):
      '''Collection of metaballs
      '''
   
      def new(name):
         '''Add a new metaball to the main database
            Arguments:
            @name (str): New name for the data-block
               (never None)
      
            @returns (types.MetaBall): New metaball data-block
               
         '''
      
         return types.MetaBall

      def remove(metaball, do_unlink=True, do_id_user=True, do_ui_user=True):
         '''Remove a metaball from the current blendfile
            Arguments:
            @metaball (MetaBall): Metaball to remove
               (never None)
            @do_unlink (bool): Unlink all usages of this metaball before deleting it (WARNING: will also delete objects instancing that metaball data)
               (optional)
            @do_id_user (bool): Decrement user counter of all datablocks used by this metaball data
               (optional)
            @do_ui_user (bool): Make sure interface does not reference this metaball data
               (optional)
      
         '''
      
         pass

      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataMovieClips(types.bpy_struct):
      '''Collection of movie clips
      '''
   
      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

      def remove(clip, do_unlink=True, do_id_user=True, do_ui_user=True):
         '''Remove a movie clip from the current blendfile.
            Arguments:
            @clip (MovieClip): Movie clip to remove
               (never None)
            @do_unlink (bool): Unlink all usages of this movie clip before deleting it
               (optional)
            @do_id_user (bool): Decrement user counter of all datablocks used by this movie clip
               (optional)
            @do_ui_user (bool): Make sure interface does not reference this movie clip
               (optional)
      
         '''
      
         pass

      def load(filepath, check_existing=False):
         '''Add a new movie clip to the main database from a file (while ``check_existing`` is disabled for consistency with other load functions, behavior with multiple movie-clips using the same file may incorrectly generate proxies)
            Arguments:
            @filepath (str): path for the data-block
               (never None)
            @check_existing (bool): Using existing data-block if this file is already loaded
               (optional)
      
            @returns (types.MovieClip): New movie clip data-block
               
         '''
      
         return types.MovieClip

   class BlendDataNodeTrees(types.bpy_struct):
      '''Collection of node trees
      '''
   
      def new(name, type):
         '''Add a new node tree to the main database
            Arguments:
            @name (str): New name for the data-block
               (never None)
            @type (str): The type of node_group to add
               in ['DUMMY']
      
            @returns (types.NodeTree): New node tree data-block
               
         '''
      
         return types.NodeTree

      def remove(tree, do_unlink=True, do_id_user=True, do_ui_user=True):
         '''Remove a node tree from the current blendfile
            Arguments:
            @tree (NodeTree): Node tree to remove
               (never None)
            @do_unlink (bool): Unlink all usages of this node tree before deleting it
               (optional)
            @do_id_user (bool): Decrement user counter of all datablocks used by this node tree
               (optional)
            @do_ui_user (bool): Make sure interface does not reference this node tree
               (optional)
      
         '''
      
         pass

      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataObjects(types.bpy_struct):
      '''Collection of objects
      '''
   
      def new(name, object_data):
         '''Add a new object to the main database
            Arguments:
            @name (str): New name for the data-block
               (never None)
            @object_data (ID): Object data or None for an empty object
               
      
            @returns (types.Object): New object data-block
               
         '''
      
         return types.Object

      def remove(object, do_unlink=True, do_id_user=True, do_ui_user=True):
         '''Remove a object from the current blendfile
            Arguments:
            @object (Object): Object to remove
               (never None)
            @do_unlink (bool): Unlink all usages of this object before deleting it
               (optional)
            @do_id_user (bool): Decrement user counter of all datablocks used by this object
               (optional)
            @do_ui_user (bool): Make sure interface does not reference this object
               (optional)
      
         '''
      
         pass

      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataPaintCurves(types.bpy_struct):
      '''Collection of paint curves
      '''
   
      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataPalettes(types.bpy_struct):
      '''Collection of palettes
      '''
   
      def new(name):
         '''Add a new palette to the main database
            Arguments:
            @name (str): New name for the data-block
               (never None)
      
            @returns (types.Palette): New palette data-block
               
         '''
      
         return types.Palette

      def remove(palette, do_unlink=True, do_id_user=True, do_ui_user=True):
         '''Remove a palette from the current blendfile
            Arguments:
            @palette (Palette): Palette to remove
               (never None)
            @do_unlink (bool): Unlink all usages of this palette before deleting it
               (optional)
            @do_id_user (bool): Decrement user counter of all datablocks used by this palette
               (optional)
            @do_ui_user (bool): Make sure interface does not reference this palette
               (optional)
      
         '''
      
         pass

      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataParticles(types.bpy_struct):
      '''Collection of particle settings
      '''
   
      def new(name):
         '''Add a new particle settings instance to the main database
            Arguments:
            @name (str): New name for the data-block
               (never None)
      
            @returns (types.ParticleSettings): New particle settings data-block
               
         '''
      
         return types.ParticleSettings

      def remove(particle, do_unlink=True, do_id_user=True, do_ui_user=True):
         '''Remove a particle settings instance from the current blendfile
            Arguments:
            @particle (ParticleSettings): Particle Settings to remove
               (never None)
            @do_unlink (bool): Unlink all usages of those particle settings before deleting them
               (optional)
            @do_id_user (bool): Decrement user counter of all datablocks used by this particle settings
               (optional)
            @do_ui_user (bool): Make sure interface does not reference this particle settings
               (optional)
      
         '''
      
         pass

      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataProbes(types.bpy_struct):
      '''Collection of light probes
      '''
   
      def new(name, type):
         '''Add a new probe to the main database
            Arguments:
            @name (str): New name for the data-block
               (never None)
            @type (str): The type of lightprobe to add
               in ['CUBE', 'PLANAR', 'GRID']
      
            @returns (types.LightProbe): New light probe data-block
               
         '''
      
         return types.LightProbe

      def remove(lightprobe, do_unlink=True, do_id_user=True, do_ui_user=True):
         '''Remove a probe from the current blendfile
            Arguments:
            @lightprobe (LightProbe): Probe to remove
               (never None)
            @do_unlink (bool): Unlink all usages of this probe before deleting it (WARNING: will also delete objects instancing that light probe data)
               (optional)
            @do_id_user (bool): Decrement user counter of all datablocks used by this light probe
               (optional)
            @do_ui_user (bool): Make sure interface does not reference this light probe
               (optional)
      
         '''
      
         pass

      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataScenes(types.bpy_struct):
      '''Collection of scenes
      '''
   
      def new(name):
         '''Add a new scene to the main database
            Arguments:
            @name (str): New name for the data-block
               (never None)
      
            @returns (types.Scene): New scene data-block
               
         '''
      
         return types.Scene

      def remove(scene, do_unlink=True):
         '''Remove a scene from the current blendfile
            Arguments:
            @scene (Scene): Scene to remove
               (never None)
            @do_unlink (bool): Unlink all usages of this scene before deleting it
               (optional)
      
         '''
      
         pass

      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataScreens(types.bpy_struct):
      '''Collection of screens
      '''
   
      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataSounds(types.bpy_struct):
      '''Collection of sounds
      '''
   
      def load(filepath, check_existing=False):
         '''Add a new sound to the main database from a file
            Arguments:
            @filepath (str): path for the data-block
               (never None)
            @check_existing (bool): Using existing data-block if this file is already loaded
               (optional)
      
            @returns (types.Sound): New text data-block
               
         '''
      
         return types.Sound

      def remove(sound, do_unlink=True, do_id_user=True, do_ui_user=True):
         '''Remove a sound from the current blendfile
            Arguments:
            @sound (Sound): Sound to remove
               (never None)
            @do_unlink (bool): Unlink all usages of this sound before deleting it
               (optional)
            @do_id_user (bool): Decrement user counter of all datablocks used by this sound
               (optional)
            @do_ui_user (bool): Make sure interface does not reference this sound
               (optional)
      
         '''
      
         pass

      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataSpeakers(types.bpy_struct):
      '''Collection of speakers
      '''
   
      def new(name):
         '''Add a new speaker to the main database
            Arguments:
            @name (str): New name for the data-block
               (never None)
      
            @returns (types.Speaker): New speaker data-block
               
         '''
      
         return types.Speaker

      def remove(speaker, do_unlink=True, do_id_user=True, do_ui_user=True):
         '''Remove a speaker from the current blendfile
            Arguments:
            @speaker (Speaker): Speaker to remove
               (never None)
            @do_unlink (bool): Unlink all usages of this speaker before deleting it (WARNING: will also delete objects instancing that speaker data)
               (optional)
            @do_id_user (bool): Decrement user counter of all datablocks used by this speaker data
               (optional)
            @do_ui_user (bool): Make sure interface does not reference this speaker data
               (optional)
      
         '''
      
         pass

      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataTexts(types.bpy_struct):
      '''Collection of texts
      '''
   
      def new(name):
         '''Add a new text to the main database
            Arguments:
            @name (str): New name for the data-block
               (never None)
      
            @returns (types.Text): New text data-block
               
         '''
      
         return types.Text

      def remove(text, do_unlink=True, do_id_user=True, do_ui_user=True):
         '''Remove a text from the current blendfile
            Arguments:
            @text (Text): Text to remove
               (never None)
            @do_unlink (bool): Unlink all usages of this text before deleting it
               (optional)
            @do_id_user (bool): Decrement user counter of all datablocks used by this text
               (optional)
            @do_ui_user (bool): Make sure interface does not reference this text
               (optional)
      
         '''
      
         pass

      def load(filepath, internal=False):
         '''Add a new text to the main database from a file
            Arguments:
            @filepath (str): path for the data-block
               (never None)
            @internal (bool): Make text file internal after loading
               (optional)
      
            @returns (types.Text): New text data-block
               
         '''
      
         return types.Text

      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataTextures(types.bpy_struct):
      '''Collection of textures
      '''
   
      def new(name, type):
         '''Add a new texture to the main database
            Arguments:
            @name (str): New name for the data-block
               (never None)
            @type (str): The type of texture to add
               in ['NONE', 'BLEND', 'CLOUDS', 'DISTORTED_NOISE', 'IMAGE', 'MAGIC', 'MARBLE', 'MUSGRAVE', 'NOISE', 'STUCCI', 'VORONOI', 'WOOD']
      
            @returns (types.Texture): New texture data-block
               
         '''
      
         return types.Texture

      def remove(texture, do_unlink=True, do_id_user=True, do_ui_user=True):
         '''Remove a texture from the current blendfile
            Arguments:
            @texture (Texture): Texture to remove
               (never None)
            @do_unlink (bool): Unlink all usages of this texture before deleting it
               (optional)
            @do_id_user (bool): Decrement user counter of all datablocks used by this texture
               (optional)
            @do_ui_user (bool): Make sure interface does not reference this texture
               (optional)
      
         '''
      
         pass

      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataVolumes(types.bpy_struct):
      '''Collection of volumes
      '''
   
      def new(name):
         '''Add a new volume to the main database
            Arguments:
            @name (str): New name for the data-block
               (never None)
      
            @returns (types.Volume): New volume data-block
               
         '''
      
         return types.Volume

      def remove(volume, do_unlink=True, do_id_user=True, do_ui_user=True):
         '''Remove a volume from the current blendfile
            Arguments:
            @volume (Volume): Volume to remove
               (never None)
            @do_unlink (bool): Unlink all usages of this volume before deleting it (WARNING: will also delete objects instancing that volume data)
               (optional)
            @do_id_user (bool): Decrement user counter of all datablocks used by this volume data
               (optional)
            @do_ui_user (bool): Make sure interface does not reference this volume data
               (optional)
      
         '''
      
         pass

      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataWindowManagers(types.bpy_struct):
      '''Collection of window managers
      '''
   
      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataWorkSpaces(types.bpy_struct):
      '''Collection of workspaces
      '''
   
      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendDataWorlds(types.bpy_struct):
      '''Collection of worlds
      '''
   
      def new(name):
         '''Add a new world to the main database
            Arguments:
            @name (str): New name for the data-block
               (never None)
      
            @returns (types.World): New world data-block
               
         '''
      
         return types.World

      def remove(world, do_unlink=True, do_id_user=True, do_ui_user=True):
         '''Remove a world from the current blendfile
            Arguments:
            @world (World): World to remove
               (never None)
            @do_unlink (bool): Unlink all usages of this world before deleting it
               (optional)
            @do_id_user (bool): Decrement user counter of all datablocks used by this world
               (optional)
            @do_ui_user (bool): Make sure interface does not reference this world
               (optional)
      
         '''
      
         pass

      def tag(value):
         '''tag
            Arguments:
            @value (bool): 
      
         '''
      
         pass

   class BlendTexture(types.Texture):
      '''Procedural color blending texture
      '''
   
      progression = str
      '''Style of the color blending
         @returns: enum in ['LINEAR', 'QUADRATIC', 'EASING', 'DIAGONAL', 'SPHERICAL', 'QUADRATIC_SPHERE', 'RADIAL']
      '''
      
      use_flip_axis = str
      '''Flip the texture's X and Y axis
         @returns: enum in ['HORIZONTAL', 'VERTICAL']
      '''
      
      users_material = None # (readonly)
      '''Materials that use this texture
         
      '''
      
      
      users_object_modifier = None # (readonly)
      '''Object modifiers that use this texture
         
      '''
      
      
   class BlenderRNA(types.bpy_struct):
      '''Blender RNA structure definitions
      '''
   
      structs = types.Struct # (read only)
      '''
         @returns: Collection of Struct
      '''
      
   class BoidRule(types.bpy_struct):
      '''
      '''
   
      name = str
      '''Boid rule name
         @returns: string, (never None)
      '''
      
      type = str # (read only)
      '''
         @returns: enum in ['GOAL', 'AVOID', 'AVOID_COLLISION', 'SEPARATE', 'FLOCK', 'FOLLOW_LEADER', 'AVERAGE_SPEED', 'FIGHT']
      '''
      
      use_in_air = bool
      '''Use rule when boid is flying
         @returns: boolean
      '''
      
      use_on_land = bool
      '''Use rule when boid is on land
         @returns: boolean
      '''
      
   class BoidRuleAverageSpeed(types.BoidRule):
      '''
      '''
   
      level = float
      '''How much velocity's z-component is kept constant
         @returns: float in [0, 1]
      '''
      
      speed = float
      '''Percentage of maximum speed
         @returns: float in [0, 1]
      '''
      
      wander = float
      '''How fast velocity's direction is randomized
         @returns: float in [0, 1]
      '''
      
   class BoidRuleAvoid(types.BoidRule):
      '''
      '''
   
      fear_factor = float
      '''Avoid object if danger from it is above this threshold
         @returns: float in [0, 100]
      '''
      
      object = types.Object
      '''Object to avoid
         @returns: Object
      '''
      
      use_predict = bool
      '''Predict target movement
         @returns: boolean
      '''
      
   class BoidRuleAvoidCollision(types.BoidRule):
      '''
      '''
   
      look_ahead = float
      '''Time to look ahead in seconds
         @returns: float in [0, 100]
      '''
      
      use_avoid = bool
      '''Avoid collision with other boids
         @returns: boolean
      '''
      
      use_avoid_collision = bool
      '''Avoid collision with deflector objects
         @returns: boolean
      '''
      
   class BoidRuleFight(types.BoidRule):
      '''
      '''
   
      distance = float
      '''Attack boids at max this distance
         @returns: float in [0, 100]
      '''
      
      flee_distance = float
      '''Flee to this distance
         @returns: float in [0, 100]
      '''
      
   class BoidRuleFollowLeader(types.BoidRule):
      '''
      '''
   
      distance = float
      '''Distance behind leader to follow
         @returns: float in [0, 100]
      '''
      
      object = types.Object
      '''Follow this object instead of a boid
         @returns: Object
      '''
      
      queue_count = int
      '''How many boids in a line
         @returns: int in [0, 100]
      '''
      
      use_line = bool
      '''Follow leader in a line
         @returns: boolean
      '''
      
   class BoidRuleGoal(types.BoidRule):
      '''
      '''
   
      object = types.Object
      '''Goal object
         @returns: Object
      '''
      
      use_predict = bool
      '''Predict target movement
         @returns: boolean
      '''
      
   class BoidSettings(types.bpy_struct):
      '''Settings for boid physics
      '''
   
      accuracy = float
      '''Accuracy of attack
         @returns: float in [0, 1]
      '''
      
      active_boid_state = types.BoidRule # (read only)
      '''
         @returns: BoidRule
      '''
      
      active_boid_state_index = int
      '''
         @returns: int in [0, inf]
      '''
      
      aggression = float
      '''Boid will fight this times stronger enemy
         @returns: float in [0, 100]
      '''
      
      air_acc_max = float
      '''Maximum acceleration in air (relative to maximum speed)
         @returns: float in [0, 1]
      '''
      
      air_ave_max = float
      '''Maximum angular velocity in air (relative to 180 degrees)
         @returns: float in [0, 1]
      '''
      
      air_personal_space = float
      '''Radius of boids personal space in air (% of particle size)
         @returns: float in [0, 10]
      '''
      
      air_speed_max = float
      '''Maximum speed in air
         @returns: float in [0, 100]
      '''
      
      air_speed_min = float
      '''Minimum speed in air (relative to maximum speed)
         @returns: float in [0, 1]
      '''
      
      bank = float
      '''Amount of rotation around velocity vector on turns
         @returns: float in [0, 2]
      '''
      
      health = float
      '''Initial boid health when born
         @returns: float in [0, 100]
      '''
      
      height = float
      '''Boid height relative to particle size
         @returns: float in [0, 2]
      '''
      
      land_acc_max = float
      '''Maximum acceleration on land (relative to maximum speed)
         @returns: float in [0, 1]
      '''
      
      land_ave_max = float
      '''Maximum angular velocity on land (relative to 180 degrees)
         @returns: float in [0, 1]
      '''
      
      land_jump_speed = float
      '''Maximum speed for jumping
         @returns: float in [0, 100]
      '''
      
      land_personal_space = float
      '''Radius of boids personal space on land (% of particle size)
         @returns: float in [0, 10]
      '''
      
      land_smooth = float
      '''How smoothly the boids land
         @returns: float in [0, 10]
      '''
      
      land_speed_max = float
      '''Maximum speed on land
         @returns: float in [0, 100]
      '''
      
      land_stick_force = float
      '''How strong a force must be to start effecting a boid on land
         @returns: float in [0, 1000]
      '''
      
      pitch = float
      '''Amount of rotation around side vector
         @returns: float in [0, 2]
      '''
      
      range = float
      '''Maximum distance from which a boid can attack
         @returns: float in [0, 100]
      '''
      
      states = types.BoidState # (read only)
      '''
         @returns: Collection of BoidState
      '''
      
      strength = float
      '''Maximum caused damage on attack per second
         @returns: float in [0, 100]
      '''
      
      use_climb = bool
      '''Allow boids to climb goal objects
         @returns: boolean
      '''
      
      use_flight = bool
      '''Allow boids to move in air
         @returns: boolean
      '''
      
      use_land = bool
      '''Allow boids to move on land
         @returns: boolean
      '''
      
   class BoidState(types.bpy_struct):
      '''Boid state for boid physics
      '''
   
      active_boid_rule = types.BoidRule # (read only)
      '''
         @returns: BoidRule
      '''
      
      active_boid_rule_index = int
      '''
         @returns: int in [0, inf]
      '''
      
      falloff = float
      '''
         @returns: float in [0, 10]
      '''
      
      name = str
      '''Boid state name
         @returns: string, (never None)
      '''
      
      rule_fuzzy = float
      '''
         @returns: float in [0, 1]
      '''
      
      rules = types.BoidRule # (read only)
      '''
         @returns: Collection of BoidRule
      '''
      
      ruleset_type = str
      '''How the rules in the list are evaluated
         @returns: enum in ['FUZZY', 'RANDOM', 'AVERAGE']
      '''
      
      volume = float
      '''
         @returns: float in [0, 100]
      '''
      
   class Bone(types.bpy_struct):
      '''Bone in an Armature data-block
      '''
   
      bbone_curveinx = float
      '''X-axis handle offset for start of the B-Bone's curve, adjusts curvature
         @returns: float in [-inf, inf]
      '''
      
      bbone_curveiny = float
      '''Y-axis handle offset for start of the B-Bone's curve, adjusts curvature
         @returns: float in [-inf, inf]
      '''
      
      bbone_curveoutx = float
      '''X-axis handle offset for end of the B-Bone's curve, adjusts curvature
         @returns: float in [-inf, inf]
      '''
      
      bbone_curveouty = float
      '''Y-axis handle offset for end of the B-Bone's curve, adjusts curvature
         @returns: float in [-inf, inf]
      '''
      
      bbone_custom_handle_end = types.Bone
      '''Bone that serves as the end handle for the B-Bone curve
         @returns: Bone
      '''
      
      bbone_custom_handle_start = types.Bone
      '''Bone that serves as the start handle for the B-Bone curve
         @returns: Bone
      '''
      
      bbone_easein = float
      '''Length of first Bezier Handle (for B-Bones only)
         @returns: float in [-inf, inf]
      '''
      
      bbone_easeout = float
      '''Length of second Bezier Handle (for B-Bones only)
         @returns: float in [-inf, inf]
      '''
      
      bbone_handle_type_end = str
      '''Selects how the end handle of the B-Bone is computed
         @returns: enum in ['AUTO', 'ABSOLUTE', 'RELATIVE', 'TANGENT']
      '''
      
      bbone_handle_type_start = str
      '''Selects how the start handle of the B-Bone is computed
         @returns: enum in ['AUTO', 'ABSOLUTE', 'RELATIVE', 'TANGENT']
      '''
      
      bbone_rollin = float
      '''Roll offset for the start of the B-Bone, adjusts twist
         @returns: float in [-inf, inf]
      '''
      
      bbone_rollout = float
      '''Roll offset for the end of the B-Bone, adjusts twist
         @returns: float in [-inf, inf]
      '''
      
      bbone_scaleinx = float
      '''X-axis scale factor for start of the B-Bone, adjusts thickness (for tapering effects)
         @returns: float in [-inf, inf]
      '''
      
      bbone_scaleiny = float
      '''Y-axis scale factor for start of the B-Bone, adjusts thickness (for tapering effects)
         @returns: float in [-inf, inf]
      '''
      
      bbone_scaleoutx = float
      '''X-axis scale factor for end of the B-Bone, adjusts thickness (for tapering effects)
         @returns: float in [-inf, inf]
      '''
      
      bbone_scaleouty = float
      '''Y-axis scale factor for end of the B-Bone, adjusts thickness (for tapering effects)
         @returns: float in [-inf, inf]
      '''
      
      bbone_segments = int
      '''Number of subdivisions of bone (for B-Bones only)
         @returns: int in [1, 32]
      '''
      
      bbone_x = float
      '''B-Bone X size
         @returns: float in [-inf, inf]
      '''
      
      bbone_z = float
      '''B-Bone Z size
         @returns: float in [-inf, inf]
      '''
      
      children = types.Bone # (read only)
      '''Bones which are children of this bone
         @returns: Collection of Bone
      '''
      
      envelope_distance = float
      '''Bone deformation distance (for Envelope deform only)
         @returns: float in [0, 1000]
      '''
      
      envelope_weight = float
      '''Bone deformation weight (for Envelope deform only)
         @returns: float in [0, 1000]
      '''
      
      head = float # (read only)
      '''Location of head end of the bone relative to its parent
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      head_local = float # (read only)
      '''Location of head end of the bone relative to armature
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      head_radius = float
      '''Radius of head of bone (for Envelope deform only)
         @returns: float in [-inf, inf]
      '''
      
      hide = bool
      '''Bone is not visible when it is not in Edit Mode (i.e. in Object or Pose Modes)
         @returns: boolean
      '''
      
      hide_select = bool
      '''Bone is able to be selected
         @returns: boolean
      '''
      
      inherit_scale = str
      '''Specifies how the bone inherits scaling from the parent bone
         @returns: enum in ['FULL', 'FIX_SHEAR', 'ALIGNED', 'AVERAGE', 'NONE', 'NONE_LEGACY']
      '''
      
      layers = bool
      '''Layers bone exists in
         @returns: boolean array of 32 items
      '''
      
      length = float # (read only)
      '''Length of the bone
         @returns: float in [-inf, inf]
      '''
      
      matrix = float # (read only)
      '''3x3 bone matrix
         @returns: float multi-dimensional array of 3 * 3 items in [-inf, inf]
      '''
      
      matrix_local = float # (read only)
      '''4x4 bone matrix relative to armature
         @returns: float multi-dimensional array of 4 * 4 items in [-inf, inf]
      '''
      
      name = str
      '''
         @returns: string, (never None)
      '''
      
      parent = types.Bone # (read only)
      '''Parent bone (in same Armature)
         @returns: Bone
      '''
      
      select = bool
      '''
         @returns: boolean
      '''
      
      select_head = bool
      '''
         @returns: boolean
      '''
      
      select_tail = bool
      '''
         @returns: boolean
      '''
      
      show_wire = bool
      '''Bone is always drawn as Wireframe regardless of viewport draw mode (useful for non-obstructive custom bone shapes)
         @returns: boolean
      '''
      
      tail = float # (read only)
      '''Location of tail end of the bone relative to its parent
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      tail_local = float # (read only)
      '''Location of tail end of the bone relative to armature
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      tail_radius = float
      '''Radius of tail of bone (for Envelope deform only)
         @returns: float in [-inf, inf]
      '''
      
      use_connect = bool # (read only)
      '''When bone has a parent, bone's head is stuck to the parent's tail
         @returns: boolean
      '''
      
      use_cyclic_offset = bool
      '''When bone doesn't have a parent, it receives cyclic offset effects (Deprecated)
         @returns: boolean
      '''
      
      use_deform = bool
      '''Enable Bone to deform geometry
         @returns: boolean
      '''
      
      use_endroll_as_inroll = bool
      '''Add Roll Out of the Start Handle bone to the Roll In value
         @returns: boolean
      '''
      
      use_envelope_multiply = bool
      '''When deforming bone, multiply effects of Vertex Group weights with Envelope influence
         @returns: boolean
      '''
      
      use_inherit_rotation = bool
      '''Bone inherits rotation or scale from parent bone
         @returns: boolean
      '''
      
      use_inherit_scale = bool
      '''DEPRECATED: Bone inherits scaling from parent bone
         @returns: boolean
      '''
      
      use_local_location = bool
      '''Bone location is set in local space
         @returns: boolean
      '''
      
      use_relative_parent = bool
      '''Object children will use relative transform, like deform
         @returns: boolean
      '''
      
      basename = None # (readonly)
      '''The name of this bone before any '.' character
         
      '''
      
      
      center = None # (readonly)
      '''The midpoint between the head and the tail.
         
      '''
      
      
      children = None # (readonly)
      '''A list of all the bones children. Warning: takes O(len(bones)) time.
         
      '''
      
      
      children_recursive = None # (readonly)
      '''A list of all children from this bone. Warning: takes O(len(bones)**2) time.
         
      '''
      
      
      children_recursive_basename = None # (readonly)
      '''Returns a chain of children with the same base name as this bone.
         Only direct chains are supported, forks caused by multiple children
         with matching base names will terminate the function
         and not be returned. Warning: takes O(len(bones)**2) time.
         
      '''
      
      
      parent_recursive = None # (readonly)
      '''A list of parents, starting with the immediate parent
         
      '''
      
      
      vector = None # (readonly)
      '''The direction this bone is pointing.
         Utility function for (tail - head)
         
      '''
      
      
      x_axis = None # (readonly)
      '''Vector pointing down the x-axis of the bone.
         
      '''
      
      
      y_axis = None # (readonly)
      '''Vector pointing down the y-axis of the bone.
         
      '''
      
      
      z_axis = None # (readonly)
      '''Vector pointing down the z-axis of the bone.
         
      '''
      
      
      def evaluate_envelope(point):
         '''Calculate bone envelope at given point
            Arguments:
            @point (float): Position in 3d space to evaluate
               array of 3 items in [-inf, inf]
      
            @returns (float): Envelope factor
               in [-inf, inf]
         '''
      
         return float

      def convert_local_to_pose(matrix, matrix_local, parent_matrix=((0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0)), parent_matrix_local=((0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0)), invert=False):
         '''Transform a matrix from Local to Pose space (or back), taking into account options like Inherit Scale and Local Location. Unlike Object.convert_space, this uses custom rest and pose matrices provided by the caller. If the parent matrices are omitted, the bone is assumed to have no parent.
            Arguments:
            @matrix (float): The matrix to transform
               multi-dimensional array of 4 * 4 items in [-inf, inf]
            @matrix_local (float): The custom rest matrix of this bone (Bone.matrix_local)
               multi-dimensional array of 4 * 4 items in [-inf, inf]
            @parent_matrix (float): The custom pose matrix of the parent bone (PoseBone.matrix)
               multi-dimensional array of 4 * 4 items in [-inf, inf], (optional)
            @parent_matrix_local (float): The custom rest matrix of the parent bone (Bone.matrix_local)
               multi-dimensional array of 4 * 4 items in [-inf, inf], (optional)
            @invert (bool): Convert from Pose to Local space
               (optional)
      
            @returns (float): The transformed matrix
               multi-dimensional array of 4 * 4 items in [-inf, inf]
         '''
      
         return float

      @classmethod
      def MatrixFromAxisRoll(axis, roll):
         '''Convert the axis + roll representation to a matrix
            Arguments:
            @axis (float): The main axis of the bone (tail - head)
               array of 3 items in [-inf, inf], (never None)
            @roll (float): The roll of the bone
               in [-inf, inf]
      
            @returns (float): The resulting orientation matrix
               multi-dimensional array of 3 * 3 items in [-inf, inf]
         '''
      
         return float

      @classmethod
      def AxisRollFromMatrix(matrix, axis=(0.0, 0.0, 0.0)):
         '''Convert a rotational matrix to the axis + roll representation
            Arguments:
            @matrix (float): The orientation matrix of the bone
               multi-dimensional array of 3 * 3 items in [-inf, inf], (never None)
            @axis (float): The optional override for the axis (finds closest approximation for the matrix)
               array of 3 items in [-inf, inf], (optional)
      
            @returns: 
            (
               result_axis(float):The main axis of the bone
               array of 3 items in [-inf, inf]
               result_roll(float):The roll of the bone
               in [-inf, inf]
            )
         '''
      
         pass

      def parent_index(self, parent_test):
         '''The same as 'bone in other_bone.parent_recursive'
            but saved generating a list.
            
         '''
      
         pass
      
      def translate(self, vec):
         '''Utility function to add *vec* to the head and tail of this bone
            
         '''
      
         pass
      
   class BoneGroup(types.bpy_struct):
      '''Groups of Pose Channels (Bones)
      '''
   
      color_set = str
      '''Custom color set to use
         @returns: enum in ['DEFAULT', 'THEME01', 'THEME02', 'THEME03', 'THEME04', 'THEME05', 'THEME06', 'THEME07', 'THEME08', 'THEME09', 'THEME10', 'THEME11', 'THEME12', 'THEME13', 'THEME14', 'THEME15', 'THEME16', 'THEME17', 'THEME18', 'THEME19', 'THEME20', 'CUSTOM']
      '''
      
      colors = types.ThemeBoneColorSet # (read only)
      '''Copy of the colors associated with the group's color set
         @returns: ThemeBoneColorSet, (never None)
      '''
      
      is_custom_color_set = bool # (read only)
      '''Color set is user-defined instead of a fixed theme color set
         @returns: boolean
      '''
      
      name = str
      '''
         @returns: string, (never None)
      '''
      
   class BoneGroups(types.bpy_struct):
      '''Collection of bone groups
      '''
   
      active = types.BoneGroup
      '''Active bone group for this pose
         @returns: BoneGroup
      '''
      
      active_index = int
      '''Active index in bone groups array
         @returns: int in [0, inf]
      '''
      
      def new(name="Group"):
         '''Add a new bone group to the object
            Arguments:
            @name (str): Name of the new group
               (optional, never None)
      
            @returns (types.BoneGroup): New bone group
               
         '''
      
         return types.BoneGroup

      def remove(group):
         '''Remove a bone group from this object
            Arguments:
            @group (BoneGroup): Removed bone group
               (never None)
      
         '''
      
         pass

   class BoolProperty(types.Property):
      '''RNA boolean property definition
      '''
   
      array_dimensions = int # (read only)
      '''Length of each dimension of the array
         @returns: int array of 3 items in [0, inf]
      '''
      
      array_length = int # (read only)
      '''Maximum length of the array, 0 means unlimited
         @returns: int in [0, inf]
      '''
      
      default = bool # (read only)
      '''Default value for this number
         @returns: boolean
      '''
      
      default_array = bool # (read only)
      '''Default value for this array
         @returns: boolean array of 3 items
      '''
      
      is_array = bool # (read only)
      '''
         @returns: boolean
      '''
      
   class BooleanModifier(types.Modifier):
      '''Boolean operations modifier
      '''
   
      debug_options = str
      '''Debugging options, only when started with '-d'
         @returns: enum set in {'SEPARATE', 'NO_DISSOLVE', 'NO_CONNECT_REGIONS'}
      '''
      
      double_threshold = float
      '''Threshold for checking overlapping geometry
         @returns: float in [0, 1]
      '''
      
      object = types.Object
      '''Mesh object to use for Boolean operation
         @returns: Object
      '''
      
      operation = str
      '''
         @returns: enum in ['INTERSECT', 'UNION', 'DIFFERENCE']
      '''
      
   class BrightContrastModifier(types.SequenceModifier):
      '''Bright/contrast modifier data for sequence strip
      '''
   
      bright = float
      '''Adjust the luminosity of the colors
         @returns: float in [-inf, inf]
      '''
      
      contrast = float
      '''Adjust the difference in luminosity between pixels
         @returns: float in [-100, 100]
      '''
      
   class Brush(types.ID):
      '''Brush data-block for storing brush settings for painting and sculpting
      '''
   
      area_radius_factor = float
      '''Ratio between the brush radius and the radius that is going to be used to sample the area center
         @returns: float in [0, 2]
      '''
      
      auto_smooth_factor = float
      '''Amount of smoothing to automatically apply to each stroke
         @returns: float in [0, 1]
      '''
      
      automasking_boundary_edges_propagation_steps = int
      '''Distance where boundary edge automasking is going to protect vertices from the fully masked edge
         @returns: int in [1, 20]
      '''
      
      blend = str
      '''Brush blending mode
         @returns: enum in ['MIX', 'DARKEN', 'MUL', 'COLORBURN', 'LINEARBURN', 'LIGHTEN', 'SCREEN', 'COLORDODGE', 'ADD', 'OVERLAY', 'SOFTLIGHT', 'HARDLIGHT', 'VIVIDLIGHT', 'LINEARLIGHT', 'PINLIGHT', 'DIFFERENCE', 'EXCLUSION', 'SUB', 'HUE', 'SATURATION', 'COLOR', 'LUMINOSITY', 'ERASE_ALPHA', 'ADD_ALPHA']
      '''
      
      blur_kernel_radius = int
      '''Radius of kernel used for soften and sharpen in pixels
         @returns: int in [1, 10000]
      '''
      
      blur_mode = str
      '''
         @returns: enum in ['BOX', 'GAUSSIAN']
      '''
      
      brush_capabilities = types.BrushCapabilities # (read only)
      '''Brush's capabilities
         @returns: BrushCapabilities, (never None)
      '''
      
      clone_alpha = float
      '''Opacity of clone image display
         @returns: float in [0, 1]
      '''
      
      clone_image = types.Image
      '''Image for clone tool
         @returns: Image
      '''
      
      clone_offset = float
      '''
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      cloth_damping = float
      '''How much the applied forces are propagated through the cloth
         @returns: float in [0.01, 1]
      '''
      
      cloth_deform_type = str
      '''Deformation type that is used in the brush
         @returns: enum in ['DRAG', 'PUSH', 'PINCH_POINT', 'PINCH_PERPENDICULAR', 'INFLATE', 'GRAB', 'EXPAND']
      '''
      
      cloth_force_falloff_type = str
      '''Shape used in the brush to apply force to the cloth
         @returns: enum in ['RADIAL', 'PLANE']
      '''
      
      cloth_mass = float
      '''Mass of each simulation particle
         @returns: float in [0.01, 2]
      '''
      
      cloth_sim_falloff = float
      '''Area to apply deformation falloff to the effects of the simulation
         @returns: float in [0, 1]
      '''
      
      cloth_sim_limit = float
      '''Factor added relative to the size of the radius to limit the cloth simulation effects
         @returns: float in [0.1, 10]
      '''
      
      color = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      color_type = str
      '''Use single color or gradient when painting
         @returns: enum in ['COLOR', 'GRADIENT']
      '''
      
      crease_pinch_factor = float
      '''How much the crease brush pinches
         @returns: float in [0, 1]
      '''
      
      cursor_color_add = float
      '''Color of cursor when adding
         @returns: float array of 4 items in [0, inf]
      '''
      
      cursor_color_subtract = float
      '''Color of cursor when subtracting
         @returns: float array of 4 items in [0, inf]
      '''
      
      cursor_overlay_alpha = int
      '''
         @returns: int in [0, 100]
      '''
      
      curve = types.CurveMapping # (read only)
      '''Editable falloff curve
         @returns: CurveMapping, (never None)
      '''
      
      curve_preset = str
      '''
         @returns: enum in ['CUSTOM', 'SMOOTH', 'SMOOTHER', 'SPHERE', 'ROOT', 'SHARP', 'LIN', 'POW4', 'INVSQUARE', 'CONSTANT']
      '''
      
      dash_ratio = float
      '''Ratio of samples in a cycle that the brush is enabled
         @returns: float in [0, 1]
      '''
      
      dash_samples = int
      '''Length of a dash cycle measured in stroke samples
         @returns: int in [1, 10000]
      '''
      
      direction = str
      '''
         @returns: enum in ['ADD', 'SUBTRACT']
      '''
      
      elastic_deform_type = str
      '''Deformation type that is used in the brush
         @returns: enum in ['GRAB', 'GRAB_BISCALE', 'GRAB_TRISCALE', 'SCALE', 'TWIST']
      '''
      
      elastic_deform_volume_preservation = float
      '''Poisson ratio for elastic deformation. Higher values preserve volume more, but also lead to more bulging
         @returns: float in [0, 0.9]
      '''
      
      falloff_angle = float
      '''Paint most on faces pointing towards the view according to this angle
         @returns: float in [0, 1.5708]
      '''
      
      falloff_shape = str
      '''Use projected or spherical falloff
         @returns: enum in ['SPHERE', 'PROJECTED']
      '''
      
      fill_threshold = float
      '''Threshold above which filling is not propagated
         @returns: float in [0, 100]
      '''
      
      gpencil_sculpt_tool = str
      '''
         @returns: enum in ['SMOOTH', 'THICKNESS', 'STRENGTH', 'RANDOMIZE', 'GRAB', 'PUSH', 'TWIST', 'PINCH', 'CLONE']
      '''
      
      gpencil_settings = types.BrushGpencilSettings # (read only)
      '''
         @returns: BrushGpencilSettings
      '''
      
      gpencil_tool = str
      '''
         @returns: enum in ['DRAW', 'FILL', 'ERASE', 'TINT']
      '''
      
      gpencil_vertex_tool = str
      '''
         @returns: enum in ['DRAW', 'BLUR', 'AVERAGE', 'SMEAR', 'REPLACE']
      '''
      
      gpencil_weight_tool = str
      '''
         @returns: enum in ['WEIGHT']
      '''
      
      grad_spacing = int
      '''Spacing before brush gradient goes full circle
         @returns: int in [1, 10000]
      '''
      
      gradient = types.ColorRamp # (read only)
      '''
         @returns: ColorRamp
      '''
      
      gradient_fill_mode = str
      '''
         @returns: enum in ['LINEAR', 'RADIAL']
      '''
      
      gradient_stroke_mode = str
      '''
         @returns: enum in ['PRESSURE', 'SPACING_REPEAT', 'SPACING_CLAMP']
      '''
      
      hardness = float
      '''How close the brush falloff starts from the edge of the brush
         @returns: float in [0, 1]
      '''
      
      height = float
      '''Affectable height of brush (layer height for layer tool, i.e.)
         @returns: float in [0, 1]
      '''
      
      icon_filepath = str
      '''File path to brush icon
         @returns: string, (never None)
      '''
      
      image_paint_capabilities = types.BrushCapabilitiesImagePaint # (read only)
      '''
         @returns: BrushCapabilitiesImagePaint, (never None)
      '''
      
      image_tool = str
      '''
         @returns: enum in ['DRAW', 'SOFTEN', 'SMEAR', 'CLONE', 'FILL', 'MASK']
      '''
      
      invert_to_scrape_fill = bool
      '''Use Scrape or Fill tool when inverting this brush instead of inverting its displacement direction
         @returns: boolean
      '''
      
      jitter = float
      '''Jitter the position of the brush while painting
         @returns: float in [0, 1000]
      '''
      
      jitter_absolute = int
      '''Jitter the position of the brush in pixels while painting
         @returns: int in [0, 1000000]
      '''
      
      jitter_unit = str
      '''Jitter in screen space or relative to brush size
         @returns: enum in ['VIEW', 'BRUSH']
      '''
      
      mask_overlay_alpha = int
      '''
         @returns: int in [0, 100]
      '''
      
      mask_stencil_dimension = float
      '''Dimensions of mask stencil in viewport
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      mask_stencil_pos = float
      '''Position of mask stencil in viewport
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      mask_texture = types.Texture
      '''
         @returns: Texture
      '''
      
      mask_texture_slot = types.BrushTextureSlot # (read only)
      '''
         @returns: BrushTextureSlot
      '''
      
      mask_tool = str
      '''
         @returns: enum in ['DRAW', 'SMOOTH']
      '''
      
      multiplane_scrape_angle = float
      '''Angle between the planes of the crease
         @returns: float in [0, 160]
      '''
      
      normal_radius_factor = float
      '''Ratio between the brush radius and the radius that is going to be used to sample the normal
         @returns: float in [0, 2]
      '''
      
      normal_weight = float
      '''How much grab will pull vertexes out of surface during a grab
         @returns: float in [0, 1]
      '''
      
      paint_curve = types.PaintCurve
      '''Active Paint Curve
         @returns: PaintCurve
      '''
      
      plane_offset = float
      '''Adjust plane on which the brush acts towards or away from the object surface
         @returns: float in [-2, 2]
      '''
      
      plane_trim = float
      '''If a vertex is further away from offset plane than this, then it is not affected
         @returns: float in [0, 1]
      '''
      
      pose_ik_segments = int
      '''Number of segments of the inverse kinematics chain that will deform the mesh
         @returns: int in [1, 20]
      '''
      
      pose_offset = float
      '''Offset of the pose origin in relation to the brush radius
         @returns: float in [0, 2]
      '''
      
      pose_origin_type = str
      '''Method to set the rotation origins for the segments of the brush
         @returns: enum in ['TOPOLOGY', 'FACE_SETS']
      '''
      
      pose_smooth_iterations = int
      '''Smooth iterations applied after calculating the pose factor of each vertex
         @returns: int in [0, 100]
      '''
      
      rake_factor = float
      '''How much grab will follow cursor rotation
         @returns: float in [0, 10]
      '''
      
      rate = float
      '''Interval between paints for Airbrush
         @returns: float in [0.0001, 10000]
      '''
      
      sculpt_capabilities = types.BrushCapabilitiesSculpt # (read only)
      '''
         @returns: BrushCapabilitiesSculpt, (never None)
      '''
      
      sculpt_plane = str
      '''
         @returns: enum in ['AREA', 'VIEW', 'X', 'Y', 'Z']
      '''
      
      sculpt_tool = str
      '''
         @returns: enum in ['DRAW', 'DRAW_SHARP', 'CLAY', 'CLAY_STRIPS', 'CLAY_THUMB', 'LAYER', 'INFLATE', 'BLOB', 'CREASE', 'SMOOTH', 'FLATTEN', 'FILL', 'SCRAPE', 'MULTIPLANE_SCRAPE', 'PINCH', 'GRAB', 'ELASTIC_DEFORM', 'SNAKE_HOOK', 'THUMB', 'POSE', 'NUDGE', 'ROTATE', 'TOPOLOGY', 'CLOTH', 'SIMPLIFY', 'MASK', 'DRAW_FACE_SETS']
      '''
      
      secondary_color = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      sharp_threshold = float
      '''Threshold below which, no sharpening is done
         @returns: float in [0, 100]
      '''
      
      show_multiplane_scrape_planes_preview = bool
      '''Preview the scrape planes in the cursor during the stroke
         @returns: boolean
      '''
      
      size = int
      '''Radius of the brush in pixels
         @returns: int in [1, 5000]
      '''
      
      smooth_deform_type = str
      '''Deformation type that is used in the brush
         @returns: enum in ['LAPLACIAN', 'SURFACE']
      '''
      
      smooth_stroke_factor = float
      '''Higher values give a smoother stroke
         @returns: float in [0.5, 0.99]
      '''
      
      smooth_stroke_radius = int
      '''Minimum distance from last point before stroke continues
         @returns: int in [10, 200]
      '''
      
      spacing = int
      '''Spacing between brush daubs as a percentage of brush diameter
         @returns: int in [1, 1000]
      '''
      
      stencil_dimension = float
      '''Dimensions of stencil in viewport
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      stencil_pos = float
      '''Position of stencil in viewport
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      strength = float
      '''How powerful the effect of the brush is when applied
         @returns: float in [0, 10]
      '''
      
      stroke_method = str
      '''
         @returns: enum in ['DOTS', 'DRAG_DOT', 'SPACE', 'AIRBRUSH', 'ANCHORED', 'LINE', 'CURVE']
      '''
      
      surface_smooth_current_vertex = float
      '''How much the position of each individual vertex influences the final result
         @returns: float in [0, 1]
      '''
      
      surface_smooth_iterations = int
      '''Number of smoothing iterations per brush step
         @returns: int in [1, 10]
      '''
      
      surface_smooth_shape_preservation = float
      '''How much of the original shape is preserved when smoothing
         @returns: float in [0, 1]
      '''
      
      texture = types.Texture
      '''
         @returns: Texture
      '''
      
      texture_overlay_alpha = int
      '''
         @returns: int in [0, 100]
      '''
      
      texture_sample_bias = float
      '''Value added to texture samples
         @returns: float in [-1, 1]
      '''
      
      texture_slot = types.BrushTextureSlot # (read only)
      '''
         @returns: BrushTextureSlot
      '''
      
      tip_roundness = float
      '''Roundness of the brush tip
         @returns: float in [0, 1]
      '''
      
      topology_rake_factor = float
      '''Automatically align edges to the brush direction to generate cleaner topology and define sharp features. Best used on low-poly meshes as it has a performance impact
         @returns: float in [0, 1]
      '''
      
      unprojected_radius = float
      '''Radius of brush in Blender units
         @returns: float in [0.001, inf]
      '''
      
      use_accumulate = bool
      '''Accumulate stroke daubs on top of each other
         @returns: boolean
      '''
      
      use_adaptive_space = bool
      '''Space daubs according to surface orientation instead of screen space
         @returns: boolean
      '''
      
      use_airbrush = bool
      '''Keep applying paint effect while holding mouse (spray)
         @returns: boolean
      '''
      
      use_alpha = bool
      '''When this is disabled, lock alpha while painting
         @returns: boolean
      '''
      
      use_anchor = bool
      '''Keep the brush anchored to the initial location
         @returns: boolean
      '''
      
      use_automasking_boundary_edges = bool
      '''Do not affect non manifold boundary edges
         @returns: boolean
      '''
      
      use_automasking_boundary_face_sets = bool
      '''Do not affect vertices that belong to a Face Set boundary
         @returns: boolean
      '''
      
      use_automasking_face_sets = bool
      '''Affect only vertices that share Face Sets with the active vertex
         @returns: boolean
      '''
      
      use_automasking_topology = bool
      '''Affect only vertices connected to the active vertex under the brush
         @returns: boolean
      '''
      
      use_cursor_overlay = bool
      '''Show cursor in viewport
         @returns: boolean
      '''
      
      use_cursor_overlay_override = bool
      '''Don't show overlay during a stroke
         @returns: boolean
      '''
      
      use_curve = bool
      '''Define the stroke curve with a bezier curve. Dabs are separated according to spacing
         @returns: boolean
      '''
      
      use_custom_icon = bool
      '''Set the brush icon from an image file
         @returns: boolean
      '''
      
      use_edge_to_edge = bool
      '''Drag anchor brush from edge-to-edge
         @returns: boolean
      '''
      
      use_frontface = bool
      '''Brush only affects vertexes that face the viewer
         @returns: boolean
      '''
      
      use_frontface_falloff = bool
      '''Blend brush influence by how much they face the front
         @returns: boolean
      '''
      
      use_grab_active_vertex = bool
      '''Apply the maximum grab strength to the active vertex instead of the cursor location
         @returns: boolean
      '''
      
      use_inverse_smooth_pressure = bool
      '''Lighter pressure causes more smoothing to be applied
         @returns: boolean
      '''
      
      use_line = bool
      '''Draw a line with dabs separated according to spacing
         @returns: boolean
      '''
      
      use_locked_size = str
      '''Measure brush size relative to the view or the scene
         @returns: enum in ['VIEW', 'SCENE']
      '''
      
      use_multiplane_scrape_dynamic = bool
      '''The angle between the planes changes during the stroke to fit the surface under the cursor
         @returns: boolean
      '''
      
      use_offset_pressure = bool
      '''Enable tablet pressure sensitivity for offset
         @returns: boolean
      '''
      
      use_original_normal = bool
      '''When locked keep using normal of surface where stroke was initiated
         @returns: boolean
      '''
      
      use_original_plane = bool
      '''When locked keep using the plane origin of surface where stroke was initiated
         @returns: boolean
      '''
      
      use_paint_antialiasing = bool
      '''Smooths the edges of the strokes
         @returns: boolean
      '''
      
      use_paint_grease_pencil = bool
      '''Use this brush in grease pencil drawing mode
         @returns: boolean
      '''
      
      use_paint_image = bool
      '''Use this brush in texture paint mode
         @returns: boolean
      '''
      
      use_paint_sculpt = bool
      '''Use this brush in sculpt mode
         @returns: boolean
      '''
      
      use_paint_uv_sculpt = bool
      '''Use this brush in UV sculpt mode
         @returns: boolean
      '''
      
      use_paint_vertex = bool
      '''Use this brush in vertex paint mode
         @returns: boolean
      '''
      
      use_paint_weight = bool
      '''Use this brush in weight paint mode
         @returns: boolean
      '''
      
      use_persistent = bool
      '''Sculpt on a persistent layer of the mesh
         @returns: boolean
      '''
      
      use_plane_trim = bool
      '''Enable Plane Trim
         @returns: boolean
      '''
      
      use_pose_ik_anchored = bool
      '''Keep the position of the last segment in the IK chain fixed
         @returns: boolean
      '''
      
      use_pressure_jitter = bool
      '''Enable tablet pressure sensitivity for jitter
         @returns: boolean
      '''
      
      use_pressure_masking = str
      '''Pen pressure makes texture influence smaller
         @returns: enum in ['NONE', 'RAMP', 'CUTOFF']
      '''
      
      use_pressure_size = bool
      '''Enable tablet pressure sensitivity for size
         @returns: boolean
      '''
      
      use_pressure_spacing = bool
      '''Enable tablet pressure sensitivity for spacing
         @returns: boolean
      '''
      
      use_pressure_strength = bool
      '''Enable tablet pressure sensitivity for strength
         @returns: boolean
      '''
      
      use_primary_overlay = bool
      '''Show texture in viewport
         @returns: boolean
      '''
      
      use_primary_overlay_override = bool
      '''Don't show overlay during a stroke
         @returns: boolean
      '''
      
      use_restore_mesh = bool
      '''Allow a single dot to be carefully positioned
         @returns: boolean
      '''
      
      use_scene_spacing = str
      '''Calculate the brush spacing using view or scene distance
         @returns: enum in ['VIEW', 'SCENE']
      '''
      
      use_secondary_overlay = bool
      '''Show texture in viewport
         @returns: boolean
      '''
      
      use_secondary_overlay_override = bool
      '''Don't show overlay during a stroke
         @returns: boolean
      '''
      
      use_smooth_stroke = bool
      '''Brush lags behind mouse and follows a smoother path
         @returns: boolean
      '''
      
      use_space = bool
      '''Limit brush application to the distance specified by spacing
         @returns: boolean
      '''
      
      use_space_attenuation = bool
      '''Automatically adjust strength to give consistent results for different spacings
         @returns: boolean
      '''
      
      use_vertex_grease_pencil = bool
      '''Use this brush in grease pencil vertex color mode
         @returns: boolean
      '''
      
      uv_sculpt_tool = str
      '''
         @returns: enum in ['GRAB', 'RELAX', 'PINCH']
      '''
      
      vertex_paint_capabilities = types.BrushCapabilitiesVertexPaint # (read only)
      '''
         @returns: BrushCapabilitiesVertexPaint, (never None)
      '''
      
      vertex_tool = str
      '''
         @returns: enum in ['DRAW', 'BLUR', 'AVERAGE', 'SMEAR']
      '''
      
      weight = float
      '''Vertex weight when brush is applied
         @returns: float in [0, 1]
      '''
      
      weight_paint_capabilities = types.BrushCapabilitiesWeightPaint # (read only)
      '''
         @returns: BrushCapabilitiesWeightPaint, (never None)
      '''
      
      weight_tool = str
      '''
         @returns: enum in ['DRAW', 'BLUR', 'AVERAGE', 'SMEAR']
      '''
      
   class BrushCapabilities(types.bpy_struct):
      '''Read-only indications of supported operations
      '''
   
      has_overlay = bool # (read only)
      '''
         @returns: boolean
      '''
      
      has_random_texture_angle = bool # (read only)
      '''
         @returns: boolean
      '''
      
      has_smooth_stroke = bool # (read only)
      '''
         @returns: boolean
      '''
      
      has_spacing = bool # (read only)
      '''
         @returns: boolean
      '''
      
   class BrushCapabilitiesImagePaint(types.bpy_struct):
      '''Read-only indications of supported operations
      '''
   
      has_accumulate = bool # (read only)
      '''
         @returns: boolean
      '''
      
      has_color = bool # (read only)
      '''
         @returns: boolean
      '''
      
      has_radius = bool # (read only)
      '''
         @returns: boolean
      '''
      
      has_space_attenuation = bool # (read only)
      '''
         @returns: boolean
      '''
      
   class BrushCapabilitiesSculpt(types.bpy_struct):
      '''Read-only indications of which brush operations are supported by the current sculpt tool
      '''
   
      has_accumulate = bool # (read only)
      '''
         @returns: boolean
      '''
      
      has_auto_smooth = bool # (read only)
      '''
         @returns: boolean
      '''
      
      has_direction = bool # (read only)
      '''
         @returns: boolean
      '''
      
      has_gravity = bool # (read only)
      '''
         @returns: boolean
      '''
      
      has_height = bool # (read only)
      '''
         @returns: boolean
      '''
      
      has_jitter = bool # (read only)
      '''
         @returns: boolean
      '''
      
      has_normal_weight = bool # (read only)
      '''
         @returns: boolean
      '''
      
      has_persistence = bool # (read only)
      '''
         @returns: boolean
      '''
      
      has_pinch_factor = bool # (read only)
      '''
         @returns: boolean
      '''
      
      has_plane_offset = bool # (read only)
      '''
         @returns: boolean
      '''
      
      has_rake_factor = bool # (read only)
      '''
         @returns: boolean
      '''
      
      has_random_texture_angle = bool # (read only)
      '''
         @returns: boolean
      '''
      
      has_sculpt_plane = bool # (read only)
      '''
         @returns: boolean
      '''
      
      has_secondary_color = bool # (read only)
      '''
         @returns: boolean
      '''
      
      has_smooth_stroke = bool # (read only)
      '''
         @returns: boolean
      '''
      
      has_space_attenuation = bool # (read only)
      '''
         @returns: boolean
      '''
      
      has_strength_pressure = bool # (read only)
      '''
         @returns: boolean
      '''
      
      has_topology_rake = bool # (read only)
      '''
         @returns: boolean
      '''
      
   class BrushCapabilitiesVertexPaint(types.bpy_struct):
      '''Read-only indications of supported operations
      '''
   
      has_color = bool # (read only)
      '''
         @returns: boolean
      '''
      
   class BrushCapabilitiesWeightPaint(types.bpy_struct):
      '''Read-only indications of supported operations
      '''
   
      has_weight = bool # (read only)
      '''
         @returns: boolean
      '''
      
   class BrushGpencilSettings(types.bpy_struct):
      '''Settings for grease pencil brush
      '''
   
      active_smooth_factor = float
      '''Amount of smoothing while drawing
         @returns: float in [0, 1]
      '''
      
      angle = float
      '''Direction of the stroke at which brush gives maximal thickness (0° for horizontal)
         @returns: float in [-1.5708, 1.5708]
      '''
      
      angle_factor = float
      '''Reduce brush thickness by this factor when stroke is perpendicular to 'Angle' direction
         @returns: float in [0, 1]
      '''
      
      aspect = float
      '''
         @returns: float array of 2 items in [0.01, 1]
      '''
      
      curve_jitter = types.CurveMapping # (read only)
      '''Curve used for the jitter effect
         @returns: CurveMapping
      '''
      
      curve_sensitivity = types.CurveMapping # (read only)
      '''Curve used for the sensitivity
         @returns: CurveMapping
      '''
      
      curve_strength = types.CurveMapping # (read only)
      '''Curve used for the strength
         @returns: CurveMapping
      '''
      
      direction = str
      '''
         @returns: enum in ['ADD', 'SUBTRACT']
      '''
      
      eraser_mode = str
      '''Eraser Mode
         @returns: enum in ['SOFT', 'HARD', 'STROKE']
      '''
      
      eraser_strength_factor = float
      '''Amount of erasing for strength
         @returns: float in [0, 100]
      '''
      
      eraser_thickness_factor = float
      '''Amount of erasing for thickness
         @returns: float in [0, 100]
      '''
      
      fill_draw_mode = str
      '''Mode to draw boundary limits
         @returns: enum in ['BOTH', 'STROKE', 'CONTROL']
      '''
      
      fill_factor = int
      '''Multiplier for fill resolution, higher resolution is more accurate but slower
         @returns: int in [1, 8]
      '''
      
      fill_leak = int
      '''Size in pixels to consider the leak closed
         @returns: int in [0, 100]
      '''
      
      fill_simplify_level = int
      '''Number of simplify steps (large values reduce fill accuracy)
         @returns: int in [0, 10]
      '''
      
      fill_threshold = float
      '''Threshold to consider color transparent for filling
         @returns: float in [0, 1]
      '''
      
      gpencil_paint_icon = str
      '''
         @returns: enum in ['PENCIL', 'PEN', 'INK', 'INKNOISE', 'BLOCK', 'MARKER', 'AIRBRUSH', 'CHISEL', 'FILL', 'SOFT', 'HARD', 'STROKE']
      '''
      
      gpencil_sculpt_icon = str
      '''
         @returns: enum in ['SMOOTH', 'THICKNESS', 'STRENGTH', 'RANDOMIZE', 'GRAB', 'PUSH', 'TWIST', 'PINCH', 'CLONE']
      '''
      
      gpencil_vertex_icon = str
      '''
         @returns: enum in ['DRAW', 'BLUR', 'AVERAGE', 'SMEAR', 'REPLACE']
      '''
      
      gpencil_weight_icon = str
      '''
         @returns: enum in ['DRAW']
      '''
      
      hardness = float
      '''Gradient from the center of Dot and Box strokes (set to 1 for a solid stroke)
         @returns: float in [0.001, 1]
      '''
      
      input_samples = int
      '''Generate intermediate points for very fast mouse movements. Set to 0 to disable
         @returns: int in [0, 10]
      '''
      
      material = types.Material
      '''Material used for strokes drawn using this brush
         @returns: Material
      '''
      
      pen_jitter = float
      '''Jitter factor for new strokes
         @returns: float in [0, 1]
      '''
      
      pen_smooth_factor = float
      '''Amount of smoothing to apply after finish newly created strokes, to reduce jitter/noise
         @returns: float in [0, 2]
      '''
      
      pen_smooth_steps = int
      '''Number of times to smooth newly created strokes
         @returns: int in [1, 3]
      '''
      
      pen_strength = float
      '''Color strength for new strokes (affect alpha factor of color)
         @returns: float in [0, 1]
      '''
      
      pen_subdivision_steps = int
      '''Number of times to subdivide newly created strokes, for less jagged strokes
         @returns: int in [0, 3]
      '''
      
      random_pressure = float
      '''Randomness factor for pressure in new strokes
         @returns: float in [0, 1]
      '''
      
      random_strength = float
      '''Randomness factor strength in new strokes
         @returns: float in [0, 1]
      '''
      
      show_fill = bool
      '''Show transparent lines to use as boundary for filling
         @returns: boolean
      '''
      
      show_fill_boundary = bool
      '''Show help lines for filling to see boundaries
         @returns: boolean
      '''
      
      show_lasso = bool
      '''Do not draw fill color while drawing the stroke
         @returns: boolean
      '''
      
      simplify_factor = float
      '''Factor of Simplify using adaptive algorithm
         @returns: float in [0, 100]
      '''
      
      trim = bool
      '''Trim intersecting stroke ends
         @returns: boolean
      '''
      
      use_default_eraser = bool
      '''Use this brush when enable eraser with fast switch key
         @returns: boolean
      '''
      
      use_edit_position = bool
      '''The brush affects the position of the point
         @returns: boolean
      '''
      
      use_edit_pressure = bool
      '''Affect pressure values as well when smoothing strokes
         @returns: boolean
      '''
      
      use_edit_strength = bool
      '''The brush affects the color strength of the point
         @returns: boolean
      '''
      
      use_edit_thickness = bool
      '''The brush affects the thickness of the point
         @returns: boolean
      '''
      
      use_edit_uv = bool
      '''The brush affects the UV rotation of the point
         @returns: boolean
      '''
      
      use_jitter_pressure = bool
      '''Use tablet pressure for jitter
         @returns: boolean
      '''
      
      use_material_pin = bool
      '''Keep material assigned to brush
         @returns: boolean
      '''
      
      use_occlude_eraser = bool
      '''Erase only strokes visible and not occluded
         @returns: boolean
      '''
      
      use_pressure = bool
      '''Use tablet pressure
         @returns: boolean
      '''
      
      use_settings_postprocess = bool
      '''Additional post processing options for new strokes
         @returns: boolean
      '''
      
      use_settings_random = bool
      '''Random brush settings
         @returns: boolean
      '''
      
      use_settings_stabilizer = bool
      '''Draw lines with a delay to allow smooth strokes. Press Shift key to override while drawing
         @returns: boolean
      '''
      
      use_strength_pressure = bool
      '''Use tablet pressure for color strength
         @returns: boolean
      '''
      
      uv_random = float
      '''Random factor for autogenerated UV rotation
         @returns: float in [0, 1]
      '''
      
      vertex_color_factor = float
      '''Factor used to mix vertex color to get final color
         @returns: float in [0, 1]
      '''
      
      vertex_mode = str
      '''Defines how vertex color affect to the strokes
         @returns: enum in ['STROKE', 'FILL', 'BOTH']
      '''
      
   class BrushTextureSlot(types.TextureSlot):
      '''Texture slot for textures in a Brush data-block
      '''
   
      angle = float
      '''Brush texture rotation
         @returns: float in [0, 6.28319]
      '''
      
      has_random_texture_angle = bool # (read only)
      '''
         @returns: boolean
      '''
      
      has_texture_angle = bool # (read only)
      '''
         @returns: boolean
      '''
      
      has_texture_angle_source = bool # (read only)
      '''
         @returns: boolean
      '''
      
      map_mode = str
      '''
         @returns: enum in ['VIEW_PLANE', 'AREA_PLANE', 'TILED', '3D', 'RANDOM', 'STENCIL']
      '''
      
      mask_map_mode = str
      '''
         @returns: enum in ['VIEW_PLANE', 'TILED', 'RANDOM', 'STENCIL']
      '''
      
      random_angle = float
      '''Brush texture random angle
         @returns: float in [0, 6.28319]
      '''
      
      tex_paint_map_mode = str
      '''
         @returns: enum in ['VIEW_PLANE', 'TILED', '3D', 'RANDOM', 'STENCIL']
      '''
      
      use_rake = bool
      '''
         @returns: boolean
      '''
      
      use_random = bool
      '''
         @returns: boolean
      '''
      
   class BuildGpencilModifier(types.GpencilModifier):
      '''Animate strokes appearing and disappearing
      '''
   
      concurrent_time_alignment = str
      '''When should strokes start to appear/disappear
         @returns: enum in ['START', 'END']
      '''
      
      frame_end = float
      '''End Frame (when Restrict Frame Range is enabled)
         @returns: float in [-1.04857e+06, 1.04857e+06]
      '''
      
      frame_start = float
      '''Start Frame (when Restrict Frame Range is enabled)
         @returns: float in [-1.04857e+06, 1.04857e+06]
      '''
      
      invert_layer_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_layers = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      layer = str
      '''Layer name
         @returns: string, (never None)
      '''
      
      layer_pass = int
      '''Layer pass index
         @returns: int in [0, 100]
      '''
      
      length = float
      '''Maximum number of frames that the build effect can run for (unless another GP keyframe occurs before this time has elapsed)
         @returns: float in [1, 1.04857e+06]
      '''
      
      mode = str
      '''How many strokes are being animated at a time
         @returns: enum in ['SEQUENTIAL', 'CONCURRENT']
      '''
      
      start_delay = float
      '''Number of frames after each GP keyframe before the modifier has any effect
         @returns: float in [0, 1.04857e+06]
      '''
      
      transition = str
      '''How are strokes animated (i.e. are they appearing or disappearing)
         @returns: enum in ['GROW', 'SHRINK', 'FADE']
      '''
      
      use_restrict_frame_range = bool
      '''Only modify strokes during the specified frame range
         @returns: boolean
      '''
      
   class BuildModifier(types.Modifier):
      '''Build effect modifier
      '''
   
      frame_duration = float
      '''Total time the build effect requires
         @returns: float in [1, 1.04857e+06]
      '''
      
      frame_start = float
      '''Start frame of the effect
         @returns: float in [-1.04857e+06, 1.04857e+06]
      '''
      
      seed = int
      '''Seed for random if used
         @returns: int in [1, 1048574]
      '''
      
      use_random_order = bool
      '''Randomize the faces or edges during build
         @returns: boolean
      '''
      
      use_reverse = bool
      '''Deconstruct the mesh instead of building it
         @returns: boolean
      '''
      
   class CLIP_UL_tracking_objects(types.UIList):
      '''
      '''
   
      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      def draw_item(self, _context, layout, _data, item, _icon, _active_data, _active_propname, _index):
         
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class CYCLES(types.RenderEngine):
      '''
      '''
   
      def bake(self, depsgraph, obj, pass_type, pass_filter, object_id, pixel_array, num_pixels, depth, result):
         
      
         pass
      
      def render(self, depsgraph):
         
      
         pass
      
      def update(self, data, depsgraph):
         
      
         pass
      
      def update_render_passes(self, scene, srl):
         
      
         pass
      
      def update_script_node(self, node):
         
      
         pass
      
      def view_draw(self, context, depsgraph):
         
      
         pass
      
      def view_update(self, context, depsgraph):
         
      
         pass
      
   class CYCLES_RENDER_UL_aov(types.UIList):
      '''
      '''
   
      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      def draw_item(self, context, layout, data, item, icon, active_data, active_propname):
         
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class CacheFile(types.ID):
      '''
      '''
   
      animation_data = types.AnimData # (read only)
      '''Animation data for this data-block
         @returns: AnimData
      '''
      
      filepath = str
      '''Path to external displacements file
         @returns: string, (never None)
      '''
      
      forward_axis = str
      '''
         @returns: enum in ['POS_X', 'POS_Y', 'POS_Z', 'NEG_X', 'NEG_Y', 'NEG_Z']
      '''
      
      frame = float
      '''The time to use for looking up the data in the cache file, or to determine which file to use in a file sequence
         @returns: float in [-1.04857e+06, 1.04857e+06]
      '''
      
      frame_offset = float
      '''Subtracted from the current frame to use for looking up the data in the cache file, or to determine which file to use in a file sequence
         @returns: float in [-1.04857e+06, 1.04857e+06]
      '''
      
      is_sequence = bool
      '''Whether the cache is separated in a series of files
         @returns: boolean
      '''
      
      object_paths = types.AlembicObjectPaths # (read only)
      '''Paths of the objects inside the Alembic archive
         @returns: AlembicObjectPaths Collection of AlembicObjectPath
      '''
      
      override_frame = bool
      '''Whether to use a custom frame for looking up data in the cache file, instead of using the current scene frame
         @returns: boolean
      '''
      
      scale = float
      '''Value by which to enlarge or shrink the object with respect to the world's origin (only applicable through a Transform Cache constraint)
         @returns: float in [0.0001, 1000]
      '''
      
      up_axis = str
      '''
         @returns: enum in ['POS_X', 'POS_Y', 'POS_Z', 'NEG_X', 'NEG_Y', 'NEG_Z']
      '''
      
   class Camera(types.ID):
      '''Camera data-block for storing camera settings
      '''
   
      angle = float
      '''Camera lens field of view
         @returns: float in [0.00640536, 3.01675]
      '''
      
      angle_x = float
      '''Camera lens horizontal field of view
         @returns: float in [0.00640536, 3.01675]
      '''
      
      angle_y = float
      '''Camera lens vertical field of view
         @returns: float in [0.00640536, 3.01675]
      '''
      
      animation_data = types.AnimData # (read only)
      '''Animation data for this data-block
         @returns: AnimData
      '''
      
      background_images = types.CameraBackgroundImages # (read only)
      '''List of background images
         @returns: CameraBackgroundImages Collection of CameraBackgroundImage
      '''
      
      clip_end = float
      '''Camera far clipping distance
         @returns: float in [1e-06, inf]
      '''
      
      clip_start = float
      '''Camera near clipping distance
         @returns: float in [1e-06, inf]
      '''
      
      cycles = types.CyclesCameraSettings # (read only)
      '''Cycles camera settings
         @returns: CyclesCameraSettings
      '''
      
      display_size = float
      '''Apparent size of the Camera object in the 3D View
         @returns: float in [0.01, 1000]
      '''
      
      dof = types.CameraDOFSettings # (read only)
      '''
         @returns: CameraDOFSettings
      '''
      
      lens = float
      '''Perspective Camera lens value in millimeters
         @returns: float in [1, inf]
      '''
      
      lens_unit = str
      '''Unit to edit lens in for the user interface
         @returns: enum in ['MILLIMETERS', 'FOV']
      '''
      
      ortho_scale = float
      '''Orthographic Camera scale (similar to zoom)
         @returns: float in [0, inf]
      '''
      
      passepartout_alpha = float
      '''Opacity (alpha) of the darkened overlay in Camera view
         @returns: float in [0, 1]
      '''
      
      sensor_fit = str
      '''Method to fit image and field of view angle inside the sensor
         @returns: enum in ['AUTO', 'HORIZONTAL', 'VERTICAL']
      '''
      
      sensor_height = float
      '''Vertical size of the image sensor area in millimeters
         @returns: float in [1, inf]
      '''
      
      sensor_width = float
      '''Horizontal size of the image sensor area in millimeters
         @returns: float in [1, inf]
      '''
      
      shift_x = float
      '''Camera horizontal shift
         @returns: float in [-10, 10]
      '''
      
      shift_y = float
      '''Camera vertical shift
         @returns: float in [-10, 10]
      '''
      
      show_background_images = bool
      '''Display reference images behind objects in the 3D View
         @returns: boolean
      '''
      
      show_composition_center = bool
      '''Display center composition guide inside the camera view
         @returns: boolean
      '''
      
      show_composition_center_diagonal = bool
      '''Display diagonal center composition guide inside the camera view
         @returns: boolean
      '''
      
      show_composition_golden = bool
      '''Display golden ratio composition guide inside the camera view
         @returns: boolean
      '''
      
      show_composition_golden_tria_a = bool
      '''Display golden triangle A composition guide inside the camera view
         @returns: boolean
      '''
      
      show_composition_golden_tria_b = bool
      '''Display golden triangle B composition guide inside the camera view
         @returns: boolean
      '''
      
      show_composition_harmony_tri_a = bool
      '''Display harmony A composition guide inside the camera view
         @returns: boolean
      '''
      
      show_composition_harmony_tri_b = bool
      '''Display harmony B composition guide inside the camera view
         @returns: boolean
      '''
      
      show_composition_thirds = bool
      '''Display rule of thirds composition guide inside the camera view
         @returns: boolean
      '''
      
      show_limits = bool
      '''Display the clipping range and focus point on the camera
         @returns: boolean
      '''
      
      show_mist = bool
      '''Display a line from the Camera to indicate the mist area
         @returns: boolean
      '''
      
      show_name = bool
      '''Show the active Camera's name in Camera view
         @returns: boolean
      '''
      
      show_passepartout = bool
      '''Show a darkened overlay outside the image area in Camera view
         @returns: boolean
      '''
      
      show_safe_areas = bool
      '''Show TV title safe and action safe areas in Camera view
         @returns: boolean
      '''
      
      show_safe_center = bool
      '''Show safe areas to fit content in a different aspect ratio
         @returns: boolean
      '''
      
      show_sensor = bool
      '''Show sensor size (film gate) in Camera view
         @returns: boolean
      '''
      
      stereo = types.CameraStereoData # (read only)
      '''
         @returns: CameraStereoData, (never None)
      '''
      
      type = str
      '''Camera types
         @returns: enum in ['PERSP', 'ORTHO', 'PANO']
      '''
      
      def view_frame(scene=None):
         '''Return 4 points for the cameras frame (before object transformation)
            Arguments:
            @scene (Scene): Scene to use for aspect calculation, when omitted 1:1 aspect is used
               (optional)
      
            @returns: 
            (
               result_1(float):array of 3 items in [-inf, inf]
               result_2(float):array of 3 items in [-inf, inf]
               result_3(float):array of 3 items in [-inf, inf]
               result_4(float):array of 3 items in [-inf, inf]
            )
         '''
      
         pass

   class CameraBackgroundImage(types.bpy_struct):
      '''Image and settings for display in the 3D View background
      '''
   
      alpha = float
      '''Image opacity to blend the image against the background color
         @returns: float in [0, 1]
      '''
      
      clip = types.MovieClip
      '''Movie clip displayed and edited in this space
         @returns: MovieClip
      '''
      
      clip_user = types.MovieClipUser # (read only)
      '''Parameters defining which frame of the movie clip is displayed
         @returns: MovieClipUser, (never None)
      '''
      
      display_depth = str
      '''Display under or over everything
         @returns: enum in ['BACK', 'FRONT']
      '''
      
      frame_method = str
      '''How the image fits in the camera frame
         @returns: enum in ['STRETCH', 'FIT', 'CROP']
      '''
      
      image = types.Image
      '''Image displayed and edited in this space
         @returns: Image
      '''
      
      image_user = types.ImageUser # (read only)
      '''Parameters defining which layer, pass and frame of the image is displayed
         @returns: ImageUser, (never None)
      '''
      
      offset = float
      '''
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      rotation = float
      '''Rotation for the background image (ortho view only)
         @returns: float in [-inf, inf]
      '''
      
      scale = float
      '''Scale the background image
         @returns: float in [0, inf]
      '''
      
      show_background_image = bool
      '''Show this image as background
         @returns: boolean
      '''
      
      show_expanded = bool
      '''Show the expanded in the user interface
         @returns: boolean
      '''
      
      show_on_foreground = bool
      '''Show this image in front of objects in viewport
         @returns: boolean
      '''
      
      source = str
      '''Data source used for background
         @returns: enum in ['IMAGE', 'MOVIE_CLIP']
      '''
      
      use_camera_clip = bool
      '''Use movie clip from active scene camera
         @returns: boolean
      '''
      
      use_flip_x = bool
      '''Flip the background image horizontally
         @returns: boolean
      '''
      
      use_flip_y = bool
      '''Flip the background image vertically
         @returns: boolean
      '''
      
   class CameraBackgroundImages(types.bpy_struct):
      '''Collection of background images
      '''
   
      def new():
         '''Add new background image
            @returns (types.CameraBackgroundImage): Image displayed as viewport background
               
         '''
      
         return types.CameraBackgroundImage

      def remove(image):
         '''Remove background image
            Arguments:
            @image (CameraBackgroundImage): Image displayed as viewport background
               (never None)
      
         '''
      
         pass

      def clear():
         '''Remove all background images
         '''
      
         pass

   class CameraDOFSettings(types.bpy_struct):
      '''Depth of Field settings
      '''
   
      aperture_blades = int
      '''Number of blades in aperture for polygonal bokeh (at least 3)
         @returns: int in [0, 16]
      '''
      
      aperture_fstop = float
      '''F-Stop ratio (lower numbers give more defocus, higher numbers give a sharper image)
         @returns: float in [0, inf]
      '''
      
      aperture_ratio = float
      '''Distortion to simulate anamorphic lens bokeh
         @returns: float in [0.01, inf]
      '''
      
      aperture_rotation = float
      '''Rotation of blades in aperture
         @returns: float in [-3.14159, 3.14159]
      '''
      
      focus_distance = float
      '''Distance to the focus point for depth of field
         @returns: float in [0, inf]
      '''
      
      focus_object = types.Object
      '''Use this object to define the depth of field focal point
         @returns: Object
      '''
      
      use_dof = bool
      '''Use Depth of Field
         @returns: boolean
      '''
      
   class CameraSolverConstraint(types.Constraint):
      '''Lock motion to the reconstructed camera movement
      '''
   
      clip = types.MovieClip
      '''Movie Clip to get tracking data from
         @returns: MovieClip
      '''
      
      use_active_clip = bool
      '''Use active clip defined in scene
         @returns: boolean
      '''
      
   class CameraStereoData(types.bpy_struct):
      '''Stereoscopy settings for a Camera data-block
      '''
   
      convergence_distance = float
      '''The converge point for the stereo cameras (often the distance between a projector and the projection screen)
         @returns: float in [1e-05, inf]
      '''
      
      convergence_mode = str
      '''
         @returns: enum in ['OFFAXIS', 'PARALLEL', 'TOE']
      '''
      
      interocular_distance = float
      '''Set the distance between the eyes - the stereo plane distance / 30 should be fine
         @returns: float in [0, inf]
      '''
      
      pivot = str
      '''
         @returns: enum in ['LEFT', 'RIGHT', 'CENTER']
      '''
      
      pole_merge_angle_from = float
      '''Angle at which interocular distance starts to fade to 0
         @returns: float in [0, 1.5708]
      '''
      
      pole_merge_angle_to = float
      '''Angle at which interocular distance is 0
         @returns: float in [0, 1.5708]
      '''
      
      use_pole_merge = bool
      '''Fade interocular distance to 0 after the given cutoff angle
         @returns: boolean
      '''
      
      use_spherical_stereo = bool
      '''Render every pixel rotating the camera around the middle of the interocular distance
         @returns: boolean
      '''
      
   class CastModifier(types.Modifier):
      '''Modifier to cast to other shapes
      '''
   
      cast_type = str
      '''Target object shape
         @returns: enum in ['SPHERE', 'CYLINDER', 'CUBOID']
      '''
      
      factor = float
      '''
         @returns: float in [-inf, inf]
      '''
      
      invert_vertex_group = bool
      '''Invert vertex group influence
         @returns: boolean
      '''
      
      object = types.Object
      '''Control object: if available, its location determines the center of the effect
         @returns: Object
      '''
      
      radius = float
      '''Only deform vertices within this distance from the center of the effect (leave as 0 for infinite.)
         @returns: float in [0, inf]
      '''
      
      size = float
      '''Size of projection shape (leave as 0 for auto)
         @returns: float in [0, inf]
      '''
      
      use_radius_as_size = bool
      '''Use radius as size of projection shape (0 = auto)
         @returns: boolean
      '''
      
      use_transform = bool
      '''Use object transform to control projection shape
         @returns: boolean
      '''
      
      use_x = bool
      '''
         @returns: boolean
      '''
      
      use_y = bool
      '''
         @returns: boolean
      '''
      
      use_z = bool
      '''
         @returns: boolean
      '''
      
      vertex_group = str
      '''Vertex group name
         @returns: string, (never None)
      '''
      
   class ChannelDriverVariables(types.bpy_struct):
      '''Collection of channel driver Variables
      '''
   
      def new():
         '''Add a new variable for the driver
            @returns (types.DriverVariable): Newly created Driver Variable
               
         '''
      
         return types.DriverVariable

      def remove(variable):
         '''Remove an existing variable from the driver
            Arguments:
            @variable (DriverVariable): Variable to remove from the driver
               (never None)
      
         '''
      
         pass

   class ChildOfConstraint(types.Constraint):
      '''Create constraint-based parent-child relationship
      '''
   
      inverse_matrix = float
      '''Transformation matrix to apply before
         @returns: float multi-dimensional array of 4 * 4 items in [-inf, inf]
      '''
      
      set_inverse_pending = bool
      '''Set to true to request recalculation of the inverse matrix
         @returns: boolean
      '''
      
      subtarget = str
      '''Armature bone, mesh or lattice vertex group, ...
         @returns: string, (never None)
      '''
      
      target = types.Object
      '''Target object
         @returns: Object
      '''
      
      use_location_x = bool
      '''Use X Location of Parent
         @returns: boolean
      '''
      
      use_location_y = bool
      '''Use Y Location of Parent
         @returns: boolean
      '''
      
      use_location_z = bool
      '''Use Z Location of Parent
         @returns: boolean
      '''
      
      use_rotation_x = bool
      '''Use X Rotation of Parent
         @returns: boolean
      '''
      
      use_rotation_y = bool
      '''Use Y Rotation of Parent
         @returns: boolean
      '''
      
      use_rotation_z = bool
      '''Use Z Rotation of Parent
         @returns: boolean
      '''
      
      use_scale_x = bool
      '''Use X Scale of Parent
         @returns: boolean
      '''
      
      use_scale_y = bool
      '''Use Y Scale of Parent
         @returns: boolean
      '''
      
      use_scale_z = bool
      '''Use Z Scale of Parent
         @returns: boolean
      '''
      
   class ChildParticle(types.bpy_struct):
      '''Child particle interpolated from simulated or edited particles
      '''
   
   class ClampToConstraint(types.Constraint):
      '''Constrain an object's location to the nearest point along the target path
      '''
   
      main_axis = str
      '''Main axis of movement
         @returns: enum in ['CLAMPTO_AUTO', 'CLAMPTO_X', 'CLAMPTO_Y', 'CLAMPTO_Z']
      '''
      
      target = types.Object
      '''Target Object (Curves only)
         @returns: Object
      '''
      
      use_cyclic = bool
      '''Treat curve as cyclic curve (no clamping to curve bounding box)
         @returns: boolean
      '''
      
   class ClothCollisionSettings(types.bpy_struct):
      '''Cloth simulation settings for self collision and collision with other objects
      '''
   
      collection = types.Collection
      '''Limit colliders to this Collection
         @returns: Collection
      '''
      
      collision_quality = int
      '''How many collision iterations should be done. (higher is better quality but slower)
         @returns: int in [1, 32767]
      '''
      
      damping = float
      '''Amount of velocity lost on collision
         @returns: float in [0, 1]
      '''
      
      distance_min = float
      '''Minimum distance between collision objects before collision response takes effect
         @returns: float in [0.001, 1]
      '''
      
      friction = float
      '''Friction force if a collision happened (higher = less movement)
         @returns: float in [0, 80]
      '''
      
      impulse_clamp = float
      '''Clamp collision impulses to avoid instability (0.0 to disable clamping)
         @returns: float in [0, 100]
      '''
      
      self_distance_min = float
      '''Minimum distance between cloth faces before collision response takes effect
         @returns: float in [0.001, 0.1]
      '''
      
      self_friction = float
      '''Friction with self contact
         @returns: float in [0, 80]
      '''
      
      self_impulse_clamp = float
      '''Clamp collision impulses to avoid instability (0.0 to disable clamping)
         @returns: float in [0, 100]
      '''
      
      use_collision = bool
      '''Enable collisions with other objects
         @returns: boolean
      '''
      
      use_self_collision = bool
      '''Enable self collisions
         @returns: boolean
      '''
      
      vertex_group_self_collisions = str
      '''Vertex group to define vertices which are not used during self collisions
         @returns: string, (never None)
      '''
      
   class ClothModifier(types.Modifier):
      '''Cloth simulation modifier
      '''
   
      collision_settings = types.ClothCollisionSettings # (read only)
      '''
         @returns: ClothCollisionSettings, (never None)
      '''
      
      hair_grid_max = float # (read only)
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      hair_grid_min = float # (read only)
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      hair_grid_resolution = int # (read only)
      '''
         @returns: int array of 3 items in [-inf, inf]
      '''
      
      point_cache = types.PointCache # (read only)
      '''
         @returns: PointCache, (never None)
      '''
      
      settings = types.ClothSettings # (read only)
      '''
         @returns: ClothSettings, (never None)
      '''
      
      solver_result = types.ClothSolverResult # (read only)
      '''
         @returns: ClothSolverResult
      '''
      
   class ClothSettings(types.bpy_struct):
      '''Cloth simulation settings for an object
      '''
   
      air_damping = float
      '''Air has normally some thickness which slows falling things down
         @returns: float in [0, 10]
      '''
      
      bending_damping = float
      '''Amount of damping in bending behavior
         @returns: float in [0, 1000]
      '''
      
      bending_model = str
      '''Physical model for simulating bending forces
         @returns: enum in ['ANGULAR', 'LINEAR']
      '''
      
      bending_stiffness = float
      '''How much the material resists bending
         @returns: float in [0, 10000]
      '''
      
      bending_stiffness_max = float
      '''Maximum bending stiffness value
         @returns: float in [0, 10000]
      '''
      
      collider_friction = float
      '''
         @returns: float in [0, 1]
      '''
      
      compression_damping = float
      '''Amount of damping in compression behavior
         @returns: float in [0, 50]
      '''
      
      compression_stiffness = float
      '''How much the material resists compression
         @returns: float in [0, 10000]
      '''
      
      compression_stiffness_max = float
      '''Maximum compression stiffness value
         @returns: float in [0, 10000]
      '''
      
      density_strength = float
      '''Influence of target density on the simulation
         @returns: float in [0, 1]
      '''
      
      density_target = float
      '''Maximum density of hair
         @returns: float in [0, 10000]
      '''
      
      effector_weights = types.EffectorWeights # (read only)
      '''
         @returns: EffectorWeights
      '''
      
      goal_default = float
      '''Default Goal (vertex target position) value, when no Vertex Group used
         @returns: float in [0, 1]
      '''
      
      goal_friction = float
      '''Goal (vertex target position) friction
         @returns: float in [0, 50]
      '''
      
      goal_max = float
      '''Goal maximum, vertex group weights are scaled to match this range
         @returns: float in [0, 1]
      '''
      
      goal_min = float
      '''Goal minimum, vertex group weights are scaled to match this range
         @returns: float in [0, 1]
      '''
      
      goal_spring = float
      '''Goal (vertex target position) spring stiffness
         @returns: float in [0, 0.999]
      '''
      
      gravity = float
      '''Gravity or external force vector
         @returns: float array of 3 items in [-100, 100]
      '''
      
      internal_compression_stiffness = float
      '''How much the material resists compression
         @returns: float in [0, 10000]
      '''
      
      internal_compression_stiffness_max = float
      '''Maximum compression stiffness value
         @returns: float in [0, 10000]
      '''
      
      internal_friction = float
      '''
         @returns: float in [0, 1]
      '''
      
      internal_spring_max_diversion = float
      '''How much the rays used to connect the internal points can diverge from the vertex normal
         @returns: float in [0, 0.785398]
      '''
      
      internal_spring_max_length = float
      '''The maximum length an internal spring can have during creation. If the distance between internal points is greater than this, no internal spring will be created between these points. A length of zero means that there is no length limit
         @returns: float in [0, 1000]
      '''
      
      internal_spring_normal_check = bool
      '''Require the points the internal springs connect to have opposite normal directions
         @returns: boolean
      '''
      
      internal_tension_stiffness = float
      '''How much the material resists stretching
         @returns: float in [0, 10000]
      '''
      
      internal_tension_stiffness_max = float
      '''Maximum tension stiffness value
         @returns: float in [0, 10000]
      '''
      
      mass = float
      '''The mass of each vertex on the cloth material
         @returns: float in [0, inf]
      '''
      
      pin_stiffness = float
      '''Pin (vertex target position) spring stiffness
         @returns: float in [0, 50]
      '''
      
      pressure_factor = float
      '''Air pressure scaling factor
         @returns: float in [0, 10000]
      '''
      
      quality = int
      '''Quality of the simulation in steps per frame (higher is better quality but slower)
         @returns: int in [1, inf]
      '''
      
      rest_shape_key = types.ShapeKey
      '''Shape key to use the rest spring lengths from
         @returns: ShapeKey
      '''
      
      sewing_force_max = float
      '''Maximum sewing force
         @returns: float in [0, 10000]
      '''
      
      shear_damping = float
      '''Amount of damping in shearing behavior
         @returns: float in [0, 50]
      '''
      
      shear_stiffness = float
      '''How much the material resists shearing
         @returns: float in [0, 10000]
      '''
      
      shear_stiffness_max = float
      '''Maximum shear scaling value
         @returns: float in [0, 10000]
      '''
      
      shrink_max = float
      '''Max amount to shrink cloth by
         @returns: float in [-inf, 1]
      '''
      
      shrink_min = float
      '''Factor by which to shrink cloth
         @returns: float in [-inf, 1]
      '''
      
      target_volume = float
      '''The mesh volume where the inner/outer pressure will be the same. If set to zero the volume will not contribute to the total pressure
         @returns: float in [0, 10000]
      '''
      
      tension_damping = float
      '''Amount of damping in stretching behavior
         @returns: float in [0, 50]
      '''
      
      tension_stiffness = float
      '''How much the material resists stretching
         @returns: float in [0, 10000]
      '''
      
      tension_stiffness_max = float
      '''Maximum tension stiffness value
         @returns: float in [0, 10000]
      '''
      
      time_scale = float
      '''Cloth speed is multiplied by this value
         @returns: float in [0, inf]
      '''
      
      uniform_pressure_force = float
      '''The uniform pressure that is constantly applied to the mesh. Can be negative
         @returns: float in [-10000, 10000]
      '''
      
      use_dynamic_mesh = bool
      '''Make simulation respect deformations in the base mesh
         @returns: boolean
      '''
      
      use_internal_springs = bool
      '''Simulate an internal volume structure by creating springs connecting the opposite sides of the mesh
         @returns: boolean
      '''
      
      use_pressure = bool
      '''Simulate pressure inside a closed cloth mesh
         @returns: boolean
      '''
      
      use_pressure_volume = bool
      '''Use the Volume parameter as the initial volume
         @returns: boolean
      '''
      
      use_sewing_springs = bool
      '''Pulls loose edges together
         @returns: boolean
      '''
      
      vertex_group_bending = str
      '''Vertex group for fine control over bending stiffness
         @returns: string, (never None)
      '''
      
      vertex_group_intern = str
      '''Vertex group for fine control over the internal spring stiffness
         @returns: string, (never None)
      '''
      
      vertex_group_mass = str
      '''Vertex Group for pinning of vertices
         @returns: string, (never None)
      '''
      
      vertex_group_pressure = str
      '''Vertex Group for where to apply pressure. Zero weight means no pressure while a weight of one means full pressure. Faces with a vertex that has zero weight will be excluded from the volume calculation
         @returns: string, (never None)
      '''
      
      vertex_group_shear_stiffness = str
      '''Vertex group for fine control over shear stiffness
         @returns: string, (never None)
      '''
      
      vertex_group_shrink = str
      '''Vertex Group for shrinking cloth
         @returns: string, (never None)
      '''
      
      vertex_group_structural_stiffness = str
      '''Vertex group for fine control over structural stiffness
         @returns: string, (never None)
      '''
      
      voxel_cell_size = float
      '''Size of the voxel grid cells for interaction effects
         @returns: float in [0.0001, 10000]
      '''
      
   class ClothSolverResult(types.bpy_struct):
      '''Result of cloth solver iteration
      '''
   
      avg_error = float # (read only)
      '''Average error during substeps
         @returns: float in [-inf, inf]
      '''
      
      avg_iterations = float # (read only)
      '''Average iterations during substeps
         @returns: float in [-inf, inf]
      '''
      
      max_error = float # (read only)
      '''Maximum error during substeps
         @returns: float in [-inf, inf]
      '''
      
      max_iterations = int # (read only)
      '''Maximum iterations during substeps
         @returns: int in [-inf, inf]
      '''
      
      min_error = float # (read only)
      '''Minimum error during substeps
         @returns: float in [-inf, inf]
      '''
      
      min_iterations = int # (read only)
      '''Minimum iterations during substeps
         @returns: int in [-inf, inf]
      '''
      
      status = str # (read only)
      '''Status of the solver iteration
         @returns: enum set in {'SUCCESS', 'NUMERICAL_ISSUE', 'NO_CONVERGENCE', 'INVALID_INPUT'}
      '''
      
   class CloudsTexture(types.Texture):
      '''Procedural noise texture
      '''
   
      cloud_type = str
      '''Determine whether Noise returns grayscale or RGB values
         @returns: enum in ['GRAYSCALE', 'COLOR']
      '''
      
      nabla = float
      '''Size of derivative offset used for calculating normal
         @returns: float in [0.001, 0.1]
      '''
      
      noise_basis = str
      '''Noise basis used for turbulence
         @returns: enum in ['BLENDER_ORIGINAL', 'ORIGINAL_PERLIN', 'IMPROVED_PERLIN', 'VORONOI_F1', 'VORONOI_F2', 'VORONOI_F3', 'VORONOI_F4', 'VORONOI_F2_F1', 'VORONOI_CRACKLE', 'CELL_NOISE']
      '''
      
      noise_depth = int
      '''Depth of the cloud calculation
         @returns: int in [0, 30]
      '''
      
      noise_scale = float
      '''Scaling for noise input
         @returns: float in [0.0001, inf]
      '''
      
      noise_type = str
      '''
         @returns: enum in ['SOFT_NOISE', 'HARD_NOISE']
      '''
      
      users_material = None # (readonly)
      '''Materials that use this texture
         
      '''
      
      
      users_object_modifier = None # (readonly)
      '''Object modifiers that use this texture
         
      '''
      
      
   class Collection(types.ID):
      '''Collection of Object data-blocks
      '''
   
      all_objects = types.Object # (read only)
      '''Objects that are in this collection and its child collections
         @returns: Collection of Object
      '''
      
      children = types.CollectionChildren # (read only)
      '''Collections that are immediate children of this collection
         @returns: CollectionChildren Collection of Collection
      '''
      
      hide_render = bool
      '''Globally disable in renders
         @returns: boolean
      '''
      
      hide_select = bool
      '''Disable selection in viewport
         @returns: boolean
      '''
      
      hide_viewport = bool
      '''Globally disable in viewports
         @returns: boolean
      '''
      
      instance_offset = float
      '''Offset from the origin to use when instancing
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      objects = types.CollectionObjects # (read only)
      '''Objects that are directly in this collection
         @returns: CollectionObjects Collection of Object
      '''
      
      users_dupli_group = None # (readonly)
      '''The collection instance objects this collection is used in
         
      '''
      
      
   class CollectionChildren(types.bpy_struct):
      '''Collection of child collections
      '''
   
      def link(child):
         '''Add this collection as child of this collection
            Arguments:
            @child (Collection): Collection to add
               (never None)
      
         '''
      
         pass

      def unlink(child):
         '''Remove this child collection from a collection
            Arguments:
            @child (Collection): Collection to remove
               
      
         '''
      
         pass

   class CollectionObjects(types.bpy_struct):
      '''Collection of collection objects
      '''
   
      def link(object):
         '''Add this object to a collection
            Arguments:
            @object (Object): Object to add
               (never None)
      
         '''
      
         pass

      def unlink(object):
         '''Remove this object from a collection
            Arguments:
            @object (Object): Object to remove
               
      
         '''
      
         pass

   class CollectionProperty(types.Property):
      '''RNA collection property to define lists, arrays and mappings
      '''
   
      fixed_type = types.Struct # (read only)
      '''Fixed pointer type, empty if variable type
         @returns: Struct
      '''
      
   class CollisionModifier(types.Modifier):
      '''Collision modifier defining modifier stack position used for collision
      '''
   
      settings = types.CollisionSettings # (read only)
      '''
         @returns: CollisionSettings, (never None)
      '''
      
   class CollisionSettings(types.bpy_struct):
      '''Collision settings for object in physics simulation
      '''
   
      absorption = float
      '''How much of effector force gets lost during collision with this object (in percent)
         @returns: float in [0, 1]
      '''
      
      cloth_friction = float
      '''Friction for cloth collisions
         @returns: float in [0, 80]
      '''
      
      damping = float
      '''Amount of damping during collision
         @returns: float in [0, 1]
      '''
      
      damping_factor = float
      '''Amount of damping during particle collision
         @returns: float in [0, 1]
      '''
      
      damping_random = float
      '''Random variation of damping
         @returns: float in [0, 1]
      '''
      
      friction_factor = float
      '''Amount of friction during particle collision
         @returns: float in [0, 1]
      '''
      
      friction_random = float
      '''Random variation of friction
         @returns: float in [0, 1]
      '''
      
      permeability = float
      '''Chance that the particle will pass through the mesh
         @returns: float in [0, 1]
      '''
      
      stickiness = float
      '''Amount of stickiness to surface collision
         @returns: float in [0, 10]
      '''
      
      thickness_inner = float
      '''Inner face thickness (only used by softbodies)
         @returns: float in [0.001, 1]
      '''
      
      thickness_outer = float
      '''Outer face thickness
         @returns: float in [0.001, 1]
      '''
      
      use = bool
      '''Enable this objects as a collider for physics systems
         @returns: boolean
      '''
      
      use_culling = bool
      '''Cloth collision acts with respect to the collider normals (improves penetration recovery)
         @returns: boolean
      '''
      
      use_normal = bool
      '''Cloth collision impulses act in the direction of the collider normals (more reliable in some cases)
         @returns: boolean
      '''
      
      use_particle_kill = bool
      '''Kill collided particles
         @returns: boolean
      '''
      
   class ColorBalanceModifier(types.SequenceModifier):
      '''Color balance modifier for sequence strip
      '''
   
      color_balance = types.SequenceColorBalanceData # (read only)
      '''
         @returns: SequenceColorBalanceData
      '''
      
      color_multiply = float
      '''Multiply the intensity of each pixel
         @returns: float in [0, 20]
      '''
      
   class ColorGpencilModifier(types.GpencilModifier):
      '''Change Hue/Saturation modifier
      '''
   
      curve = types.CurveMapping # (read only)
      '''Custom curve to apply effect
         @returns: CurveMapping
      '''
      
      hue = float
      '''Color Hue
         @returns: float in [0, 1]
      '''
      
      invert_layer_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_layers = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_material_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_materials = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      layer = str
      '''Layer name
         @returns: string, (never None)
      '''
      
      layer_pass = int
      '''Layer pass index
         @returns: int in [0, 100]
      '''
      
      material = str
      '''Material name
         @returns: string, (never None)
      '''
      
      modify_color = str
      '''Set what colors of the stroke are affected
         @returns: enum in ['BOTH', 'STROKE', 'FILL']
      '''
      
      pass_index = int
      '''Pass index
         @returns: int in [0, 100]
      '''
      
      saturation = float
      '''Color Saturation
         @returns: float in [0, inf]
      '''
      
      use_custom_curve = bool
      '''Use a custom curve to define color effect along the strokes
         @returns: boolean
      '''
      
      value = float
      '''Color Value
         @returns: float in [0, inf]
      '''
      
   class ColorManagedDisplaySettings(types.bpy_struct):
      '''Color management specific to display device
      '''
   
      display_device = str
      '''Display device name
         @returns: enum in ['NONE']
      '''
      
   class ColorManagedInputColorspaceSettings(types.bpy_struct):
      '''Input color space settings
      '''
   
      is_data = bool
      '''Treat image as non-color data without color management, like normal or displacement maps
         @returns: boolean
      '''
      
      name = str
      '''Color space in the image file, to convert to and from when saving and loading the image
         @returns: enum in ['Filmic Log', 'Linear', 'Linear ACES', 'Non-Color', 'Raw', 'sRGB', 'XYZ']
      '''
      
   class ColorManagedSequencerColorspaceSettings(types.bpy_struct):
      '''Input color space settings
      '''
   
      name = str
      '''Color space that the sequencer operates in
         @returns: enum in ['Filmic Log', 'Linear', 'Linear ACES', 'Non-Color', 'Raw', 'sRGB', 'XYZ']
      '''
      
   class ColorManagedViewSettings(types.bpy_struct):
      '''Color management settings used for displaying images on the display
      '''
   
      curve_mapping = types.CurveMapping # (read only)
      '''Color curve mapping applied before display transform
         @returns: CurveMapping
      '''
      
      exposure = float
      '''Exposure (stops) applied before display transform
         @returns: float in [-32, 32]
      '''
      
      gamma = float
      '''Amount of gamma modification applied after display transform
         @returns: float in [0, 5]
      '''
      
      look = str
      '''Additional transform applied before view transform for an artistic needs
         @returns: enum in ['NONE']
      '''
      
      use_curve_mapping = bool
      '''Use RGB curved for pre-display transformation
         @returns: boolean
      '''
      
      view_transform = str
      '''View used when converting image to a display space
         @returns: enum in ['NONE']
      '''
      
   class ColorMapping(types.bpy_struct):
      '''Color mapping settings
      '''
   
      blend_color = float
      '''Blend color to mix with texture output color
         @returns: float array of 3 items in [0, inf]
      '''
      
      blend_factor = float
      '''
         @returns: float in [-inf, inf]
      '''
      
      blend_type = str
      '''Mode used to mix with texture output color
         @returns: enum in ['MIX', 'DARKEN', 'MULTIPLY', 'LIGHTEN', 'SCREEN', 'ADD', 'OVERLAY', 'SOFT_LIGHT', 'LINEAR_LIGHT', 'DIFFERENCE', 'SUBTRACT', 'DIVIDE', 'HUE', 'SATURATION', 'COLOR', 'VALUE']
      '''
      
      brightness = float
      '''Adjust the brightness of the texture
         @returns: float in [0, 2]
      '''
      
      color_ramp = types.ColorRamp # (read only)
      '''
         @returns: ColorRamp
      '''
      
      contrast = float
      '''Adjust the contrast of the texture
         @returns: float in [0, 5]
      '''
      
      saturation = float
      '''Adjust the saturation of colors in the texture
         @returns: float in [0, 2]
      '''
      
      use_color_ramp = bool
      '''Toggle color ramp operations
         @returns: boolean
      '''
      
   class ColorMixSequence(types.EffectSequence):
      '''Color Mix Sequence
      '''
   
      blend_effect = str
      '''Method for controlling how the strip combines with other strips
         @returns: enum in ['DARKEN', 'MULTIPLY', 'BURN', 'LINEAR_BURN', 'LIGHTEN', 'SCREEN', 'DODGE', 'ADD', 'OVERLAY', 'SOFT_LIGHT', 'HARD_LIGHT', 'VIVID_LIGHT', 'LINEAR_LIGHT', 'PIN_LIGHT', 'DIFFERENCE', 'EXCLUSION', 'SUBTRACT', 'HUE', 'SATURATION', 'COLOR', 'VALUE']
      '''
      
      factor = float
      '''Percentage of how much the strip's colors affect other strips
         @returns: float in [0, 1]
      '''
      
      input_1 = types.Sequence
      '''First input for the effect strip
         @returns: Sequence, (never None)
      '''
      
      input_2 = types.Sequence
      '''Second input for the effect strip
         @returns: Sequence, (never None)
      '''
      
      input_count = int # (read only)
      '''
         @returns: int in [0, inf]
      '''
      
   class ColorRamp(types.bpy_struct):
      '''Color ramp mapping a scalar value to a color
      '''
   
      color_mode = str
      '''Set color mode to use for interpolation
         @returns: enum in ['RGB', 'HSV', 'HSL']
      '''
      
      elements = types.ColorRampElements # (read only)
      '''
         @returns: ColorRampElements Collection of ColorRampElement
      '''
      
      hue_interpolation = str
      '''Set color interpolation
         @returns: enum in ['NEAR', 'FAR', 'CW', 'CCW']
      '''
      
      interpolation = str
      '''Set interpolation between color stops
         @returns: enum in ['EASE', 'CARDINAL', 'LINEAR', 'B_SPLINE', 'CONSTANT']
      '''
      
      def evaluate(position):
         '''Evaluate ColorRamp
            Arguments:
            @position (float): Evaluate ColorRamp at position
               in [0, 1]
      
            @returns (float): Color at given position
               array of 4 items in [-inf, inf]
         '''
      
         return float

   class ColorRampElement(types.bpy_struct):
      '''Element defining a color at a position in the color ramp
      '''
   
      alpha = float
      '''Set alpha of selected color stop
         @returns: float in [0, inf]
      '''
      
      color = float
      '''Set color of selected color stop
         @returns: float array of 4 items in [0, inf]
      '''
      
      position = float
      '''Set position of selected color stop
         @returns: float in [0, 1]
      '''
      
   class ColorRampElements(types.bpy_struct):
      '''Collection of Color Ramp Elements
      '''
   
      def new(position):
         '''Add element to ColorRamp
            Arguments:
            @position (float): Position to add element
               in [0, 1]
      
            @returns (types.ColorRampElement): New element
               
         '''
      
         return types.ColorRampElement

      def remove(element):
         '''Delete element from ColorRamp
            Arguments:
            @element (ColorRampElement): Element to remove
               (never None)
      
         '''
      
         pass

   class ColorSequence(types.EffectSequence):
      '''Sequence strip creating an image filled with a single color
      '''
   
      color = float
      '''Effect Strip color
         @returns: float array of 3 items in [0, inf]
      '''
      
      input_count = int # (read only)
      '''
         @returns: int in [0, inf]
      '''
      
   class CompositorNode(types.NodeInternal):
      '''
      '''
   
      def tag_need_exec():
         '''Tag the node for compositor update
         '''
      
         pass

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeAlphaOver(types.CompositorNode):
      '''
      '''
   
      premul = float
      '''Mix Factor
         @returns: float in [0, 1]
      '''
      
      use_premultiply = bool
      '''
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeBilateralblur(types.CompositorNode):
      '''
      '''
   
      iterations = int
      '''
         @returns: int in [1, 128]
      '''
      
      sigma_color = float
      '''
         @returns: float in [0.01, 3]
      '''
      
      sigma_space = float
      '''
         @returns: float in [0.01, 30]
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeBlur(types.CompositorNode):
      '''
      '''
   
      aspect_correction = str
      '''Type of aspect correction to use
         @returns: enum in ['NONE', 'Y', 'X']
      '''
      
      factor = float
      '''
         @returns: float in [0, 2]
      '''
      
      factor_x = float
      '''
         @returns: float in [0, 100]
      '''
      
      factor_y = float
      '''
         @returns: float in [0, 100]
      '''
      
      filter_type = str
      '''
         @returns: enum in ['FLAT', 'TENT', 'QUAD', 'CUBIC', 'GAUSS', 'FAST_GAUSS', 'CATROM', 'MITCH']
      '''
      
      size_x = int
      '''
         @returns: int in [0, 2048]
      '''
      
      size_y = int
      '''
         @returns: int in [0, 2048]
      '''
      
      use_bokeh = bool
      '''Use circular filter (slower)
         @returns: boolean
      '''
      
      use_extended_bounds = bool
      '''Extend bounds of the input image to fully fit blurred image
         @returns: boolean
      '''
      
      use_gamma_correction = bool
      '''Apply filter on gamma corrected values
         @returns: boolean
      '''
      
      use_relative = bool
      '''Use relative (percent) values to define blur radius
         @returns: boolean
      '''
      
      use_variable_size = bool
      '''Support variable blur per-pixel when using an image for size input
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeBokehBlur(types.CompositorNode):
      '''
      '''
   
      blur_max = float
      '''Blur limit, maximum CoC radius
         @returns: float in [0, 10000]
      '''
      
      use_extended_bounds = bool
      '''Extend bounds of the input image to fully fit blurred image
         @returns: boolean
      '''
      
      use_variable_size = bool
      '''Support variable blur per-pixel when using an image for size input
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeBokehImage(types.CompositorNode):
      '''
      '''
   
      angle = float
      '''Angle of the bokeh
         @returns: float in [-12.5664, 12.5664]
      '''
      
      catadioptric = float
      '''Level of catadioptric of the bokeh
         @returns: float in [-0, 1]
      '''
      
      flaps = int
      '''Number of flaps
         @returns: int in [3, 24]
      '''
      
      rounding = float
      '''Level of rounding of the bokeh
         @returns: float in [-0, 1]
      '''
      
      shift = float
      '''Shift of the lens components
         @returns: float in [-1, 1]
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeBoxMask(types.CompositorNode):
      '''
      '''
   
      height = float
      '''Height of the box
         @returns: float in [0, 2]
      '''
      
      mask_type = str
      '''
         @returns: enum in ['ADD', 'SUBTRACT', 'MULTIPLY', 'NOT']
      '''
      
      rotation = float
      '''Rotation angle of the box
         @returns: float in [-31.4159, 31.4159]
      '''
      
      width = float
      '''Width of the box
         @returns: float in [0, 2]
      '''
      
      x = float
      '''X position of the middle of the box
         @returns: float in [-1, 2]
      '''
      
      y = float
      '''Y position of the middle of the box
         @returns: float in [-1, 2]
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeBrightContrast(types.CompositorNode):
      '''
      '''
   
      use_premultiply = bool
      '''Keep output image premultiplied alpha
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeChannelMatte(types.CompositorNode):
      '''
      '''
   
      color_space = str
      '''
         @returns: enum in ['RGB', 'HSV', 'YUV', 'YCC']
      '''
      
      limit_channel = str
      '''Limit by this channel's value
         @returns: enum in ['R', 'G', 'B']
      '''
      
      limit_max = float
      '''Values higher than this setting are 100% opaque
         @returns: float in [-inf, inf]
      '''
      
      limit_method = str
      '''Algorithm to use to limit channel
         @returns: enum in ['SINGLE', 'MAX']
      '''
      
      limit_min = float
      '''Values lower than this setting are 100% keyed
         @returns: float in [-inf, inf]
      '''
      
      matte_channel = str
      '''Channel used to determine matte
         @returns: enum in ['R', 'G', 'B']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeChromaMatte(types.CompositorNode):
      '''
      '''
   
      gain = float
      '''Alpha falloff
         @returns: float in [0, 1]
      '''
      
      lift = float
      '''Alpha lift
         @returns: float in [0, 1]
      '''
      
      shadow_adjust = float
      '''Adjusts the brightness of any shadows captured
         @returns: float in [0, 1]
      '''
      
      threshold = float
      '''Tolerance below which colors will be considered as exact matches
         @returns: float in [0, 0.523599]
      '''
      
      tolerance = float
      '''Tolerance for a color to be considered a keying color
         @returns: float in [0.0174533, 1.39626]
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeColorBalance(types.CompositorNode):
      '''
      '''
   
      correction_method = str
      '''
         @returns: enum in ['LIFT_GAMMA_GAIN', 'OFFSET_POWER_SLOPE']
      '''
      
      gain = float
      '''Correction for Highlights
         @returns: float array of 3 items in [0, inf]
      '''
      
      gamma = float
      '''Correction for Midtones
         @returns: float array of 3 items in [0, inf]
      '''
      
      lift = float
      '''Correction for Shadows
         @returns: float array of 3 items in [0, inf]
      '''
      
      offset = float
      '''Correction for entire tonal range
         @returns: float array of 3 items in [0, inf]
      '''
      
      offset_basis = float
      '''Support negative color by using this as the RGB basis
         @returns: float in [-inf, inf]
      '''
      
      power = float
      '''Correction for Midtones
         @returns: float array of 3 items in [0, inf]
      '''
      
      slope = float
      '''Correction for Highlights
         @returns: float array of 3 items in [0, inf]
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeColorCorrection(types.CompositorNode):
      '''
      '''
   
      blue = bool
      '''Blue channel active
         @returns: boolean
      '''
      
      green = bool
      '''Green channel active
         @returns: boolean
      '''
      
      highlights_contrast = float
      '''Highlights contrast
         @returns: float in [0, 4]
      '''
      
      highlights_gain = float
      '''Highlights gain
         @returns: float in [0, 4]
      '''
      
      highlights_gamma = float
      '''Highlights gamma
         @returns: float in [0, 4]
      '''
      
      highlights_lift = float
      '''Highlights lift
         @returns: float in [-1, 1]
      '''
      
      highlights_saturation = float
      '''Highlights saturation
         @returns: float in [0, 4]
      '''
      
      master_contrast = float
      '''Master contrast
         @returns: float in [0, 4]
      '''
      
      master_gain = float
      '''Master gain
         @returns: float in [0, 4]
      '''
      
      master_gamma = float
      '''Master gamma
         @returns: float in [0, 4]
      '''
      
      master_lift = float
      '''Master lift
         @returns: float in [-1, 1]
      '''
      
      master_saturation = float
      '''Master saturation
         @returns: float in [0, 4]
      '''
      
      midtones_contrast = float
      '''Midtones contrast
         @returns: float in [0, 4]
      '''
      
      midtones_end = float
      '''End of midtones
         @returns: float in [0, 1]
      '''
      
      midtones_gain = float
      '''Midtones gain
         @returns: float in [0, 4]
      '''
      
      midtones_gamma = float
      '''Midtones gamma
         @returns: float in [0, 4]
      '''
      
      midtones_lift = float
      '''Midtones lift
         @returns: float in [-1, 1]
      '''
      
      midtones_saturation = float
      '''Midtones saturation
         @returns: float in [0, 4]
      '''
      
      midtones_start = float
      '''Start of midtones
         @returns: float in [0, 1]
      '''
      
      red = bool
      '''Red channel active
         @returns: boolean
      '''
      
      shadows_contrast = float
      '''Shadows contrast
         @returns: float in [0, 4]
      '''
      
      shadows_gain = float
      '''Shadows gain
         @returns: float in [0, 4]
      '''
      
      shadows_gamma = float
      '''Shadows gamma
         @returns: float in [0, 4]
      '''
      
      shadows_lift = float
      '''Shadows lift
         @returns: float in [-1, 1]
      '''
      
      shadows_saturation = float
      '''Shadows saturation
         @returns: float in [0, 4]
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeColorMatte(types.CompositorNode):
      '''
      '''
   
      color_hue = float
      '''Hue tolerance for colors to be considered a keying color
         @returns: float in [0, 1]
      '''
      
      color_saturation = float
      '''Saturation Tolerance for the color
         @returns: float in [0, 1]
      '''
      
      color_value = float
      '''Value Tolerance for the color
         @returns: float in [0, 1]
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeColorSpill(types.CompositorNode):
      '''
      '''
   
      channel = str
      '''
         @returns: enum in ['R', 'G', 'B']
      '''
      
      limit_channel = str
      '''
         @returns: enum in ['R', 'G', 'B']
      '''
      
      limit_method = str
      '''
         @returns: enum in ['SIMPLE', 'AVERAGE']
      '''
      
      ratio = float
      '''Scale limit by value
         @returns: float in [0.5, 1.5]
      '''
      
      unspill_blue = float
      '''Blue spillmap scale
         @returns: float in [0, 1.5]
      '''
      
      unspill_green = float
      '''Green spillmap scale
         @returns: float in [0, 1.5]
      '''
      
      unspill_red = float
      '''Red spillmap scale
         @returns: float in [0, 1.5]
      '''
      
      use_unspill = bool
      '''Compensate all channels (differently) by hand
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeCombHSVA(types.CompositorNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeCombRGBA(types.CompositorNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeCombYCCA(types.CompositorNode):
      '''
      '''
   
      mode = str
      '''
         @returns: enum in ['ITUBT601', 'ITUBT709', 'JFIF']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeCombYUVA(types.CompositorNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeComposite(types.CompositorNode):
      '''
      '''
   
      use_alpha = bool
      '''Colors are treated alpha premultiplied, or colors output straight (alpha gets set to 1)
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeCornerPin(types.CompositorNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeCrop(types.CompositorNode):
      '''
      '''
   
      max_x = int
      '''
         @returns: int in [0, 10000]
      '''
      
      max_y = int
      '''
         @returns: int in [0, 10000]
      '''
      
      min_x = int
      '''
         @returns: int in [0, 10000]
      '''
      
      min_y = int
      '''
         @returns: int in [0, 10000]
      '''
      
      rel_max_x = float
      '''
         @returns: float in [0, 1]
      '''
      
      rel_max_y = float
      '''
         @returns: float in [0, 1]
      '''
      
      rel_min_x = float
      '''
         @returns: float in [0, 1]
      '''
      
      rel_min_y = float
      '''
         @returns: float in [0, 1]
      '''
      
      relative = bool
      '''Use relative values to crop image
         @returns: boolean
      '''
      
      use_crop_size = bool
      '''Whether to crop the size of the input image
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeCryptomatte(types.CompositorNode):
      '''
      '''
   
      add = float
      '''Add object or material to matte, by picking a color from the Pick output
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      matte_id = str
      '''List of object and material crypto IDs to include in matte
         @returns: string, (never None)
      '''
      
      remove = float
      '''Remove object or material from matte, by picking a color from the Pick output
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeCurveRGB(types.CompositorNode):
      '''
      '''
   
      mapping = types.CurveMapping # (read only)
      '''
         @returns: CurveMapping
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeCurveVec(types.CompositorNode):
      '''
      '''
   
      mapping = types.CurveMapping # (read only)
      '''
         @returns: CurveMapping
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeCustomGroup(types.CompositorNode):
      '''Custom Compositor Group Node for Python nodes
      '''
   
      interface = types.PropertyGroup # (read only)
      '''Interface socket data
         @returns: PropertyGroup
      '''
      
      node_tree = types.NodeTree
      '''
         @returns: NodeTree
      '''
      
      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeDBlur(types.CompositorNode):
      '''
      '''
   
      angle = float
      '''
         @returns: float in [0, 6.28319]
      '''
      
      center_x = float
      '''
         @returns: float in [0, 1]
      '''
      
      center_y = float
      '''
         @returns: float in [0, 1]
      '''
      
      distance = float
      '''
         @returns: float in [-1, 1]
      '''
      
      iterations = int
      '''
         @returns: int in [1, 32]
      '''
      
      spin = float
      '''
         @returns: float in [-6.28319, 6.28319]
      '''
      
      use_wrap = bool
      '''
         @returns: boolean
      '''
      
      zoom = float
      '''
         @returns: float in [0, 100]
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeDefocus(types.CompositorNode):
      '''
      '''
   
      angle = float
      '''Bokeh shape rotation offset
         @returns: float in [0, 1.5708]
      '''
      
      blur_max = float
      '''Blur limit, maximum CoC radius
         @returns: float in [0, 10000]
      '''
      
      bokeh = str
      '''
         @returns: enum in ['OCTAGON', 'HEPTAGON', 'HEXAGON', 'PENTAGON', 'SQUARE', 'TRIANGLE', 'CIRCLE']
      '''
      
      f_stop = float
      '''Amount of focal blur, 128=infinity=perfect focus, half the value doubles the blur radius
         @returns: float in [0, 128]
      '''
      
      scene = types.Scene
      '''Scene from which to select the active camera (render scene if undefined)
         @returns: Scene
      '''
      
      threshold = float
      '''CoC radius threshold, prevents background bleed on in-focus midground, 0=off
         @returns: float in [0, 100]
      '''
      
      use_gamma_correction = bool
      '''Enable gamma correction before and after main process
         @returns: boolean
      '''
      
      use_preview = bool
      '''Enable low quality mode, useful for preview
         @returns: boolean
      '''
      
      use_zbuffer = bool
      '''Disable when using an image as input instead of actual z-buffer (auto enabled if node not image based, eg. time node)
         @returns: boolean
      '''
      
      z_scale = float
      '''Scale the Z input when not using a z-buffer, controls maximum blur designated by the color white or input value 1
         @returns: float in [0, 1000]
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeDenoise(types.CompositorNode):
      '''
      '''
   
      use_hdr = bool
      '''Process HDR images
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeDespeckle(types.CompositorNode):
      '''
      '''
   
      threshold = float
      '''Threshold for detecting pixels to despeckle
         @returns: float in [0, 1]
      '''
      
      threshold_neighbor = float
      '''Threshold for the number of neighbor pixels that must match
         @returns: float in [0, 1]
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeDiffMatte(types.CompositorNode):
      '''
      '''
   
      falloff = float
      '''Color distances below this additional threshold are partially keyed
         @returns: float in [0, 1]
      '''
      
      tolerance = float
      '''Color distances below this threshold are keyed
         @returns: float in [0, 1]
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeDilateErode(types.CompositorNode):
      '''
      '''
   
      distance = int
      '''Distance to grow/shrink (number of iterations)
         @returns: int in [-5000, 5000]
      '''
      
      edge = float
      '''Edge to inset
         @returns: float in [-100, 100]
      '''
      
      falloff = str
      '''Falloff type the feather
         @returns: enum in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR']
      '''
      
      mode = str
      '''Growing/shrinking mode
         @returns: enum in ['STEP', 'THRESHOLD', 'DISTANCE', 'FEATHER']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeDisplace(types.CompositorNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeDistanceMatte(types.CompositorNode):
      '''
      '''
   
      channel = str
      '''
         @returns: enum in ['RGB', 'YCC']
      '''
      
      falloff = float
      '''Color distances below this additional threshold are partially keyed
         @returns: float in [0, 1]
      '''
      
      tolerance = float
      '''Color distances below this threshold are keyed
         @returns: float in [0, 1]
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeDoubleEdgeMask(types.CompositorNode):
      '''
      '''
   
      edge_mode = str
      '''
         @returns: enum in ['BLEED_OUT', 'KEEP_IN']
      '''
      
      inner_mode = str
      '''
         @returns: enum in ['ALL', 'ADJACENT_ONLY']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeEllipseMask(types.CompositorNode):
      '''
      '''
   
      height = float
      '''Height of the ellipse
         @returns: float in [0, 2]
      '''
      
      mask_type = str
      '''
         @returns: enum in ['ADD', 'SUBTRACT', 'MULTIPLY', 'NOT']
      '''
      
      rotation = float
      '''Rotation angle of the ellipse
         @returns: float in [-31.4159, 31.4159]
      '''
      
      width = float
      '''Width of the ellipse
         @returns: float in [0, 2]
      '''
      
      x = float
      '''X position of the middle of the ellipse
         @returns: float in [-1, 2]
      '''
      
      y = float
      '''Y position of the middle of the ellipse
         @returns: float in [-1, 2]
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeFilter(types.CompositorNode):
      '''
      '''
   
      filter_type = str
      '''
         @returns: enum in ['SOFTEN', 'SHARPEN', 'LAPLACE', 'SOBEL', 'PREWITT', 'KIRSCH', 'SHADOW']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeFlip(types.CompositorNode):
      '''
      '''
   
      axis = str
      '''
         @returns: enum in ['X', 'Y', 'XY']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeGamma(types.CompositorNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeGlare(types.CompositorNode):
      '''
      '''
   
      angle_offset = float
      '''Streak angle offset
         @returns: float in [0, 3.14159]
      '''
      
      color_modulation = float
      '''Amount of Color Modulation, modulates colors of streaks and ghosts for a spectral dispersion effect
         @returns: float in [0, 1]
      '''
      
      fade = float
      '''Streak fade-out factor
         @returns: float in [0.75, 1]
      '''
      
      glare_type = str
      '''
         @returns: enum in ['GHOSTS', 'STREAKS', 'FOG_GLOW', 'SIMPLE_STAR']
      '''
      
      iterations = int
      '''
         @returns: int in [2, 5]
      '''
      
      mix = float
      '''-1 is original image only, 0 is exact 50/50 mix, 1 is processed image only
         @returns: float in [-1, 1]
      '''
      
      quality = str
      '''If not set to high quality, the effect will be applied to a low-res copy of the source image
         @returns: enum in ['HIGH', 'MEDIUM', 'LOW']
      '''
      
      size = int
      '''Glow/glare size (not actual size; relative to initial size of bright area of pixels)
         @returns: int in [6, 9]
      '''
      
      streaks = int
      '''Total number of streaks
         @returns: int in [1, 16]
      '''
      
      threshold = float
      '''The glare filter will only be applied to pixels brighter than this value
         @returns: float in [0, 1000]
      '''
      
      use_rotate_45 = bool
      '''Simple star filter: add 45 degree rotation offset
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeGroup(types.CompositorNode):
      '''
      '''
   
      interface = types.PropertyGroup # (read only)
      '''Interface socket data
         @returns: PropertyGroup
      '''
      
      node_tree = types.NodeTree
      '''
         @returns: NodeTree
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeHueCorrect(types.CompositorNode):
      '''
      '''
   
      mapping = types.CurveMapping # (read only)
      '''
         @returns: CurveMapping
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeHueSat(types.CompositorNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeIDMask(types.CompositorNode):
      '''
      '''
   
      index = int
      '''Pass index number to convert to alpha
         @returns: int in [0, 32767]
      '''
      
      use_antialiasing = bool
      '''Apply an anti-aliasing filter to the mask
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeImage(types.CompositorNode):
      '''
      '''
   
      frame_duration = int
      '''Number of images of a movie to use
         @returns: int in [0, 1048574]
      '''
      
      frame_offset = int
      '''Offset the number of the frame to use in the animation
         @returns: int in [-1048574, 1048574]
      '''
      
      frame_start = int
      '''Global starting frame of the movie/sequence, assuming first picture has a #1
         @returns: int in [-1048574, 1048574]
      '''
      
      has_layers = bool # (read only)
      '''True if this image has any named layer
         @returns: boolean
      '''
      
      has_views = bool # (read only)
      '''True if this image has multiple views
         @returns: boolean
      '''
      
      image = types.Image
      '''
         @returns: Image
      '''
      
      layer = str
      '''
         @returns: enum in ['PLACEHOLDER']
      '''
      
      use_auto_refresh = bool
      '''Always refresh image on frame changes
         @returns: boolean
      '''
      
      use_cyclic = bool
      '''Cycle the images in the movie
         @returns: boolean
      '''
      
      use_straight_alpha_output = bool
      '''Put Node output buffer to straight alpha instead of premultiplied
         @returns: boolean
      '''
      
      view = str
      '''
         @returns: enum in ['ALL']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeInpaint(types.CompositorNode):
      '''
      '''
   
      distance = int
      '''Distance to inpaint (number of iterations)
         @returns: int in [0, 10000]
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeInvert(types.CompositorNode):
      '''
      '''
   
      invert_alpha = bool
      '''
         @returns: boolean
      '''
      
      invert_rgb = bool
      '''
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeKeying(types.CompositorNode):
      '''
      '''
   
      blur_post = int
      '''Matte blur size which applies after clipping and dilate/eroding
         @returns: int in [0, 2048]
      '''
      
      blur_pre = int
      '''Chroma pre-blur size which applies before running keyer
         @returns: int in [0, 2048]
      '''
      
      clip_black = float
      '''Value of non-scaled matte pixel which considers as fully background pixel
         @returns: float in [0, 1]
      '''
      
      clip_white = float
      '''Value of non-scaled matte pixel which considers as fully foreground pixel
         @returns: float in [0, 1]
      '''
      
      despill_balance = float
      '''Balance between non-key colors used to detect amount of key color to be removed
         @returns: float in [0, 1]
      '''
      
      despill_factor = float
      '''Factor of despilling screen color from image
         @returns: float in [0, 1]
      '''
      
      dilate_distance = int
      '''Matte dilate/erode side
         @returns: int in [-100, 100]
      '''
      
      edge_kernel_radius = int
      '''Radius of kernel used to detect whether pixel belongs to edge
         @returns: int in [0, 100]
      '''
      
      edge_kernel_tolerance = float
      '''Tolerance to pixels inside kernel which are treating as belonging to the same plane
         @returns: float in [0, 1]
      '''
      
      feather_distance = int
      '''Distance to grow/shrink the feather
         @returns: int in [-100, 100]
      '''
      
      feather_falloff = str
      '''Falloff type the feather
         @returns: enum in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR']
      '''
      
      screen_balance = float
      '''Balance between two non-primary channels primary channel is comparing against
         @returns: float in [0, 1]
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeKeyingScreen(types.CompositorNode):
      '''
      '''
   
      clip = types.MovieClip
      '''
         @returns: MovieClip
      '''
      
      tracking_object = str
      '''
         @returns: string, (never None)
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeLensdist(types.CompositorNode):
      '''
      '''
   
      use_fit = bool
      '''For positive distortion factor only: scale image such that black areas are not visible
         @returns: boolean
      '''
      
      use_jitter = bool
      '''Enable/disable jittering (faster, but also noisier)
         @returns: boolean
      '''
      
      use_projector = bool
      '''Enable/disable projector mode (the effect is applied in horizontal direction only)
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeLevels(types.CompositorNode):
      '''
      '''
   
      channel = str
      '''
         @returns: enum in ['COMBINED_RGB', 'RED', 'GREEN', 'BLUE', 'LUMINANCE']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeLumaMatte(types.CompositorNode):
      '''
      '''
   
      limit_max = float
      '''Values higher than this setting are 100% opaque
         @returns: float in [-inf, inf]
      '''
      
      limit_min = float
      '''Values lower than this setting are 100% keyed
         @returns: float in [-inf, inf]
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeMapRange(types.CompositorNode):
      '''
      '''
   
      use_clamp = bool
      '''Clamp result of the node to 0..1 range
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeMapUV(types.CompositorNode):
      '''
      '''
   
      alpha = int
      '''
         @returns: int in [0, 100]
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeMapValue(types.CompositorNode):
      '''
      '''
   
      max = float
      '''
         @returns: float array of 1 items in [-1000, 1000]
      '''
      
      min = float
      '''
         @returns: float array of 1 items in [-1000, 1000]
      '''
      
      offset = float
      '''
         @returns: float array of 1 items in [-1000, 1000]
      '''
      
      size = float
      '''
         @returns: float array of 1 items in [-1000, 1000]
      '''
      
      use_max = bool
      '''
         @returns: boolean
      '''
      
      use_min = bool
      '''
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeMask(types.CompositorNode):
      '''
      '''
   
      mask = types.Mask
      '''
         @returns: Mask
      '''
      
      motion_blur_samples = int
      '''Number of motion blur samples
         @returns: int in [1, 64]
      '''
      
      motion_blur_shutter = float
      '''Exposure for motion blur as a factor of FPS
         @returns: float in [0, 1]
      '''
      
      size_source = str
      '''Where to get the mask size from for aspect/size information
         @returns: enum in ['SCENE', 'FIXED', 'FIXED_SCENE']
      '''
      
      size_x = int
      '''
         @returns: int in [1, 10000]
      '''
      
      size_y = int
      '''
         @returns: int in [1, 10000]
      '''
      
      use_feather = bool
      '''Use feather information from the mask
         @returns: boolean
      '''
      
      use_motion_blur = bool
      '''Use multi-sampled motion blur of the mask
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeMath(types.CompositorNode):
      '''
      '''
   
      operation = str
      '''
         @returns: enum in ['ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'MULTIPLY_ADD', 'POWER', 'LOGARITHM', 'SQRT', 'INVERSE_SQRT', 'ABSOLUTE', 'EXPONENT', 'MINIMUM', 'MAXIMUM', 'LESS_THAN', 'GREATER_THAN', 'SIGN', 'COMPARE', 'SMOOTH_MIN', 'SMOOTH_MAX', 'ROUND', 'FLOOR', 'CEIL', 'TRUNC', 'FRACT', 'MODULO', 'WRAP', 'SNAP', 'PINGPONG', 'SINE', 'COSINE', 'TANGENT', 'ARCSINE', 'ARCCOSINE', 'ARCTANGENT', 'ARCTAN2', 'SINH', 'COSH', 'TANH', 'RADIANS', 'DEGREES']
      '''
      
      use_clamp = bool
      '''Clamp result of the node to 0..1 range
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeMixRGB(types.CompositorNode):
      '''
      '''
   
      blend_type = str
      '''
         @returns: enum in ['MIX', 'DARKEN', 'MULTIPLY', 'BURN', 'LIGHTEN', 'SCREEN', 'DODGE', 'ADD', 'OVERLAY', 'SOFT_LIGHT', 'LINEAR_LIGHT', 'DIFFERENCE', 'SUBTRACT', 'DIVIDE', 'HUE', 'SATURATION', 'COLOR', 'VALUE']
      '''
      
      use_alpha = bool
      '''Include alpha of second input in this operation
         @returns: boolean
      '''
      
      use_clamp = bool
      '''Clamp result of the node to 0..1 range
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeMovieClip(types.CompositorNode):
      '''
      '''
   
      clip = types.MovieClip
      '''
         @returns: MovieClip
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeMovieDistortion(types.CompositorNode):
      '''
      '''
   
      clip = types.MovieClip
      '''
         @returns: MovieClip
      '''
      
      distortion_type = str
      '''Distortion to use to filter image
         @returns: enum in ['UNDISTORT', 'DISTORT']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeNormal(types.CompositorNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeNormalize(types.CompositorNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeOutputFile(types.CompositorNode):
      '''
      '''
   
      active_input_index = int
      '''Active input index in details view list
         @returns: int in [-inf, inf]
      '''
      
      base_path = str
      '''Base output path for the image
         @returns: string, (never None)
      '''
      
      file_slots = types.CompositorNodeOutputFileFileSlots # (read only)
      '''
         @returns: CompositorNodeOutputFileFileSlots Collection of NodeOutputFileSlotFile
      '''
      
      format = types.ImageFormatSettings # (read only)
      '''
         @returns: ImageFormatSettings
      '''
      
      layer_slots = types.CompositorNodeOutputFileLayerSlots # (read only)
      '''
         @returns: CompositorNodeOutputFileLayerSlots Collection of NodeOutputFileSlotLayer
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeOutputFileFileSlots(types.bpy_struct):
      '''Collection of File Output node slots
      '''
   
      def new(name):
         '''Add a file slot to this node
            Arguments:
            @name (str): (never None)
      
            @returns (types.NodeSocket): New socket
               
         '''
      
         return types.NodeSocket

      def remove(socket):
         '''Remove a file slot from this node
            Arguments:
            @socket (NodeSocket): The socket to remove
               
      
         '''
      
         pass

      def clear():
         '''Remove all file slots from this node
         '''
      
         pass

      def move(from_index, to_index):
         '''Move a file slot to another position
            Arguments:
            @from_index (int): Index of the socket to move
               in [0, inf]
            @to_index (int): Target index for the socket
               in [0, inf]
      
         '''
      
         pass

   class CompositorNodeOutputFileLayerSlots(types.bpy_struct):
      '''Collection of File Output node slots
      '''
   
      def new(name):
         '''Add a file slot to this node
            Arguments:
            @name (str): (never None)
      
            @returns (types.NodeSocket): New socket
               
         '''
      
         return types.NodeSocket

      def remove(socket):
         '''Remove a file slot from this node
            Arguments:
            @socket (NodeSocket): The socket to remove
               
      
         '''
      
         pass

      def clear():
         '''Remove all file slots from this node
         '''
      
         pass

      def move(from_index, to_index):
         '''Move a file slot to another position
            Arguments:
            @from_index (int): Index of the socket to move
               in [0, inf]
            @to_index (int): Target index for the socket
               in [0, inf]
      
         '''
      
         pass

   class CompositorNodePixelate(types.CompositorNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodePlaneTrackDeform(types.CompositorNode):
      '''
      '''
   
      clip = types.MovieClip
      '''
         @returns: MovieClip
      '''
      
      motion_blur_samples = int
      '''Number of motion blur samples
         @returns: int in [1, 64]
      '''
      
      motion_blur_shutter = float
      '''Exposure for motion blur as a factor of FPS
         @returns: float in [0, 1]
      '''
      
      plane_track_name = str
      '''
         @returns: string, (never None)
      '''
      
      tracking_object = str
      '''
         @returns: string, (never None)
      '''
      
      use_motion_blur = bool
      '''Use multi-sampled motion blur of the mask
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodePremulKey(types.CompositorNode):
      '''
      '''
   
      mapping = str
      '''Conversion between premultiplied alpha and key alpha
         @returns: enum in ['STRAIGHT_TO_PREMUL', 'PREMUL_TO_STRAIGHT']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeRGB(types.CompositorNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeRGBToBW(types.CompositorNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeRLayers(types.CompositorNode):
      '''
      '''
   
      layer = str
      '''
         @returns: enum in ['PLACEHOLDER']
      '''
      
      scene = types.Scene
      '''
         @returns: Scene
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeRotate(types.CompositorNode):
      '''
      '''
   
      filter_type = str
      '''Method to use to filter rotation
         @returns: enum in ['NEAREST', 'BILINEAR', 'BICUBIC']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeScale(types.CompositorNode):
      '''
      '''
   
      frame_method = str
      '''How the image fits in the camera frame
         @returns: enum in ['STRETCH', 'FIT', 'CROP']
      '''
      
      offset_x = float
      '''Offset image horizontally (factor of image size)
         @returns: float in [-inf, inf]
      '''
      
      offset_y = float
      '''Offset image vertically (factor of image size)
         @returns: float in [-inf, inf]
      '''
      
      space = str
      '''Coordinate space to scale relative to
         @returns: enum in ['RELATIVE', 'ABSOLUTE', 'SCENE_SIZE', 'RENDER_SIZE']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeSepHSVA(types.CompositorNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeSepRGBA(types.CompositorNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeSepYCCA(types.CompositorNode):
      '''
      '''
   
      mode = str
      '''
         @returns: enum in ['ITUBT601', 'ITUBT709', 'JFIF']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeSepYUVA(types.CompositorNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeSetAlpha(types.CompositorNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeSplitViewer(types.CompositorNode):
      '''
      '''
   
      axis = str
      '''
         @returns: enum in ['X', 'Y']
      '''
      
      factor = int
      '''
         @returns: int in [0, 100]
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeStabilize(types.CompositorNode):
      '''
      '''
   
      clip = types.MovieClip
      '''
         @returns: MovieClip
      '''
      
      filter_type = str
      '''Method to use to filter stabilization
         @returns: enum in ['NEAREST', 'BILINEAR', 'BICUBIC']
      '''
      
      invert = bool
      '''Invert stabilization to re-introduce motion to the frame
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeSunBeams(types.CompositorNode):
      '''
      '''
   
      ray_length = float
      '''Length of rays as a factor of the image size
         @returns: float in [0, 100]
      '''
      
      source = float
      '''Source point of rays as a factor of the image width & height
         @returns: float array of 2 items in [-100, 100]
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeSwitch(types.CompositorNode):
      '''
      '''
   
      check = bool
      '''Off: first socket, On: second socket
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeSwitchView(types.CompositorNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeTexture(types.CompositorNode):
      '''
      '''
   
      node_output = int
      '''For node-based textures, which output node to use
         @returns: int in [-32768, 32767]
      '''
      
      texture = types.Texture
      '''
         @returns: Texture
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeTime(types.CompositorNode):
      '''
      '''
   
      curve = types.CurveMapping # (read only)
      '''
         @returns: CurveMapping
      '''
      
      frame_end = int
      '''
         @returns: int in [-32768, 32767]
      '''
      
      frame_start = int
      '''
         @returns: int in [-32768, 32767]
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeTonemap(types.CompositorNode):
      '''
      '''
   
      adaptation = float
      '''If 0, global; if 1, based on pixel intensity
         @returns: float in [0, 1]
      '''
      
      contrast = float
      '''Set to 0 to use estimate from input image
         @returns: float in [0, 1]
      '''
      
      correction = float
      '''If 0, same for all channels; if 1, each independent
         @returns: float in [0, 1]
      '''
      
      gamma = float
      '''If not used, set to 1
         @returns: float in [0.001, 3]
      '''
      
      intensity = float
      '''If less than zero, darkens image; otherwise, makes it brighter
         @returns: float in [-8, 8]
      '''
      
      key = float
      '''The value the average luminance is mapped to
         @returns: float in [0, 1]
      '''
      
      offset = float
      '''Normally always 1, but can be used as an extra control to alter the brightness curve
         @returns: float in [0.001, 10]
      '''
      
      tonemap_type = str
      '''
         @returns: enum in ['RD_PHOTORECEPTOR', 'RH_SIMPLE']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeTrackPos(types.CompositorNode):
      '''
      '''
   
      clip = types.MovieClip
      '''
         @returns: MovieClip
      '''
      
      frame_relative = int
      '''Frame to be used for relative position
         @returns: int in [-32768, 32767]
      '''
      
      position = str
      '''Which marker position to use for output
         @returns: enum in ['ABSOLUTE', 'RELATIVE_START', 'RELATIVE_FRAME', 'ABSOLUTE_FRAME']
      '''
      
      track_name = str
      '''
         @returns: string, (never None)
      '''
      
      tracking_object = str
      '''
         @returns: string, (never None)
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeTransform(types.CompositorNode):
      '''
      '''
   
      filter_type = str
      '''Method to use to filter transform
         @returns: enum in ['NEAREST', 'BILINEAR', 'BICUBIC']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeTranslate(types.CompositorNode):
      '''
      '''
   
      use_relative = bool
      '''Use relative (fraction of input image size) values to define translation
         @returns: boolean
      '''
      
      wrap_axis = str
      '''Wrap image on a specific axis
         @returns: enum in ['NONE', 'XAXIS', 'YAXIS', 'BOTH']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeTree(types.NodeTree):
      '''Node tree consisting of linked nodes used for compositing
      '''
   
      chunk_size = str
      '''Max size of a tile (smaller values gives better distribution of multiple threads, but more overhead)
         @returns: enum in ['32', '64', '128', '256', '512', '1024']
      '''
      
      edit_quality = str
      '''Quality when editing
         @returns: enum in ['HIGH', 'MEDIUM', 'LOW']
      '''
      
      render_quality = str
      '''Quality when rendering
         @returns: enum in ['HIGH', 'MEDIUM', 'LOW']
      '''
      
      use_groupnode_buffer = bool
      '''Enable buffering of group nodes
         @returns: boolean
      '''
      
      use_opencl = bool
      '''Enable GPU calculations
         @returns: boolean
      '''
      
      use_two_pass = bool
      '''Use two pass execution during editing: first calculate fast nodes, second pass calculate all nodes
         @returns: boolean
      '''
      
      use_viewer_border = bool
      '''Use boundaries for viewer nodes and composite backdrop
         @returns: boolean
      '''
      
   class CompositorNodeValToRGB(types.CompositorNode):
      '''
      '''
   
      color_ramp = types.ColorRamp # (read only)
      '''
         @returns: ColorRamp
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeValue(types.CompositorNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeVecBlur(types.CompositorNode):
      '''
      '''
   
      factor = float
      '''Scaling factor for motion vectors (actually, 'shutter speed', in frames)
         @returns: float in [0, 20]
      '''
      
      samples = int
      '''
         @returns: int in [1, 256]
      '''
      
      speed_max = int
      '''Maximum speed, or zero for none
         @returns: int in [0, 1024]
      '''
      
      speed_min = int
      '''Minimum speed for a pixel to be blurred (used to separate background from foreground)
         @returns: int in [0, 1024]
      '''
      
      use_curved = bool
      '''Interpolate between frames in a Bezier curve, rather than linearly
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeViewer(types.CompositorNode):
      '''
      '''
   
      center_x = float
      '''
         @returns: float in [0, 1]
      '''
      
      center_y = float
      '''
         @returns: float in [0, 1]
      '''
      
      tile_order = str
      '''Tile order
         @returns: enum in ['CENTEROUT', 'RANDOM', 'BOTTOMUP', 'RULE_OF_THIRDS']
      '''
      
      use_alpha = bool
      '''Colors are treated alpha premultiplied, or colors output straight (alpha gets set to 1)
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class CompositorNodeZcombine(types.CompositorNode):
      '''
      '''
   
      use_alpha = bool
      '''Take Alpha channel into account when doing the Z operation
         @returns: boolean
      '''
      
      use_antialias_z = bool
      '''Anti-alias the z-buffer to try to avoid artifacts, mostly useful for Blender renders
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
      def update(self):
         
      
         pass
      
   class ConsoleLine(types.bpy_struct):
      '''Input line for the interactive console
      '''
   
      body = str
      '''Text in the line
         @returns: string, (never None)
      '''
      
      current_character = int
      '''
         @returns: int in [-inf, inf]
      '''
      
      type = str
      '''Console line type when used in scrollback
         @returns: enum in ['OUTPUT', 'INPUT', 'INFO', 'ERROR']
      '''
      
   class Constraint(types.bpy_struct):
      '''Constraint modifying the transformation of objects and bones
      '''
   
      active = bool
      '''Constraint is the one being edited
         @returns: boolean
      '''
      
      error_location = float # (read only)
      '''Amount of residual error in Blender space unit for constraints that work on position
         @returns: float in [-inf, inf]
      '''
      
      error_rotation = float # (read only)
      '''Amount of residual error in radians for constraints that work on orientation
         @returns: float in [-inf, inf]
      '''
      
      influence = float
      '''Amount of influence constraint will have on the final solution
         @returns: float in [0, 1]
      '''
      
      is_proxy_local = bool # (read only)
      '''Constraint was added in this proxy instance (i.e. did not belong to source Armature)
         @returns: boolean
      '''
      
      is_valid = bool # (read only)
      '''Constraint has valid settings and can be evaluated
         @returns: boolean
      '''
      
      mute = bool
      '''Enable/Disable Constraint
         @returns: boolean
      '''
      
      name = str
      '''Constraint name
         @returns: string, (never None)
      '''
      
      owner_space = str
      '''Space that owner is evaluated in
         @returns: enum in ['WORLD', 'POSE', 'LOCAL_WITH_PARENT', 'LOCAL']
      '''
      
      show_expanded = bool
      '''Constraint's panel is expanded in UI
         @returns: boolean
      '''
      
      target_space = str
      '''Space that target is evaluated in
         @returns: enum in ['WORLD', 'POSE', 'LOCAL_WITH_PARENT', 'LOCAL']
      '''
      
      type = str # (read only)
      '''
         @returns: enum in ['CAMERA_SOLVER', 'FOLLOW_TRACK', 'OBJECT_SOLVER', 'COPY_LOCATION', 'COPY_ROTATION', 'COPY_SCALE', 'COPY_TRANSFORMS', 'LIMIT_DISTANCE', 'LIMIT_LOCATION', 'LIMIT_ROTATION', 'LIMIT_SCALE', 'MAINTAIN_VOLUME', 'TRANSFORM', 'TRANSFORM_CACHE', 'CLAMP_TO', 'DAMPED_TRACK', 'IK', 'LOCKED_TRACK', 'SPLINE_IK', 'STRETCH_TO', 'TRACK_TO', 'ACTION', 'ARMATURE', 'CHILD_OF', 'FLOOR', 'FOLLOW_PATH', 'PIVOT', 'SHRINKWRAP']
      '''
      
   class ConstraintTarget(types.bpy_struct):
      '''Target object for multi-target constraints
      '''
   
      subtarget = str
      '''Armature bone, mesh or lattice vertex group, ...
         @returns: string, (never None)
      '''
      
      target = types.Object
      '''Target object
         @returns: Object
      '''
      
   class ConstraintTargetBone(types.bpy_struct):
      '''Target bone for multi-target constraints
      '''
   
      subtarget = str
      '''Target armature bone
         @returns: string, (never None)
      '''
      
      target = types.Object
      '''Target armature
         @returns: Object
      '''
      
      weight = float
      '''Blending weight of this bone
         @returns: float in [0, 1]
      '''
      
   class Context(types.bpy_struct):
      '''Current windowmanager and data context
      '''
   
      area = types.Area # (read only)
      '''
         @returns: Area
      '''
      
      blend_data = types.BlendData # (read only)
      '''
         @returns: BlendData
      '''
      
      collection = types.Collection # (read only)
      '''
         @returns: Collection
      '''
      
      engine = str # (read only)
      '''
         @returns: string, (never None)
      '''
      
      gizmo_group = types.GizmoGroup # (read only)
      '''
         @returns: GizmoGroup
      '''
      
      layer_collection = types.LayerCollection # (read only)
      '''
         @returns: LayerCollection
      '''
      
      mode = str # (read only)
      '''
         @returns: enum in ['EDIT_MESH', 'EDIT_CURVE', 'EDIT_SURFACE', 'EDIT_TEXT', 'EDIT_ARMATURE', 'EDIT_METABALL', 'EDIT_LATTICE', 'POSE', 'SCULPT', 'PAINT_WEIGHT', 'PAINT_VERTEX', 'PAINT_TEXTURE', 'PARTICLE', 'OBJECT', 'PAINT_GPENCIL', 'EDIT_GPENCIL', 'SCULPT_GPENCIL', 'WEIGHT_GPENCIL', 'VERTEX_GPENCIL']
      '''
      
      preferences = types.Preferences # (read only)
      '''
         @returns: Preferences
      '''
      
      region = types.Region # (read only)
      '''
         @returns: Region
      '''
      
      region_data = types.RegionView3D # (read only)
      '''
         @returns: RegionView3D
      '''
      
      scene = types.Scene # (read only)
      '''
         @returns: Scene
      '''
      
      screen = types.Screen # (read only)
      '''
         @returns: Screen
      '''
      
      space_data = types.Space # (read only)
      '''
         @returns: Space
      '''
      
      tool_settings = types.ToolSettings # (read only)
      '''
         @returns: ToolSettings
      '''
      
      view_layer = types.ViewLayer # (read only)
      '''
         @returns: ViewLayer
      '''
      
      window = types.Window # (read only)
      '''
         @returns: Window
      '''
      
      window_manager = types.WindowManager # (read only)
      '''
         @returns: WindowManager
      '''
      
      workspace = types.WorkSpace # (read only)
      '''
         @returns: WorkSpace
      '''
      
      def evaluated_depsgraph_get():
         '''Get the dependency graph for the current scene and view layer, to access to data-blocks with animation and modifiers applied. If any data-blocks have been edited, the dependency graph will be updated. This invalidates all references to evaluated data-blocks from the dependency graph.
            @returns (types.Depsgraph): Evaluated dependency graph
               
         '''
      
         return types.Depsgraph

      def copy(self):
         
      
         pass
      
   class CopyLocationConstraint(types.Constraint):
      '''Copy the location of the target
      '''
   
      head_tail = float
      '''Target along length of bone: Head=0, Tail=1
         @returns: float in [0, 1]
      '''
      
      invert_x = bool
      '''Invert the X location
         @returns: boolean
      '''
      
      invert_y = bool
      '''Invert the Y location
         @returns: boolean
      '''
      
      invert_z = bool
      '''Invert the Z location
         @returns: boolean
      '''
      
      subtarget = str
      '''Armature bone, mesh or lattice vertex group, ...
         @returns: string, (never None)
      '''
      
      target = types.Object
      '''Target object
         @returns: Object
      '''
      
      use_bbone_shape = bool
      '''Follow shape of B-Bone segments when calculating Head/Tail position
         @returns: boolean
      '''
      
      use_offset = bool
      '''Add original location into copied location
         @returns: boolean
      '''
      
      use_x = bool
      '''Copy the target's X location
         @returns: boolean
      '''
      
      use_y = bool
      '''Copy the target's Y location
         @returns: boolean
      '''
      
      use_z = bool
      '''Copy the target's Z location
         @returns: boolean
      '''
      
   class CopyRotationConstraint(types.Constraint):
      '''Copy the rotation of the target
      '''
   
      euler_order = str
      '''Explicitly specify the euler rotation order
         @returns: enum in ['AUTO', 'XYZ', 'XZY', 'YXZ', 'YZX', 'ZXY', 'ZYX']
      '''
      
      invert_x = bool
      '''Invert the X rotation
         @returns: boolean
      '''
      
      invert_y = bool
      '''Invert the Y rotation
         @returns: boolean
      '''
      
      invert_z = bool
      '''Invert the Z rotation
         @returns: boolean
      '''
      
      mix_mode = str
      '''Specify how the copied and existing rotations are combined
         @returns: enum in ['REPLACE', 'ADD', 'BEFORE', 'AFTER', 'OFFSET']
      '''
      
      subtarget = str
      '''Armature bone, mesh or lattice vertex group, ...
         @returns: string, (never None)
      '''
      
      target = types.Object
      '''Target object
         @returns: Object
      '''
      
      use_offset = bool
      '''DEPRECATED: Add original rotation into copied rotation
         @returns: boolean
      '''
      
      use_x = bool
      '''Copy the target's X rotation
         @returns: boolean
      '''
      
      use_y = bool
      '''Copy the target's Y rotation
         @returns: boolean
      '''
      
      use_z = bool
      '''Copy the target's Z rotation
         @returns: boolean
      '''
      
   class CopyScaleConstraint(types.Constraint):
      '''Copy the scale of the target
      '''
   
      power = float
      '''Raise the target's scale to the specified power
         @returns: float in [-inf, inf]
      '''
      
      subtarget = str
      '''Armature bone, mesh or lattice vertex group, ...
         @returns: string, (never None)
      '''
      
      target = types.Object
      '''Target object
         @returns: Object
      '''
      
      use_add = bool
      '''Use addition instead of multiplication to combine scale (2.7 compatibility)
         @returns: boolean
      '''
      
      use_make_uniform = bool
      '''Redistribute the copied change in volume equally between the three axes of the owner
         @returns: boolean
      '''
      
      use_offset = bool
      '''Combine original scale with copied scale
         @returns: boolean
      '''
      
      use_x = bool
      '''Copy the target's X scale
         @returns: boolean
      '''
      
      use_y = bool
      '''Copy the target's Y scale
         @returns: boolean
      '''
      
      use_z = bool
      '''Copy the target's Z scale
         @returns: boolean
      '''
      
   class CopyTransformsConstraint(types.Constraint):
      '''Copy all the transforms of the target
      '''
   
      head_tail = float
      '''Target along length of bone: Head=0, Tail=1
         @returns: float in [0, 1]
      '''
      
      mix_mode = str
      '''Specify how the copied and existing transformations are combined
         @returns: enum in ['REPLACE', 'BEFORE', 'AFTER']
      '''
      
      subtarget = str
      '''Armature bone, mesh or lattice vertex group, ...
         @returns: string, (never None)
      '''
      
      target = types.Object
      '''Target object
         @returns: Object
      '''
      
      use_bbone_shape = bool
      '''Follow shape of B-Bone segments when calculating Head/Tail position
         @returns: boolean
      '''
      
   class CorrectiveSmoothModifier(types.Modifier):
      '''Correct distortion caused by deformation
      '''
   
      factor = float
      '''Smooth factor effect
         @returns: float in [-inf, inf]
      '''
      
      invert_vertex_group = bool
      '''Invert vertex group influence
         @returns: boolean
      '''
      
      is_bind = bool # (read only)
      '''
         @returns: boolean
      '''
      
      iterations = int
      '''
         @returns: int in [-32768, 32767]
      '''
      
      rest_source = str
      '''Select the source of rest positions
         @returns: enum in ['ORCO', 'BIND']
      '''
      
      scale = float
      '''Compensate for scale applied by other modifiers
         @returns: float in [-inf, inf]
      '''
      
      smooth_type = str
      '''Method used for smoothing
         @returns: enum in ['SIMPLE', 'LENGTH_WEIGHTED']
      '''
      
      use_only_smooth = bool
      '''Apply smoothing without reconstructing the surface
         @returns: boolean
      '''
      
      use_pin_boundary = bool
      '''Excludes boundary vertices from being smoothed
         @returns: boolean
      '''
      
      vertex_group = str
      '''Name of Vertex Group which determines influence of modifier per point
         @returns: string, (never None)
      '''
      
   class CrossSequence(types.EffectSequence):
      '''Cross Sequence
      '''
   
      input_1 = types.Sequence
      '''First input for the effect strip
         @returns: Sequence, (never None)
      '''
      
      input_2 = types.Sequence
      '''Second input for the effect strip
         @returns: Sequence, (never None)
      '''
      
      input_count = int # (read only)
      '''
         @returns: int in [0, inf]
      '''
      
   class Curve(types.ID):
      '''Curve data-block storing curves, splines and NURBS
      '''
   
      animation_data = types.AnimData # (read only)
      '''Animation data for this data-block
         @returns: AnimData
      '''
      
      bevel_depth = float
      '''Bevel depth when not using a bevel object
         @returns: float in [-inf, inf]
      '''
      
      bevel_factor_end = float
      '''Factor that defines to where beveling of spline happens (0=to the very beginning, 1=to the very end)
         @returns: float in [0, 1]
      '''
      
      bevel_factor_mapping_end = str
      '''Determines how the end bevel factor is mapped to a spline
         @returns: enum in ['RESOLUTION', 'SEGMENTS', 'SPLINE']
      '''
      
      bevel_factor_mapping_start = str
      '''Determines how the start bevel factor is mapped to a spline
         @returns: enum in ['RESOLUTION', 'SEGMENTS', 'SPLINE']
      '''
      
      bevel_factor_start = float
      '''Factor that defines from where beveling of spline happens (0=from the very beginning, 1=from the very end)
         @returns: float in [0, 1]
      '''
      
      bevel_object = types.Object
      '''Curve object name that defines the bevel shape
         @returns: Object
      '''
      
      bevel_resolution = int
      '''Bevel resolution when depth is non-zero and no specific bevel object has been defined
         @returns: int in [0, 32]
      '''
      
      cycles = types.CyclesMeshSettings # (read only)
      '''Cycles mesh settings
         @returns: CyclesMeshSettings
      '''
      
      dimensions = str
      '''Select 2D or 3D curve type
         @returns: enum in ['2D', '3D']
      '''
      
      eval_time = float
      '''Parametric position along the length of the curve that Objects 'following' it should be at (position is evaluated by dividing by the 'Path Length' value)
         @returns: float in [-inf, inf]
      '''
      
      extrude = float
      '''Amount of curve extrusion when not using a bevel object
         @returns: float in [0, inf]
      '''
      
      fill_mode = str
      '''Mode of filling curve
         @returns: enum in ['FULL', 'BACK', 'FRONT', 'HALF']
      '''
      
      is_editmode = bool # (read only)
      '''True when used in editmode
         @returns: boolean
      '''
      
      materials = types.IDMaterials # (read only)
      '''
         @returns: IDMaterials Collection of Material
      '''
      
      offset = float
      '''Offset the curve to adjust the width of a text
         @returns: float in [-inf, inf]
      '''
      
      path_duration = int
      '''The number of frames that are needed to traverse the path, defining the maximum value for the 'Evaluation Time' setting
         @returns: int in [1, 1048574]
      '''
      
      render_resolution_u = int
      '''Surface resolution in U direction used while rendering (zero uses preview resolution)
         @returns: int in [0, 1024]
      '''
      
      render_resolution_v = int
      '''Surface resolution in V direction used while rendering (zero uses preview resolution)
         @returns: int in [0, 1024]
      '''
      
      resolution_u = int
      '''Surface resolution in U direction
         @returns: int in [1, 1024]
      '''
      
      resolution_v = int
      '''Surface resolution in V direction
         @returns: int in [1, 1024]
      '''
      
      shape_keys = types.Key # (read only)
      '''
         @returns: Key
      '''
      
      splines = types.CurveSplines # (read only)
      '''Collection of splines in this curve data object
         @returns: CurveSplines Collection of Spline
      '''
      
      taper_object = types.Object
      '''Curve object name that defines the taper (width)
         @returns: Object
      '''
      
      texspace_location = float
      '''Texture space location
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      texspace_size = float
      '''Texture space size
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      twist_mode = str
      '''The type of tilt calculation for 3D Curves
         @returns: enum in ['Z_UP', 'MINIMUM', 'TANGENT']
      '''
      
      twist_smooth = float
      '''Smoothing iteration for tangents
         @returns: float in [-inf, inf]
      '''
      
      use_auto_texspace = bool
      '''Adjust active object's texture space automatically when transforming object
         @returns: boolean
      '''
      
      use_deform_bounds = bool
      '''Option for curve-deform: Use the mesh bounds to clamp the deformation
         @returns: boolean
      '''
      
      use_fill_caps = bool
      '''Fill caps for beveled curves
         @returns: boolean
      '''
      
      use_fill_deform = bool
      '''Fill curve after applying shape keys and all modifiers
         @returns: boolean
      '''
      
      use_map_taper = bool
      '''Map effect of the taper object to the beveled part of the curve
         @returns: boolean
      '''
      
      use_path = bool
      '''Enable the curve to become a translation path
         @returns: boolean
      '''
      
      use_path_follow = bool
      '''Make curve path children to rotate along the path
         @returns: boolean
      '''
      
      use_radius = bool
      '''Option for paths and curve-deform: apply the curve radius with path following it and deforming
         @returns: boolean
      '''
      
      use_stretch = bool
      '''Option for curve-deform: make deformed child to stretch along entire path
         @returns: boolean
      '''
      
      def transform(matrix, shape_keys=False):
         '''Transform curve by a matrix
            Arguments:
            @matrix (float): Matrix
               multi-dimensional array of 4 * 4 items in [-inf, inf]
            @shape_keys (bool): Transform Shape Keys
               (optional)
      
         '''
      
         pass

      def validate_material_indices():
         '''Validate material indices of splines or letters, return True when the curve has had invalid indices corrected (to default 0)
            @returns (bool): 
         '''
      
         return bool

      def update_gpu_tag():
         '''update_gpu_tag
         '''
      
         pass

   class CurveMap(types.bpy_struct):
      '''Curve in a curve mapping
      '''
   
      points = types.CurveMapPoints # (read only)
      '''
         @returns: CurveMapPoints Collection of CurveMapPoint
      '''
      
   class CurveMapPoint(types.bpy_struct):
      '''Point of a curve used for a curve mapping
      '''
   
      handle_type = str
      '''Curve interpolation at this point: Bezier or vector
         @returns: enum in ['AUTO', 'AUTO_CLAMPED', 'VECTOR']
      '''
      
      location = float
      '''X/Y coordinates of the curve point
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      select = bool
      '''Selection state of the curve point
         @returns: boolean
      '''
      
   class CurveMapPoints(types.bpy_struct):
      '''Collection of Curve Map Points
      '''
   
      def new(position, value):
         '''Add point to CurveMap
            Arguments:
            @position (float): Position to add point
               in [-inf, inf]
            @value (float): Value of point
               in [-inf, inf]
      
            @returns (types.CurveMapPoint): New point
               
         '''
      
         return types.CurveMapPoint

      def remove(point):
         '''Delete point from CurveMap
            Arguments:
            @point (CurveMapPoint): PointElement to remove
               (never None)
      
         '''
      
         pass

   class CurveMapping(types.bpy_struct):
      '''Curve mapping to map color, vector and scalar values to other values using a user defined curve
      '''
   
      black_level = float
      '''For RGB curves, the color that black is mapped to
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      clip_max_x = float
      '''
         @returns: float in [-100, 100]
      '''
      
      clip_max_y = float
      '''
         @returns: float in [-100, 100]
      '''
      
      clip_min_x = float
      '''
         @returns: float in [-100, 100]
      '''
      
      clip_min_y = float
      '''
         @returns: float in [-100, 100]
      '''
      
      curves = types.CurveMap # (read only)
      '''
         @returns: Collection of CurveMap
      '''
      
      extend = str
      '''Extrapolate the curve or extend it horizontally
         @returns: enum in ['HORIZONTAL', 'EXTRAPOLATED']
      '''
      
      tone = str
      '''Tone of the curve
         @returns: enum in ['STANDARD', 'FILMLIKE']
      '''
      
      use_clip = bool
      '''Force the curve view to fit a defined boundary
         @returns: boolean
      '''
      
      white_level = float
      '''For RGB curves, the color that white is mapped to
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      def update():
         '''Update curve mapping after making changes
         '''
      
         pass

      def initialize():
         '''Initialize curve
         '''
      
         pass

      def evaluate(curve, position):
         '''Evaluate curve at given location
            Arguments:
            @curve (CurveMap): Curve to evaluate
               (never None)
            @position (float): Position to evaluate curve at
               in [-inf, inf]
      
            @returns (float): Value of curve at given location
               in [-inf, inf]
         '''
      
         return float

   class CurveModifier(types.Modifier):
      '''Curve deformation modifier
      '''
   
      deform_axis = str
      '''The axis that the curve deforms along
         @returns: enum in ['POS_X', 'POS_Y', 'POS_Z', 'NEG_X', 'NEG_Y', 'NEG_Z']
      '''
      
      invert_vertex_group = bool
      '''Invert vertex group influence
         @returns: boolean
      '''
      
      object = types.Object
      '''Curve object to deform with
         @returns: Object
      '''
      
      vertex_group = str
      '''Name of Vertex Group which determines influence of modifier per point
         @returns: string, (never None)
      '''
      
   class CurvePaintSettings(types.bpy_struct):
      '''
      '''
   
      corner_angle = float
      '''Angles above this are considered corners
         @returns: float in [0, 3.14159]
      '''
      
      curve_type = str
      '''Type of curve to use for new strokes
         @returns: enum in ['POLY', 'BEZIER']
      '''
      
      depth_mode = str
      '''Method of projecting depth
         @returns: enum in ['CURSOR', 'SURFACE']
      '''
      
      error_threshold = int
      '''Allow deviation for a smoother, less precise line
         @returns: int in [1, 100]
      '''
      
      fit_method = str
      '''Curve fitting method
         @returns: enum in ['REFIT', 'SPLIT']
      '''
      
      radius_max = float
      '''Radius to use when the maximum pressure is applied (or when a tablet isn't used)
         @returns: float in [0, 100]
      '''
      
      radius_min = float
      '''Minimum radius when the minimum pressure is applied (also the minimum when tapering)
         @returns: float in [0, 100]
      '''
      
      radius_taper_end = float
      '''Taper factor for the radius of each point along the curve
         @returns: float in [0, 10]
      '''
      
      radius_taper_start = float
      '''Taper factor for the radius of each point along the curve
         @returns: float in [0, 1]
      '''
      
      surface_offset = float
      '''Offset the stroke from the surface
         @returns: float in [-10, 10]
      '''
      
      surface_plane = str
      '''Plane for projected stroke
         @returns: enum in ['NORMAL_VIEW', 'NORMAL_SURFACE', 'VIEW']
      '''
      
      use_corners_detect = bool
      '''Detect corners and use non-aligned handles
         @returns: boolean
      '''
      
      use_offset_absolute = bool
      '''Apply a fixed offset (don't scale by the radius)
         @returns: boolean
      '''
      
      use_pressure_radius = bool
      '''Map tablet pressure to curve radius
         @returns: boolean
      '''
      
      use_stroke_endpoints = bool
      '''Use the start of the stroke for the depth
         @returns: boolean
      '''
      
   class CurveProfile(types.bpy_struct):
      '''Profile Path editor used to build a profile path
      '''
   
      points = types.CurveProfilePoints # (read only)
      '''Profile control points
         @returns: CurveProfilePoints Collection of CurveProfilePoint
      '''
      
      preset = str
      '''
         @returns: enum in ['LINE', 'SUPPORTS', 'CORNICE', 'CROWN', 'STEPS']
      '''
      
      segments = types.CurveProfilePoint # (read only)
      '''Segments sampled from control points
         @returns: Collection of CurveProfilePoint
      '''
      
      use_clip = bool
      '''Force the path view to fit a defined boundary
         @returns: boolean
      '''
      
      use_sample_even_lengths = bool
      '''Sample edges with even lengths
         @returns: boolean
      '''
      
      use_sample_straight_edges = bool
      '''Sample edges with vector handles
         @returns: boolean
      '''
      
      def update():
         '''Update the profile
         '''
      
         pass

      def initialize(totsegments):
         '''Set the number of display segments and fill tables
            Arguments:
            @totsegments (int): The number of segment values to initialize the segments table with
               in [1, 1000], (never None)
      
         '''
      
         pass

      def evaluate(length_portion):
         '''Evaluate the at the given portion of the path length
            Arguments:
            @length_portion (float): Portion of the path length to travel before evaluation
               in [0, 1]
      
            @returns (float): The location at the given portion of the profile
               array of 2 items in [-100, 100]
         '''
      
         return float

   class CurveProfilePoint(types.bpy_struct):
      '''Point of a path used to define a profile
      '''
   
      handle_type_1 = str
      '''Path interpolation at this point: Bezier or vector
         @returns: enum in ['AUTO', 'VECTOR']
      '''
      
      handle_type_2 = str
      '''Path interpolation at this point: Bezier or vector
         @returns: enum in ['AUTO', 'VECTOR']
      '''
      
      location = float
      '''X/Y coordinates of the path point
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      select = bool
      '''Selection state of the path point
         @returns: boolean
      '''
      
   class CurveProfilePoints(types.bpy_struct):
      '''Collection of Profile Points
      '''
   
      def add(x, y):
         '''Add point to the profile
            Arguments:
            @x (float): X Position for new point
               in [-inf, inf]
            @y (float): Y Position for new point
               in [-inf, inf]
      
            @returns (types.CurveProfilePoint): New point
               
         '''
      
         return types.CurveProfilePoint

      def remove(point):
         '''Delete point from the profile
            Arguments:
            @point (CurveProfilePoint): Point to remove
               (never None)
      
         '''
      
         pass

   class CurveSplines(types.bpy_struct):
      '''Collection of curve splines
      '''
   
      active = types.Spline
      '''Active curve spline
         @returns: Spline
      '''
      
      def new(type):
         '''Add a new spline to the curve
            Arguments:
            @type (str): type for the new spline
               in ['POLY', 'BEZIER', 'BSPLINE', 'CARDINAL', 'NURBS']
      
            @returns (types.Spline): The newly created spline
               
         '''
      
         return types.Spline

      def remove(spline):
         '''Remove a spline from a curve
            Arguments:
            @spline (Spline): The spline to remove
               (never None)
      
         '''
      
         pass

      def clear():
         '''Remove all splines from a curve
         '''
      
         pass

   class CurvesModifier(types.SequenceModifier):
      '''RGB curves modifier for sequence strip
      '''
   
      curve_mapping = types.CurveMapping # (read only)
      '''
         @returns: CurveMapping
      '''
      
   class CyclesAOVPass(types.PropertyGroup):
      '''
      '''
   
      conflict = str
      '''If there is a conflict with another render passes, message explaining why
         @returns: string, (never None)
      '''
      
      name = str
      '''Name of the pass, to use in the AOV Output shader node
         @returns: string, (never None)
      '''
      
      type = str
      '''Pass data type
         @returns: enum in ['VALUE', 'COLOR']
      '''
      
   class CyclesCameraSettings(types.PropertyGroup):
      '''
      '''
   
      fisheye_fov = float
      '''Field of view for the fisheye lens
         @returns: float in [0.1745, 31.4159]
      '''
      
      fisheye_lens = float
      '''Lens focal length (mm)
         @returns: float in [0.01, 100]
      '''
      
      latitude_max = float
      '''Maximum latitude (vertical angle) for the equirectangular lens
         @returns: float in [-1.5708, 1.5708]
      '''
      
      latitude_min = float
      '''Minimum latitude (vertical angle) for the equirectangular lens
         @returns: float in [-1.5708, 1.5708]
      '''
      
      longitude_max = float
      '''Maximum longitude (horizontal angle) for the equirectangular lens
         @returns: float in [-3.14159, 3.14159]
      '''
      
      longitude_min = float
      '''Minimum longitude (horizontal angle) for the equirectangular lens
         @returns: float in [-3.14159, 3.14159]
      '''
      
      panorama_type = str
      '''Distortion to use for the calculation
         @returns: enum in ['EQUIRECTANGULAR', 'FISHEYE_EQUIDISTANT', 'FISHEYE_EQUISOLID', 'MIRRORBALL']
      '''
      
      @classmethod
      def register(cls):
         
      
         pass
      
      @classmethod
      def unregister(cls):
         
      
         pass
      
   class CyclesCurveRenderSettings(types.PropertyGroup):
      '''
      '''
   
      cull_backfacing = bool
      '''Do not test the back-face of each strand
         @returns: boolean
      '''
      
      primitive = str
      '''Type of primitive used for hair rendering
         @returns: enum in ['TRIANGLES', 'LINE_SEGMENTS', 'CURVE_SEGMENTS']
      '''
      
      resolution = int
      '''Resolution of generated mesh
         @returns: int in [3, 64]
      '''
      
      shape = str
      '''Form of hair
         @returns: enum in ['RIBBONS', 'THICK']
      '''
      
      subdivisions = int
      '''Number of subdivisions used in Cardinal curve intersection (power of 2)
         @returns: int in [0, 24]
      '''
      
      use_curves = bool
      '''Activate Cycles hair rendering for particle system
         @returns: boolean
      '''
      
      @classmethod
      def register(cls):
         
      
         pass
      
      @classmethod
      def unregister(cls):
         
      
         pass
      
   class CyclesDeviceSettings(types.PropertyGroup):
      '''
      '''
   
      id = str
      '''
         @returns: string, (never None)
      '''
      
      name = str
      '''
         @returns: string, (never None)
      '''
      
      type = str
      '''
         @returns: enum in ['CPU', 'CUDA', 'OPTIX', 'OPENCL']
      '''
      
      use = bool
      '''
         @returns: boolean
      '''
      
   class CyclesLightSettings(types.PropertyGroup):
      '''
      '''
   
      cast_shadow = bool
      '''Light casts shadows
         @returns: boolean
      '''
      
      is_portal = bool
      '''Use this area light to guide sampling of the background, note that this will make the light invisible
         @returns: boolean
      '''
      
      max_bounces = int
      '''Maximum number of bounces the light will contribute to the render
         @returns: int in [0, 1024]
      '''
      
      samples = int
      '''Number of light samples to render for each AA sample
         @returns: int in [1, 10000]
      '''
      
      use_multiple_importance_sampling = bool
      '''Use multiple importance sampling for the light, reduces noise for area lights and sharp glossy materials
         @returns: boolean
      '''
      
      @classmethod
      def register(cls):
         
      
         pass
      
      @classmethod
      def unregister(cls):
         
      
         pass
      
   class CyclesMaterialSettings(types.PropertyGroup):
      '''
      '''
   
      displacement_method = str
      '''Method to use for the displacement
         @returns: enum in ['BUMP', 'DISPLACEMENT', 'BOTH']
      '''
      
      homogeneous_volume = bool
      '''When using volume rendering, assume volume has the same density everywhere (not using any textures), for faster rendering
         @returns: boolean
      '''
      
      sample_as_light = bool
      '''Use multiple importance sampling for this material, disabling may reduce overall noise for large objects that emit little light compared to other light sources
         @returns: boolean
      '''
      
      use_transparent_shadow = bool
      '''Use transparent shadows for this material if it contains a Transparent BSDF, disabling will render faster but not give accurate shadows
         @returns: boolean
      '''
      
      volume_interpolation = str
      '''Interpolation method to use for smoke/fire volumes
         @returns: enum in ['LINEAR', 'CUBIC']
      '''
      
      volume_sampling = str
      '''Sampling method to use for volumes
         @returns: enum in ['DISTANCE', 'EQUIANGULAR', 'MULTIPLE_IMPORTANCE']
      '''
      
      volume_step_rate = float
      '''Scale the distance between volume shader samples when rendering the volume (lower values give more accurate and detailed results, but also increased render time)
         @returns: float in [0.001, 1000]
      '''
      
      @classmethod
      def register(cls):
         
      
         pass
      
      @classmethod
      def unregister(cls):
         
      
         pass
      
   class CyclesMeshSettings(types.PropertyGroup):
      '''
      '''
   
      @classmethod
      def register(cls):
         
      
         pass
      
      @classmethod
      def unregister(cls):
         
      
         pass
      
   class CyclesObjectSettings(types.PropertyGroup):
      '''
      '''
   
      dicing_rate = float
      '''Multiplier for scene dicing rate (located in the Subdivision panel)
         @returns: float in [0.1, 1000]
      '''
      
      is_holdout = bool
      '''Render objects as a holdout or matte, creating a hole in the image with zero alpha, to fill out in compositing with real footage or another render
         @returns: boolean
      '''
      
      is_shadow_catcher = bool
      '''Only render shadows on this object, for compositing renders into real footage
         @returns: boolean
      '''
      
      motion_steps = int
      '''Control accuracy of motion blur, more steps gives more memory usage (actual number of steps is 2^(steps - 1))
         @returns: int in [1, 7]
      '''
      
      use_adaptive_subdivision = bool
      '''Use adaptive render time subdivision
         @returns: boolean
      '''
      
      use_camera_cull = bool
      '''Allow this object and its duplicators to be culled by camera space culling
         @returns: boolean
      '''
      
      use_deform_motion = bool
      '''Use deformation motion blur for this object
         @returns: boolean
      '''
      
      use_distance_cull = bool
      '''Allow this object and its duplicators to be culled by distance from camera
         @returns: boolean
      '''
      
      use_motion_blur = bool
      '''Use motion blur for this object
         @returns: boolean
      '''
      
      @classmethod
      def register(cls):
         
      
         pass
      
      @classmethod
      def unregister(cls):
         
      
         pass
      
   class CyclesPreferences(types.AddonPreferences):
      '''
      '''
   
      compute_device_type = str
      '''Device to use for computation (rendering with Cycles)
         @returns: enum in []
      '''
      
      devices = types.CyclesDeviceSettings # (read only)
      '''
         @returns: Collection of CyclesDeviceSettings
      '''
      
      def draw(self, context):
         
      
         pass
      
      def draw_impl(self, layout, context):
         
      
         pass
      
      def find_existing_device_entry(self, device):
         
      
         pass
      
      def get_device_types(self, context):
         
      
         pass
      
      def get_devices(self, compute_device_type=''):
         
      
         pass
      
      def get_devices_for_type(self, compute_device_type):
         
      
         pass
      
      def get_num_gpu_devices(self):
         
      
         pass
      
      def has_active_device(self):
         
      
         pass
      
      def update_device_entries(self, device_list):
         
      
         pass
      
   class CyclesRenderLayerSettings(types.PropertyGroup):
      '''
      '''
   
      active_aov = int
      '''
         @returns: int in [0, inf]
      '''
      
      aovs = types.CyclesAOVPass # (read only)
      '''Custom render passes that can be output by shader nodes
         @returns: Collection of CyclesAOVPass
      '''
      
      denoising_diffuse_direct = bool
      '''Denoise the direct diffuse lighting
         @returns: boolean
      '''
      
      denoising_diffuse_indirect = bool
      '''Denoise the indirect diffuse lighting
         @returns: boolean
      '''
      
      denoising_feature_strength = float
      '''Controls removal of noisy image feature passes (lower values preserve more detail, but aren't as smooth)
         @returns: float in [0, 1]
      '''
      
      denoising_glossy_direct = bool
      '''Denoise the direct glossy lighting
         @returns: boolean
      '''
      
      denoising_glossy_indirect = bool
      '''Denoise the indirect glossy lighting
         @returns: boolean
      '''
      
      denoising_neighbor_frames = int
      '''Number of neighboring frames to use for denoising animations (more frames produce smoother results at the cost of performance)
         @returns: int in [0, 7]
      '''
      
      denoising_optix_input_passes = str
      '''Passes handed over to the OptiX denoiser (this can have different effects on the denoised image)
         @returns: enum in ['RGB', 'RGB_ALBEDO', 'RGB_ALBEDO_NORMAL']
      '''
      
      denoising_radius = int
      '''Size of the image area that's used to denoise a pixel (higher values are smoother, but might lose detail and are slower)
         @returns: int in [1, 25]
      '''
      
      denoising_relative_pca = bool
      '''When removing pixels that don't carry information, use a relative threshold instead of an absolute one (can help to reduce artifacts, but might cause detail loss around edges)
         @returns: boolean
      '''
      
      denoising_store_passes = bool
      '''Store the denoising feature passes and the noisy image
         @returns: boolean
      '''
      
      denoising_strength = float
      '''Controls neighbor pixel weighting for the denoising filter (lower values preserve more detail, but aren't as smooth)
         @returns: float in [0, 1]
      '''
      
      denoising_transmission_direct = bool
      '''Denoise the direct transmission lighting
         @returns: boolean
      '''
      
      denoising_transmission_indirect = bool
      '''Denoise the indirect transmission lighting
         @returns: boolean
      '''
      
      pass_crypto_accurate = bool
      '''Generate a more accurate Cryptomatte pass. CPU only, may render slower and use more memory
         @returns: boolean
      '''
      
      pass_crypto_depth = int
      '''Sets how many unique objects can be distinguished per pixel
         @returns: int in [2, 16]
      '''
      
      pass_debug_bvh_intersections = bool
      '''Store Debug BVH Intersections
         @returns: boolean
      '''
      
      pass_debug_bvh_traversed_instances = bool
      '''Store Debug BVH Traversed Instances pass
         @returns: boolean
      '''
      
      pass_debug_bvh_traversed_nodes = bool
      '''Store Debug BVH Traversed Nodes pass
         @returns: boolean
      '''
      
      pass_debug_ray_bounces = bool
      '''Store Debug Ray Bounces pass
         @returns: boolean
      '''
      
      pass_debug_render_time = bool
      '''Render time in milliseconds per sample and pixel
         @returns: boolean
      '''
      
      pass_debug_sample_count = bool
      '''Number of samples/camera rays per pixel
         @returns: boolean
      '''
      
      use_denoising = bool
      '''Denoise the rendered image
         @returns: boolean
      '''
      
      use_optix_denoising = bool
      '''Use the OptiX denoiser to denoise the rendered image
         @returns: boolean
      '''
      
      use_pass_crypto_asset = bool
      '''Render cryptomatte asset pass, for isolating groups of objects with the same parent
         @returns: boolean
      '''
      
      use_pass_crypto_material = bool
      '''Render cryptomatte material pass, for isolating materials in compositing
         @returns: boolean
      '''
      
      use_pass_crypto_object = bool
      '''Render cryptomatte object pass, for isolating objects in compositing
         @returns: boolean
      '''
      
      use_pass_volume_direct = bool
      '''Deliver direct volumetric scattering pass
         @returns: boolean
      '''
      
      use_pass_volume_indirect = bool
      '''Deliver indirect volumetric scattering pass
         @returns: boolean
      '''
      
      @classmethod
      def register(cls):
         
      
         pass
      
      @classmethod
      def unregister(cls):
         
      
         pass
      
   class CyclesRenderSettings(types.PropertyGroup):
      '''
      '''
   
      aa_samples = int
      '''Number of antialiasing samples to render for each pixel
         @returns: int in [1, 2097151]
      '''
      
      adaptive_min_samples = int
      '''Minimum AA samples for adaptive sampling, to discover noisy features before stopping sampling. Zero for automatic setting based on number of AA samples
         @returns: int in [0, 4096]
      '''
      
      adaptive_threshold = float
      '''Noise level step to stop sampling at, lower values reduce noise the cost of render time. Zero for automatic setting based on number of AA samples
         @returns: float in [0, 1]
      '''
      
      ao_bounces = int
      '''Approximate indirect light with background tinted ambient occlusion at the specified bounce, 0 disables this feature
         @returns: int in [0, 1024]
      '''
      
      ao_bounces_render = int
      '''Approximate indirect light with background tinted ambient occlusion at the specified bounce, 0 disables this feature
         @returns: int in [0, 1024]
      '''
      
      ao_samples = int
      '''Number of ambient occlusion samples to render for each AA sample
         @returns: int in [1, 1024]
      '''
      
      bake_type = str
      '''Type of pass to bake
         @returns: enum in ['COMBINED', 'AO', 'SHADOW', 'NORMAL', 'UV', 'ROUGHNESS', 'EMIT', 'ENVIRONMENT', 'DIFFUSE', 'GLOSSY', 'TRANSMISSION']
      '''
      
      blur_glossy = float
      '''Adaptively blur glossy shaders after blurry bounces, to reduce noise at the cost of accuracy
         @returns: float in [0, 10]
      '''
      
      camera_cull_margin = float
      '''Margin for the camera space culling
         @returns: float in [0, 5]
      '''
      
      caustics_reflective = bool
      '''Use reflective caustics, resulting in a brighter image (more noise but added realism)
         @returns: boolean
      '''
      
      caustics_refractive = bool
      '''Use refractive caustics, resulting in a brighter image (more noise but added realism)
         @returns: boolean
      '''
      
      debug_bvh_layout = str
      '''
         @returns: enum in ['BVH2', 'BVH4', 'BVH8']
      '''
      
      debug_bvh_time_steps = int
      '''Split BVH primitives by this number of time steps to speed up render time in cost of memory
         @returns: int in [0, 16]
      '''
      
      debug_bvh_type = str
      '''Choose between faster updates, or faster render
         @returns: enum in ['DYNAMIC_BVH', 'STATIC_BVH']
      '''
      
      debug_cancel_timeout = float
      '''
         @returns: float in [0.01, 10]
      '''
      
      debug_opencl_device_type = str
      '''
         @returns: enum in ['NONE', 'ALL', 'DEFAULT', 'CPU', 'GPU', 'ACCELERATOR']
      '''
      
      debug_opencl_kernel_type = str
      '''
         @returns: enum in ['DEFAULT', 'MEGA', 'SPLIT']
      '''
      
      debug_opencl_mem_limit = int
      '''Artificial limit on OpenCL memory usage in MB (0 to disable limit)
         @returns: int in [-inf, inf]
      '''
      
      debug_optix_cuda_streams = int
      '''
         @returns: int in [1, inf]
      '''
      
      debug_reset_timeout = float
      '''
         @returns: float in [0.01, 10]
      '''
      
      debug_text_timeout = float
      '''
         @returns: float in [0.01, 10]
      '''
      
      debug_tile_size = int
      '''
         @returns: int in [1, 4096]
      '''
      
      debug_use_cpu_avx = bool
      '''
         @returns: boolean
      '''
      
      debug_use_cpu_avx2 = bool
      '''
         @returns: boolean
      '''
      
      debug_use_cpu_split_kernel = bool
      '''
         @returns: boolean
      '''
      
      debug_use_cpu_sse2 = bool
      '''
         @returns: boolean
      '''
      
      debug_use_cpu_sse3 = bool
      '''
         @returns: boolean
      '''
      
      debug_use_cpu_sse41 = bool
      '''
         @returns: boolean
      '''
      
      debug_use_cuda_adaptive_compile = bool
      '''
         @returns: boolean
      '''
      
      debug_use_cuda_split_kernel = bool
      '''
         @returns: boolean
      '''
      
      debug_use_hair_bvh = bool
      '''Use special type BVH optimized for hair (uses more ram but renders faster)
         @returns: boolean
      '''
      
      debug_use_opencl_debug = bool
      '''
         @returns: boolean
      '''
      
      debug_use_spatial_splits = bool
      '''Use BVH spatial splits: longer builder time, faster render
         @returns: boolean
      '''
      
      device = str
      '''Device to use for rendering
         @returns: enum in ['CPU', 'GPU']
      '''
      
      dicing_camera = types.Object
      '''Camera to use as reference point when subdividing geometry, useful to avoid crawling artifacts in animations when the scene camera is moving
         @returns: Object
      '''
      
      dicing_rate = float
      '''Size of a micropolygon in pixels
         @returns: float in [0.1, 1000]
      '''
      
      diffuse_bounces = int
      '''Maximum number of diffuse reflection bounces, bounded by total maximum
         @returns: int in [0, 1024]
      '''
      
      diffuse_samples = int
      '''Number of diffuse bounce samples to render for each AA sample
         @returns: int in [1, 1024]
      '''
      
      distance_cull_margin = float
      '''Cull objects which are further away from camera than this distance
         @returns: float in [0, inf]
      '''
      
      feature_set = str
      '''Feature set to use for rendering
         @returns: enum in ['SUPPORTED', 'EXPERIMENTAL']
      '''
      
      film_exposure = float
      '''Image brightness scale
         @returns: float in [0, 10]
      '''
      
      film_transparent_glass = bool
      '''Render transmissive surfaces as transparent, for compositing glass over another background
         @returns: boolean
      '''
      
      film_transparent_roughness = float
      '''For transparent transmission, keep surfaces with roughness above the threshold opaque
         @returns: float in [0, 1]
      '''
      
      filter_type = str
      '''Pixel filter type
         @returns: enum in ['BOX', 'GAUSSIAN', 'BLACKMAN_HARRIS']
      '''
      
      filter_width = float
      '''Pixel filter width
         @returns: float in [0.01, 10]
      '''
      
      glossy_bounces = int
      '''Maximum number of glossy reflection bounces, bounded by total maximum
         @returns: int in [0, 1024]
      '''
      
      glossy_samples = int
      '''Number of glossy bounce samples to render for each AA sample
         @returns: int in [1, 1024]
      '''
      
      light_sampling_threshold = float
      '''Probabilistically terminate light samples when the light contribution is below this threshold (more noise but faster rendering). Zero disables the test and never ignores lights
         @returns: float in [0, 1]
      '''
      
      max_bounces = int
      '''Total maximum number of bounces
         @returns: int in [0, 1024]
      '''
      
      max_subdivisions = int
      '''Stop subdividing when this level is reached even if the dice rate would produce finer tessellation
         @returns: int in [0, 16]
      '''
      
      mesh_light_samples = int
      '''Number of mesh emission light samples to render for each AA sample
         @returns: int in [1, 1024]
      '''
      
      min_light_bounces = int
      '''Minimum number of light bounces. Setting this higher reduces noise in the first bounces, but can also be less efficient for more complex geometry like hair and volumes
         @returns: int in [0, 1024]
      '''
      
      min_transparent_bounces = int
      '''Minimum number of transparent bounces. Setting this higher reduces noise in the first bounces, but can also be less efficient for more complex geometry like hair and volumes
         @returns: int in [0, 1024]
      '''
      
      motion_blur_position = str
      '''Offset for the shutter's time interval, allows to change the motion blur trails
         @returns: enum in ['START', 'CENTER', 'END']
      '''
      
      offscreen_dicing_scale = float
      '''Multiplier for dicing rate of geometry outside of the camera view. The dicing rate of objects is gradually increased the further they are outside the camera view. Lower values provide higher quality reflections and shadows for off screen objects, while higher values use less memory
         @returns: float in [1, inf]
      '''
      
      pixel_filter_type = str
      '''Pixel filter type
         @returns: enum in ['BOX', 'GAUSSIAN', 'BLACKMAN_HARRIS']
      '''
      
      preview_aa_samples = int
      '''Number of antialiasing samples to render in the viewport, unlimited if 0
         @returns: int in [0, 2097151]
      '''
      
      preview_denoising = str
      '''Denoise the image after each preview update with the selected denoiser engine
         @returns: enum in ['NONE', 'OPTIX']
      '''
      
      preview_denoising_start_sample = int
      '''Sample to start denoising the preview at
         @returns: int in [0, inf]
      '''
      
      preview_dicing_rate = float
      '''Size of a micropolygon in pixels during preview render
         @returns: float in [0.1, 1000]
      '''
      
      preview_pause = bool
      '''Pause all viewport preview renders
         @returns: boolean
      '''
      
      preview_samples = int
      '''Number of samples to render in the viewport, unlimited if 0
         @returns: int in [0, inf]
      '''
      
      preview_start_resolution = int
      '''Resolution to start rendering preview at, progressively increasing it to the full viewport size
         @returns: int in [8, 16384]
      '''
      
      progressive = str
      '''Method to sample lights and materials
         @returns: enum in ['BRANCHED_PATH', 'PATH']
      '''
      
      rolling_shutter_duration = float
      '''Scanline "exposure" time for the rolling shutter effect
         @returns: float in [0, 1]
      '''
      
      rolling_shutter_type = str
      '''Type of rolling shutter effect matching CMOS-based cameras
         @returns: enum in ['NONE', 'TOP']
      '''
      
      sample_all_lights_direct = bool
      '''Sample all lights (for direct samples), rather than randomly picking one
         @returns: boolean
      '''
      
      sample_all_lights_indirect = bool
      '''Sample all lights (for indirect samples), rather than randomly picking one
         @returns: boolean
      '''
      
      sample_clamp_direct = float
      '''If non-zero, the maximum value for a direct sample, higher values will be scaled down to avoid too much noise and slow convergence at the cost of accuracy
         @returns: float in [0, inf]
      '''
      
      sample_clamp_indirect = float
      '''If non-zero, the maximum value for an indirect sample, higher values will be scaled down to avoid too much noise and slow convergence at the cost of accuracy
         @returns: float in [0, inf]
      '''
      
      samples = int
      '''Number of samples to render for each pixel
         @returns: int in [1, inf]
      '''
      
      sampling_pattern = str
      '''Random sampling pattern used by the integrator
         @returns: enum in ['SOBOL', 'CORRELATED_MUTI_JITTER', 'PROGRESSIVE_MUTI_JITTER']
      '''
      
      seed = int
      '''Seed value for integrator to get different noise patterns
         @returns: int in [0, inf]
      '''
      
      shading_system = bool
      '''Use Open Shading Language (CPU rendering only)
         @returns: boolean
      '''
      
      subsurface_samples = int
      '''Number of subsurface scattering samples to render for each AA sample
         @returns: int in [1, 1024]
      '''
      
      texture_limit = str
      '''Limit texture size used by viewport rendering
         @returns: enum in ['OFF', '128', '256', '512', '1024', '2048', '4096', '8192']
      '''
      
      texture_limit_render = str
      '''Limit texture size used by final rendering
         @returns: enum in ['OFF', '128', '256', '512', '1024', '2048', '4096', '8192']
      '''
      
      tile_order = str
      '''Tile order for rendering
         @returns: enum in ['CENTER', 'RIGHT_TO_LEFT', 'LEFT_TO_RIGHT', 'TOP_TO_BOTTOM', 'BOTTOM_TO_TOP', 'HILBERT_SPIRAL']
      '''
      
      transmission_bounces = int
      '''Maximum number of transmission bounces, bounded by total maximum
         @returns: int in [0, 1024]
      '''
      
      transmission_samples = int
      '''Number of transmission bounce samples to render for each AA sample
         @returns: int in [1, 1024]
      '''
      
      transparent_max_bounces = int
      '''Maximum number of transparent bounces
         @returns: int in [0, 1024]
      '''
      
      use_adaptive_sampling = bool
      '''Automatically reduce the number of samples per pixel based on estimated noise level
         @returns: boolean
      '''
      
      use_animated_seed = bool
      '''Use different seed values (and hence noise patterns) at different frames
         @returns: boolean
      '''
      
      use_bvh_embree = bool
      '''Use Embree as ray accelerator
         @returns: boolean
      '''
      
      use_camera_cull = bool
      '''Allow objects to be culled based on the camera frustum
         @returns: boolean
      '''
      
      use_distance_cull = bool
      '''Allow objects to be culled based on the distance from camera
         @returns: boolean
      '''
      
      use_layer_samples = str
      '''How to use per view layer sample settings
         @returns: enum in ['USE', 'BOUNDED', 'IGNORE']
      '''
      
      use_progressive_refine = bool
      '''Instead of rendering each tile until it is finished, refine the whole image progressively (this renders somewhat slower, but time can be saved by manually stopping the render when the noise is low enough)
         @returns: boolean
      '''
      
      use_square_samples = bool
      '''Square sampling values for easier artist control
         @returns: boolean
      '''
      
      volume_bounces = int
      '''Maximum number of volumetric scattering events
         @returns: int in [0, 1024]
      '''
      
      volume_max_steps = int
      '''Maximum number of steps through the volume before giving up, to avoid extremely long render times with big objects or small step sizes
         @returns: int in [2, 65536]
      '''
      
      volume_preview_step_rate = float
      '''Globally adjust detail for volume rendering, on top of automatically estimated step size. Higher values reduce render time, lower values render with more detail
         @returns: float in [0.01, 100]
      '''
      
      volume_samples = int
      '''Number of volume scattering samples to render for each AA sample
         @returns: int in [1, 1024]
      '''
      
      volume_step_rate = float
      '''Globally adjust detail for volume rendering, on top of automatically estimated step size. Higher values reduce render time, lower values render with more detail
         @returns: float in [0.01, 100]
      '''
      
      @classmethod
      def register(cls):
         
      
         pass
      
      @classmethod
      def unregister(cls):
         
      
         pass
      
   class CyclesView3DShadingSettings(types.PropertyGroup):
      '''
      '''
   
      render_pass = str
      '''Render pass to show in the 3D Viewport
         @returns: enum in ['COMBINED', 'EMISSION', 'BACKGROUND', 'AO', 'DIFFUSE_DIRECT', 'DIFFUSE_INDIRECT', 'DIFFUSE_COLOR', 'GLOSSY_DIRECT', 'GLOSSY_INDIRECT', 'GLOSSY_COLOR', 'TRANSMISSION_DIRECT', 'TRANSMISSION_INDIRECT', 'TRANSMISSION_COLOR', 'VOLUME_DIRECT', 'VOLUME_INDIRECT', 'NORMAL', 'UV', 'MIST']
      '''
      
   class CyclesVisibilitySettings(types.PropertyGroup):
      '''
      '''
   
      camera = bool
      '''Object visibility for camera rays
         @returns: boolean
      '''
      
      diffuse = bool
      '''Object visibility for diffuse reflection rays
         @returns: boolean
      '''
      
      glossy = bool
      '''Object visibility for glossy reflection rays
         @returns: boolean
      '''
      
      scatter = bool
      '''Object visibility for volume scatter rays
         @returns: boolean
      '''
      
      shadow = bool
      '''Object visibility for shadow rays
         @returns: boolean
      '''
      
      transmission = bool
      '''Object visibility for transmission rays
         @returns: boolean
      '''
      
      @classmethod
      def register(cls):
         
      
         pass
      
      @classmethod
      def unregister(cls):
         
      
         pass
      
   class CyclesWorldSettings(types.PropertyGroup):
      '''
      '''
   
      homogeneous_volume = bool
      '''When using volume rendering, assume volume has the same density everywhere(not using any textures), for faster rendering
         @returns: boolean
      '''
      
      max_bounces = int
      '''Maximum number of bounces the background light will contribute to the render
         @returns: int in [0, 1024]
      '''
      
      sample_map_resolution = int
      '''Importance map size is resolution x resolution/2; higher values potentially produce less noise, at the cost of memory and speed
         @returns: int in [4, 8192]
      '''
      
      samples = int
      '''Number of light samples to render for each AA sample
         @returns: int in [1, 10000]
      '''
      
      sampling_method = str
      '''How to sample the background light
         @returns: enum in ['NONE', 'AUTOMATIC', 'MANUAL']
      '''
      
      volume_interpolation = str
      '''Interpolation method to use for volumes
         @returns: enum in ['LINEAR', 'CUBIC']
      '''
      
      volume_sampling = str
      '''Sampling method to use for volumes
         @returns: enum in ['DISTANCE', 'EQUIANGULAR', 'MULTIPLE_IMPORTANCE']
      '''
      
      volume_step_size = float
      '''Distance between volume shader samples when rendering the volume (lower values give more accurate and detailed results, but also increased render time)
         @returns: float in [1e-07, 100000]
      '''
      
      @classmethod
      def register(cls):
         
      
         pass
      
      @classmethod
      def unregister(cls):
         
      
         pass
      
   class DampedTrackConstraint(types.Constraint):
      '''Point toward target by taking the shortest rotation path
      '''
   
      head_tail = float
      '''Target along length of bone: Head=0, Tail=1
         @returns: float in [0, 1]
      '''
      
      subtarget = str
      '''Armature bone, mesh or lattice vertex group, ...
         @returns: string, (never None)
      '''
      
      target = types.Object
      '''Target object
         @returns: Object
      '''
      
      track_axis = str
      '''Axis that points to the target object
         @returns: enum in ['TRACK_X', 'TRACK_Y', 'TRACK_Z', 'TRACK_NEGATIVE_X', 'TRACK_NEGATIVE_Y', 'TRACK_NEGATIVE_Z']
      '''
      
      use_bbone_shape = bool
      '''Follow shape of B-Bone segments when calculating Head/Tail position
         @returns: boolean
      '''
      
   class DataTransferModifier(types.Modifier):
      '''Modifier transferring some data from a source mesh
      '''
   
      data_types_edges = str
      '''Which edge data layers to transfer
         @returns: enum set in {'SHARP_EDGE', 'SEAM', 'CREASE', 'BEVEL_WEIGHT_EDGE', 'FREESTYLE_EDGE'}
      '''
      
      data_types_loops = str
      '''Which face corner data layers to transfer
         @returns: enum set in {'CUSTOM_NORMAL', 'VCOL', 'UV'}
      '''
      
      data_types_polys = str
      '''Which poly data layers to transfer
         @returns: enum set in {'SMOOTH', 'FREESTYLE_FACE'}
      '''
      
      data_types_verts = str
      '''Which vertex data layers to transfer
         @returns: enum set in {'VGROUP_WEIGHTS', 'BEVEL_WEIGHT_VERT'}
      '''
      
      edge_mapping = str
      '''Method used to map source edges to destination ones
         @returns: enum in ['TOPOLOGY', 'VERT_NEAREST', 'NEAREST', 'POLY_NEAREST', 'EDGEINTERP_VNORPROJ']
      '''
      
      invert_vertex_group = bool
      '''Invert vertex group influence
         @returns: boolean
      '''
      
      islands_precision = float
      '''Factor controlling precision of islands handling (typically, 0.1 should be enough, higher values can make things really slow)
         @returns: float in [0, 1]
      '''
      
      layers_uv_select_dst = str
      '''How to match source and destination layers
         @returns: enum in ['ACTIVE', 'NAME', 'INDEX']
      '''
      
      layers_uv_select_src = str
      '''Which layers to transfer, in case of multi-layers types
         @returns: enum in ['ACTIVE', 'ALL', 'BONE_SELECT', 'BONE_DEFORM']
      '''
      
      layers_vcol_select_dst = str
      '''How to match source and destination layers
         @returns: enum in ['ACTIVE', 'NAME', 'INDEX']
      '''
      
      layers_vcol_select_src = str
      '''Which layers to transfer, in case of multi-layers types
         @returns: enum in ['ACTIVE', 'ALL', 'BONE_SELECT', 'BONE_DEFORM']
      '''
      
      layers_vgroup_select_dst = str
      '''How to match source and destination layers
         @returns: enum in ['ACTIVE', 'NAME', 'INDEX']
      '''
      
      layers_vgroup_select_src = str
      '''Which layers to transfer, in case of multi-layers types
         @returns: enum in ['ACTIVE', 'ALL', 'BONE_SELECT', 'BONE_DEFORM']
      '''
      
      loop_mapping = str
      '''Method used to map source faces' corners to destination ones
         @returns: enum in ['TOPOLOGY', 'NEAREST_NORMAL', 'NEAREST_POLYNOR', 'NEAREST_POLY', 'POLYINTERP_NEAREST', 'POLYINTERP_LNORPROJ']
      '''
      
      max_distance = float
      '''Maximum allowed distance between source and destination element, for non-topology mappings
         @returns: float in [0, inf]
      '''
      
      mix_factor = float
      '''Factor to use when applying data to destination (exact behavior depends on mix mode, multiplied with weights from vertex group when defined)
         @returns: float in [0, 1]
      '''
      
      mix_mode = str
      '''How to affect destination elements with source values
         @returns: enum in ['REPLACE', 'ABOVE_THRESHOLD', 'BELOW_THRESHOLD', 'MIX', 'ADD', 'SUB', 'MUL']
      '''
      
      object = types.Object
      '''Object to transfer data from
         @returns: Object
      '''
      
      poly_mapping = str
      '''Method used to map source faces to destination ones
         @returns: enum in ['TOPOLOGY', 'NEAREST', 'NORMAL', 'POLYINTERP_PNORPROJ']
      '''
      
      ray_radius = float
      ''''Width' of rays (especially useful when raycasting against vertices or edges)
         @returns: float in [0, inf]
      '''
      
      use_edge_data = bool
      '''Enable edge data transfer
         @returns: boolean
      '''
      
      use_loop_data = bool
      '''Enable face corner data transfer
         @returns: boolean
      '''
      
      use_max_distance = bool
      '''Source elements must be closer than given distance from destination one
         @returns: boolean
      '''
      
      use_object_transform = bool
      '''Evaluate source and destination meshes in global space
         @returns: boolean
      '''
      
      use_poly_data = bool
      '''Enable face data transfer
         @returns: boolean
      '''
      
      use_vert_data = bool
      '''Enable vertex data transfer
         @returns: boolean
      '''
      
      vert_mapping = str
      '''Method used to map source vertices to destination ones
         @returns: enum in ['TOPOLOGY', 'NEAREST', 'EDGE_NEAREST', 'EDGEINTERP_NEAREST', 'POLY_NEAREST', 'POLYINTERP_NEAREST', 'POLYINTERP_VNORPROJ']
      '''
      
      vertex_group = str
      '''Vertex group name for selecting the affected areas
         @returns: string, (never None)
      '''
      
   class DecimateModifier(types.Modifier):
      '''Decimation modifier
      '''
   
      angle_limit = float
      '''Only dissolve angles below this (planar only)
         @returns: float in [0, 3.14159]
      '''
      
      decimate_type = str
      '''
         @returns: enum in ['COLLAPSE', 'UNSUBDIV', 'DISSOLVE']
      '''
      
      delimit = str
      '''Limit merging geometry
         @returns: enum set in {'NORMAL', 'MATERIAL', 'SEAM', 'SHARP', 'UV'}
      '''
      
      face_count = int # (read only)
      '''The current number of faces in the decimated mesh
         @returns: int in [-inf, inf]
      '''
      
      invert_vertex_group = bool
      '''Invert vertex group influence (collapse only)
         @returns: boolean
      '''
      
      iterations = int
      '''Number of times reduce the geometry (unsubdivide only)
         @returns: int in [0, 32767]
      '''
      
      ratio = float
      '''Ratio of triangles to reduce to (collapse only)
         @returns: float in [0, 1]
      '''
      
      symmetry_axis = str
      '''Axis of symmetry
         @returns: enum in ['X', 'Y', 'Z']
      '''
      
      use_collapse_triangulate = bool
      '''Keep triangulated faces resulting from decimation (collapse only)
         @returns: boolean
      '''
      
      use_dissolve_boundaries = bool
      '''Dissolve all vertices in between face boundaries (planar only)
         @returns: boolean
      '''
      
      use_symmetry = bool
      '''Maintain symmetry on an axis
         @returns: boolean
      '''
      
      vertex_group = str
      '''Vertex group name (collapse only)
         @returns: string, (never None)
      '''
      
      vertex_group_factor = float
      '''Vertex group strength
         @returns: float in [0, 1000]
      '''
      
   class Depsgraph(types.bpy_struct):
      '''
      '''
   
      ids = types.ID # (read only)
      '''All evaluated datablocks
         @returns: Collection of ID
      '''
      
      mode = str # (read only)
      '''Evaluation mode
         @returns: enum in ['VIEWPORT', 'RENDER']
      '''
      
      object_instances = types.DepsgraphObjectInstance # (read only)
      '''All object instances to display or render (WARNING: only use this as an iterator, never as a sequence, and do not keep any references to its items)
         @returns: Collection of DepsgraphObjectInstance
      '''
      
      objects = types.Object # (read only)
      '''Evaluated objects in the dependency graph
         @returns: Collection of Object
      '''
      
      scene = types.Scene # (read only)
      '''Original scene dependency graph is built for
         @returns: Scene
      '''
      
      scene_eval = types.Scene # (read only)
      '''Original scene dependency graph is built for
         @returns: Scene
      '''
      
      updates = types.DepsgraphUpdate # (read only)
      '''Updates to datablocks
         @returns: Collection of DepsgraphUpdate
      '''
      
      view_layer = types.ViewLayer # (read only)
      '''Original view layer dependency graph is built for
         @returns: ViewLayer
      '''
      
      view_layer_eval = types.ViewLayer # (read only)
      '''Original view layer dependency graph is built for
         @returns: ViewLayer
      '''
      
      def debug_relations_graphviz(filename):
         '''debug_relations_graphviz
            Arguments:
            @filename (str): Output path for the graphviz debug file
               (never None)
      
         '''
      
         pass

      def debug_stats_gnuplot(filename, output_filename):
         '''debug_stats_gnuplot
            Arguments:
            @filename (str): Output path for the gnuplot debug file
               (never None)
            @output_filename (str): File name where gnuplot script will save the result
               (never None)
      
         '''
      
         pass

      def debug_tag_update():
         '''debug_tag_update
         '''
      
         pass

      def debug_stats():
         '''Report the number of elements in the Dependency Graph
            @returns (str): (never None)
         '''
      
         return str

      def update():
         '''Re-evaluate any modified data-blocks, for example for animation or modifiers. This invalidates all references to evaluated data-blocks from this dependency graph.
         '''
      
         pass

      def id_eval_get(id):
         '''id_eval_get
            Arguments:
            @id (ID): Original ID to get evaluated complementary part for
               
      
            @returns (types.ID): Evaluated ID for the given original one
               
         '''
      
         return types.ID

      def id_type_updated(id_type):
         '''id_type_updated
            Arguments:
            @id_type (str): in ['ACTION', 'ARMATURE', 'BRUSH', 'CAMERA', 'CACHEFILE', 'CURVE', 'FONT', 'GREASEPENCIL', 'COLLECTION', 'IMAGE', 'KEY', 'LIGHT', 'LIBRARY', 'LINESTYLE', 'LATTICE', 'MASK', 'MATERIAL', 'META', 'MESH', 'MOVIECLIP', 'NODETREE', 'OBJECT', 'PAINTCURVE', 'PALETTE', 'PARTICLE', 'LIGHT_PROBE', 'SCENE', 'SOUND', 'SPEAKER', 'TEXT', 'TEXTURE', 'VOLUME', 'WINDOWMANAGER', 'WORLD', 'WORKSPACE']
      
            @returns (bool): True if any datablock with this type was added, updated or removed
               
         '''
      
         return bool

   class DepsgraphObjectInstance(types.bpy_struct):
      '''Extended information about dependency graph object iterator (WARNING: all data here is *evaluated* one, not original .blend IDs...)
      '''
   
      instance_object = types.Object # (read only)
      '''Evaluated object which is being instanced by this iterator
         @returns: Object
      '''
      
      is_instance = bool # (read only)
      '''Denotes if the object is generated by another object
         @returns: boolean
      '''
      
      matrix_world = float # (read only)
      '''Generated transform matrix in world space
         @returns: float multi-dimensional array of 4 * 4 items in [-inf, inf]
      '''
      
      object = types.Object # (read only)
      '''Evaluated object the iterator points to
         @returns: Object
      '''
      
      orco = float # (read only)
      '''Generated coordinates in parent object space
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      parent = types.Object # (read only)
      '''If the object is an instance, the parent object that generated it
         @returns: Object
      '''
      
      particle_system = types.ParticleSystem # (read only)
      '''Evaluated particle system that this object was instanced from
         @returns: ParticleSystem
      '''
      
      persistent_id = int # (read only)
      '''Persistent identifier for inter-frame matching of objects with motion blur
         @returns: int array of 16 items in [-inf, inf]
      '''
      
      random_id = int # (read only)
      '''Random id for this instance, typically for randomized shading
         @returns: int in [0, inf]
      '''
      
      show_particles = bool # (read only)
      '''Particles part of the object should be visible in the render
         @returns: boolean
      '''
      
      show_self = bool # (read only)
      '''The object geometry itself should be visible in the render
         @returns: boolean
      '''
      
      uv = float # (read only)
      '''UV coordinates in parent object space
         @returns: float array of 2 items in [-inf, inf]
      '''
      
   class DepsgraphUpdate(types.bpy_struct):
      '''Information about ID that was updated
      '''
   
      id = types.ID # (read only)
      '''Updated datablock
         @returns: ID
      '''
      
      is_updated_geometry = bool # (read only)
      '''Object geometry is updated
         @returns: boolean
      '''
      
      is_updated_shading = bool # (read only)
      '''Object shading is updated
         @returns: boolean
      '''
      
      is_updated_transform = bool # (read only)
      '''Object transformation is updated
         @returns: boolean
      '''
      
   class DisplaceModifier(types.Modifier):
      '''Displacement modifier
      '''
   
      direction = str
      '''
         @returns: enum in ['X', 'Y', 'Z', 'NORMAL', 'CUSTOM_NORMAL', 'RGB_TO_XYZ']
      '''
      
      invert_vertex_group = bool
      '''Invert vertex group influence
         @returns: boolean
      '''
      
      mid_level = float
      '''Material value that gives no displacement
         @returns: float in [-inf, inf]
      '''
      
      space = str
      '''
         @returns: enum in ['LOCAL', 'GLOBAL']
      '''
      
      strength = float
      '''Amount to displace geometry
         @returns: float in [-inf, inf]
      '''
      
      texture = types.Texture
      '''
         @returns: Texture
      '''
      
      texture_coords = str
      '''
         @returns: enum in ['LOCAL', 'GLOBAL', 'OBJECT', 'UV']
      '''
      
      texture_coords_bone = str
      '''Bone to set the texture coordinates
         @returns: string, (never None)
      '''
      
      texture_coords_object = types.Object
      '''Object to set the texture coordinates
         @returns: Object
      '''
      
      uv_layer = str
      '''UV map name
         @returns: string, (never None)
      '''
      
      vertex_group = str
      '''Name of Vertex Group which determines influence of modifier per point
         @returns: string, (never None)
      '''
      
   class DisplaySafeAreas(types.bpy_struct):
      '''Safe areas used in 3D view and the sequencer
      '''
   
      action = float
      '''Safe area for general elements
         @returns: float array of 2 items in [0, 1]
      '''
      
      action_center = float
      '''Safe area for general elements in a different aspect ratio
         @returns: float array of 2 items in [0, 1]
      '''
      
      title = float
      '''Safe area for text and graphics
         @returns: float array of 2 items in [0, 1]
      '''
      
      title_center = float
      '''Safe area for text and graphics in a different aspect ratio
         @returns: float array of 2 items in [0, 1]
      '''
      
   class DistortedNoiseTexture(types.Texture):
      '''Procedural distorted noise texture
      '''
   
      distortion = float
      '''Amount of distortion
         @returns: float in [0, 10]
      '''
      
      nabla = float
      '''Size of derivative offset used for calculating normal
         @returns: float in [0.001, 0.1]
      '''
      
      noise_basis = str
      '''Noise basis used for turbulence
         @returns: enum in ['BLENDER_ORIGINAL', 'ORIGINAL_PERLIN', 'IMPROVED_PERLIN', 'VORONOI_F1', 'VORONOI_F2', 'VORONOI_F3', 'VORONOI_F4', 'VORONOI_F2_F1', 'VORONOI_CRACKLE', 'CELL_NOISE']
      '''
      
      noise_distortion = str
      '''Noise basis for the distortion
         @returns: enum in ['BLENDER_ORIGINAL', 'ORIGINAL_PERLIN', 'IMPROVED_PERLIN', 'VORONOI_F1', 'VORONOI_F2', 'VORONOI_F3', 'VORONOI_F4', 'VORONOI_F2_F1', 'VORONOI_CRACKLE', 'CELL_NOISE']
      '''
      
      noise_scale = float
      '''Scaling for noise input
         @returns: float in [0.0001, inf]
      '''
      
      users_material = None # (readonly)
      '''Materials that use this texture
         
      '''
      
      
      users_object_modifier = None # (readonly)
      '''Object modifiers that use this texture
         
      '''
      
      
   class DopeSheet(types.bpy_struct):
      '''Settings for filtering the channels shown in animation editors
      '''
   
      filter_collection = types.Collection
      '''Collection that included object should be a member of
         @returns: Collection
      '''
      
      filter_fcurve_name = str
      '''F-Curve live filtering string
         @returns: string, (never None)
      '''
      
      filter_text = str
      '''Live filtering string
         @returns: string, (never None)
      '''
      
      show_armatures = bool
      '''Include visualization of armature related animation data
         @returns: boolean
      '''
      
      show_cache_files = bool
      '''Include visualization of cache file related animation data
         @returns: boolean
      '''
      
      show_cameras = bool
      '''Include visualization of camera related animation data
         @returns: boolean
      '''
      
      show_curves = bool
      '''Include visualization of curve related animation data
         @returns: boolean
      '''
      
      show_datablock_filters = bool
      '''Show options for whether channels related to certain types of data are included
         @returns: boolean
      '''
      
      show_expanded_summary = bool
      '''Collapse summary when shown, so all other channels get hidden (Dope Sheet editors only)
         @returns: boolean
      '''
      
      show_gpencil = bool
      '''Include visualization of Grease Pencil related animation data and frames
         @returns: boolean
      '''
      
      show_hidden = bool
      '''Include channels from objects/bone that are not visible
         @returns: boolean
      '''
      
      show_lattices = bool
      '''Include visualization of lattice related animation data
         @returns: boolean
      '''
      
      show_lights = bool
      '''Include visualization of light related animation data
         @returns: boolean
      '''
      
      show_linestyles = bool
      '''Include visualization of Line Style related Animation data
         @returns: boolean
      '''
      
      show_materials = bool
      '''Include visualization of material related animation data
         @returns: boolean
      '''
      
      show_meshes = bool
      '''Include visualization of mesh related animation data
         @returns: boolean
      '''
      
      show_metaballs = bool
      '''Include visualization of metaball related animation data
         @returns: boolean
      '''
      
      show_missing_nla = bool
      '''Include animation data-blocks with no NLA data (NLA editor only)
         @returns: boolean
      '''
      
      show_modifiers = bool
      '''Include visualization of animation data related to data-blocks linked to modifiers
         @returns: boolean
      '''
      
      show_movieclips = bool
      '''Include visualization of movie clip related animation data
         @returns: boolean
      '''
      
      show_nodes = bool
      '''Include visualization of node related animation data
         @returns: boolean
      '''
      
      show_only_errors = bool
      '''Only include F-Curves and drivers that are disabled or have errors
         @returns: boolean
      '''
      
      show_only_selected = bool
      '''Only include channels relating to selected objects and data
         @returns: boolean
      '''
      
      show_particles = bool
      '''Include visualization of particle related animation data
         @returns: boolean
      '''
      
      show_scenes = bool
      '''Include visualization of scene related animation data
         @returns: boolean
      '''
      
      show_shapekeys = bool
      '''Include visualization of shape key related animation data
         @returns: boolean
      '''
      
      show_speakers = bool
      '''Include visualization of speaker related animation data
         @returns: boolean
      '''
      
      show_summary = bool
      '''Display an additional 'summary' line (Dope Sheet editors only)
         @returns: boolean
      '''
      
      show_textures = bool
      '''Include visualization of texture related animation data
         @returns: boolean
      '''
      
      show_transforms = bool
      '''Include visualization of object-level animation data (mostly transforms)
         @returns: boolean
      '''
      
      show_volumes = bool
      '''Include visualization of volume related animation data
         @returns: boolean
      '''
      
      show_worlds = bool
      '''Include visualization of world related animation data
         @returns: boolean
      '''
      
      source = types.ID # (read only)
      '''ID-Block representing source data, usually ID_SCE (i.e. Scene)
         @returns: ID
      '''
      
      use_datablock_sort = bool
      '''Alphabetically sorts data-blocks - mainly objects in the scene (disable to increase viewport speed)
         @returns: boolean
      '''
      
      use_multi_word_filter = bool
      '''Perform fuzzy/multi-word matching (WARNING: May be slow)
         @returns: boolean
      '''
      
   class Driver(types.bpy_struct):
      '''Driver for the value of a setting based on an external value
      '''
   
      expression = str
      '''Expression to use for Scripted Expression
         @returns: string, (never None)
      '''
      
      is_simple_expression = bool # (read only)
      '''The scripted expression can be evaluated without using the full python interpreter
         @returns: boolean
      '''
      
      is_valid = bool
      '''Driver could not be evaluated in past, so should be skipped
         @returns: boolean
      '''
      
      type = str
      '''Driver type
         @returns: enum in ['AVERAGE', 'SUM', 'SCRIPTED', 'MIN', 'MAX']
      '''
      
      use_self = bool
      '''Include a 'self' variable in the name-space, so drivers can easily reference the data being modified (object, bone, etc...)
         @returns: boolean
      '''
      
      variables = types.ChannelDriverVariables # (read only)
      '''Properties acting as inputs for this driver
         @returns: ChannelDriverVariables Collection of DriverVariable
      '''
      
   class DriverTarget(types.bpy_struct):
      '''Source of input values for driver variables
      '''
   
      bone_target = str
      '''Name of PoseBone to use as target
         @returns: string, (never None)
      '''
      
      data_path = str
      '''RNA Path (from ID-block) to property used
         @returns: string, (never None)
      '''
      
      id = types.ID
      '''ID-block that the specific property used can be found from (id_type property must be set first)
         @returns: ID
      '''
      
      id_type = str
      '''Type of ID-block that can be used
         @returns: enum in ['ACTION', 'ARMATURE', 'BRUSH', 'CAMERA', 'CACHEFILE', 'CURVE', 'FONT', 'GREASEPENCIL', 'COLLECTION', 'IMAGE', 'KEY', 'LIGHT', 'LIBRARY', 'LINESTYLE', 'LATTICE', 'MASK', 'MATERIAL', 'META', 'MESH', 'MOVIECLIP', 'NODETREE', 'OBJECT', 'PAINTCURVE', 'PALETTE', 'PARTICLE', 'LIGHT_PROBE', 'SCENE', 'SOUND', 'SPEAKER', 'TEXT', 'TEXTURE', 'VOLUME', 'WINDOWMANAGER', 'WORLD', 'WORKSPACE']
      '''
      
      rotation_mode = str
      '''Mode for calculating rotation channel values
         @returns: enum in ['AUTO', 'XYZ', 'XZY', 'YXZ', 'YZX', 'ZXY', 'ZYX', 'QUATERNION', 'SWING_TWIST_X', 'SWING_TWIST_Y', 'SWING_TWIST_Z']
      '''
      
      transform_space = str
      '''Space in which transforms are used
         @returns: enum in ['WORLD_SPACE', 'TRANSFORM_SPACE', 'LOCAL_SPACE']
      '''
      
      transform_type = str
      '''Driver variable type
         @returns: enum in ['LOC_X', 'LOC_Y', 'LOC_Z', 'ROT_X', 'ROT_Y', 'ROT_Z', 'ROT_W', 'SCALE_X', 'SCALE_Y', 'SCALE_Z', 'SCALE_AVG']
      '''
      
   class DriverVariable(types.bpy_struct):
      '''Variable from some source/target for driver relationship
      '''
   
      is_name_valid = bool # (read only)
      '''Is this a valid name for a driver variable
         @returns: boolean
      '''
      
      name = str
      '''Name to use in scripted expressions/functions (no spaces or dots are allowed, and must start with a letter)
         @returns: string, (never None)
      '''
      
      targets = types.DriverTarget # (read only)
      '''Sources of input data for evaluating this variable
         @returns: Collection of DriverTarget
      '''
      
      type = str
      '''Driver variable type
         @returns: enum in ['SINGLE_PROP', 'TRANSFORMS', 'ROTATION_DIFF', 'LOC_DIFF']
      '''
      
   class DynamicPaintBrushSettings(types.bpy_struct):
      '''Brush settings
      '''
   
      invert_proximity = bool
      '''Proximity falloff is applied inside the volume
         @returns: boolean
      '''
      
      paint_alpha = float
      '''Paint alpha
         @returns: float in [0, 1]
      '''
      
      paint_color = float
      '''Color of the paint
         @returns: float array of 3 items in [0, inf]
      '''
      
      paint_distance = float
      '''Maximum distance from brush to mesh surface to affect paint
         @returns: float in [0, 500]
      '''
      
      paint_ramp = types.ColorRamp # (read only)
      '''Color ramp used to define proximity falloff
         @returns: ColorRamp
      '''
      
      paint_source = str
      '''
         @returns: enum in ['PARTICLE_SYSTEM', 'POINT', 'DISTANCE', 'VOLUME_DISTANCE', 'VOLUME']
      '''
      
      paint_wetness = float
      '''Paint wetness, visible in wetmap (some effects only affect wet paint)
         @returns: float in [0, 1]
      '''
      
      particle_system = types.ParticleSystem
      '''The particle system to paint with
         @returns: ParticleSystem
      '''
      
      proximity_falloff = str
      '''Proximity falloff type
         @returns: enum in ['SMOOTH', 'CONSTANT', 'RAMP']
      '''
      
      ray_direction = str
      '''Ray direction to use for projection (if brush object is located in that direction it's painted)
         @returns: enum in ['CANVAS', 'BRUSH', 'Z_AXIS']
      '''
      
      smooth_radius = float
      '''Smooth falloff added after solid radius
         @returns: float in [0, 10]
      '''
      
      smudge_strength = float
      '''Smudge effect strength
         @returns: float in [0, 1]
      '''
      
      solid_radius = float
      '''Radius that will be painted solid
         @returns: float in [0.01, 10]
      '''
      
      use_absolute_alpha = bool
      '''Only increase alpha value if paint alpha is higher than existing
         @returns: boolean
      '''
      
      use_negative_volume = bool
      '''Negate influence inside the volume
         @returns: boolean
      '''
      
      use_paint_erase = bool
      '''Erase / remove paint instead of adding it
         @returns: boolean
      '''
      
      use_particle_radius = bool
      '''Use radius from particle settings
         @returns: boolean
      '''
      
      use_proximity_project = bool
      '''Brush is projected to canvas from defined direction within brush proximity
         @returns: boolean
      '''
      
      use_proximity_ramp_alpha = bool
      '''Only read color ramp alpha
         @returns: boolean
      '''
      
      use_smudge = bool
      '''Make this brush to smudge existing paint as it moves
         @returns: boolean
      '''
      
      use_velocity_alpha = bool
      '''Multiply brush influence by velocity color ramp alpha
         @returns: boolean
      '''
      
      use_velocity_color = bool
      '''Replace brush color by velocity color ramp
         @returns: boolean
      '''
      
      use_velocity_depth = bool
      '''Multiply brush intersection depth (displace, waves) by velocity ramp alpha
         @returns: boolean
      '''
      
      velocity_max = float
      '''Velocity considered as maximum influence (Blender units per frame)
         @returns: float in [0.0001, 10]
      '''
      
      velocity_ramp = types.ColorRamp # (read only)
      '''Color ramp used to define brush velocity effect
         @returns: ColorRamp
      '''
      
      wave_clamp = float
      '''Maximum level of surface intersection used to influence waves (use 0.0 to disable)
         @returns: float in [0, 50]
      '''
      
      wave_factor = float
      '''Multiplier for wave influence of this brush
         @returns: float in [-2, 2]
      '''
      
      wave_type = str
      '''
         @returns: enum in ['CHANGE', 'DEPTH', 'FORCE', 'REFLECT']
      '''
      
   class DynamicPaintCanvasSettings(types.bpy_struct):
      '''Dynamic Paint canvas settings
      '''
   
      canvas_surfaces = types.DynamicPaintSurfaces # (read only)
      '''Paint surface list
         @returns: DynamicPaintSurfaces Collection of DynamicPaintSurface
      '''
      
   class DynamicPaintModifier(types.Modifier):
      '''Dynamic Paint modifier
      '''
   
      brush_settings = types.DynamicPaintBrushSettings # (read only)
      '''
         @returns: DynamicPaintBrushSettings
      '''
      
      canvas_settings = types.DynamicPaintCanvasSettings # (read only)
      '''
         @returns: DynamicPaintCanvasSettings
      '''
      
      ui_type = str
      '''
         @returns: enum in ['CANVAS', 'BRUSH']
      '''
      
   class DynamicPaintSurface(types.bpy_struct):
      '''A canvas surface layer
      '''
   
      brush_collection = types.Collection
      '''Only use brush objects from this collection
         @returns: Collection
      '''
      
      brush_influence_scale = float
      '''Adjust influence brush objects have on this surface
         @returns: float in [0, 1]
      '''
      
      brush_radius_scale = float
      '''Adjust radius of proximity brushes or particles for this surface
         @returns: float in [0, 10]
      '''
      
      color_dry_threshold = float
      '''The wetness level when colors start to shift to the background
         @returns: float in [0, 1]
      '''
      
      color_spread_speed = float
      '''How fast colors get mixed within wet paint
         @returns: float in [0, 2]
      '''
      
      depth_clamp = float
      '''Maximum level of depth intersection in object space (use 0.0 to disable)
         @returns: float in [0, 50]
      '''
      
      displace_factor = float
      '''Strength of displace when applied to the mesh
         @returns: float in [-50, 50]
      '''
      
      displace_type = str
      '''
         @returns: enum in ['DISPLACE', 'DEPTH']
      '''
      
      dissolve_speed = int
      '''Approximately in how many frames should dissolve happen
         @returns: int in [1, 10000]
      '''
      
      drip_acceleration = float
      '''How much surface acceleration affects dripping
         @returns: float in [-200, 200]
      '''
      
      drip_velocity = float
      '''How much surface velocity affects dripping
         @returns: float in [-200, 200]
      '''
      
      dry_speed = int
      '''Approximately in how many frames should drying happen
         @returns: int in [1, 10000]
      '''
      
      effect_ui = str
      '''
         @returns: enum in ['SPREAD', 'DRIP', 'SHRINK']
      '''
      
      effector_weights = types.EffectorWeights # (read only)
      '''
         @returns: EffectorWeights
      '''
      
      frame_end = int
      '''Simulation end frame
         @returns: int in [1, 1048574]
      '''
      
      frame_start = int
      '''Simulation start frame
         @returns: int in [1, 1048574]
      '''
      
      frame_substeps = int
      '''Do extra frames between scene frames to ensure smooth motion
         @returns: int in [0, 20]
      '''
      
      image_fileformat = str
      '''
         @returns: enum in ['PNG', 'OPENEXR']
      '''
      
      image_output_path = str
      '''Directory to save the textures
         @returns: string, (never None)
      '''
      
      image_resolution = int
      '''Output image resolution
         @returns: int in [16, 4096]
      '''
      
      init_color = float
      '''Initial color of the surface
         @returns: float array of 4 items in [0, inf]
      '''
      
      init_color_type = str
      '''
         @returns: enum in ['NONE', 'COLOR', 'TEXTURE', 'VERTEX_COLOR']
      '''
      
      init_layername = str
      '''
         @returns: string, (never None)
      '''
      
      init_texture = types.Texture
      '''
         @returns: Texture
      '''
      
      is_active = bool
      '''Toggle whether surface is processed or ignored
         @returns: boolean
      '''
      
      is_cache_user = bool # (read only)
      '''
         @returns: boolean
      '''
      
      name = str
      '''Surface name
         @returns: string, (never None)
      '''
      
      output_name_a = str
      '''Name used to save output from this surface
         @returns: string, (never None)
      '''
      
      output_name_b = str
      '''Name used to save output from this surface
         @returns: string, (never None)
      '''
      
      point_cache = types.PointCache # (read only)
      '''
         @returns: PointCache, (never None)
      '''
      
      shrink_speed = float
      '''How fast shrink effect moves on the canvas surface
         @returns: float in [0.001, 10]
      '''
      
      spread_speed = float
      '''How fast spread effect moves on the canvas surface
         @returns: float in [0.001, 10]
      '''
      
      surface_format = str
      '''Surface Format
         @returns: enum in ['VERTEX', 'IMAGE']
      '''
      
      surface_type = str
      '''Surface Type
         @returns: enum in ['PAINT']
      '''
      
      use_antialiasing = bool
      '''Use 5x multisampling to smooth paint edges
         @returns: boolean
      '''
      
      use_dissolve = bool
      '''Enable to make surface changes disappear over time
         @returns: boolean
      '''
      
      use_dissolve_log = bool
      '''Use logarithmic dissolve (makes high values to fade faster than low values)
         @returns: boolean
      '''
      
      use_drip = bool
      '''Process drip effect (drip wet paint to gravity direction)
         @returns: boolean
      '''
      
      use_dry_log = bool
      '''Use logarithmic drying (makes high values to dry faster than low values)
         @returns: boolean
      '''
      
      use_drying = bool
      '''Enable to make surface wetness dry over time
         @returns: boolean
      '''
      
      use_incremental_displace = bool
      '''New displace is added cumulatively on top of existing
         @returns: boolean
      '''
      
      use_output_a = bool
      '''Save this output layer
         @returns: boolean
      '''
      
      use_output_b = bool
      '''Save this output layer
         @returns: boolean
      '''
      
      use_premultiply = bool
      '''Multiply color by alpha (recommended for Blender input)
         @returns: boolean
      '''
      
      use_shrink = bool
      '''Process shrink effect (shrink paint areas)
         @returns: boolean
      '''
      
      use_spread = bool
      '''Process spread effect (spread wet paint around surface)
         @returns: boolean
      '''
      
      use_wave_open_border = bool
      '''Pass waves through mesh edges
         @returns: boolean
      '''
      
      uv_layer = str
      '''UV map name
         @returns: string, (never None)
      '''
      
      wave_damping = float
      '''Wave damping factor
         @returns: float in [0, 1]
      '''
      
      wave_smoothness = float
      '''Limit maximum steepness of wave slope between simulation points (use higher values for smoother waves at expense of reduced detail)
         @returns: float in [0, 10]
      '''
      
      wave_speed = float
      '''Wave propagation speed
         @returns: float in [0.01, 5]
      '''
      
      wave_spring = float
      '''Spring force that pulls water level back to zero
         @returns: float in [0, 1]
      '''
      
      wave_timescale = float
      '''Wave time scaling factor
         @returns: float in [0.01, 3]
      '''
      
      def output_exists(object, index):
         '''Checks if surface output layer of given name exists
            Arguments:
            @object (Object): (never None)
            @index (int): in [0, 1]
      
            @returns (bool): 
         '''
      
         return bool

   class DynamicPaintSurfaces(types.bpy_struct):
      '''Collection of Dynamic Paint Canvas surfaces
      '''
   
      active = types.DynamicPaintSurface # (read only)
      '''Active Dynamic Paint surface being displayed
         @returns: DynamicPaintSurface
      '''
      
      active_index = int
      '''
         @returns: int in [0, inf]
      '''
      
   class EdgeSplitModifier(types.Modifier):
      '''Edge splitting modifier to create sharp edges
      '''
   
      split_angle = float
      '''Angle above which to split edges
         @returns: float in [0, 3.14159]
      '''
      
      use_edge_angle = bool
      '''Split edges with high angle between faces
         @returns: boolean
      '''
      
      use_edge_sharp = bool
      '''Split edges that are marked as sharp
         @returns: boolean
      '''
      
   class EditBone(types.bpy_struct):
      '''Editmode bone in an Armature data-block
      '''
   
      bbone_curveinx = float
      '''X-axis handle offset for start of the B-Bone's curve, adjusts curvature
         @returns: float in [-inf, inf]
      '''
      
      bbone_curveiny = float
      '''Y-axis handle offset for start of the B-Bone's curve, adjusts curvature
         @returns: float in [-inf, inf]
      '''
      
      bbone_curveoutx = float
      '''X-axis handle offset for end of the B-Bone's curve, adjusts curvature
         @returns: float in [-inf, inf]
      '''
      
      bbone_curveouty = float
      '''Y-axis handle offset for end of the B-Bone's curve, adjusts curvature
         @returns: float in [-inf, inf]
      '''
      
      bbone_custom_handle_end = types.EditBone
      '''Bone that serves as the end handle for the B-Bone curve
         @returns: EditBone
      '''
      
      bbone_custom_handle_start = types.EditBone
      '''Bone that serves as the start handle for the B-Bone curve
         @returns: EditBone
      '''
      
      bbone_easein = float
      '''Length of first Bezier Handle (for B-Bones only)
         @returns: float in [-inf, inf]
      '''
      
      bbone_easeout = float
      '''Length of second Bezier Handle (for B-Bones only)
         @returns: float in [-inf, inf]
      '''
      
      bbone_handle_type_end = str
      '''Selects how the end handle of the B-Bone is computed
         @returns: enum in ['AUTO', 'ABSOLUTE', 'RELATIVE', 'TANGENT']
      '''
      
      bbone_handle_type_start = str
      '''Selects how the start handle of the B-Bone is computed
         @returns: enum in ['AUTO', 'ABSOLUTE', 'RELATIVE', 'TANGENT']
      '''
      
      bbone_rollin = float
      '''Roll offset for the start of the B-Bone, adjusts twist
         @returns: float in [-inf, inf]
      '''
      
      bbone_rollout = float
      '''Roll offset for the end of the B-Bone, adjusts twist
         @returns: float in [-inf, inf]
      '''
      
      bbone_scaleinx = float
      '''X-axis scale factor for start of the B-Bone, adjusts thickness (for tapering effects)
         @returns: float in [-inf, inf]
      '''
      
      bbone_scaleiny = float
      '''Y-axis scale factor for start of the B-Bone, adjusts thickness (for tapering effects)
         @returns: float in [-inf, inf]
      '''
      
      bbone_scaleoutx = float
      '''X-axis scale factor for end of the B-Bone, adjusts thickness (for tapering effects)
         @returns: float in [-inf, inf]
      '''
      
      bbone_scaleouty = float
      '''Y-axis scale factor for end of the B-Bone, adjusts thickness (for tapering effects)
         @returns: float in [-inf, inf]
      '''
      
      bbone_segments = int
      '''Number of subdivisions of bone (for B-Bones only)
         @returns: int in [1, 32]
      '''
      
      bbone_x = float
      '''B-Bone X size
         @returns: float in [-inf, inf]
      '''
      
      bbone_z = float
      '''B-Bone Z size
         @returns: float in [-inf, inf]
      '''
      
      envelope_distance = float
      '''Bone deformation distance (for Envelope deform only)
         @returns: float in [0, 1000]
      '''
      
      envelope_weight = float
      '''Bone deformation weight (for Envelope deform only)
         @returns: float in [0, 1000]
      '''
      
      head = float
      '''Location of head end of the bone
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      head_radius = float
      '''Radius of head of bone (for Envelope deform only)
         @returns: float in [-inf, inf]
      '''
      
      hide = bool
      '''Bone is not visible when in Edit Mode
         @returns: boolean
      '''
      
      hide_select = bool
      '''Bone is able to be selected
         @returns: boolean
      '''
      
      inherit_scale = str
      '''Specifies how the bone inherits scaling from the parent bone
         @returns: enum in ['FULL', 'FIX_SHEAR', 'ALIGNED', 'AVERAGE', 'NONE', 'NONE_LEGACY']
      '''
      
      layers = bool
      '''Layers bone exists in
         @returns: boolean array of 32 items
      '''
      
      length = float
      '''Length of the bone. Changing moves the tail end
         @returns: float in [0, inf]
      '''
      
      lock = bool
      '''Bone is not able to be transformed when in Edit Mode
         @returns: boolean
      '''
      
      matrix = float
      '''Matrix combining loc/rot of the bone (head position, direction and roll), in armature space (WARNING: does not include/support bone's length/size)
         @returns: float multi-dimensional array of 4 * 4 items in [-inf, inf]
      '''
      
      name = str
      '''
         @returns: string, (never None)
      '''
      
      parent = types.EditBone
      '''Parent edit bone (in same Armature)
         @returns: EditBone
      '''
      
      roll = float
      '''Bone rotation around head-tail axis
         @returns: float in [-inf, inf]
      '''
      
      select = bool
      '''
         @returns: boolean
      '''
      
      select_head = bool
      '''
         @returns: boolean
      '''
      
      select_tail = bool
      '''
         @returns: boolean
      '''
      
      show_wire = bool
      '''Bone is always drawn as Wireframe regardless of viewport draw mode (useful for non-obstructive custom bone shapes)
         @returns: boolean
      '''
      
      tail = float
      '''Location of tail end of the bone
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      tail_radius = float
      '''Radius of tail of bone (for Envelope deform only)
         @returns: float in [-inf, inf]
      '''
      
      use_connect = bool
      '''When bone has a parent, bone's head is stuck to the parent's tail
         @returns: boolean
      '''
      
      use_cyclic_offset = bool
      '''When bone doesn't have a parent, it receives cyclic offset effects (Deprecated)
         @returns: boolean
      '''
      
      use_deform = bool
      '''Enable Bone to deform geometry
         @returns: boolean
      '''
      
      use_endroll_as_inroll = bool
      '''Add Roll Out of the Start Handle bone to the Roll In value
         @returns: boolean
      '''
      
      use_envelope_multiply = bool
      '''When deforming bone, multiply effects of Vertex Group weights with Envelope influence
         @returns: boolean
      '''
      
      use_inherit_rotation = bool
      '''Bone inherits rotation or scale from parent bone
         @returns: boolean
      '''
      
      use_inherit_scale = bool
      '''DEPRECATED: Bone inherits scaling from parent bone
         @returns: boolean
      '''
      
      use_local_location = bool
      '''Bone location is set in local space
         @returns: boolean
      '''
      
      use_relative_parent = bool
      '''Object children will use relative transform, like deform
         @returns: boolean
      '''
      
      basename = None # (readonly)
      '''The name of this bone before any '.' character
         
      '''
      
      
      center = None # (readonly)
      '''The midpoint between the head and the tail.
         
      '''
      
      
      children = None # (readonly)
      '''A list of all the bones children. Warning: takes O(len(bones)) time.
         
      '''
      
      
      children_recursive = None # (readonly)
      '''A list of all children from this bone. Warning: takes O(len(bones)**2) time.
         
      '''
      
      
      children_recursive_basename = None # (readonly)
      '''Returns a chain of children with the same base name as this bone.
         Only direct chains are supported, forks caused by multiple children
         with matching base names will terminate the function
         and not be returned. Warning: takes O(len(bones)**2) time.
         
      '''
      
      
      parent_recursive = None # (readonly)
      '''A list of parents, starting with the immediate parent
         
      '''
      
      
      vector = None # (readonly)
      '''The direction this bone is pointing.
         Utility function for (tail - head)
         
      '''
      
      
      x_axis = None # (readonly)
      '''Vector pointing down the x-axis of the bone.
         
      '''
      
      
      y_axis = None # (readonly)
      '''Vector pointing down the y-axis of the bone.
         
      '''
      
      
      z_axis = None # (readonly)
      '''Vector pointing down the z-axis of the bone.
         
      '''
      
      
      def align_roll(vector):
         '''Align the bone to a localspace roll so the Z axis points in the direction of the vector given
            Arguments:
            @vector (float): array of 3 items in [-inf, inf]
      
         '''
      
         pass

      def align_orientation(self, other):
         '''Align this bone to another by moving its tail and settings its roll
            the length of the other bone is not used.
            
         '''
      
         pass
      
      def parent_index(self, parent_test):
         '''The same as 'bone in other_bone.parent_recursive'
            but saved generating a list.
            
         '''
      
         pass
      
      def transform(self, matrix, scale=True, roll=True):
         '''Transform the the bones head, tail, roll and envelope
            (when the matrix has a scale component).
            
            Arguments:
            @matrix (mathutils.Matrix): 3x3 or 4x4 transformation matrix.
            @scale (bool): Scale the bone envelope by the matrix.
            @roll (bool): Correct the roll to point in the same relative
            direction to the head and tail.
            
      
         '''
      
         pass
      
      def translate(self, vec):
         '''Utility function to add *vec* to the head and tail of this bone
            
         '''
      
         pass
      
   class EffectSequence(types.Sequence):
      '''Sequence strip applying an effect on the images created by other strips
      '''
   
      alpha_mode = str
      '''Representation of alpha information in the RGBA pixels
         @returns: enum in ['STRAIGHT', 'PREMUL']
      '''
      
      color_multiply = float
      '''
         @returns: float in [0, 20]
      '''
      
      color_saturation = float
      '''Adjust the intensity of the input's color
         @returns: float in [0, 20]
      '''
      
      crop = types.SequenceCrop # (read only)
      '''
         @returns: SequenceCrop
      '''
      
      proxy = types.SequenceProxy # (read only)
      '''
         @returns: SequenceProxy
      '''
      
      strobe = float
      '''Only display every nth frame
         @returns: float in [1, 30]
      '''
      
      transform = types.SequenceTransform # (read only)
      '''
         @returns: SequenceTransform
      '''
      
      use_crop = bool
      '''Crop image before processing
         @returns: boolean
      '''
      
      use_deinterlace = bool
      '''Remove fields from video movies
         @returns: boolean
      '''
      
      use_flip_x = bool
      '''Flip on the X axis
         @returns: boolean
      '''
      
      use_flip_y = bool
      '''Flip on the Y axis
         @returns: boolean
      '''
      
      use_float = bool
      '''Convert input to float data
         @returns: boolean
      '''
      
      use_proxy = bool
      '''Use a preview proxy and/or timecode index for this strip
         @returns: boolean
      '''
      
      use_reverse_frames = bool
      '''Reverse frame order
         @returns: boolean
      '''
      
      use_translation = bool
      '''Translate image before processing
         @returns: boolean
      '''
      
   class EffectorWeights(types.bpy_struct):
      '''Effector weights for physics simulation
      '''
   
      all = float
      '''All effector's weight
         @returns: float in [-200, 200]
      '''
      
      apply_to_hair_growing = bool
      '''Use force fields when growing hair
         @returns: boolean
      '''
      
      boid = float
      '''Boid effector weight
         @returns: float in [-200, 200]
      '''
      
      charge = float
      '''Charge effector weight
         @returns: float in [-200, 200]
      '''
      
      collection = types.Collection
      '''Limit effectors to this collection
         @returns: Collection
      '''
      
      curve_guide = float
      '''Curve guide effector weight
         @returns: float in [-200, 200]
      '''
      
      drag = float
      '''Drag effector weight
         @returns: float in [-200, 200]
      '''
      
      force = float
      '''Force effector weight
         @returns: float in [-200, 200]
      '''
      
      gravity = float
      '''Global gravity weight
         @returns: float in [-200, 200]
      '''
      
      harmonic = float
      '''Harmonic effector weight
         @returns: float in [-200, 200]
      '''
      
      lennardjones = float
      '''Lennard-Jones effector weight
         @returns: float in [-200, 200]
      '''
      
      magnetic = float
      '''Magnetic effector weight
         @returns: float in [-200, 200]
      '''
      
      smokeflow = float
      '''Smoke Flow effector weight
         @returns: float in [-200, 200]
      '''
      
      texture = float
      '''Texture effector weight
         @returns: float in [-200, 200]
      '''
      
      turbulence = float
      '''Turbulence effector weight
         @returns: float in [-200, 200]
      '''
      
      vortex = float
      '''Vortex effector weight
         @returns: float in [-200, 200]
      '''
      
      wind = float
      '''Wind effector weight
         @returns: float in [-200, 200]
      '''
      
   class EnumProperty(types.Property):
      '''RNA enumeration property definition, to choose from a number of predefined options
      '''
   
      default = str # (read only)
      '''Default value for this enum
         @returns: enum in ['DUMMY']
      '''
      
      default_flag = str # (read only)
      '''Default value for this enum
         @returns: enum set in {'DUMMY'}
      '''
      
      enum_items = types.EnumPropertyItem # (read only)
      '''Possible values for the property
         @returns: Collection of EnumPropertyItem
      '''
      
      enum_items_static = types.EnumPropertyItem # (read only)
      '''Possible values for the property (never calls optional dynamic generation of those)
         @returns: Collection of EnumPropertyItem
      '''
      
   class EnumPropertyItem(types.bpy_struct):
      '''Definition of a choice in an RNA enum property
      '''
   
      description = str # (read only)
      '''Description of the item's purpose
         @returns: string, (never None)
      '''
      
      icon = str # (read only)
      '''Icon of the item
         @returns: enum in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_RIGHT', 'DISCLOSURE_TRI_DOWN', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'DUPLICATE', 'TRASH', 'COLLECTION_NEW', 'OPTIONS', 'NODE', 'NODE_SEL', 'WINDOW', 'WORKSPACE', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ADD', 'REMOVE', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'CHECKMARK', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'FCURVE_SNAPSHOT', 'OBJECT_HIDDEN', 'TOPBAR', 'STATUSBAR', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'UNLINKED', 'LINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'DRIVER_DISTANCE', 'DRIVER_ROTATIONAL_DIFFERENCE', 'DRIVER_TRANSFORM', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'FILE_NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'THREE_DOTS', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BRUSHES_ALL', 'LIGHT', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'OUTPUT', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TOOL_SETTINGS', 'SHADERFX', 'MODIFIER', 'BLANK1', 'FAKE_USER_OFF', 'FAKE_USER_ON', 'VIEW3D', 'GRAPH', 'OUTLINER', 'PROPERTIES', 'FILEBROWSER', 'IMAGE', 'INFO', 'SEQUENCE', 'TEXT', 'SOUND', 'ACTION', 'NLA', 'PREFERENCES', 'TIME', 'NODETREE', 'CONSOLE', 'TRACKER', 'ASSET_MANAGER', 'NODE_COMPOSITING', 'NODE_TEXTURE', 'NODE_MATERIAL', 'UV', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'UV_DATA', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'TRACKING', 'TRACKING_BACKWARDS', 'TRACKING_FORWARDS', 'TRACKING_BACKWARDS_SINGLE', 'TRACKING_FORWARDS_SINGLE', 'TRACKING_CLEAR_BACKWARDS', 'TRACKING_CLEAR_FORWARDS', 'TRACKING_REFINE_BACKWARDS', 'TRACKING_REFINE_FORWARDS', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LIGHT_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'COMMUNITY', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'EXPERIMENTAL', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'PRESET', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'LIBRARY_DATA_OVERRIDE', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'FACE_MAPS', 'RNA', 'RNA_ADD', 'MOUSE_LMB', 'MOUSE_MMB', 'MOUSE_RMB', 'MOUSE_MOVE', 'MOUSE_LMB_DRAG', 'MOUSE_MMB_DRAG', 'MOUSE_RMB_DRAG', 'MEMORY', 'PRESET_NEW', 'DECORATE', 'DECORATE_KEYFRAME', 'DECORATE_ANIMATE', 'DECORATE_DRIVER', 'DECORATE_LINKED', 'DECORATE_LIBRARY_OVERRIDE', 'DECORATE_UNLOCKED', 'DECORATE_LOCKED', 'DECORATE_OVERRIDE', 'FUND', 'TRACKER_DATA', 'HEART', 'ORPHAN_DATA', 'USER', 'SYSTEM', 'SETTINGS', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LIGHT', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'OUTLINER_OB_FORCE_FIELD', 'OUTLINER_OB_GROUP_INSTANCE', 'OUTLINER_OB_GREASEPENCIL', 'OUTLINER_OB_LIGHTPROBE', 'OUTLINER_OB_IMAGE', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'HIDE_ON', 'HIDE_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_RENDER_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_INSTANCED_OFF', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LIGHT', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_LIGHTPROBE', 'OUTLINER_DATA_GP_LAYER', 'OUTLINER_DATA_GREASEPENCIL', 'GP_SELECT_POINTS', 'GP_SELECT_STROKES', 'GP_MULTIFRAME_EDITING', 'GP_ONLY_SELECTED', 'GP_SELECT_BETWEEN_STROKES', 'MODIFIER_OFF', 'MODIFIER_ON', 'ONIONSKIN_OFF', 'ONIONSKIN_ON', 'RESTRICT_VIEW_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_INSTANCED_ON', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'EMPTY_SINGLE_ARROW', 'LIGHT_POINT', 'LIGHT_SUN', 'LIGHT_SPOT', 'LIGHT_HEMI', 'LIGHT_AREA', 'CUBE', 'SPHERE', 'CONE', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'EMPTY_AXIS', 'STROKE', 'EMPTY_ARROWS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'LIGHTPROBE_CUBEMAP', 'LIGHTPROBE_PLANAR', 'LIGHTPROBE_GRID', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'RIGID_BODY', 'RIGID_BODY_CONSTRAINT', 'IMAGE_PLANE', 'IMAGE_BACKGROUND', 'IMAGE_REFERENCE', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'NODE_TOP', 'NODE_SIDE', 'NODE_CORNER', 'ANCHOR_TOP', 'ANCHOR_BOTTOM', 'ANCHOR_LEFT', 'ANCHOR_RIGHT', 'ANCHOR_CENTER', 'SELECT_SET', 'SELECT_EXTEND', 'SELECT_SUBTRACT', 'SELECT_INTERSECT', 'SELECT_DIFFERENCE', 'ALIGN_LEFT', 'ALIGN_CENTER', 'ALIGN_RIGHT', 'ALIGN_JUSTIFY', 'ALIGN_FLUSH', 'ALIGN_TOP', 'ALIGN_MIDDLE', 'ALIGN_BOTTOM', 'BOLD', 'ITALIC', 'UNDERLINE', 'SMALL_CAPS', 'CON_ACTION', 'HOLDOUT_OFF', 'HOLDOUT_ON', 'INDIRECT_ONLY_OFF', 'INDIRECT_ONLY_ON', 'CON_CAMERASOLVER', 'CON_FOLLOWTRACK', 'CON_OBJECTSOLVER', 'CON_LOCLIKE', 'CON_ROTLIKE', 'CON_SIZELIKE', 'CON_TRANSLIKE', 'CON_DISTLIMIT', 'CON_LOCLIMIT', 'CON_ROTLIMIT', 'CON_SIZELIMIT', 'CON_SAMEVOL', 'CON_TRANSFORM', 'CON_TRANSFORM_CACHE', 'CON_CLAMPTO', 'CON_KINEMATIC', 'CON_LOCKTRACK', 'CON_SPLINEIK', 'CON_STRETCHTO', 'CON_TRACKTO', 'CON_ARMATURE', 'CON_CHILDOF', 'CON_FLOOR', 'CON_FOLLOWPATH', 'CON_PIVOT', 'CON_SHRINKWRAP', 'MODIFIER_DATA', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'MOD_TINT', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_FLUID', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'MOD_PARTICLE_INSTANCE', 'MOD_HUE_SATURATION', 'MOD_NOISE', 'MOD_OFFSET', 'MOD_SIMPLIFY', 'MOD_THICKNESS', 'MOD_INSTANCE', 'MOD_TIME', 'MOD_OPACITY', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_SOUND', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'KEYFRAME_HLT', 'KEYFRAME', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'CURSOR', 'PIVOT_BOUNDBOX', 'PIVOT_CURSOR', 'PIVOT_INDIVIDUAL', 'PIVOT_MEDIAN', 'PIVOT_ACTIVE', 'CENTER_ONLY', 'ROOTCURVE', 'SMOOTHCURVE', 'SPHERECURVE', 'INVERSESQUARECURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'PROP_PROJECTED', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'SNAP_FACE_CENTER', 'SNAP_PERPENDICULAR', 'SNAP_MIDPOINT', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'OBJECT_ORIGIN', 'ORIENTATION_GLOBAL', 'ORIENTATION_GIMBAL', 'ORIENTATION_LOCAL', 'ORIENTATION_NORMAL', 'ORIENTATION_VIEW', 'COPYDOWN', 'PASTEDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'VIS_SEL_11', 'VIS_SEL_10', 'VIS_SEL_01', 'VIS_SEL_00', 'AUTOMERGE_OFF', 'AUTOMERGE_ON', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'TRANSFORM_ORIGINS', 'GIZMO', 'ORIENTATION_CURSOR', 'NORMALS_VERTEX', 'NORMALS_FACE', 'NORMALS_VERTEX_FACE', 'SHADING_BBOX', 'SHADING_WIRE', 'SHADING_SOLID', 'SHADING_RENDERED', 'SHADING_TEXTURE', 'OVERLAY', 'XRAY', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'LAYER_USED', 'LAYER_ACTIVE', 'OUTLINER_OB_HAIR', 'OUTLINER_DATA_HAIR', 'HAIR_DATA', 'OUTLINER_OB_POINTCLOUD', 'OUTLINER_DATA_POINTCLOUD', 'POINTCLOUD_DATA', 'OUTLINER_OB_VOLUME', 'OUTLINER_DATA_VOLUME', 'VOLUME_DATA', 'HOME', 'DOCUMENTS', 'TEMP', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'SHORTDISPLAY', 'LONGDISPLAY', 'IMGDISPLAY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'FOLDER_REDIRECT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'SORT_DESC', 'SORT_ASC', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_ARCHIVE', 'FILE_CACHE', 'FILE_VOLUME', 'FILE_3D', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'MATSHADERBALL', 'MATCLOTH', 'MATFLUID', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'DISC', 'DESKTOP', 'EXTERNAL_DRIVE', 'NETWORK_DRIVE', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'SEQ_STRIP_META', 'SEQ_STRIP_DUPLICATE', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'HANDLE_AUTOCLAMPED', 'HANDLE_AUTO', 'HANDLE_ALIGNED', 'HANDLE_VECTOR', 'HANDLE_FREE', 'VIEW_PERSPECTIVE', 'VIEW_ORTHO', 'VIEW_CAMERA', 'VIEW_PAN', 'VIEW_ZOOM', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'GPBRUSH_SMOOTH', 'GPBRUSH_THICKNESS', 'GPBRUSH_STRENGTH', 'GPBRUSH_GRAB', 'GPBRUSH_PUSH', 'GPBRUSH_TWIST', 'GPBRUSH_PINCH', 'GPBRUSH_RANDOMIZE', 'GPBRUSH_CLONE', 'GPBRUSH_WEIGHT', 'GPBRUSH_PENCIL', 'GPBRUSH_PEN', 'GPBRUSH_INK', 'GPBRUSH_INKNOISE', 'GPBRUSH_BLOCK', 'GPBRUSH_MARKER', 'GPBRUSH_FILL', 'GPBRUSH_AIRBRUSH', 'GPBRUSH_CHISEL', 'GPBRUSH_ERASE_SOFT', 'GPBRUSH_ERASE_HARD', 'GPBRUSH_ERASE_STROKE', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'HANDLETYPE_FREE_VEC', 'HANDLETYPE_ALIGNED_VEC', 'HANDLETYPE_VECTOR_VEC', 'HANDLETYPE_AUTO_VEC', 'HANDLETYPE_AUTO_CLAMP_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC', 'EVENT_A', 'EVENT_B', 'EVENT_C', 'EVENT_D', 'EVENT_E', 'EVENT_F', 'EVENT_G', 'EVENT_H', 'EVENT_I', 'EVENT_J', 'EVENT_K', 'EVENT_L', 'EVENT_M', 'EVENT_N', 'EVENT_O', 'EVENT_P', 'EVENT_Q', 'EVENT_R', 'EVENT_S', 'EVENT_T', 'EVENT_U', 'EVENT_V', 'EVENT_W', 'EVENT_X', 'EVENT_Y', 'EVENT_Z', 'EVENT_SHIFT', 'EVENT_CTRL', 'EVENT_ALT', 'EVENT_OS', 'EVENT_F1', 'EVENT_F2', 'EVENT_F3', 'EVENT_F4', 'EVENT_F5', 'EVENT_F6', 'EVENT_F7', 'EVENT_F8', 'EVENT_F9', 'EVENT_F10', 'EVENT_F11', 'EVENT_F12', 'EVENT_ESC', 'EVENT_TAB', 'EVENT_PAGEUP', 'EVENT_PAGEDOWN', 'EVENT_RETURN', 'EVENT_SPACEKEY']
      '''
      
      identifier = str # (read only)
      '''Unique name used in the code and scripting
         @returns: string, (never None)
      '''
      
      name = str # (read only)
      '''Human readable name
         @returns: string, (never None)
      '''
      
      value = int # (read only)
      '''Value of the item
         @returns: int in [0, inf]
      '''
      
   class Event(types.bpy_struct):
      '''Window Manager Event
      '''
   
      alt = bool # (read only)
      '''True when the Alt/Option key is held
         @returns: boolean
      '''
      
      ascii = str # (read only)
      '''Single ASCII character for this event
         @returns: string, (never None)
      '''
      
      ctrl = bool # (read only)
      '''True when the Ctrl key is held
         @returns: boolean
      '''
      
      is_mouse_absolute = bool # (read only)
      '''The last motion event was an absolute input
         @returns: boolean
      '''
      
      is_repeat = bool # (read only)
      '''The event is generated by holding a key down
         @returns: boolean
      '''
      
      is_tablet = bool # (read only)
      '''The event has tablet data
         @returns: boolean
      '''
      
      mouse_prev_x = int # (read only)
      '''The window relative horizontal location of the mouse
         @returns: int in [-inf, inf]
      '''
      
      mouse_prev_y = int # (read only)
      '''The window relative vertical location of the mouse
         @returns: int in [-inf, inf]
      '''
      
      mouse_region_x = int # (read only)
      '''The region relative horizontal location of the mouse
         @returns: int in [-inf, inf]
      '''
      
      mouse_region_y = int # (read only)
      '''The region relative vertical location of the mouse
         @returns: int in [-inf, inf]
      '''
      
      mouse_x = int # (read only)
      '''The window relative horizontal location of the mouse
         @returns: int in [-inf, inf]
      '''
      
      mouse_y = int # (read only)
      '''The window relative vertical location of the mouse
         @returns: int in [-inf, inf]
      '''
      
      oskey = bool # (read only)
      '''True when the Cmd key is held
         @returns: boolean
      '''
      
      pressure = float # (read only)
      '''The pressure of the tablet or 1.0 if no tablet present
         @returns: float in [-inf, inf]
      '''
      
      shift = bool # (read only)
      '''True when the Shift key is held
         @returns: boolean
      '''
      
      tilt = float # (read only)
      '''The pressure of the tablet or zeroes if no tablet present
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      type = str # (read only)
      '''
         @returns: enum in ['NONE', 'LEFTMOUSE', 'MIDDLEMOUSE', 'RIGHTMOUSE', 'BUTTON4MOUSE', 'BUTTON5MOUSE', 'BUTTON6MOUSE', 'BUTTON7MOUSE', 'PEN', 'ERASER', 'MOUSEMOVE', 'INBETWEEN_MOUSEMOVE', 'TRACKPADPAN', 'TRACKPADZOOM', 'MOUSEROTATE', 'MOUSESMARTZOOM', 'WHEELUPMOUSE', 'WHEELDOWNMOUSE', 'WHEELINMOUSE', 'WHEELOUTMOUSE', 'EVT_TWEAK_L', 'EVT_TWEAK_M', 'EVT_TWEAK_R', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'ZERO', 'ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE', 'LEFT_CTRL', 'LEFT_ALT', 'LEFT_SHIFT', 'RIGHT_ALT', 'RIGHT_CTRL', 'RIGHT_SHIFT', 'OSKEY', 'APP', 'GRLESS', 'ESC', 'TAB', 'RET', 'SPACE', 'LINE_FEED', 'BACK_SPACE', 'DEL', 'SEMI_COLON', 'PERIOD', 'COMMA', 'QUOTE', 'ACCENT_GRAVE', 'MINUS', 'PLUS', 'SLASH', 'BACK_SLASH', 'EQUAL', 'LEFT_BRACKET', 'RIGHT_BRACKET', 'LEFT_ARROW', 'DOWN_ARROW', 'RIGHT_ARROW', 'UP_ARROW', 'NUMPAD_2', 'NUMPAD_4', 'NUMPAD_6', 'NUMPAD_8', 'NUMPAD_1', 'NUMPAD_3', 'NUMPAD_5', 'NUMPAD_7', 'NUMPAD_9', 'NUMPAD_PERIOD', 'NUMPAD_SLASH', 'NUMPAD_ASTERIX', 'NUMPAD_0', 'NUMPAD_MINUS', 'NUMPAD_ENTER', 'NUMPAD_PLUS', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12', 'F13', 'F14', 'F15', 'F16', 'F17', 'F18', 'F19', 'F20', 'F21', 'F22', 'F23', 'F24', 'PAUSE', 'INSERT', 'HOME', 'PAGE_UP', 'PAGE_DOWN', 'END', 'MEDIA_PLAY', 'MEDIA_STOP', 'MEDIA_FIRST', 'MEDIA_LAST', 'TEXTINPUT', 'WINDOW_DEACTIVATE', 'TIMER', 'TIMER0', 'TIMER1', 'TIMER2', 'TIMER_JOBS', 'TIMER_AUTOSAVE', 'TIMER_REPORT', 'TIMERREGION', 'NDOF_MOTION', 'NDOF_BUTTON_MENU', 'NDOF_BUTTON_FIT', 'NDOF_BUTTON_TOP', 'NDOF_BUTTON_BOTTOM', 'NDOF_BUTTON_LEFT', 'NDOF_BUTTON_RIGHT', 'NDOF_BUTTON_FRONT', 'NDOF_BUTTON_BACK', 'NDOF_BUTTON_ISO1', 'NDOF_BUTTON_ISO2', 'NDOF_BUTTON_ROLL_CW', 'NDOF_BUTTON_ROLL_CCW', 'NDOF_BUTTON_SPIN_CW', 'NDOF_BUTTON_SPIN_CCW', 'NDOF_BUTTON_TILT_CW', 'NDOF_BUTTON_TILT_CCW', 'NDOF_BUTTON_ROTATE', 'NDOF_BUTTON_PANZOOM', 'NDOF_BUTTON_DOMINANT', 'NDOF_BUTTON_PLUS', 'NDOF_BUTTON_MINUS', 'NDOF_BUTTON_ESC', 'NDOF_BUTTON_ALT', 'NDOF_BUTTON_SHIFT', 'NDOF_BUTTON_CTRL', 'NDOF_BUTTON_1', 'NDOF_BUTTON_2', 'NDOF_BUTTON_3', 'NDOF_BUTTON_4', 'NDOF_BUTTON_5', 'NDOF_BUTTON_6', 'NDOF_BUTTON_7', 'NDOF_BUTTON_8', 'NDOF_BUTTON_9', 'NDOF_BUTTON_10', 'NDOF_BUTTON_A', 'NDOF_BUTTON_B', 'NDOF_BUTTON_C', 'ACTIONZONE_AREA', 'ACTIONZONE_REGION', 'ACTIONZONE_FULLSCREEN']
      '''
      
      unicode = str # (read only)
      '''Single unicode character for this event
         @returns: string, (never None)
      '''
      
      value = str # (read only)
      '''The type of event, only applies to some
         @returns: enum in ['ANY', 'PRESS', 'RELEASE', 'CLICK', 'DOUBLE_CLICK', 'CLICK_DRAG', 'NORTH', 'NORTH_EAST', 'EAST', 'SOUTH_EAST', 'SOUTH', 'SOUTH_WEST', 'WEST', 'NORTH_WEST', 'NOTHING']
      '''
      
   class ExplodeModifier(types.Modifier):
      '''Explosion effect modifier based on a particle system
      '''
   
      invert_vertex_group = bool
      '''Invert vertex group influence
         @returns: boolean
      '''
      
      particle_uv = str
      '''UV map to change with particle age
         @returns: string, (never None)
      '''
      
      protect = float
      '''Clean vertex group edges
         @returns: float in [0, 1]
      '''
      
      show_alive = bool
      '''Show mesh when particles are alive
         @returns: boolean
      '''
      
      show_dead = bool
      '''Show mesh when particles are dead
         @returns: boolean
      '''
      
      show_unborn = bool
      '''Show mesh when particles are unborn
         @returns: boolean
      '''
      
      use_edge_cut = bool
      '''Cut face edges for nicer shrapnel
         @returns: boolean
      '''
      
      use_size = bool
      '''Use particle size for the shrapnel
         @returns: boolean
      '''
      
      vertex_group = str
      '''
         @returns: string, (never None)
      '''
      
   class FCurve(types.bpy_struct):
      '''F-Curve defining values of a period of time
      '''
   
      array_index = int
      '''Index to the specific property affected by F-Curve if applicable
         @returns: int in [-inf, inf]
      '''
      
      auto_smoothing = str
      '''Algorithm used to compute automatic handles
         @returns: enum in ['NONE', 'CONT_ACCEL']
      '''
      
      color = float
      '''Color of the F-Curve in the Graph Editor
         @returns: float array of 3 items in [0, 1]
      '''
      
      color_mode = str
      '''Method used to determine color of F-Curve in Graph Editor
         @returns: enum in ['AUTO_RAINBOW', 'AUTO_RGB', 'AUTO_YRGB', 'CUSTOM']
      '''
      
      data_path = str
      '''RNA Path to property affected by F-Curve
         @returns: string, (never None)
      '''
      
      driver = types.Driver # (read only)
      '''Channel Driver (only set for Driver F-Curves)
         @returns: Driver
      '''
      
      extrapolation = str
      '''Method used for evaluating value of F-Curve outside first and last keyframes
         @returns: enum in ['CONSTANT', 'LINEAR']
      '''
      
      group = types.ActionGroup
      '''Action Group that this F-Curve belongs to
         @returns: ActionGroup
      '''
      
      hide = bool
      '''F-Curve and its keyframes are hidden in the Graph Editor graphs
         @returns: boolean
      '''
      
      is_empty = bool # (read only)
      '''True if the curve contributes no animation due to lack of keyframes or useful modifiers, and should be deleted
         @returns: boolean
      '''
      
      is_valid = bool
      '''False when F-Curve could not be evaluated in past, so should be skipped when evaluating
         @returns: boolean
      '''
      
      keyframe_points = types.FCurveKeyframePoints # (read only)
      '''User-editable keyframes
         @returns: FCurveKeyframePoints Collection of Keyframe
      '''
      
      lock = bool
      '''F-Curve's settings cannot be edited
         @returns: boolean
      '''
      
      modifiers = types.FCurveModifiers # (read only)
      '''Modifiers affecting the shape of the F-Curve
         @returns: FCurveModifiers Collection of FModifier
      '''
      
      mute = bool
      '''Disable F-Curve Modifier evaluation
         @returns: boolean
      '''
      
      sampled_points = types.FCurveSample # (read only)
      '''Sampled animation data
         @returns: Collection of FCurveSample
      '''
      
      select = bool
      '''F-Curve is selected for editing
         @returns: boolean
      '''
      
      def evaluate(frame):
         '''Evaluate F-Curve
            Arguments:
            @frame (float): Evaluate F-Curve at given frame
               in [-inf, inf]
      
            @returns (float): Value of F-Curve specific frame
               in [-inf, inf]
         '''
      
         return float

      def update():
         '''Ensure keyframes are sorted in chronological order and handles are set correctly
         '''
      
         pass

      def range():
         '''Get the time extents for F-Curve
            @returns (float): Min/Max values
               array of 2 items in [-inf, inf]
         '''
      
         return float

      def update_autoflags(data):
         '''Update FCurve flags set automatically from affected property (currently, integer/discrete flags set when the property is not a float)
            Arguments:
            @data (AnyType): Data containing the property controlled by given FCurve
               (never None)
      
         '''
      
         pass

      def convert_to_samples(start, end):
         '''Convert current FCurve from keyframes to sample points, if necessary
            Arguments:
            @start (int): in [-1048574, 1048574]
            @end (int): in [-1048574, 1048574]
      
         '''
      
         pass

      def convert_to_keyframes(start, end):
         '''Convert current FCurve from sample points to keyframes (linear interpolation), if necessary
            Arguments:
            @start (int): in [-1048574, 1048574]
            @end (int): in [-1048574, 1048574]
      
         '''
      
         pass

   class FCurveKeyframePoints(types.bpy_struct):
      '''Collection of keyframe points
      '''
   
      def insert(frame, value, options={}, keyframe_type='KEYFRAME'):
         '''Add a keyframe point to a F-Curve
            Arguments:
            @frame (float): X Value of this keyframe point
               in [-inf, inf]
            @value (float): Y Value of this keyframe point
               in [-inf, inf]
            @options (str): Keyframe options
               set in {'REPLACE', 'NEEDED', 'FAST'}, (optional)
            @keyframe_type (str): Type of keyframe to insert
               in ['KEYFRAME', 'BREAKDOWN', 'MOVING_HOLD', 'EXTREME', 'JITTER'], (optional)
      
            @returns (types.Keyframe): Newly created keyframe
               
         '''
      
         return types.Keyframe

      def add(count):
         '''Add a keyframe point to a F-Curve
            Arguments:
            @count (int): Number of points to add to the spline
               in [0, inf]
      
         '''
      
         pass

      def remove(keyframe, fast=False):
         '''Remove keyframe from an F-Curve
            Arguments:
            @keyframe (Keyframe): Keyframe to remove
               (never None)
            @fast (bool): Fast keyframe removal to avoid recalculating the curve each time
               (optional)
      
         '''
      
         pass

   class FCurveModifiers(types.bpy_struct):
      '''Collection of F-Curve Modifiers
      '''
   
      active = types.FModifier
      '''Active F-Curve Modifier
         @returns: FModifier
      '''
      
      def new(type):
         '''Add a constraint to this object
            Arguments:
            @type (str): Constraint type to add
               in ['NULL', 'GENERATOR', 'FNGENERATOR', 'ENVELOPE', 'CYCLES', 'NOISE', 'LIMITS', 'STEPPED']
      
            @returns (types.FModifier): New fmodifier
               
         '''
      
         return types.FModifier

      def remove(modifier):
         '''Remove a modifier from this F-Curve
            Arguments:
            @modifier (FModifier): Removed modifier
               (never None)
      
         '''
      
         pass

   class FCurveSample(types.bpy_struct):
      '''Sample point for F-Curve
      '''
   
      co = float
      '''Point coordinates
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      select = bool
      '''Selection status
         @returns: boolean
      '''
      
   class FFmpegSettings(types.bpy_struct):
      '''FFmpeg related settings for the scene
      '''
   
      audio_bitrate = int
      '''Audio bitrate (kb/s)
         @returns: int in [32, 384]
      '''
      
      audio_channels = str
      '''Audio channel count
         @returns: enum in ['MONO', 'STEREO', 'SURROUND4', 'SURROUND51', 'SURROUND71']
      '''
      
      audio_codec = str
      '''FFmpeg audio codec to use
         @returns: enum in ['NONE', 'AAC', 'AC3', 'FLAC', 'MP2', 'MP3', 'OPUS', 'PCM', 'VORBIS']
      '''
      
      audio_mixrate = int
      '''Audio samplerate(samples/s)
         @returns: int in [8000, 192000]
      '''
      
      audio_volume = float
      '''Audio volume
         @returns: float in [0, 1]
      '''
      
      buffersize = int
      '''Rate control: buffer size (kb)
         @returns: int in [0, 2000]
      '''
      
      codec = str
      '''FFmpeg codec to use for video output
         @returns: enum in ['NONE', 'DNXHD', 'DV', 'FFV1', 'FLASH', 'H264', 'HUFFYUV', 'MPEG1', 'MPEG2', 'MPEG4', 'PNG', 'QTRLE', 'THEORA', 'WEBM']
      '''
      
      constant_rate_factor = str
      '''Constant Rate Factor (CRF); tradeoff between video quality and file size
         @returns: enum in ['NONE', 'LOSSLESS', 'PERC_LOSSLESS', 'HIGH', 'MEDIUM', 'LOW', 'VERYLOW', 'LOWEST']
      '''
      
      ffmpeg_preset = str
      '''Tradeoff between encoding speed and compression ratio
         @returns: enum in ['BEST', 'GOOD', 'REALTIME']
      '''
      
      format = str
      '''Output file container
         @returns: enum in ['MPEG1', 'MPEG2', 'MPEG4', 'AVI', 'QUICKTIME', 'DV', 'OGG', 'MKV', 'FLASH', 'WEBM']
      '''
      
      gopsize = int
      '''Distance between key frames, also known as GOP size; influences file size and seekability
         @returns: int in [0, 500]
      '''
      
      max_b_frames = int
      '''Maximum number of B-frames between non-B-frames; influences file size and seekability
         @returns: int in [0, 16]
      '''
      
      maxrate = int
      '''Rate control: max rate (kb/s)
         @returns: int in [-inf, inf]
      '''
      
      minrate = int
      '''Rate control: min rate (kb/s)
         @returns: int in [-inf, inf]
      '''
      
      muxrate = int
      '''Mux rate (bits/s(!))
         @returns: int in [0, inf]
      '''
      
      packetsize = int
      '''Mux packet size (byte)
         @returns: int in [0, 16384]
      '''
      
      use_autosplit = bool
      '''Autosplit output at 2GB boundary
         @returns: boolean
      '''
      
      use_lossless_output = bool
      '''Use lossless output for video streams
         @returns: boolean
      '''
      
      use_max_b_frames = bool
      '''Set a maximum number of B-frames
         @returns: boolean
      '''
      
      video_bitrate = int
      '''Video bitrate (kb/s)
         @returns: int in [-inf, inf]
      '''
      
   class FILEBROWSER_UL_dir(types.UIList):
      '''
      '''
   
      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
         
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class FModifier(types.bpy_struct):
      '''Modifier for values of F-Curve
      '''
   
      active = bool
      '''F-Curve Modifier is the one being edited
         @returns: boolean
      '''
      
      blend_in = float
      '''Number of frames from start frame for influence to take effect
         @returns: float in [-inf, inf]
      '''
      
      blend_out = float
      '''Number of frames from end frame for influence to fade out
         @returns: float in [-inf, inf]
      '''
      
      frame_end = float
      '''Frame that modifier's influence ends (if Restrict Frame Range is in use)
         @returns: float in [-inf, inf]
      '''
      
      frame_start = float
      '''Frame that modifier's influence starts (if Restrict Frame Range is in use)
         @returns: float in [-inf, inf]
      '''
      
      influence = float
      '''Amount of influence F-Curve Modifier will have when not fading in/out
         @returns: float in [0, 1]
      '''
      
      is_valid = bool # (read only)
      '''F-Curve Modifier has invalid settings and will not be evaluated
         @returns: boolean
      '''
      
      mute = bool
      '''Disable F-Curve Modifier evaluation
         @returns: boolean
      '''
      
      show_expanded = bool
      '''F-Curve Modifier's panel is expanded in UI
         @returns: boolean
      '''
      
      type = str # (read only)
      '''F-Curve Modifier Type
         @returns: enum in ['NULL', 'GENERATOR', 'FNGENERATOR', 'ENVELOPE', 'CYCLES', 'NOISE', 'LIMITS', 'STEPPED']
      '''
      
      use_influence = bool
      '''F-Curve Modifier's effects will be tempered by a default factor
         @returns: boolean
      '''
      
      use_restricted_range = bool
      '''F-Curve Modifier is only applied for the specified frame range to help mask off effects in order to chain them
         @returns: boolean
      '''
      
   class FModifierCycles(types.FModifier):
      '''Repeat the values of the modified F-Curve
      '''
   
      cycles_after = int
      '''Maximum number of cycles to allow after last keyframe (0 = infinite)
         @returns: int in [-32768, 32767]
      '''
      
      cycles_before = int
      '''Maximum number of cycles to allow before first keyframe (0 = infinite)
         @returns: int in [-32768, 32767]
      '''
      
      mode_after = str
      '''Cycling mode to use after last keyframe
         @returns: enum in ['NONE', 'REPEAT', 'REPEAT_OFFSET', 'MIRROR']
      '''
      
      mode_before = str
      '''Cycling mode to use before first keyframe
         @returns: enum in ['NONE', 'REPEAT', 'REPEAT_OFFSET', 'MIRROR']
      '''
      
   class FModifierEnvelope(types.FModifier):
      '''Scale the values of the modified F-Curve
      '''
   
      control_points = types.FModifierEnvelopeControlPoints # (read only)
      '''Control points defining the shape of the envelope
         @returns: FModifierEnvelopeControlPoints Collection of FModifierEnvelopeControlPoint
      '''
      
      default_max = float
      '''Upper distance from Reference Value for 1:1 default influence
         @returns: float in [-inf, inf]
      '''
      
      default_min = float
      '''Lower distance from Reference Value for 1:1 default influence
         @returns: float in [-inf, inf]
      '''
      
      reference_value = float
      '''Value that envelope's influence is centered around / based on
         @returns: float in [-inf, inf]
      '''
      
   class FModifierEnvelopeControlPoint(types.bpy_struct):
      '''Control point for envelope F-Modifier
      '''
   
      frame = float
      '''Frame this control-point occurs on
         @returns: float in [-inf, inf]
      '''
      
      max = float
      '''Upper bound of envelope at this control-point
         @returns: float in [-inf, inf]
      '''
      
      min = float
      '''Lower bound of envelope at this control-point
         @returns: float in [-inf, inf]
      '''
      
   class FModifierEnvelopeControlPoints(types.bpy_struct):
      '''Control points defining the shape of the envelope
      '''
   
      def add(frame):
         '''Add a control point to a FModifierEnvelope
            Arguments:
            @frame (float): Frame to add this control-point
               in [-inf, inf]
      
            @returns (types.FModifierEnvelopeControlPoint): Newly created control-point
               
         '''
      
         return types.FModifierEnvelopeControlPoint

      def remove(point):
         '''Remove a control-point from an FModifierEnvelope
            Arguments:
            @point (FModifierEnvelopeControlPoint): Control-point to remove
               (never None)
      
         '''
      
         pass

   class FModifierFunctionGenerator(types.FModifier):
      '''Generate values using a Built-In Function
      '''
   
      amplitude = float
      '''Scale factor determining the maximum/minimum values
         @returns: float in [-inf, inf]
      '''
      
      function_type = str
      '''Type of built-in function to use
         @returns: enum in ['SIN', 'COS', 'TAN', 'SQRT', 'LN', 'SINC']
      '''
      
      phase_multiplier = float
      '''Scale factor determining the 'speed' of the function
         @returns: float in [-inf, inf]
      '''
      
      phase_offset = float
      '''Constant factor to offset time by for function
         @returns: float in [-inf, inf]
      '''
      
      use_additive = bool
      '''Values generated by this modifier are applied on top of the existing values instead of overwriting them
         @returns: boolean
      '''
      
      value_offset = float
      '''Constant factor to offset values by
         @returns: float in [-inf, inf]
      '''
      
   class FModifierGenerator(types.FModifier):
      '''Deterministically generate values for the modified F-Curve
      '''
   
      coefficients = float
      '''Coefficients for 'x' (starting from lowest power of x^0)
         @returns: float array of 32 items in [-inf, inf]
      '''
      
      mode = str
      '''Type of generator to use
         @returns: enum in ['POLYNOMIAL', 'POLYNOMIAL_FACTORISED']
      '''
      
      poly_order = int
      '''The highest power of 'x' for this polynomial (number of coefficients - 1)
         @returns: int in [1, 100]
      '''
      
      use_additive = bool
      '''Values generated by this modifier are applied on top of the existing values instead of overwriting them
         @returns: boolean
      '''
      
   class FModifierLimits(types.FModifier):
      '''Limit the time/value ranges of the modified F-Curve
      '''
   
      max_x = float
      '''Highest X value to allow
         @returns: float in [-inf, inf]
      '''
      
      max_y = float
      '''Highest Y value to allow
         @returns: float in [-inf, inf]
      '''
      
      min_x = float
      '''Lowest X value to allow
         @returns: float in [-inf, inf]
      '''
      
      min_y = float
      '''Lowest Y value to allow
         @returns: float in [-inf, inf]
      '''
      
      use_max_x = bool
      '''Use the maximum X value
         @returns: boolean
      '''
      
      use_max_y = bool
      '''Use the maximum Y value
         @returns: boolean
      '''
      
      use_min_x = bool
      '''Use the minimum X value
         @returns: boolean
      '''
      
      use_min_y = bool
      '''Use the minimum Y value
         @returns: boolean
      '''
      
   class FModifierNoise(types.FModifier):
      '''Give randomness to the modified F-Curve
      '''
   
      blend_type = str
      '''Method of modifying the existing F-Curve
         @returns: enum in ['REPLACE', 'ADD', 'SUBTRACT', 'MULTIPLY']
      '''
      
      depth = int
      '''Amount of fine level detail present in the noise
         @returns: int in [0, 32767]
      '''
      
      offset = float
      '''Time offset for the noise effect
         @returns: float in [-inf, inf]
      '''
      
      phase = float
      '''A random seed for the noise effect
         @returns: float in [-inf, inf]
      '''
      
      scale = float
      '''Scaling (in time) of the noise
         @returns: float in [-inf, inf]
      '''
      
      strength = float
      '''Amplitude of the noise - the amount that it modifies the underlying curve
         @returns: float in [-inf, inf]
      '''
      
   class FModifierPython(types.FModifier):
      '''Perform user-defined operation on the modified F-Curve
      '''
   
   class FModifierStepped(types.FModifier):
      '''Hold each interpolated value from the F-Curve for several frames without changing the timing
      '''
   
      frame_end = float
      '''Frame that modifier's influence ends (if applicable)
         @returns: float in [-inf, inf]
      '''
      
      frame_offset = float
      '''Reference number of frames before frames get held (use to get hold for '1-3' vs '5-7' holding patterns)
         @returns: float in [-inf, inf]
      '''
      
      frame_start = float
      '''Frame that modifier's influence starts (if applicable)
         @returns: float in [-inf, inf]
      '''
      
      frame_step = float
      '''Number of frames to hold each value
         @returns: float in [-inf, inf]
      '''
      
      use_frame_end = bool
      '''Restrict modifier to only act before its 'end' frame
         @returns: boolean
      '''
      
      use_frame_start = bool
      '''Restrict modifier to only act after its 'start' frame
         @returns: boolean
      '''
      
   class FaceMap(types.bpy_struct):
      '''Group of faces, each face can only be part of one map
      '''
   
      index = int # (read only)
      '''Index number of the face map
         @returns: int in [0, inf]
      '''
      
      name = str
      '''Face map name
         @returns: string, (never None)
      '''
      
      select = bool
      '''Face-map selection state (for tools to use)
         @returns: boolean
      '''
      
      def add(index):
         '''Add vertices to the group
            Arguments:
            @index (int): Index List
               array of 1 items in [-inf, inf]
      
         '''
      
         pass

      def remove(index):
         '''Remove a vertex from the group
            Arguments:
            @index (int): Index List
               array of 1 items in [-inf, inf]
      
         '''
      
         pass

   class FaceMaps(types.bpy_struct):
      '''Collection of face maps
      '''
   
      active = types.FaceMap # (read only)
      '''Face maps of the object
         @returns: FaceMap
      '''
      
      active_index = int
      '''Active index in face map array
         @returns: int in [0, 32767]
      '''
      
      def new(name="Map"):
         '''Add face map to object
            Arguments:
            @name (str): face map name
               (optional, never None)
      
            @returns (types.FaceMap): New face map
               
         '''
      
         return types.FaceMap

      def remove(group):
         '''Delete vertex group from object
            Arguments:
            @group (FaceMap): Face map to remove
               (never None)
      
         '''
      
         pass

      def clear():
         '''Delete all vertex groups from object
         '''
      
         pass

   class FieldSettings(types.bpy_struct):
      '''Field settings for an object in physics simulation
      '''
   
      apply_to_location = bool
      '''Affect particle's location
         @returns: boolean
      '''
      
      apply_to_rotation = bool
      '''Affect particle's dynamic rotation
         @returns: boolean
      '''
      
      distance_max = float
      '''Maximum distance for the field to work
         @returns: float in [0, inf]
      '''
      
      distance_min = float
      '''Minimum distance for the field's fall-off
         @returns: float in [0, 1000]
      '''
      
      falloff_power = float
      '''How quickly strength falls off with distance from the force field
         @returns: float in [0, 10]
      '''
      
      falloff_type = str
      '''
         @returns: enum in ['SPHERE', 'TUBE', 'CONE']
      '''
      
      flow = float
      '''Convert effector force into air flow velocity
         @returns: float in [0, 10]
      '''
      
      guide_clump_amount = float
      '''Amount of clumping
         @returns: float in [-1, 1]
      '''
      
      guide_clump_shape = float
      '''Shape of clumping
         @returns: float in [-0.999, 0.999]
      '''
      
      guide_free = float
      '''Guide-free time from particle life's end
         @returns: float in [0, 0.99]
      '''
      
      guide_kink_amplitude = float
      '''The amplitude of the offset
         @returns: float in [0, 10]
      '''
      
      guide_kink_axis = str
      '''Which axis to use for offset
         @returns: enum in ['X', 'Y', 'Z']
      '''
      
      guide_kink_frequency = float
      '''The frequency of the offset (1/total length)
         @returns: float in [0, 10]
      '''
      
      guide_kink_shape = float
      '''Adjust the offset to the beginning/end
         @returns: float in [-0.999, 0.999]
      '''
      
      guide_kink_type = str
      '''Type of periodic offset on the curve
         @returns: enum in ['NONE', 'CURL', 'RADIAL', 'WAVE', 'BRAID', 'ROTATION', 'ROLL']
      '''
      
      guide_minimum = float
      '''The distance from which particles are affected fully
         @returns: float in [0, 1000]
      '''
      
      harmonic_damping = float
      '''Damping of the harmonic force
         @returns: float in [0, 10]
      '''
      
      inflow = float
      '''Inwards component of the vortex force
         @returns: float in [-10, 10]
      '''
      
      linear_drag = float
      '''Drag component proportional to velocity
         @returns: float in [-2, 2]
      '''
      
      noise = float
      '''Amount of noise for the force strength
         @returns: float in [0, 10]
      '''
      
      quadratic_drag = float
      '''Drag component proportional to the square of velocity
         @returns: float in [-2, 2]
      '''
      
      radial_falloff = float
      '''Radial falloff power (real gravitational falloff = 2)
         @returns: float in [0, 10]
      '''
      
      radial_max = float
      '''Maximum radial distance for the field to work
         @returns: float in [0, 1000]
      '''
      
      radial_min = float
      '''Minimum radial distance for the field's fall-off
         @returns: float in [0, 1000]
      '''
      
      rest_length = float
      '''Rest length of the harmonic force
         @returns: float in [0, 1000]
      '''
      
      seed = int
      '''Seed of the noise
         @returns: int in [1, 128]
      '''
      
      shape = str
      '''Which direction is used to calculate the effector force
         @returns: enum in ['POINT', 'LINE', 'PLANE', 'SURFACE', 'POINTS']
      '''
      
      size = float
      '''Size of the turbulence
         @returns: float in [0, inf]
      '''
      
      source_object = types.Object
      '''Select domain object of the smoke simulation
         @returns: Object
      '''
      
      strength = float
      '''Strength of force field
         @returns: float in [-inf, inf]
      '''
      
      texture = types.Texture
      '''Texture to use as force
         @returns: Texture
      '''
      
      texture_mode = str
      '''How the texture effect is calculated (RGB & Curl need a RGB texture, else Gradient will be used instead)
         @returns: enum in ['RGB', 'GRADIENT', 'CURL']
      '''
      
      texture_nabla = float
      '''Defines size of derivative offset used for calculating gradient and curl
         @returns: float in [0.0001, 1]
      '''
      
      type = str
      '''Type of field
         @returns: enum in ['NONE', 'FORCE', 'WIND', 'VORTEX', 'MAGNET', 'HARMONIC', 'CHARGE', 'LENNARDJ', 'TEXTURE', 'GUIDE', 'BOID', 'TURBULENCE', 'DRAG', 'SMOKE_FLOW']
      '''
      
      use_2d_force = bool
      '''Apply force only in 2D
         @returns: boolean
      '''
      
      use_absorption = bool
      '''Force gets absorbed by collision objects
         @returns: boolean
      '''
      
      use_global_coords = bool
      '''Use effector/global coordinates for turbulence
         @returns: boolean
      '''
      
      use_gravity_falloff = bool
      '''Multiply force by 1/distance²
         @returns: boolean
      '''
      
      use_guide_path_add = bool
      '''Based on distance/falloff it adds a portion of the entire path
         @returns: boolean
      '''
      
      use_guide_path_weight = bool
      '''Use curve weights to influence the particle influence along the curve
         @returns: boolean
      '''
      
      use_max_distance = bool
      '''Use a maximum distance for the field to work
         @returns: boolean
      '''
      
      use_min_distance = bool
      '''Use a minimum distance for the field's fall-off
         @returns: boolean
      '''
      
      use_multiple_springs = bool
      '''Every point is effected by multiple springs
         @returns: boolean
      '''
      
      use_object_coords = bool
      '''Use object/global coordinates for texture
         @returns: boolean
      '''
      
      use_radial_max = bool
      '''Use a maximum radial distance for the field to work
         @returns: boolean
      '''
      
      use_radial_min = bool
      '''Use a minimum radial distance for the field's fall-off
         @returns: boolean
      '''
      
      use_root_coords = bool
      '''Texture coordinates from root particle locations
         @returns: boolean
      '''
      
      use_smoke_density = bool
      '''Adjust force strength based on smoke density
         @returns: boolean
      '''
      
      z_direction = str
      '''Effect in full or only positive/negative Z direction
         @returns: enum in ['BOTH', 'POSITIVE', 'NEGATIVE']
      '''
      
   class FileBrowserFSMenuEntry(types.bpy_struct):
      '''File Select Parameters
      '''
   
      icon = int
      '''
         @returns: int in [-inf, inf]
      '''
      
      is_valid = bool # (read only)
      '''Whether this path is currently reachable
         @returns: boolean
      '''
      
      name = str
      '''
         @returns: string, (never None)
      '''
      
      path = str
      '''
         @returns: string, (never None)
      '''
      
      use_save = bool # (read only)
      '''Whether this path is saved in bookmarks, or generated from OS
         @returns: boolean
      '''
      
   class FileSelectIDFilter(types.bpy_struct):
      '''Which ID types to show/hide, when browsing a library
      '''
   
      category_animation = bool
      '''Show animation data
         @returns: boolean
      '''
      
      category_environment = bool
      '''Show worlds, lights, cameras and speakers
         @returns: boolean
      '''
      
      category_geometry = bool
      '''Show meshes, curves, lattice, armatures and metaballs data
         @returns: boolean
      '''
      
      category_image = bool
      '''Show images, movie clips, sounds and masks
         @returns: boolean
      '''
      
      category_misc = bool
      '''Show other data types
         @returns: boolean
      '''
      
      category_object = bool
      '''Show objects and collections
         @returns: boolean
      '''
      
      category_scene = bool
      '''Show scenes
         @returns: boolean
      '''
      
      category_shading = bool
      '''Show materials, nodetrees, textures and Freestyle's linestyles
         @returns: boolean
      '''
      
      filter_action = bool
      '''Show Action data-blocks
         @returns: boolean
      '''
      
      filter_armature = bool
      '''Show Armature data-blocks
         @returns: boolean
      '''
      
      filter_brush = bool
      '''Show Brushes data-blocks
         @returns: boolean
      '''
      
      filter_cachefile = bool
      '''Show Cache File data-blocks
         @returns: boolean
      '''
      
      filter_camera = bool
      '''Show Camera data-blocks
         @returns: boolean
      '''
      
      filter_curve = bool
      '''Show Curve data-blocks
         @returns: boolean
      '''
      
      filter_font = bool
      '''Show Font data-blocks
         @returns: boolean
      '''
      
      filter_grease_pencil = bool
      '''Show Grease pencil data-blocks
         @returns: boolean
      '''
      
      filter_group = bool
      '''Show Collection data-blocks
         @returns: boolean
      '''
      
      filter_image = bool
      '''Show Image data-blocks
         @returns: boolean
      '''
      
      filter_lattice = bool
      '''Show Lattice data-blocks
         @returns: boolean
      '''
      
      filter_light = bool
      '''Show Light data-blocks
         @returns: boolean
      '''
      
      filter_light_probe = bool
      '''Show Light Probe data-blocks
         @returns: boolean
      '''
      
      filter_linestyle = bool
      '''Show Freestyle's Line Style data-blocks
         @returns: boolean
      '''
      
      filter_mask = bool
      '''Show Mask data-blocks
         @returns: boolean
      '''
      
      filter_material = bool
      '''Show Material data-blocks
         @returns: boolean
      '''
      
      filter_mesh = bool
      '''Show Mesh data-blocks
         @returns: boolean
      '''
      
      filter_metaball = bool
      '''Show Metaball data-blocks
         @returns: boolean
      '''
      
      filter_movie_clip = bool
      '''Show Movie Clip data-blocks
         @returns: boolean
      '''
      
      filter_node_tree = bool
      '''Show Node Tree data-blocks
         @returns: boolean
      '''
      
      filter_object = bool
      '''Show Object data-blocks
         @returns: boolean
      '''
      
      filter_paint_curve = bool
      '''Show Paint Curve data-blocks
         @returns: boolean
      '''
      
      filter_palette = bool
      '''Show Palette data-blocks
         @returns: boolean
      '''
      
      filter_particle_settings = bool
      '''Show Particle Settings data-blocks
         @returns: boolean
      '''
      
      filter_scene = bool
      '''Show Scene data-blocks
         @returns: boolean
      '''
      
      filter_sound = bool
      '''Show Sound data-blocks
         @returns: boolean
      '''
      
      filter_speaker = bool
      '''Show Speaker data-blocks
         @returns: boolean
      '''
      
      filter_text = bool
      '''Show Text data-blocks
         @returns: boolean
      '''
      
      filter_texture = bool
      '''Show Texture data-blocks
         @returns: boolean
      '''
      
      filter_volume = bool
      '''Show/hide Volume data-blocks
         @returns: boolean
      '''
      
      filter_work_space = bool
      '''Show workspace data-blocks
         @returns: boolean
      '''
      
      filter_world = bool
      '''Show World data-blocks
         @returns: boolean
      '''
      
   class FileSelectParams(types.bpy_struct):
      '''File Select Parameters
      '''
   
      directory = str
      '''Directory displayed in the file browser
         @returns: string, (never None)
      '''
      
      display_size = str
      '''Change the size of the display (width of columns or thumbnails size)
         @returns: enum in ['TINY', 'SMALL', 'NORMAL', 'LARGE']
      '''
      
      display_type = str
      '''Display mode for the file list
         @returns: enum in ['LIST_VERTICAL', 'LIST_HORIZONTAL', 'THUMBNAIL']
      '''
      
      filename = str
      '''Active file in the file browser
         @returns: string, (never None)
      '''
      
      filter_glob = str
      '''UNIX shell-like filename patterns matching, supports wildcards ('*') and list of patterns separated by ';'
         @returns: string, (never None)
      '''
      
      filter_id = types.FileSelectIDFilter # (read only)
      '''Which ID types to show/hide, when browsing a library
         @returns: FileSelectIDFilter, (never None)
      '''
      
      filter_search = str
      '''Filter by name, supports '*' wildcard
         @returns: string, (never None)
      '''
      
      recursion_level = str
      '''Numbers of dirtree levels to show simultaneously
         @returns: enum in ['NONE', 'BLEND', 'ALL_1', 'ALL_2', 'ALL_3']
      '''
      
      show_details_datetime = bool
      '''Draw a column listing the date and time of modification for each file
         @returns: boolean
      '''
      
      show_details_size = bool
      '''Draw a column listing the size of each file
         @returns: boolean
      '''
      
      show_hidden = bool
      '''Show hidden dot files
         @returns: boolean
      '''
      
      sort_method = str
      '''
         @returns: enum in ['FILE_SORT_ALPHA', 'FILE_SORT_EXTENSION', 'FILE_SORT_TIME', 'FILE_SORT_SIZE']
      '''
      
      title = str # (read only)
      '''Title for the file browser
         @returns: string, (never None)
      '''
      
      use_filter = bool
      '''Enable filtering of files
         @returns: boolean
      '''
      
      use_filter_backup = bool
      '''Show .blend1, .blend2, etc. files
         @returns: boolean
      '''
      
      use_filter_blender = bool
      '''Show .blend files
         @returns: boolean
      '''
      
      use_filter_blendid = bool
      '''Show .blend files items (objects, materials, etc.)
         @returns: boolean
      '''
      
      use_filter_folder = bool
      '''Show folders
         @returns: boolean
      '''
      
      use_filter_font = bool
      '''Show font files
         @returns: boolean
      '''
      
      use_filter_image = bool
      '''Show image files
         @returns: boolean
      '''
      
      use_filter_movie = bool
      '''Show movie files
         @returns: boolean
      '''
      
      use_filter_script = bool
      '''Show script files
         @returns: boolean
      '''
      
      use_filter_sound = bool
      '''Show sound files
         @returns: boolean
      '''
      
      use_filter_text = bool
      '''Show text files
         @returns: boolean
      '''
      
      use_filter_volume = bool
      '''Show 3D volume files
         @returns: boolean
      '''
      
      use_library_browsing = bool # (read only)
      '''Whether we may browse blender files' content or not
         @returns: boolean
      '''
      
      use_sort_invert = bool
      '''Sort items descending, from highest value to lowest
         @returns: boolean
      '''
      
   class FloatProperty(types.Property):
      '''RNA floating point number (single precision) property definition
      '''
   
      array_dimensions = int # (read only)
      '''Length of each dimension of the array
         @returns: int array of 3 items in [0, inf]
      '''
      
      array_length = int # (read only)
      '''Maximum length of the array, 0 means unlimited
         @returns: int in [0, inf]
      '''
      
      default = float # (read only)
      '''Default value for this number
         @returns: float in [-inf, inf]
      '''
      
      default_array = float # (read only)
      '''Default value for this array
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      hard_max = float # (read only)
      '''Maximum value used by buttons
         @returns: float in [-inf, inf]
      '''
      
      hard_min = float # (read only)
      '''Minimum value used by buttons
         @returns: float in [-inf, inf]
      '''
      
      is_array = bool # (read only)
      '''
         @returns: boolean
      '''
      
      precision = int # (read only)
      '''Number of digits after the dot used by buttons
         @returns: int in [0, inf]
      '''
      
      soft_max = float # (read only)
      '''Maximum value used by buttons
         @returns: float in [-inf, inf]
      '''
      
      soft_min = float # (read only)
      '''Minimum value used by buttons
         @returns: float in [-inf, inf]
      '''
      
      step = float # (read only)
      '''Step size used by number buttons, for floats 1/100th of the step size
         @returns: float in [0, inf]
      '''
      
   class FloorConstraint(types.Constraint):
      '''Use the target object for location limitation
      '''
   
      floor_location = str
      '''Location of target that object will not pass through
         @returns: enum in ['FLOOR_X', 'FLOOR_Y', 'FLOOR_Z', 'FLOOR_NEGATIVE_X', 'FLOOR_NEGATIVE_Y', 'FLOOR_NEGATIVE_Z']
      '''
      
      offset = float
      '''Offset of floor from object origin
         @returns: float in [-inf, inf]
      '''
      
      subtarget = str
      '''Armature bone, mesh or lattice vertex group, ...
         @returns: string, (never None)
      '''
      
      target = types.Object
      '''Target object
         @returns: Object
      '''
      
      use_rotation = bool
      '''Use the target's rotation to determine floor
         @returns: boolean
      '''
      
   class FluidDomainSettings(types.bpy_struct):
      '''Fluid domain settings
      '''
   
      adapt_margin = int
      '''Margin added around fluid to minimize boundary interference
         @returns: int in [2, 24]
      '''
      
      adapt_threshold = float
      '''Minimum amount of fluid a cell can contain before it is considered empty
         @returns: float in [0, 1]
      '''
      
      additional_res = int
      '''Maximum number of additional cells
         @returns: int in [0, 512]
      '''
      
      alpha = float
      '''Buoyant force based on smoke density (higher value results in faster rising smoke)
         @returns: float in [-5, 5]
      '''
      
      axis_slice_method = str
      '''
         @returns: enum in ['FULL', 'SINGLE']
      '''
      
      beta = float
      '''Buoyant force based on smoke heat (higher value results in faster rising smoke)
         @returns: float in [-5, 5]
      '''
      
      burning_rate = float
      '''Speed of the burning reaction (higher value results in smaller flames)
         @returns: float in [0.01, 4]
      '''
      
      cache_data_format = str
      '''Select the file format to be used for caching volumetric data
         @returns: enum in ['NONE']
      '''
      
      cache_directory = str
      '''Directory that contains fluid cache files
         @returns: string, (never None)
      '''
      
      cache_frame_end = int
      '''Frame on which the simulation stops
         @returns: int in [-1048574, 1048574]
      '''
      
      cache_frame_pause_data = int
      '''
         @returns: int in [-inf, inf]
      '''
      
      cache_frame_pause_guide = int
      '''
         @returns: int in [-inf, inf]
      '''
      
      cache_frame_pause_mesh = int
      '''
         @returns: int in [-inf, inf]
      '''
      
      cache_frame_pause_noise = int
      '''
         @returns: int in [-inf, inf]
      '''
      
      cache_frame_pause_particles = int
      '''
         @returns: int in [-inf, inf]
      '''
      
      cache_frame_start = int
      '''Frame on which the simulation starts
         @returns: int in [-1048574, 1048574]
      '''
      
      cache_mesh_format = str
      '''Select the file format to be used for caching surface data
         @returns: enum in ['NONE']
      '''
      
      cache_noise_format = str
      '''Select the file format to be used for caching noise data
         @returns: enum in ['NONE']
      '''
      
      cache_particle_format = str
      '''Select the file format to be used for caching particle data
         @returns: enum in ['NONE']
      '''
      
      cache_type = str
      '''Change the cache type of the simulation
         @returns: enum in ['REPLAY', 'MODULAR', 'FINAL']
      '''
      
      cell_size = float # (read only)
      '''Cell Size
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      cfl_condition = float
      '''Maximal velocity per cell (higher value results in greater timesteps)
         @returns: float in [0, 10]
      '''
      
      clipping = float
      '''Value under which voxels are considered empty space to optimize rendering
         @returns: float in [0, 1]
      '''
      
      coba_field = str
      '''Simulation field to color map
         @returns: enum in ['COLOR_R', 'COLOR_G', 'COLOR_B', 'DENSITY', 'FLAME', 'FUEL', 'HEAT', 'VELOCITY_X', 'VELOCITY_Y', 'VELOCITY_Z']
      '''
      
      color_grid = float # (read only)
      '''Smoke color grid
         @returns: float array of 32 items in [-inf, inf]
      '''
      
      color_ramp = types.ColorRamp # (read only)
      '''
         @returns: ColorRamp
      '''
      
      data_depth = str
      '''Bit depth for writing all scalar (including vector) lower values reduce file size
         @returns: enum in ['16', '32']
      '''
      
      delete_in_obstacle = bool
      '''Delete fluid inside obstacles
         @returns: boolean
      '''
      
      density_grid = float # (read only)
      '''Smoke density grid
         @returns: float array of 32 items in [-inf, inf]
      '''
      
      display_interpolation = str
      '''Interpolation method to use for smoke/fire volumes in solid mode
         @returns: enum in ['LINEAR', 'CUBIC']
      '''
      
      display_thickness = float
      '''Thickness of smoke drawing in the viewport
         @returns: float in [0.001, 1000]
      '''
      
      dissolve_speed = int
      '''Determine how quickly the smoke dissolves (lower value makes smoke disappear faster)
         @returns: int in [1, 10000]
      '''
      
      domain_resolution = int # (read only)
      '''Smoke Grid Resolution
         @returns: int array of 3 items in [-inf, inf]
      '''
      
      domain_type = str
      '''Change domain type of the simulation
         @returns: enum in ['GAS', 'LIQUID']
      '''
      
      effector_group = types.Collection
      '''Limit effectors to this collection
         @returns: Collection
      '''
      
      effector_weights = types.EffectorWeights # (read only)
      '''
         @returns: EffectorWeights
      '''
      
      export_manta_script = bool
      '''Generate and export Mantaflow script from current domain settings during bake. This is only needed if you plan to analyze the cache (e.g. view grids, velocity vectors, particles) in Mantaflow directly (outside of Blender) after baking the simulation
         @returns: boolean
      '''
      
      flame_grid = float # (read only)
      '''Smoke flame grid
         @returns: float array of 32 items in [-inf, inf]
      '''
      
      flame_ignition = float
      '''Minimum temperature of the flames (higher value results in faster rising flames)
         @returns: float in [0.5, 5]
      '''
      
      flame_max_temp = float
      '''Maximum temperature of the flames (higher value results in faster rising flames)
         @returns: float in [1, 10]
      '''
      
      flame_smoke = float
      '''Amount of smoke created by burning fuel
         @returns: float in [0, 8]
      '''
      
      flame_smoke_color = float
      '''Color of smoke emitted from burning fuel
         @returns: float array of 3 items in [0, inf]
      '''
      
      flame_vorticity = float
      '''Additional vorticity for the flames
         @returns: float in [0, 2]
      '''
      
      flip_ratio = float
      '''PIC/FLIP Ratio. A value of 1.0 will result in a completely FLIP based simulation. Use a lower value for simulations which should produce smaller splashes
         @returns: float in [0, 1]
      '''
      
      fluid_group = types.Collection
      '''Limit fluid objects to this collection
         @returns: Collection
      '''
      
      force_collection = types.Collection
      '''Limit forces to this collection
         @returns: Collection
      '''
      
      fractions_threshold = float
      '''Determines how much fluid is allowed in an obstacle cell (higher values will tag a boundary cell as an obstacle easier and reduce the boundary smoothening effect)
         @returns: float in [0.001, 1]
      '''
      
      gravity = float
      '''Gravity in X, Y and Z direction
         @returns: float array of 3 items in [-1000.1, 1000.1]
      '''
      
      guide_alpha = float
      '''Guiding weight (higher value results in greater lag)
         @returns: float in [1, 100]
      '''
      
      guide_beta = int
      '''Guiding size (higher value results in larger vortices)
         @returns: int in [1, 50]
      '''
      
      guide_parent = types.Object
      '''Use velocities from this object for the guiding effect (object needs to have fluid modifier and be of type domain))
         @returns: Object
      '''
      
      guide_source = str
      '''Choose where to get guiding velocities from
         @returns: enum in ['DOMAIN', 'EFFECTOR']
      '''
      
      guide_vel_factor = float
      '''Guiding velocity factor (higher value results in greater guiding velocities)
         @returns: float in [0, 100]
      '''
      
      has_cache_baked_any = bool
      '''
         @returns: boolean
      '''
      
      has_cache_baked_data = bool
      '''
         @returns: boolean
      '''
      
      has_cache_baked_guide = bool
      '''
         @returns: boolean
      '''
      
      has_cache_baked_mesh = bool
      '''
         @returns: boolean
      '''
      
      has_cache_baked_noise = bool
      '''
         @returns: boolean
      '''
      
      has_cache_baked_particles = bool
      '''
         @returns: boolean
      '''
      
      heat_grid = float # (read only)
      '''Smoke heat grid
         @returns: float array of 32 items in [-inf, inf]
      '''
      
      highres_sampling = str
      '''Method for sampling the high resolution flow
         @returns: enum in ['FULLSAMPLE', 'LINEAR', 'NEAREST']
      '''
      
      is_cache_baking_any = bool
      '''
         @returns: boolean
      '''
      
      is_cache_baking_data = bool
      '''
         @returns: boolean
      '''
      
      is_cache_baking_guide = bool
      '''
         @returns: boolean
      '''
      
      is_cache_baking_mesh = bool
      '''
         @returns: boolean
      '''
      
      is_cache_baking_noise = bool
      '''
         @returns: boolean
      '''
      
      is_cache_baking_particles = bool
      '''
         @returns: boolean
      '''
      
      mesh_concave_lower = float
      '''Lower mesh concavity bound (high values tend to smoothen and fill out concave regions)
         @returns: float in [0, 10]
      '''
      
      mesh_concave_upper = float
      '''Upper mesh concavity bound (high values tend to smoothen and fill out concave regions)
         @returns: float in [0, 10]
      '''
      
      mesh_generator = str
      '''Which particle level set generator to use
         @returns: enum in ['IMPROVED', 'UNION']
      '''
      
      mesh_particle_radius = float
      '''Particle radius factor (higher value results in larger (meshed) particles). Needs to be adjusted after changing the mesh scale
         @returns: float in [0, 10]
      '''
      
      mesh_scale = int
      '''The mesh simulation is scaled up by this factor (compared to the base resolution of the domain). For best meshing, it is recommended to adjust the mesh particle radius alongside this value
         @returns: int in [1, 100]
      '''
      
      mesh_smoothen_neg = int
      '''Negative mesh smoothening
         @returns: int in [0, 100]
      '''
      
      mesh_smoothen_pos = int
      '''Positive mesh smoothening
         @returns: int in [0, 100]
      '''
      
      mesh_vertices = types.FluidDomainVertexVelocity # (read only)
      '''Vertices of the fluid mesh generated by simulation
         @returns: Collection of FluidDomainVertexVelocity
      '''
      
      noise_pos_scale = float
      '''Scale of noise (higher value results in larger vortices)
         @returns: float in [0.0001, 10]
      '''
      
      noise_scale = int
      '''The noise simulation is scaled up by this factor (compared to the base resolution of the domain)
         @returns: int in [1, 100]
      '''
      
      noise_strength = float
      '''Strength of noise
         @returns: float in [0, 10]
      '''
      
      noise_time_anim = float
      '''Animation time of noise
         @returns: float in [0.0001, 10]
      '''
      
      noise_type = str
      '''Noise method which is used during the high-res simulation
         @returns: enum in ['NOISEWAVE']
      '''
      
      openvdb_cache_compress_type = str
      '''Compression method to be used
         @returns: enum in ['ZIP', 'BLOSC', 'NONE']
      '''
      
      particle_band_width = float
      '''Particle (narrow) band width (higher value results in thicker band and more particles)
         @returns: float in [0, 1000]
      '''
      
      particle_max = int
      '''Maximum number of particles per cell (ensures that each cell has at most this amount of particles)
         @returns: int in [0, 1000]
      '''
      
      particle_min = int
      '''Minimum number of particles per cell (ensures that each cell has at least this amount of particles)
         @returns: int in [0, 1000]
      '''
      
      particle_number = int
      '''Particle number factor (higher value results in more particles)
         @returns: int in [1, 5]
      '''
      
      particle_radius = float
      '''Particle radius factor. Increase this value if the simulation appears to leak volume, decrease it if the simulation seems to gain volume
         @returns: float in [0, 10]
      '''
      
      particle_randomness = float
      '''Randomness factor for particle sampling
         @returns: float in [0, 10]
      '''
      
      particle_scale = int
      '''The particle simulation is scaled up by this factor (compared to the base resolution of the domain)
         @returns: int in [1, 100]
      '''
      
      point_cache = types.PointCache # (read only)
      '''
         @returns: PointCache, (never None)
      '''
      
      point_cache_compress_type = str
      '''Compression method to be used
         @returns: enum in ['CACHELIGHT', 'CACHEHEAVY']
      '''
      
      resolution_max = int
      '''Resolution used for the fluid domain. Value corresponds to the longest domain side (resolution for other domain sides is calculated automatically)
         @returns: int in [6, 10000]
      '''
      
      show_velocity = bool
      '''Toggle visualization of the velocity field as needles
         @returns: boolean
      '''
      
      simulation_method = str
      '''Change the underlying simulation method
         @returns: enum in ['FLIP']
      '''
      
      slice_axis = str
      '''
         @returns: enum in ['AUTO', 'X', 'Y', 'Z']
      '''
      
      slice_depth = float
      '''Position of the slice
         @returns: float in [0, 1]
      '''
      
      slice_method = str
      '''How to slice the volume for viewport rendering
         @returns: enum in ['VIEW_ALIGNED', 'AXIS_ALIGNED']
      '''
      
      slice_per_voxel = float
      '''How many slices per voxel should be generated
         @returns: float in [0, 100]
      '''
      
      sndparticle_boundary = str
      '''How particles that left the domain are treated
         @returns: enum in ['DELETE', 'PUSHOUT']
      '''
      
      sndparticle_bubble_buoyancy = float
      '''Amount of buoyancy force that rises bubbles (high value results in bubble movement mainly upwards)
         @returns: float in [0, 100]
      '''
      
      sndparticle_bubble_drag = float
      '''Amount of drag force that moves bubbles along with the fluid (high value results in bubble movement mainly along with the fluid)
         @returns: float in [0, 100]
      '''
      
      sndparticle_combined_export = str
      '''Determines which particle systems are created from secondary particles
         @returns: enum in ['OFF', 'SPRAY_FOAM', 'SPRAY_BUBBLES', 'FOAM_BUBBLES', 'SPRAY_FOAM_BUBBLES']
      '''
      
      sndparticle_life_max = float
      '''Highest possible particle lifetime
         @returns: float in [0, 10000]
      '''
      
      sndparticle_life_min = float
      '''Lowest possible particle lifetime
         @returns: float in [0, 10000]
      '''
      
      sndparticle_potential_max_energy = float
      '''Upper clamping threshold that indicates the fluid speed where cells no longer emit more particles (higher value results in generally less particles)
         @returns: float in [0, 1000]
      '''
      
      sndparticle_potential_max_trappedair = float
      '''Upper clamping threshold for marking fluid cells where air is trapped (higher value results in less marked cells)
         @returns: float in [0, 1000]
      '''
      
      sndparticle_potential_max_wavecrest = float
      '''Upper clamping threshold for marking fluid cells as wave crests (higher value results in less marked cells)
         @returns: float in [0, 1000]
      '''
      
      sndparticle_potential_min_energy = float
      '''Lower clamping threshold that indicates the fluid speed where cells start to emit particles (lower values result in generally more particles)
         @returns: float in [0, 1000]
      '''
      
      sndparticle_potential_min_trappedair = float
      '''Lower clamping threshold for marking fluid cells where air is trapped (lower value results in more marked cells)
         @returns: float in [0, 1000]
      '''
      
      sndparticle_potential_min_wavecrest = float
      '''Lower clamping threshold for marking fluid cells as wave crests (lower value results in more marked cells)
         @returns: float in [0, 1000]
      '''
      
      sndparticle_potential_radius = int
      '''Radius to compute potential for each cell (higher values are slower but create smoother potential grids)
         @returns: int in [1, 4]
      '''
      
      sndparticle_sampling_trappedair = int
      '''Maximum number of particles generated per trapped air cell per frame
         @returns: int in [0, 10000]
      '''
      
      sndparticle_sampling_wavecrest = int
      '''Maximum number of particles generated per wave crest cell per frame
         @returns: int in [0, 10000]
      '''
      
      sndparticle_update_radius = int
      '''Radius to compute position update for each particle (higher values are slower but particles move less chaotic)
         @returns: int in [1, 4]
      '''
      
      start_point = float # (read only)
      '''Start point
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      surface_tension = float
      '''Surface tension of liquid (higher value results in greater hydrophobic behaviour)
         @returns: float in [0, 100]
      '''
      
      temperature_grid = float # (read only)
      '''Smoke temperature grid, range 0..1 represents 0..1000K
         @returns: float array of 32 items in [-inf, inf]
      '''
      
      time_scale = float
      '''Adjust simulation speed
         @returns: float in [0.0001, 10]
      '''
      
      timesteps_max = int
      '''Maximum number of simulation steps to perform for one frame
         @returns: int in [1, 100]
      '''
      
      timesteps_min = int
      '''Minimum number of simulation steps to perform for one frame
         @returns: int in [1, 100]
      '''
      
      use_adaptive_domain = bool
      '''Adapt simulation resolution and size to fluid
         @returns: boolean
      '''
      
      use_adaptive_timesteps = bool
      '''
         @returns: boolean
      '''
      
      use_bubble_particles = bool
      '''Create bubble particle system
         @returns: boolean
      '''
      
      use_collision_border_back = bool
      '''Enable collisions with back domain border
         @returns: boolean
      '''
      
      use_collision_border_bottom = bool
      '''Enable collisions with bottom domain border
         @returns: boolean
      '''
      
      use_collision_border_front = bool
      '''Enable collisions with front domain border
         @returns: boolean
      '''
      
      use_collision_border_left = bool
      '''Enable collisions with left domain border
         @returns: boolean
      '''
      
      use_collision_border_right = bool
      '''Enable collisions with right domain border
         @returns: boolean
      '''
      
      use_collision_border_top = bool
      '''Enable collisions with top domain border
         @returns: boolean
      '''
      
      use_color_ramp = bool
      '''Render a simulation field while mapping its voxels values to the colors of a ramp
         @returns: boolean
      '''
      
      use_diffusion = bool
      '''Enable fluid diffusion settings (e.g. viscosity, surface tension)
         @returns: boolean
      '''
      
      use_dissolve_smoke = bool
      '''Let smoke disappear over time
         @returns: boolean
      '''
      
      use_dissolve_smoke_log = bool
      '''Dissolve smoke in a logarithmic fashion. Dissolves quickly at first, but lingers longer
         @returns: boolean
      '''
      
      use_flip_particles = bool
      '''Create liquid particle system
         @returns: boolean
      '''
      
      use_foam_particles = bool
      '''Create foam particle system
         @returns: boolean
      '''
      
      use_fractions = bool
      '''Fractional obstacles improve and smoothen the fluid-obstacle boundary
         @returns: boolean
      '''
      
      use_guide = bool
      '''Enable fluid guiding
         @returns: boolean
      '''
      
      use_mesh = bool
      '''Enable fluid mesh (using amplification)
         @returns: boolean
      '''
      
      use_noise = bool
      '''Enable fluid noise (using amplification)
         @returns: boolean
      '''
      
      use_speed_vectors = bool
      '''Caches velocities of mesh vertices. These will be used (automatically) when rendering with motion blur enabled
         @returns: boolean
      '''
      
      use_spray_particles = bool
      '''Create spray particle system
         @returns: boolean
      '''
      
      use_tracer_particles = bool
      '''Create tracer particle system
         @returns: boolean
      '''
      
      vector_display_type = str
      '''
         @returns: enum in ['NEEDLE', 'STREAMLINE']
      '''
      
      vector_scale = float
      '''Multiplier for scaling the vectors
         @returns: float in [0, 1000]
      '''
      
      velocity_grid = float # (read only)
      '''Smoke velocity grid
         @returns: float array of 32 items in [-inf, inf]
      '''
      
      viscosity_base = float
      '''Viscosity setting: value that is multiplied by 10 to the power of (exponent*-1)
         @returns: float in [0, 10]
      '''
      
      viscosity_exponent = int
      '''Negative exponent for the viscosity value (to simplify entering small values e.g. 5*10^-6)
         @returns: int in [0, 10]
      '''
      
      vorticity = float
      '''Amount of turbulence and rotation in smoke
         @returns: float in [0, 4]
      '''
      
   class FluidDomainVertexVelocity(types.bpy_struct):
      '''Velocity of a simulated fluid mesh
      '''
   
      velocity = float # (read only)
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
   class FluidEffectorSettings(types.bpy_struct):
      '''Smoke collision settings
      '''
   
      effector_type = str
      '''Change type of effector in the simulation
         @returns: enum in ['COLLISION', 'GUIDE']
      '''
      
      guide_mode = str
      '''How to create guiding velocities
         @returns: enum in ['MAXIMUM', 'MINIMUM', 'OVERRIDE', 'AVERAGED']
      '''
      
      subframes = int
      '''Number of additional samples to take between frames to improve quality of fast moving effector objects
         @returns: int in [0, 200]
      '''
      
      surface_distance = float
      '''Additional distance around mesh surface to consider as effector
         @returns: float in [0, 10]
      '''
      
      use_effector = bool
      '''Control when to apply the effector
         @returns: boolean
      '''
      
      use_plane_init = bool
      '''Treat this object as a planar, unclosed mesh
         @returns: boolean
      '''
      
      velocity_factor = float
      '''Multiplier of obstacle velocity
         @returns: float in [-100, 100]
      '''
      
   class FluidFlowSettings(types.bpy_struct):
      '''Fluid flow settings
      '''
   
      density = float
      '''
         @returns: float in [0, 10]
      '''
      
      density_vertex_group = str
      '''Name of vertex group which determines surface emission rate
         @returns: string, (never None)
      '''
      
      flow_behavior = str
      '''Change flow behavior in the simulation
         @returns: enum in ['INFLOW', 'OUTFLOW', 'GEOMETRY']
      '''
      
      flow_source = str
      '''Change how fluid is emitted
         @returns: enum in ['NONE']
      '''
      
      flow_type = str
      '''Change type of fluid in the simulation
         @returns: enum in ['SMOKE', 'BOTH', 'FIRE', 'LIQUID']
      '''
      
      fuel_amount = float
      '''
         @returns: float in [0, 10]
      '''
      
      noise_texture = types.Texture
      '''Texture that controls emission strength
         @returns: Texture
      '''
      
      particle_size = float
      '''Particle size in simulation cells
         @returns: float in [0.1, 20]
      '''
      
      particle_system = types.ParticleSystem
      '''Particle systems emitted from the object
         @returns: ParticleSystem
      '''
      
      smoke_color = float
      '''Color of smoke
         @returns: float array of 3 items in [0, inf]
      '''
      
      subframes = int
      '''Number of additional samples to take between frames to improve quality of fast moving flows
         @returns: int in [0, 200]
      '''
      
      surface_distance = float
      '''Controls fluid emission from the mesh surface (higher value results in emission further away from the mesh surface
         @returns: float in [0, 10]
      '''
      
      temperature = float
      '''Temperature difference to ambient temperature
         @returns: float in [-10, 10]
      '''
      
      texture_map_type = str
      '''Texture mapping type
         @returns: enum in ['AUTO', 'UV']
      '''
      
      texture_offset = float
      '''Z-offset of texture mapping
         @returns: float in [0, 200]
      '''
      
      texture_size = float
      '''Size of texture mapping
         @returns: float in [0.01, 10]
      '''
      
      use_absolute = bool
      '''Only allow given density value in emitter area and will not add up
         @returns: boolean
      '''
      
      use_inflow = bool
      '''Control when to apply fluid flow
         @returns: boolean
      '''
      
      use_initial_velocity = bool
      '''Fluid has some initial velocity when it is emitted
         @returns: boolean
      '''
      
      use_particle_size = bool
      '''Set particle size in simulation cells or use nearest cell
         @returns: boolean
      '''
      
      use_plane_init = bool
      '''Treat this object as a planar and unclosed mesh. Fluid will only be emitted from the mesh surface and based on the surface emission value
         @returns: boolean
      '''
      
      use_texture = bool
      '''Use a texture to control emission strength
         @returns: boolean
      '''
      
      uv_layer = str
      '''UV map name
         @returns: string, (never None)
      '''
      
      velocity_coord = float
      '''Initial velocity in X, Y and Z direction in world space
         @returns: float array of 3 items in [-1000.1, 1000.1]
      '''
      
      velocity_factor = float
      '''Multiplier of source velocity passed to fluid (source velocity is non-zero only if object is moving)
         @returns: float in [-100, 100]
      '''
      
      velocity_normal = float
      '''Amount of normal directional velocity
         @returns: float in [-100, 100]
      '''
      
      velocity_random = float
      '''Amount of random velocity
         @returns: float in [0, 10]
      '''
      
      volume_density = float
      '''Controls fluid emission from within the mesh (higher value results in greater emissions from inside the mesh)
         @returns: float in [0, 1]
      '''
      
   class FluidModifier(types.Modifier):
      '''Fluid simulation modifier
      '''
   
      domain_settings = types.FluidDomainSettings # (read only)
      '''
         @returns: FluidDomainSettings
      '''
      
      effector_settings = types.FluidEffectorSettings # (read only)
      '''
         @returns: FluidEffectorSettings
      '''
      
      flow_settings = types.FluidFlowSettings # (read only)
      '''
         @returns: FluidFlowSettings
      '''
      
      fluid_type = str
      '''
         @returns: enum in ['NONE', 'DOMAIN', 'FLOW', 'EFFECTOR']
      '''
      
   class FollowPathConstraint(types.Constraint):
      '''Lock motion to the target path
      '''
   
      forward_axis = str
      '''Axis that points forward along the path
         @returns: enum in ['FORWARD_X', 'FORWARD_Y', 'FORWARD_Z', 'TRACK_NEGATIVE_X', 'TRACK_NEGATIVE_Y', 'TRACK_NEGATIVE_Z']
      '''
      
      offset = float
      '''Offset from the position corresponding to the time frame
         @returns: float in [-1.04857e+06, 1.04857e+06]
      '''
      
      offset_factor = float
      '''Percentage value defining target position along length of curve
         @returns: float in [0, 1]
      '''
      
      target = types.Object
      '''Target Curve object
         @returns: Object
      '''
      
      up_axis = str
      '''Axis that points upward
         @returns: enum in ['UP_X', 'UP_Y', 'UP_Z']
      '''
      
      use_curve_follow = bool
      '''Object will follow the heading and banking of the curve
         @returns: boolean
      '''
      
      use_curve_radius = bool
      '''Object is scaled by the curve radius
         @returns: boolean
      '''
      
      use_fixed_location = bool
      '''Object will stay locked to a single point somewhere along the length of the curve regardless of time
         @returns: boolean
      '''
      
   class FollowTrackConstraint(types.Constraint):
      '''Lock motion to the target motion track
      '''
   
      camera = types.Object
      '''Camera to which motion is parented (if empty active scene camera is used)
         @returns: Object
      '''
      
      clip = types.MovieClip
      '''Movie Clip to get tracking data from
         @returns: MovieClip
      '''
      
      depth_object = types.Object
      '''Object used to define depth in camera space by projecting onto surface of this object
         @returns: Object
      '''
      
      frame_method = str
      '''How the footage fits in the camera frame
         @returns: enum in ['STRETCH', 'FIT', 'CROP']
      '''
      
      object = str
      '''Movie tracking object to follow (if empty, camera object is used)
         @returns: string, (never None)
      '''
      
      track = str
      '''Movie tracking track to follow
         @returns: string, (never None)
      '''
      
      use_3d_position = bool
      '''Use 3D position of track to parent to
         @returns: boolean
      '''
      
      use_active_clip = bool
      '''Use active clip defined in scene
         @returns: boolean
      '''
      
      use_undistorted_position = bool
      '''Parent to undistorted position of 2D track
         @returns: boolean
      '''
      
   class FreestyleLineSet(types.bpy_struct):
      '''Line set for associating lines and style parameters
      '''
   
      collection = types.Collection
      '''A collection of objects based on which feature edges are selected
         @returns: Collection
      '''
      
      collection_negation = str
      '''Specify either inclusion or exclusion of feature edges belonging to a collection of objects
         @returns: enum in ['INCLUSIVE', 'EXCLUSIVE']
      '''
      
      edge_type_combination = str
      '''Specify a logical combination of selection conditions on feature edge types
         @returns: enum in ['OR', 'AND']
      '''
      
      edge_type_negation = str
      '''Specify either inclusion or exclusion of feature edges selected by edge types
         @returns: enum in ['INCLUSIVE', 'EXCLUSIVE']
      '''
      
      exclude_border = bool
      '''Exclude border edges
         @returns: boolean
      '''
      
      exclude_contour = bool
      '''Exclude contours
         @returns: boolean
      '''
      
      exclude_crease = bool
      '''Exclude crease edges
         @returns: boolean
      '''
      
      exclude_edge_mark = bool
      '''Exclude edge marks
         @returns: boolean
      '''
      
      exclude_external_contour = bool
      '''Exclude external contours
         @returns: boolean
      '''
      
      exclude_material_boundary = bool
      '''Exclude edges at material boundaries
         @returns: boolean
      '''
      
      exclude_ridge_valley = bool
      '''Exclude ridges and valleys
         @returns: boolean
      '''
      
      exclude_silhouette = bool
      '''Exclude silhouette edges
         @returns: boolean
      '''
      
      exclude_suggestive_contour = bool
      '''Exclude suggestive contours
         @returns: boolean
      '''
      
      face_mark_condition = str
      '''Specify a feature edge selection condition based on face marks
         @returns: enum in ['ONE', 'BOTH']
      '''
      
      face_mark_negation = str
      '''Specify either inclusion or exclusion of feature edges selected by face marks
         @returns: enum in ['INCLUSIVE', 'EXCLUSIVE']
      '''
      
      linestyle = types.FreestyleLineStyle
      '''Line style settings
         @returns: FreestyleLineStyle, (never None)
      '''
      
      name = str
      '''Line set name
         @returns: string, (never None)
      '''
      
      qi_end = int
      '''Last QI value of the QI range
         @returns: int in [0, inf]
      '''
      
      qi_start = int
      '''First QI value of the QI range
         @returns: int in [0, inf]
      '''
      
      select_border = bool
      '''Select border edges (open mesh edges)
         @returns: boolean
      '''
      
      select_by_collection = bool
      '''Select feature edges based on a collection of objects
         @returns: boolean
      '''
      
      select_by_edge_types = bool
      '''Select feature edges based on edge types
         @returns: boolean
      '''
      
      select_by_face_marks = bool
      '''Select feature edges by face marks
         @returns: boolean
      '''
      
      select_by_image_border = bool
      '''Select feature edges by image border (less memory consumption)
         @returns: boolean
      '''
      
      select_by_visibility = bool
      '''Select feature edges based on visibility
         @returns: boolean
      '''
      
      select_contour = bool
      '''Select contours (outer silhouettes of each object)
         @returns: boolean
      '''
      
      select_crease = bool
      '''Select crease edges (those between two faces making an angle smaller than the Crease Angle)
         @returns: boolean
      '''
      
      select_edge_mark = bool
      '''Select edge marks (edges annotated by Freestyle edge marks)
         @returns: boolean
      '''
      
      select_external_contour = bool
      '''Select external contours (outer silhouettes of occluding and occluded objects)
         @returns: boolean
      '''
      
      select_material_boundary = bool
      '''Select edges at material boundaries
         @returns: boolean
      '''
      
      select_ridge_valley = bool
      '''Select ridges and valleys (boundary lines between convex and concave areas of surface)
         @returns: boolean
      '''
      
      select_silhouette = bool
      '''Select silhouettes (edges at the boundary of visible and hidden faces)
         @returns: boolean
      '''
      
      select_suggestive_contour = bool
      '''Select suggestive contours (almost silhouette/contour edges)
         @returns: boolean
      '''
      
      show_render = bool
      '''Enable or disable this line set during stroke rendering
         @returns: boolean
      '''
      
      visibility = str
      '''Determine how to use visibility for feature edge selection
         @returns: enum in ['VISIBLE', 'HIDDEN', 'RANGE']
      '''
      
   class FreestyleLineStyle(types.ID):
      '''Freestyle line style, reusable by multiple line sets
      '''
   
      active_texture = types.Texture
      '''Active texture slot being displayed
         @returns: Texture
      '''
      
      active_texture_index = int
      '''Index of active texture slot
         @returns: int in [0, 17]
      '''
      
      alpha = float
      '''Base alpha transparency, possibly modified by alpha transparency modifiers
         @returns: float in [0, 1]
      '''
      
      alpha_modifiers = types.LineStyleAlphaModifiers # (read only)
      '''List of alpha transparency modifiers
         @returns: LineStyleAlphaModifiers Collection of LineStyleAlphaModifier
      '''
      
      angle_max = float
      '''Maximum 2D angle for splitting chains
         @returns: float in [0, 3.14159]
      '''
      
      angle_min = float
      '''Minimum 2D angle for splitting chains
         @returns: float in [0, 3.14159]
      '''
      
      animation_data = types.AnimData # (read only)
      '''Animation data for this data-block
         @returns: AnimData
      '''
      
      caps = str
      '''Select the shape of both ends of strokes
         @returns: enum in ['BUTT', 'ROUND', 'SQUARE']
      '''
      
      chain_count = int
      '''Chain count for the selection of first N chains
         @returns: int in [0, inf]
      '''
      
      chaining = str
      '''Select the way how feature edges are jointed to form chains
         @returns: enum in ['PLAIN', 'SKETCHY']
      '''
      
      color = float
      '''Base line color, possibly modified by line color modifiers
         @returns: float array of 3 items in [0, inf]
      '''
      
      color_modifiers = types.LineStyleColorModifiers # (read only)
      '''List of line color modifiers
         @returns: LineStyleColorModifiers Collection of LineStyleColorModifier
      '''
      
      dash1 = int
      '''Length of the 1st dash for dashed lines
         @returns: int in [0, 65535]
      '''
      
      dash2 = int
      '''Length of the 2nd dash for dashed lines
         @returns: int in [0, 65535]
      '''
      
      dash3 = int
      '''Length of the 3rd dash for dashed lines
         @returns: int in [0, 65535]
      '''
      
      gap1 = int
      '''Length of the 1st gap for dashed lines
         @returns: int in [0, 65535]
      '''
      
      gap2 = int
      '''Length of the 2nd gap for dashed lines
         @returns: int in [0, 65535]
      '''
      
      gap3 = int
      '''Length of the 3rd gap for dashed lines
         @returns: int in [0, 65535]
      '''
      
      geometry_modifiers = types.LineStyleGeometryModifiers # (read only)
      '''List of stroke geometry modifiers
         @returns: LineStyleGeometryModifiers Collection of LineStyleGeometryModifier
      '''
      
      integration_type = str
      '''Select the way how the sort key is computed for each chain
         @returns: enum in ['MEAN', 'MIN', 'MAX', 'FIRST', 'LAST']
      '''
      
      length_max = float
      '''Maximum curvilinear 2D length for the selection of chains
         @returns: float in [0, 10000]
      '''
      
      length_min = float
      '''Minimum curvilinear 2D length for the selection of chains
         @returns: float in [0, 10000]
      '''
      
      material_boundary = bool
      '''If true, chains of feature edges are split at material boundaries
         @returns: boolean
      '''
      
      node_tree = types.NodeTree # (read only)
      '''Node tree for node-based shaders
         @returns: NodeTree
      '''
      
      panel = str
      '''Select the property panel to be shown
         @returns: enum in ['STROKES', 'COLOR', 'ALPHA', 'THICKNESS', 'GEOMETRY', 'TEXTURE']
      '''
      
      rounds = int
      '''Number of rounds in a sketchy multiple touch
         @returns: int in [1, 1000]
      '''
      
      sort_key = str
      '''Select the sort key to determine the stacking order of chains
         @returns: enum in ['DISTANCE_FROM_CAMERA', '2D_LENGTH', 'PROJECTED_X', 'PROJECTED_Y']
      '''
      
      sort_order = str
      '''Select the sort order
         @returns: enum in ['DEFAULT', 'REVERSE']
      '''
      
      split_dash1 = int
      '''Length of the 1st dash for splitting
         @returns: int in [0, 65535]
      '''
      
      split_dash2 = int
      '''Length of the 2nd dash for splitting
         @returns: int in [0, 65535]
      '''
      
      split_dash3 = int
      '''Length of the 3rd dash for splitting
         @returns: int in [0, 65535]
      '''
      
      split_gap1 = int
      '''Length of the 1st gap for splitting
         @returns: int in [0, 65535]
      '''
      
      split_gap2 = int
      '''Length of the 2nd gap for splitting
         @returns: int in [0, 65535]
      '''
      
      split_gap3 = int
      '''Length of the 3rd gap for splitting
         @returns: int in [0, 65535]
      '''
      
      split_length = float
      '''Curvilinear 2D length for chain splitting
         @returns: float in [0, 10000]
      '''
      
      texture_slots = types.LineStyleTextureSlots # (read only)
      '''Texture slots defining the mapping and influence of textures
         @returns: LineStyleTextureSlots Collection of LineStyleTextureSlot
      '''
      
      texture_spacing = float
      '''Spacing for textures along stroke length
         @returns: float in [0.01, 100]
      '''
      
      thickness = float
      '''Base line thickness, possibly modified by line thickness modifiers
         @returns: float in [0, 10000]
      '''
      
      thickness_modifiers = types.LineStyleThicknessModifiers # (read only)
      '''List of line thickness modifiers
         @returns: LineStyleThicknessModifiers Collection of LineStyleThicknessModifier
      '''
      
      thickness_position = str
      '''Thickness position of silhouettes and border edges (applicable when plain chaining is used with the Same Object option)
         @returns: enum in ['CENTER', 'INSIDE', 'OUTSIDE', 'RELATIVE']
      '''
      
      thickness_ratio = float
      '''A number between 0 (inside) and 1 (outside) specifying the relative position of stroke thickness
         @returns: float in [0, 1]
      '''
      
      use_angle_max = bool
      '''Split chains at points with angles larger than the maximum 2D angle
         @returns: boolean
      '''
      
      use_angle_min = bool
      '''Split chains at points with angles smaller than the minimum 2D angle
         @returns: boolean
      '''
      
      use_chain_count = bool
      '''Enable the selection of first N chains
         @returns: boolean
      '''
      
      use_chaining = bool
      '''Enable chaining of feature edges
         @returns: boolean
      '''
      
      use_dashed_line = bool
      '''Enable or disable dashed line
         @returns: boolean
      '''
      
      use_length_max = bool
      '''Enable the selection of chains by a maximum 2D length
         @returns: boolean
      '''
      
      use_length_min = bool
      '''Enable the selection of chains by a minimum 2D length
         @returns: boolean
      '''
      
      use_nodes = bool
      '''Use shader nodes for the line style
         @returns: boolean
      '''
      
      use_same_object = bool
      '''If true, only feature edges of the same object are joined
         @returns: boolean
      '''
      
      use_sorting = bool
      '''Arrange the stacking order of strokes
         @returns: boolean
      '''
      
      use_split_length = bool
      '''Enable chain splitting by curvilinear 2D length
         @returns: boolean
      '''
      
      use_split_pattern = bool
      '''Enable chain splitting by dashed line patterns
         @returns: boolean
      '''
      
      use_texture = bool
      '''Enable or disable textured strokes
         @returns: boolean
      '''
      
   class FreestyleModuleSettings(types.bpy_struct):
      '''Style module configuration for specifying a style module
      '''
   
      script = types.Text
      '''Python script to define a style module
         @returns: Text
      '''
      
      use = bool
      '''Enable or disable this style module during stroke rendering
         @returns: boolean
      '''
      
   class FreestyleModules(types.bpy_struct):
      '''A list of style modules (to be applied from top to bottom)
      '''
   
      def new():
         '''Add a style module to scene render layer Freestyle settings
            @returns (types.FreestyleModuleSettings): Newly created style module
               
         '''
      
         return types.FreestyleModuleSettings

      def remove(module):
         '''Remove a style module from scene render layer Freestyle settings
            Arguments:
            @module (FreestyleModuleSettings): Style module to remove
               (never None)
      
         '''
      
         pass

   class FreestyleSettings(types.bpy_struct):
      '''Freestyle settings for a ViewLayer data-block
      '''
   
      as_render_pass = bool
      '''Renders Freestyle output to a separate pass instead of overlaying it on the Combined pass
         @returns: boolean
      '''
      
      crease_angle = float
      '''Angular threshold for detecting crease edges
         @returns: float in [0, 3.14159]
      '''
      
      kr_derivative_epsilon = float
      '''Kr derivative epsilon for computing suggestive contours
         @returns: float in [-1000, 1000]
      '''
      
      linesets = types.Linesets # (read only)
      '''
         @returns: Linesets Collection of FreestyleLineSet
      '''
      
      mode = str
      '''Select the Freestyle control mode
         @returns: enum in ['SCRIPT', 'EDITOR']
      '''
      
      modules = types.FreestyleModules # (read only)
      '''A list of style modules (to be applied from top to bottom)
         @returns: FreestyleModules Collection of FreestyleModuleSettings
      '''
      
      sphere_radius = float
      '''Sphere radius for computing curvatures
         @returns: float in [0, 1000]
      '''
      
      use_advanced_options = bool
      '''Enable advanced edge detection options (sphere radius and Kr derivative epsilon)
         @returns: boolean
      '''
      
      use_culling = bool
      '''If enabled, out-of-view edges are ignored
         @returns: boolean
      '''
      
      use_material_boundaries = bool
      '''Enable material boundaries
         @returns: boolean
      '''
      
      use_ridges_and_valleys = bool
      '''Enable ridges and valleys
         @returns: boolean
      '''
      
      use_smoothness = bool
      '''Take face smoothness into account in view map calculation
         @returns: boolean
      '''
      
      use_suggestive_contours = bool
      '''Enable suggestive contours
         @returns: boolean
      '''
      
      use_view_map_cache = bool
      '''Keep the computed view map and avoid re-calculating it if mesh geometry is unchanged
         @returns: boolean
      '''
      
   class Function(types.bpy_struct):
      '''RNA function definition
      '''
   
      description = str # (read only)
      '''Description of the Function's purpose
         @returns: string, (never None)
      '''
      
      identifier = str # (read only)
      '''Unique name used in the code and scripting
         @returns: string, (never None)
      '''
      
      is_registered = bool # (read only)
      '''Function is registered as callback as part of type registration
         @returns: boolean
      '''
      
      is_registered_optional = bool # (read only)
      '''Function is optionally registered as callback part of type registration
         @returns: boolean
      '''
      
      parameters = types.Property # (read only)
      '''Parameters for the function
         @returns: Collection of Property
      '''
      
      use_self = bool # (read only)
      '''Function does not pass its self as an argument (becomes a static method in python)
         @returns: boolean
      '''
      
      use_self_type = bool # (read only)
      '''Function passes its self type as an argument (becomes a class method in python if use_self is false)
         @returns: boolean
      '''
      
   class GPENCIL_UL_annotation_layer(types.UIList):
      '''
      '''
   
      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
         
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class GPENCIL_UL_layer(types.UIList):
      '''
      '''
   
      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
         
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class GPENCIL_UL_masks(types.UIList):
      '''
      '''
   
      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
         
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class GPENCIL_UL_matslots(types.UIList):
      '''
      '''
   
      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
         
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class GPENCIL_UL_vgroups(types.UIList):
      '''
      '''
   
      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
         
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class GPencilFrame(types.bpy_struct):
      '''Collection of related sketches on a particular frame
      '''
   
      frame_number = int
      '''The frame on which this sketch appears
         @returns: int in [-1048574, 1048574]
      '''
      
      is_edited = bool
      '''Frame is being edited (painted on)
         @returns: boolean
      '''
      
      select = bool
      '''Frame is selected for editing in the Dope Sheet
         @returns: boolean
      '''
      
      strokes = types.GPencilStrokes # (read only)
      '''Freehand curves defining the sketch on this frame
         @returns: GPencilStrokes Collection of GPencilStroke
      '''
      
      def clear():
         '''Remove all the grease pencil frame data
         '''
      
         pass

   class GPencilFrames(types.bpy_struct):
      '''Collection of grease pencil frames
      '''
   
      def new(frame_number, active=False):
         '''Add a new grease pencil frame
            Arguments:
            @frame_number (int): The frame on which this sketch appears
               in [-1048574, 1048574]
            @active (bool): (optional)
      
            @returns (types.GPencilFrame): The newly created frame
               
         '''
      
         return types.GPencilFrame

      def remove(frame):
         '''Remove a grease pencil frame
            Arguments:
            @frame (GPencilFrame): The frame to remove
               (never None)
      
         '''
      
         pass

      def copy(source):
         '''Copy a grease pencil frame
            Arguments:
            @source (GPencilFrame): The source frame
               (never None)
      
            @returns (types.GPencilFrame): The newly copied frame
               
         '''
      
         return types.GPencilFrame

   class GPencilInterpolateSettings(types.bpy_struct):
      '''Settings for Grease Pencil interpolation tools
      '''
   
      amplitude = float
      '''Amount to boost elastic bounces for 'elastic' easing
         @returns: float in [0, inf]
      '''
      
      back = float
      '''Amount of overshoot for 'back' easing
         @returns: float in [-inf, inf]
      '''
      
      easing = str
      '''Which ends of the segment between the preceding and following grease pencil frames easing interpolation is applied to
         @returns: enum in ['AUTO', 'EASE_IN', 'EASE_OUT', 'EASE_IN_OUT']
      '''
      
      interpolate_all_layers = bool
      '''Interpolate all layers, not only active
         @returns: boolean
      '''
      
      interpolate_selected_only = bool
      '''Interpolate only selected strokes in the original frame
         @returns: boolean
      '''
      
      interpolation_curve = types.CurveMapping # (read only)
      '''Custom curve to control 'sequence' interpolation between Grease Pencil frames
         @returns: CurveMapping
      '''
      
      period = float
      '''Time between bounces for elastic easing
         @returns: float in [-inf, inf]
      '''
      
      type = str
      '''Interpolation method to use the next time 'Interpolate Sequence' is run
         @returns: enum in ['LINEAR', 'CUSTOM', 'SINE', 'QUAD', 'CUBIC', 'QUART', 'QUINT', 'EXPO', 'CIRC', 'BACK', 'BOUNCE', 'ELASTIC']
      '''
      
   class GPencilLayer(types.bpy_struct):
      '''Collection of related sketches
      '''
   
      active_frame = types.GPencilFrame # (read only)
      '''Frame currently being displayed for this layer
         @returns: GPencilFrame
      '''
      
      annotation_hide = bool
      '''Set annotation Visibility
         @returns: boolean
      '''
      
      annotation_onion_after_color = float
      '''Base color for ghosts after the active frame
         @returns: float array of 3 items in [0, 1]
      '''
      
      annotation_onion_after_range = int
      '''Maximum number of frames to show after current frame
         @returns: int in [-1, 120]
      '''
      
      annotation_onion_before_color = float
      '''Base color for ghosts before the active frame
         @returns: float array of 3 items in [0, 1]
      '''
      
      annotation_onion_before_range = int
      '''Maximum number of frames to show before current frame
         @returns: int in [-1, 120]
      '''
      
      blend_mode = str
      '''Blend mode
         @returns: enum in ['REGULAR', 'HARDLIGHT', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE']
      '''
      
      channel_color = float
      '''Custom color for animation channel in Dopesheet
         @returns: float array of 3 items in [0, 1]
      '''
      
      color = float
      '''Color for all strokes in this layer
         @returns: float array of 3 items in [0, 1]
      '''
      
      frames = types.GPencilFrames # (read only)
      '''Sketches for this layer on different frames
         @returns: GPencilFrames Collection of GPencilFrame
      '''
      
      hide = bool
      '''Set layer Visibility
         @returns: boolean
      '''
      
      info = str
      '''Layer name
         @returns: string, (never None)
      '''
      
      is_parented = bool # (read only)
      '''True when the layer parent object is set
         @returns: boolean
      '''
      
      is_ruler = bool # (read only)
      '''This is a special ruler layer
         @returns: boolean
      '''
      
      line_change = int
      '''Thickness change to apply to current strokes (in pixels)
         @returns: int in [-300, 300]
      '''
      
      lock = bool
      '''Protect layer from further editing and/or frame changes
         @returns: boolean
      '''
      
      lock_frame = bool
      '''Lock current frame displayed by layer
         @returns: boolean
      '''
      
      lock_material = bool
      '''Avoids editing locked materials in the layer
         @returns: boolean
      '''
      
      mask_layers = types.GreasePencilMaskLayers # (read only)
      '''List of Masking Layers
         @returns: GreasePencilMaskLayers Collection of GPencilLayerMask
      '''
      
      matrix_inverse = float
      '''Parent inverse transformation matrix
         @returns: float multi-dimensional array of 4 * 4 items in [-inf, inf]
      '''
      
      opacity = float
      '''Layer Opacity
         @returns: float in [0, 1]
      '''
      
      parent = types.Object
      '''Parent Object
         @returns: Object
      '''
      
      parent_bone = str
      '''Name of parent bone in case of a bone parenting relation
         @returns: string, (never None)
      '''
      
      parent_type = str
      '''Type of parent relation
         @returns: enum in ['OBJECT', 'ARMATURE', 'BONE']
      '''
      
      pass_index = int
      '''Index number for the "Layer Index" pass
         @returns: int in [0, 32767]
      '''
      
      select = bool
      '''Layer is selected for editing in the Dope Sheet
         @returns: boolean
      '''
      
      show_in_front = bool
      '''Make the layer draw in front of objects
         @returns: boolean
      '''
      
      show_points = bool
      '''Draw the points which make up the strokes (for debugging purposes)
         @returns: boolean
      '''
      
      thickness = int
      '''Thickness of annotation strokes
         @returns: int in [1, 10]
      '''
      
      tint_color = float
      '''Color for tinting stroke colors
         @returns: float array of 3 items in [0, 1]
      '''
      
      tint_factor = float
      '''Factor of tinting color
         @returns: float in [0, 1]
      '''
      
      use_annotation_onion_skinning = bool
      '''Display annotation onion skins before and after the current frame
         @returns: boolean
      '''
      
      use_lights = bool
      '''Enable the use of lights on stroke and fill materials
         @returns: boolean
      '''
      
      use_mask_layer = bool
      '''Mask pixels from underlying layers drawing
         @returns: boolean
      '''
      
      use_onion_skinning = bool
      '''Display onion skins before and after the current frame
         @returns: boolean
      '''
      
      use_solo_mode = bool
      '''In Paint mode display only layers with keyframe in current frame
         @returns: boolean
      '''
      
      vertex_paint_opacity = float
      '''Vertex Paint mix factor
         @returns: float in [0, 1]
      '''
      
      viewlayer_render = str
      '''Only include Layer in this View Layer render output (leave blank to include always)
         @returns: string, (never None)
      '''
      
      def clear():
         '''Remove all the grease pencil layer data
         '''
      
         pass

   class GPencilLayerMask(types.bpy_struct):
      '''List of Mask Layers
      '''
   
      hide = bool
      '''Set mask Visibility
         @returns: boolean
      '''
      
      invert = bool
      '''Invert mask
         @returns: boolean
      '''
      
      name = str
      '''Mask layer name
         @returns: string, (never None)
      '''
      
   class GPencilSculptGuide(types.bpy_struct):
      '''Guides for drawing
      '''
   
      angle = float
      '''Direction of lines
         @returns: float in [-6.28319, 6.28319]
      '''
      
      angle_snap = float
      '''Angle snapping
         @returns: float in [-6.28319, 6.28319]
      '''
      
      location = float
      '''Custom reference point for guides
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      reference_object = types.Object
      '''Object used for reference point
         @returns: Object
      '''
      
      reference_point = str
      '''Type of speed guide
         @returns: enum in ['CURSOR', 'CUSTOM', 'OBJECT']
      '''
      
      spacing = float
      '''Guide spacing
         @returns: float in [0, inf]
      '''
      
      type = str
      '''Type of speed guide
         @returns: enum in ['CIRCULAR', 'RADIAL', 'PARALLEL', 'GRID', 'ISO']
      '''
      
      use_guide = bool
      '''Enable speed guides
         @returns: boolean
      '''
      
      use_snapping = bool
      '''Enable snapping to guides angle or spacing options
         @returns: boolean
      '''
      
   class GPencilSculptSettings(types.bpy_struct):
      '''General properties for Grease Pencil stroke sculpting tools
      '''
   
      guide = types.GPencilSculptGuide # (read only)
      '''
         @returns: GPencilSculptGuide
      '''
      
      intersection_threshold = float
      '''Threshold for stroke intersections
         @returns: float in [0, 10]
      '''
      
      lock_axis = str
      '''
         @returns: enum in ['VIEW', 'AXIS_Y', 'AXIS_X', 'AXIS_Z', 'CURSOR']
      '''
      
      multiframe_falloff_curve = types.CurveMapping # (read only)
      '''Custom curve to control falloff of brush effect by Grease Pencil frames
         @returns: CurveMapping
      '''
      
      thickness_primitive_curve = types.CurveMapping # (read only)
      '''Custom curve to control primitive thickness
         @returns: CurveMapping
      '''
      
      use_multiframe_falloff = bool
      '''Use falloff effect when edit in multiframe mode to compute brush effect by frame
         @returns: boolean
      '''
      
      use_scale_thickness = bool
      '''Scale the stroke thickness when transforming strokes
         @returns: boolean
      '''
      
      use_thickness_curve = bool
      '''Use curve to define primitive stroke thickness
         @returns: boolean
      '''
      
   class GPencilStroke(types.bpy_struct):
      '''Freehand curve defining part of a sketch
      '''
   
      aspect = float
      '''
         @returns: float array of 2 items in [0.01, 1]
      '''
      
      bound_box_max = float # (read only)
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      bound_box_min = float # (read only)
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      display_mode = str
      '''Coordinate space that stroke is in
         @returns: enum in ['SCREEN', '3DSPACE', '2DSPACE', '2DIMAGE']
      '''
      
      draw_cyclic = bool
      '''Enable cyclic drawing, closing the stroke
         @returns: boolean
      '''
      
      end_cap_mode = str
      '''Stroke end extreme cap style
         @returns: enum in ['ROUND', 'FLAT']
      '''
      
      groups = types.GpencilVertexGroupElement # (read only)
      '''Weights for the vertex groups this vertex is member of
         @returns: Collection of GpencilVertexGroupElement
      '''
      
      hardness = float
      '''Amount of gradient along section of stroke
         @returns: float in [0.001, 1]
      '''
      
      is_nofill_stroke = bool # (read only)
      '''Special stroke to use as boundary for filling areas
         @returns: boolean
      '''
      
      line_width = int
      '''Thickness of stroke (in pixels)
         @returns: int in [1, 1000]
      '''
      
      material_index = int
      '''Index of material used in this stroke
         @returns: int in [-inf, inf]
      '''
      
      points = types.GPencilStrokePoints # (read only)
      '''Stroke data points
         @returns: GPencilStrokePoints Collection of GPencilStrokePoint
      '''
      
      select = bool
      '''Stroke is selected for viewport editing
         @returns: boolean
      '''
      
      start_cap_mode = str
      '''Stroke start extreme cap style
         @returns: enum in ['ROUND', 'FLAT']
      '''
      
      triangles = types.GPencilTriangle # (read only)
      '''Triangulation data for HQ fill
         @returns: Collection of GPencilTriangle
      '''
      
      uv_rotation = float
      '''Rotation of the UV
         @returns: float in [-inf, inf]
      '''
      
      uv_scale = float
      '''Scale of the UV
         @returns: float in [0.01, 100]
      '''
      
      uv_translation = float
      '''Translation of default UV position
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      vertex_color_fill = float
      '''Color used to mix with fill color to get final color
         @returns: float array of 4 items in [0, 1]
      '''
      
   class GPencilStrokePoint(types.bpy_struct):
      '''Data point for freehand stroke curve
      '''
   
      co = float
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      pressure = float
      '''Pressure of tablet at point when drawing it
         @returns: float in [0, inf]
      '''
      
      select = bool
      '''Point is selected for viewport editing
         @returns: boolean
      '''
      
      strength = float
      '''Color intensity (alpha factor)
         @returns: float in [0, 1]
      '''
      
      uv_factor = float
      '''Internal UV factor
         @returns: float in [0, 1]
      '''
      
      uv_rotation = float
      '''Internal UV factor for dot mode
         @returns: float in [-1.5708, 1.5708]
      '''
      
      vertex_color = float
      '''Color used to mix with point color to get final color
         @returns: float array of 4 items in [0, 1]
      '''
      
   class GPencilStrokePoints(types.bpy_struct):
      '''Collection of grease pencil stroke points
      '''
   
      def add(count, pressure=1.0, strength=1.0):
         '''Add a new grease pencil stroke point
            Arguments:
            @count (int): Number of points to add to the stroke
               in [0, inf]
            @pressure (float): Pressure for newly created points
               in [0, inf], (optional)
            @strength (float): Color intensity (alpha factor) for newly created points
               in [0, 1], (optional)
      
         '''
      
         pass

      def pop(index=-1):
         '''Remove a grease pencil stroke point
            Arguments:
            @index (int): point index
               in [-inf, inf], (optional)
      
         '''
      
         pass

   class GPencilStrokes(types.bpy_struct):
      '''Collection of grease pencil stroke
      '''
   
      def new():
         '''Add a new grease pencil stroke
            @returns (types.GPencilStroke): The newly created stroke
               
         '''
      
         return types.GPencilStroke

      def remove(stroke):
         '''Remove a grease pencil stroke
            Arguments:
            @stroke (GPencilStroke): The stroke to remove
               (never None)
      
         '''
      
         pass

      def close(stroke):
         '''Close a grease pencil stroke adding geometry
            Arguments:
            @stroke (GPencilStroke): The stroke to close
               (never None)
      
         '''
      
         pass

   class GPencilTriangle(types.bpy_struct):
      '''Triangulation data for Grease Pencil fills
      '''
   
      v1 = int # (read only)
      '''First triangle vertex index
         @returns: int in [-inf, inf]
      '''
      
      v2 = int # (read only)
      '''Second triangle vertex index
         @returns: int in [-inf, inf]
      '''
      
      v3 = int # (read only)
      '''Third triangle vertex index
         @returns: int in [-inf, inf]
      '''
      
   class GammaCrossSequence(types.EffectSequence):
      '''Gamma Cross Sequence
      '''
   
      input_1 = types.Sequence
      '''First input for the effect strip
         @returns: Sequence, (never None)
      '''
      
      input_2 = types.Sequence
      '''Second input for the effect strip
         @returns: Sequence, (never None)
      '''
      
      input_count = int # (read only)
      '''
         @returns: int in [0, inf]
      '''
      
   class GaussianBlurSequence(types.EffectSequence):
      '''Sequence strip creating a gaussian blur
      '''
   
      input_1 = types.Sequence
      '''First input for the effect strip
         @returns: Sequence, (never None)
      '''
      
      input_count = int # (read only)
      '''
         @returns: int in [0, inf]
      '''
      
      size_x = float
      '''Size of the blur along X axis
         @returns: float in [0, inf]
      '''
      
      size_y = float
      '''Size of the blur along Y axis
         @returns: float in [0, inf]
      '''
      
   class Gizmo(types.bpy_struct):
      '''Collection of gizmos
      '''
   
      alpha = float
      '''
         @returns: float in [0, 1]
      '''
      
      alpha_highlight = float
      '''
         @returns: float in [0, 1]
      '''
      
      bl_idname = str
      '''
         @returns: string, (never None)
      '''
      
      color = float
      '''
         @returns: float array of 3 items in [0, inf]
      '''
      
      color_highlight = float
      '''
         @returns: float array of 3 items in [0, inf]
      '''
      
      group = types.GizmoGroup # (read only)
      '''Gizmo group this gizmo is a member of
         @returns: GizmoGroup
      '''
      
      hide = bool
      '''
         @returns: boolean
      '''
      
      hide_select = bool
      '''
         @returns: boolean
      '''
      
      is_highlight = bool # (read only)
      '''
         @returns: boolean
      '''
      
      is_modal = bool # (read only)
      '''
         @returns: boolean
      '''
      
      line_width = float
      '''
         @returns: float in [0, inf]
      '''
      
      matrix_basis = float
      '''
         @returns: float multi-dimensional array of 4 * 4 items in [-inf, inf]
      '''
      
      matrix_offset = float
      '''
         @returns: float multi-dimensional array of 4 * 4 items in [-inf, inf]
      '''
      
      matrix_space = float
      '''
         @returns: float multi-dimensional array of 4 * 4 items in [-inf, inf]
      '''
      
      matrix_world = float # (read only)
      '''
         @returns: float multi-dimensional array of 4 * 4 items in [-inf, inf]
      '''
      
      properties = types.GizmoProperties # (read only)
      '''
         @returns: GizmoProperties, (never None)
      '''
      
      scale_basis = float
      '''
         @returns: float in [0, inf]
      '''
      
      select = bool
      '''
         @returns: boolean
      '''
      
      select_bias = float
      '''Depth bias used for selection
         @returns: float in [-inf, inf]
      '''
      
      use_draw_hover = bool
      '''
         @returns: boolean
      '''
      
      use_draw_modal = bool
      '''Draw while dragging
         @returns: boolean
      '''
      
      use_draw_offset_scale = bool
      '''Scale the offset matrix (use to apply screen-space offset)
         @returns: boolean
      '''
      
      use_draw_scale = bool
      '''Use scale when calculating the matrix
         @returns: boolean
      '''
      
      use_draw_value = bool
      '''Show an indicator for the current value while dragging
         @returns: boolean
      '''
      
      use_event_handle_all = bool
      '''When highlighted, do not pass events through to be handled by other keymaps
         @returns: boolean
      '''
      
      use_grab_cursor = bool
      '''
         @returns: boolean
      '''
      
      use_operator_tool_properties = bool
      '''Merge active tool properties on activation (does not overwrite existing)
         @returns: boolean
      '''
      
      use_select_background = bool
      '''Don't write into the depth buffer
         @returns: boolean
      '''
      
      def draw(context):
         '''
            Arguments:
            @context (Context): (never None)
      
         '''
      
         pass

      def draw_select(context, select_id=0):
         '''
            Arguments:
            @context (Context): (never None)
            @select_id (int): in [0, inf], (optional)
      
         '''
      
         pass

      def test_select(context, location):
         '''
            Arguments:
            @context (Context): (never None)
            @location (int): Region coordinates
               array of 2 items in [-inf, inf], (never None)
      
            @returns (int): Use -1 to skip this gizmo
               in [-1, inf]
         '''
      
         return int

      def modal(context, event, tweak):
         '''
            Arguments:
            @context (Context): (never None)
            @event (Event): (never None)
            @tweak (str): set in {'PRECISE', 'SNAP'}
      
            @returns (str): set in {'RUNNING_MODAL', 'CANCELLED', 'FINISHED', 'PASS_THROUGH', 'INTERFACE'}
         '''
      
         return str

      def setup():
         '''
         '''
      
         pass

      def invoke(context, event):
         '''
            Arguments:
            @context (Context): (never None)
            @event (Event): (never None)
      
            @returns (str): set in {'RUNNING_MODAL', 'CANCELLED', 'FINISHED', 'PASS_THROUGH', 'INTERFACE'}
         '''
      
         return str

      def exit(context, cancel):
         '''
            Arguments:
            @context (Context): (never None)
            @cancel (bool): 
      
         '''
      
         pass

      def select_refresh():
         '''
         '''
      
         pass

      def draw_preset_box(matrix, select_id=-1):
         '''Draw a box
            Arguments:
            @matrix (float): The matrix to transform
               multi-dimensional array of 4 * 4 items in [-inf, inf]
            @select_id (int): in [-1, inf], (optional)
      
         '''
      
         pass

      def draw_preset_arrow(matrix, axis='POS_Z', select_id=-1):
         '''Draw a box
            Arguments:
            @matrix (float): The matrix to transform
               multi-dimensional array of 4 * 4 items in [-inf, inf]
            @axis (str): Arrow Orientation
               in ['POS_X', 'POS_Y', 'POS_Z', 'NEG_X', 'NEG_Y', 'NEG_Z'], (optional)
            @select_id (int): in [-1, inf], (optional)
      
         '''
      
         pass

      def draw_preset_circle(matrix, axis='POS_Z', select_id=-1):
         '''Draw a box
            Arguments:
            @matrix (float): The matrix to transform
               multi-dimensional array of 4 * 4 items in [-inf, inf]
            @axis (str): Arrow Orientation
               in ['POS_X', 'POS_Y', 'POS_Z', 'NEG_X', 'NEG_Y', 'NEG_Z'], (optional)
            @select_id (int): in [-1, inf], (optional)
      
         '''
      
         pass

      def draw_preset_facemap(object, face_map, select_id=-1):
         '''Draw the face-map of a mesh object
            Arguments:
            @object (Object): Object
               (never None)
            @face_map (int): in [0, inf]
            @select_id (int): in [-1, inf], (optional)
      
         '''
      
         pass

      def target_set_prop(target, data, property, index=-1):
         '''
            Arguments:
            @target (str): Target property
               (never None)
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @index (int): in [-1, inf], (optional)
      
         '''
      
         pass

      def target_set_operator(operator, index=0):
         '''Operator to run when activating the gizmo (overrides property targets)
            Arguments:
            @operator (str): Target operator
               (never None)
            @index (int): in [0, 255], (optional)
      
            @returns (types.OperatorProperties): Operator properties to fill in
               
         '''
      
         return types.OperatorProperties

      def target_is_valid(property):
         '''
            Arguments:
            @property (str): Property identifier
               (never None)
      
            @returns (bool): 
         '''
      
         return bool

      #unable to describe the 'draw_custom_shape' method due to internal error

      def new_custom_shape(type, verts):
         '''Create a new shape that can be passed to bpy.types.Gizmo.draw_custom_shape.
            
            Arguments:
            @type (string): The type of shape to create in (POINTS, LINES, TRIS, LINE_STRIP).
            @verts (sequence of of 2D or 3D coordinates.): Coordinates.
            @display_name (Callable that takes a string and returns a string.): Optional callback that takes the full path, returns the name to display.
      
            @returns (Undefined (it may change).): The newly created shape.
         '''
      
         return Undefined (it may change).
      
   class GizmoGroup(types.bpy_struct):
      '''Storage of an operator being executed, or registered after execution
      '''
   
      bl_idname = str
      '''
         @returns: string, (never None)
      '''
      
      bl_label = str
      '''
         @returns: string, (never None)
      '''
      
      bl_options = str
      '''Options for this operator type
         @returns: enum set in {'3D', 'SCALE', 'DEPTH_3D', 'SELECT', 'PERSISTENT', 'SHOW_MODAL_ALL', 'TOOL_INIT', 'VR_REDRAWS'}
      '''
      
      bl_owner_id = str
      '''
         @returns: string, (never None)
      '''
      
      bl_region_type = str
      '''The region where the panel is going to be used in
         @returns: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW', 'HUD', 'NAVIGATION_BAR', 'EXECUTE', 'FOOTER', 'TOOL_HEADER']
      '''
      
      bl_space_type = str
      '''The space where the panel is going to be used in
         @returns: enum in ['EMPTY', 'VIEW_3D', 'IMAGE_EDITOR', 'NODE_EDITOR', 'SEQUENCE_EDITOR', 'CLIP_EDITOR', 'DOPESHEET_EDITOR', 'GRAPH_EDITOR', 'NLA_EDITOR', 'TEXT_EDITOR', 'CONSOLE', 'INFO', 'TOPBAR', 'STATUSBAR', 'OUTLINER', 'PROPERTIES', 'FILE_BROWSER', 'PREFERENCES']
      '''
      
      gizmos = types.Gizmos # (read only)
      '''List of gizmos in the Gizmo Map
         @returns: Gizmos Collection of Gizmo
      '''
      
      has_reports = bool # (read only)
      '''GizmoGroup has a set of reports (warnings and errors) from last execution
         @returns: boolean
      '''
      
      name = str # (read only)
      '''
         @returns: string, (never None)
      '''
      
      @classmethod
      def poll(context):
         '''Test if the gizmo group can be called or not
            Arguments:
            @context (Context): (never None)
      
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def setup_keymap(keyconfig):
         '''Initialize keymaps for this gizmo group, use fallback keymap when not present
            Arguments:
            @keyconfig (KeyConfig): (never None)
      
            @returns (types.KeyMap): (never None)
         '''
      
         return types.KeyMap

      def setup(context):
         '''Create gizmos function for the gizmo group
            Arguments:
            @context (Context): (never None)
      
         '''
      
         pass

      def refresh(context):
         '''Refresh data (called on common state changes such as selection)
            Arguments:
            @context (Context): (never None)
      
         '''
      
         pass

      def draw_prepare(context):
         '''Run before each redraw
            Arguments:
            @context (Context): (never None)
      
         '''
      
         pass

      def invoke_prepare(context, gizmo):
         '''Run before invoke
            Arguments:
            @context (Context): (never None)
            @gizmo (Gizmo): (never None)
      
         '''
      
         pass

   class GizmoGroupProperties(types.bpy_struct):
      '''Input properties of a Gizmo Group
      '''
   
   class GizmoProperties(types.bpy_struct):
      '''Input properties of an Gizmo
      '''
   
   class Gizmos(types.bpy_struct):
      '''Collection of gizmos
      '''
   
      def new(type):
         '''Add gizmo
            Arguments:
            @type (str): Gizmo identifier
               (never None)
      
            @returns (types.Gizmo): New gizmo
               
         '''
      
         return types.Gizmo

      def remove(gizmo):
         '''Delete gizmo
            Arguments:
            @gizmo (Gizmo): New gizmo
               (never None)
      
         '''
      
         pass

      def clear():
         '''Delete all gizmos
         '''
      
         pass

   class GlowSequence(types.EffectSequence):
      '''Sequence strip creating a glow effect
      '''
   
      blur_radius = float
      '''Radius of glow effect
         @returns: float in [0.5, 20]
      '''
      
      boost_factor = float
      '''Brightness multiplier
         @returns: float in [0, 10]
      '''
      
      clamp = float
      '''Brightness limit of intensity
         @returns: float in [0, 1]
      '''
      
      input_1 = types.Sequence
      '''First input for the effect strip
         @returns: Sequence, (never None)
      '''
      
      input_count = int # (read only)
      '''
         @returns: int in [0, inf]
      '''
      
      quality = int
      '''Accuracy of the blur effect
         @returns: int in [1, 5]
      '''
      
      threshold = float
      '''Minimum intensity to trigger a glow
         @returns: float in [0, 1]
      '''
      
      use_only_boost = bool
      '''Show the glow buffer only
         @returns: boolean
      '''
      
   class GpPaint(types.Paint):
      '''
      '''
   
      color_mode = str
      '''Paint Mode
         @returns: enum in ['MATERIAL', 'VERTEXCOLOR']
      '''
      
   class GpSculptPaint(types.Paint):
      '''
      '''
   
   class GpVertexPaint(types.Paint):
      '''
      '''
   
   class GpWeightPaint(types.Paint):
      '''
      '''
   
   class GpencilModifier(types.bpy_struct):
      '''Modifier affecting the grease pencil object
      '''
   
      name = str
      '''Modifier name
         @returns: string, (never None)
      '''
      
      show_expanded = bool
      '''Set modifier expanded in the user interface
         @returns: boolean
      '''
      
      show_in_editmode = bool
      '''Display modifier in Edit mode
         @returns: boolean
      '''
      
      show_render = bool
      '''Use modifier during render
         @returns: boolean
      '''
      
      show_viewport = bool
      '''Display modifier in viewport
         @returns: boolean
      '''
      
      type = str # (read only)
      '''
         @returns: enum in ['GP_ARRAY', 'GP_BUILD', 'GP_MIRROR', 'GP_MULTIPLY', 'GP_SIMPLIFY', 'GP_SUBDIV', 'GP_ARMATURE', 'GP_HOOK', 'GP_LATTICE', 'GP_NOISE', 'GP_OFFSET', 'GP_SMOOTH', 'GP_THICK', 'GP_TIME', 'GP_COLOR', 'GP_OPACITY', 'GP_TINT']
      '''
      
   class GpencilVertexGroupElement(types.bpy_struct):
      '''Weight value of a vertex in a vertex group
      '''
   
      group = int # (read only)
      '''
         @returns: int in [0, inf]
      '''
      
      weight = float
      '''Vertex Weight
         @returns: float in [0, 1]
      '''
      
   class GreasePencil(types.ID):
      '''Freehand annotation sketchbook
      '''
   
      after_color = float
      '''Base color for ghosts after the active frame
         @returns: float array of 3 items in [0, 1]
      '''
      
      animation_data = types.AnimData # (read only)
      '''Animation data for this data-block
         @returns: AnimData
      '''
      
      before_color = float
      '''Base color for ghosts before the active frame
         @returns: float array of 3 items in [0, 1]
      '''
      
      edit_line_color = float
      '''Color for editing line
         @returns: float array of 4 items in [0, 1]
      '''
      
      ghost_after_range = int
      '''Maximum number of frames to show after current frame (0 = don't show any frames after current)
         @returns: int in [0, 120]
      '''
      
      ghost_before_range = int
      '''Maximum number of frames to show before current frame (0 = don't show any frames before current)
         @returns: int in [0, 120]
      '''
      
      grid = types.GreasePencilGrid # (read only)
      '''Settings for grid and canvas in the 3D viewport
         @returns: GreasePencilGrid, (never None)
      '''
      
      is_annotation = bool # (read only)
      '''Current datablock is an annotation
         @returns: boolean
      '''
      
      is_stroke_paint_mode = bool # (read only)
      '''Draw Grease Pencil strokes on click/drag
         @returns: boolean
      '''
      
      is_stroke_sculpt_mode = bool # (read only)
      '''Sculpt Grease Pencil strokes instead of viewport data
         @returns: boolean
      '''
      
      is_stroke_vertex_mode = bool # (read only)
      '''Grease Pencil vertex paint
         @returns: boolean
      '''
      
      is_stroke_weight_mode = bool # (read only)
      '''Grease Pencil weight paint
         @returns: boolean
      '''
      
      layers = types.GreasePencilLayers # (read only)
      '''
         @returns: GreasePencilLayers Collection of GPencilLayer
      '''
      
      materials = types.IDMaterials # (read only)
      '''
         @returns: IDMaterials Collection of Material
      '''
      
      onion_factor = float
      '''Change fade opacity of displayed onion frames
         @returns: float in [0, 1]
      '''
      
      onion_keyframe_type = str
      '''Type of keyframe (for filtering)
         @returns: enum in ['ALL', 'KEYFRAME', 'BREAKDOWN', 'MOVING_HOLD', 'EXTREME', 'JITTER']
      '''
      
      onion_mode = str
      '''Mode to display frames
         @returns: enum in ['ABSOLUTE', 'RELATIVE', 'SELECTED']
      '''
      
      pixel_factor = float
      '''Scale conversion factor for pixel size (use larger values for thicker lines)
         @returns: float in [0.1, 30]
      '''
      
      stroke_depth_order = str
      '''Defines how the strokes are ordered in 3D space (for objects not displayed 'In Front')
         @returns: enum in ['2D', '3D']
      '''
      
      stroke_thickness_space = str
      '''Set stroke thickness in screen space or world space
         @returns: enum in ['WORLDSPACE', 'SCREENSPACE']
      '''
      
      use_autolock_layers = bool
      '''Lock automatically all layers except active one to avoid accidental changes
         @returns: boolean
      '''
      
      use_ghost_custom_colors = bool
      '''Use custom colors for ghost frames
         @returns: boolean
      '''
      
      use_ghosts_always = bool
      '''Ghosts are shown in renders and animation playback. Useful for special effects (e.g. motion blur)
         @returns: boolean
      '''
      
      use_multiedit = bool
      '''Edit strokes from multiple grease pencil keyframes at the same time (keyframes must be selected to be included)
         @returns: boolean
      '''
      
      use_onion_fade = bool
      '''Display onion keyframes with a fade in color transparency
         @returns: boolean
      '''
      
      use_onion_loop = bool
      '''Display onion keyframes for looping animations
         @returns: boolean
      '''
      
      use_onion_skinning = bool
      '''Show ghosts of the keyframes before and after the current frame
         @returns: boolean
      '''
      
      use_stroke_edit_mode = bool
      '''Edit Grease Pencil strokes instead of viewport data
         @returns: boolean
      '''
      
      zdepth_offset = float
      '''Offset amount when drawing in surface mode
         @returns: float in [0, 1]
      '''
      
      def clear():
         '''Remove all the Grease Pencil data
         '''
      
         pass

   class GreasePencilGrid(types.bpy_struct):
      '''Settings for grid and canvas in 3D viewport
      '''
   
      color = float
      '''Color for grid lines
         @returns: float array of 3 items in [0, 1]
      '''
      
      lines = int
      '''Number of subdivisions in each side of symmetry line
         @returns: int in [0, 32767]
      '''
      
      offset = float
      '''Offset of the canvas
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      scale = float
      '''Grid scale
         @returns: float array of 2 items in [0.01, inf]
      '''
      
   class GreasePencilLayers(types.bpy_struct):
      '''Collection of grease pencil layers
      '''
   
      active = types.GPencilLayer
      '''Active grease pencil layer
         @returns: GPencilLayer
      '''
      
      active_index = int
      '''Index of active grease pencil layer
         @returns: int in [0, inf]
      '''
      
      active_note = str
      '''Note/Layer to add annotation strokes to
         @returns: enum in ['DEFAULT']
      '''
      
      def new(name, set_active=True):
         '''Add a new grease pencil layer
            Arguments:
            @name (str): Name of the layer
               (never None)
            @set_active (bool): Set the newly created layer to the active layer
               (optional)
      
            @returns (types.GPencilLayer): The newly created layer
               
         '''
      
         return types.GPencilLayer

      def remove(layer):
         '''Remove a grease pencil layer
            Arguments:
            @layer (GPencilLayer): The layer to remove
               (never None)
      
         '''
      
         pass

      def move(layer, type):
         '''Move a grease pencil layer in the layer stack
            Arguments:
            @layer (GPencilLayer): The layer to move
               (never None)
            @type (str): Direction of movement
               in ['UP', 'DOWN']
      
         '''
      
         pass

   class GreasePencilMaskLayers(types.bpy_struct):
      '''Collection of grease pencil masking layers
      '''
   
      active_mask_index = int
      '''Active index in layer mask array
         @returns: int in [0, inf]
      '''
      
      def add(layer):
         '''Add a layer to mask list
            Arguments:
            @layer (GPencilLayer): Layer to add as mask
               (never None)
      
         '''
      
         pass

      def remove(mask):
         '''Remove a layer from mask list
            Arguments:
            @mask (GPencilLayerMask): Mask to remove
               (never None)
      
         '''
      
         pass

   class Header(types.bpy_struct):
      '''Editor header containing UI elements
      '''
   
      bl_idname = str
      '''If this is set, the header gets a custom ID, otherwise it takes the name of the class used to define the panel; for example, if the class name is "OBJECT_HT_hello", and bl_idname is not set by the script, then bl_idname = "OBJECT_HT_hello"
         @returns: string, (never None)
      '''
      
      bl_region_type = str
      '''The region where the header is going to be used in (defaults to header region)
         @returns: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW', 'HUD', 'NAVIGATION_BAR', 'EXECUTE', 'FOOTER', 'TOOL_HEADER']
      '''
      
      bl_space_type = str
      '''The space where the header is going to be used in
         @returns: enum in ['EMPTY', 'VIEW_3D', 'IMAGE_EDITOR', 'NODE_EDITOR', 'SEQUENCE_EDITOR', 'CLIP_EDITOR', 'DOPESHEET_EDITOR', 'GRAPH_EDITOR', 'NLA_EDITOR', 'TEXT_EDITOR', 'CONSOLE', 'INFO', 'TOPBAR', 'STATUSBAR', 'OUTLINER', 'PROPERTIES', 'FILE_BROWSER', 'PREFERENCES']
      '''
      
      layout = types.UILayout # (read only)
      '''Structure of the header in the UI
         @returns: UILayout
      '''
      
      def draw(context):
         '''Draw UI elements into the header UI layout
            Arguments:
            @context (Context): 
      
         '''
      
         pass

      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class Histogram(types.bpy_struct):
      '''Statistical view of the levels of color in an image
      '''
   
      mode = str
      '''Channels to display when drawing the histogram
         @returns: enum in ['LUMA', 'RGB', 'R', 'G', 'B', 'A']
      '''
      
      show_line = bool
      '''Display lines rather than filled shapes
         @returns: boolean
      '''
      
   class HookGpencilModifier(types.GpencilModifier):
      '''Hook modifier to modify the location of stroke points
      '''
   
      center = float
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      falloff_curve = types.CurveMapping # (read only)
      '''Custom light falloff curve
         @returns: CurveMapping
      '''
      
      falloff_radius = float
      '''If not zero, the distance from the hook where influence ends
         @returns: float in [0, inf]
      '''
      
      falloff_type = str
      '''
         @returns: enum in ['NONE', 'CURVE', 'SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR', 'CONSTANT']
      '''
      
      invert_layer_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_layers = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_material_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_materials = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_vertex = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      layer = str
      '''Layer name
         @returns: string, (never None)
      '''
      
      layer_pass = int
      '''Layer pass index
         @returns: int in [0, 100]
      '''
      
      material = str
      '''Material name
         @returns: string, (never None)
      '''
      
      matrix_inverse = float
      '''Reverse the transformation between this object and its target
         @returns: float multi-dimensional array of 4 * 4 items in [-inf, inf]
      '''
      
      object = types.Object
      '''Parent Object for hook, also recalculates and clears offset
         @returns: Object
      '''
      
      pass_index = int
      '''Pass index
         @returns: int in [0, 100]
      '''
      
      strength = float
      '''Relative force of the hook
         @returns: float in [0, 1]
      '''
      
      subtarget = str
      '''Name of Parent Bone for hook (if applicable), also recalculates and clears offset
         @returns: string, (never None)
      '''
      
      use_falloff_uniform = bool
      '''Compensate for non-uniform object scale
         @returns: boolean
      '''
      
      vertex_group = str
      '''Vertex group name for modulating the deform
         @returns: string, (never None)
      '''
      
   class HookModifier(types.Modifier):
      '''Hook modifier to modify the location of vertices
      '''
   
      center = float
      '''Center of the hook, used for falloff and display
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      falloff_curve = types.CurveMapping # (read only)
      '''Custom falloff curve
         @returns: CurveMapping
      '''
      
      falloff_radius = float
      '''If not zero, the distance from the hook where influence ends
         @returns: float in [0, inf]
      '''
      
      falloff_type = str
      '''
         @returns: enum in ['NONE', 'CURVE', 'SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR', 'CONSTANT']
      '''
      
      invert_vertex_group = bool
      '''Invert vertex group influence
         @returns: boolean
      '''
      
      matrix_inverse = float
      '''Reverse the transformation between this object and its target
         @returns: float multi-dimensional array of 4 * 4 items in [-inf, inf]
      '''
      
      object = types.Object
      '''Parent Object for hook, also recalculates and clears offset
         @returns: Object
      '''
      
      strength = float
      '''Relative force of the hook
         @returns: float in [0, 1]
      '''
      
      subtarget = str
      '''Name of Parent Bone for hook (if applicable), also recalculates and clears offset
         @returns: string, (never None)
      '''
      
      use_falloff_uniform = bool
      '''Compensate for non-uniform object scale
         @returns: boolean
      '''
      
      vertex_group = str
      '''Name of Vertex Group which determines influence of modifier per point
         @returns: string, (never None)
      '''
      
      vertex_indices = int # (read only)
      '''Indices of vertices bound to the modifier. For bezier curves, handles count as additional vertices
         @returns: int array of 32 items in [0, inf]
      '''
      
      def vertex_indices_set(indices):
         '''Validates and assigns the array of vertex indices bound to the modifier
            Arguments:
            @indices (int): Vertex Indices
               array of 32 items in [-inf, inf]
      
         '''
      
         pass

   class HueCorrectModifier(types.SequenceModifier):
      '''Hue correction modifier for sequence strip
      '''
   
      curve_mapping = types.CurveMapping # (read only)
      '''
         @returns: CurveMapping
      '''
      
   class ID(types.bpy_struct):
      '''Base type for data-blocks, defining a unique name, linking from other libraries and garbage collection
      '''
   
      is_embedded_data = bool # (read only)
      '''This data-block is not an independent one, but is actually a sub-data of another ID (typical example: root node trees or master collections)
         @returns: boolean
      '''
      
      is_evaluated = bool # (read only)
      '''Whether this ID is runtime-only, evaluated data-block, or actual data from .blend file
         @returns: boolean
      '''
      
      is_library_indirect = bool # (read only)
      '''Is this ID block linked indirectly
         @returns: boolean
      '''
      
      library = types.Library # (read only)
      '''Library file the data-block is linked from
         @returns: Library
      '''
      
      name = str
      '''Unique data-block ID name
         @returns: string, (never None)
      '''
      
      name_full = str # (read only)
      '''Unique data-block ID name, including library one is any
         @returns: string, (never None)
      '''
      
      original = types.ID # (read only)
      '''Actual data-block from .blend file (Main database) that generated that evaluated one
         @returns: ID
      '''
      
      override_library = types.IDOverrideLibrary # (read only)
      '''Library override data
         @returns: IDOverrideLibrary
      '''
      
      preview = types.ImagePreview # (read only)
      '''Preview image and icon of this data-block (None if not supported for this type of data)
         @returns: ImagePreview
      '''
      
      tag = bool
      '''Tools can use this to tag data for their own purposes (initial state is undefined)
         @returns: boolean
      '''
      
      use_fake_user = bool
      '''Save this data-block even if it has no users
         @returns: boolean
      '''
      
      users = int # (read only)
      '''Number of times this data-block is referenced
         @returns: int in [0, inf]
      '''
      
      def evaluated_get(depsgraph):
         '''Get corresponding evaluated ID from the given dependency graph
            Arguments:
            @depsgraph (Depsgraph): Dependency graph to perform lookup in
               (never None)
      
            @returns (types.ID): New copy of the ID
               
         '''
      
         return types.ID

      def copy():
         '''Create a copy of this data-block (not supported for all data-blocks)
            @returns (types.ID): New copy of the ID
               
         '''
      
         return types.ID

      def override_create(remap_local_usages=False):
         '''Create an overridden local copy of this linked data-block (not supported for all data-blocks)
            Arguments:
            @remap_local_usages (bool): Whether local usages of the linked ID should be remapped to the new library override of it
               (optional)
      
            @returns (types.ID): New overridden local copy of the ID
               
         '''
      
         return types.ID

      def user_clear():
         '''Clear the user count of a data-block so its not saved, on reload the data will be removed
         '''
      
         pass

      def user_remap(new_id):
         '''Replace all usage in the .blend file of this ID by new given one
            Arguments:
            @new_id (ID): New ID to use
               (never None)
      
         '''
      
         pass

      def make_local(clear_proxy=True):
         '''Make this datablock local, return local one (may be a copy of the original, in case it is also indirectly used)
            Arguments:
            @clear_proxy (bool): Whether to clear proxies (the default behavior, note that if object has to be duplicated to be made local, proxies are always cleared)
               (optional)
      
            @returns (types.ID): This ID, or the new ID if it was copied
               
         '''
      
         return types.ID

      def user_of_id(id):
         '''Count the number of times that ID uses/references given one
            Arguments:
            @id (ID): ID to count usages
               (never None)
      
            @returns (int): Number of usages/references of given id by current data-block
               in [0, inf]
         '''
      
         return int

      def animation_data_create():
         '''Create animation data to this ID, note that not all ID types support this
            @returns (types.AnimData): New animation data or NULL
               
         '''
      
         return types.AnimData

      def animation_data_clear():
         '''Clear animation on this this ID
         '''
      
         pass

      def update_tag(refresh={}):
         '''Tag the ID to update its display data, e.g. when calling :class:`bpy.types.Scene.update`
            Arguments:
            @refresh (str): Type of updates to perform
               set in {'OBJECT', 'DATA', 'TIME'}, (optional)
      
         '''
      
         pass

   class IDMaterials(types.bpy_struct):
      '''Collection of materials
      '''
   
      def append(material):
         '''Add a new material to the data-block
            Arguments:
            @material (Material): Material to add
               
      
         '''
      
         pass

      def pop(index=-1):
         '''Remove a material from the data-block
            Arguments:
            @index (int): Index of material to remove
               in [-32766, 32766], (optional)
      
            @returns (types.Material): Material to remove
               
         '''
      
         return types.Material

      def clear():
         '''Remove all materials from the data-block
         '''
      
         pass

   class IDOverrideLibrary(types.bpy_struct):
      '''Struct gathering all data needed by overridden linked IDs
      '''
   
      auto_generate = bool
      '''Automatically generate overriding operations by detecting changes in properties
         @returns: boolean
      '''
      
      properties = types.IDOverrideLibraryProperty # (read only)
      '''List of overridden properties
         @returns: Collection of IDOverrideLibraryProperty
      '''
      
      reference = types.ID # (read only)
      '''Linked ID used as reference by this override
         @returns: ID
      '''
      
   class IDOverrideLibraryProperty(types.bpy_struct):
      '''Description of an overridden property
      '''
   
      operations = types.IDOverrideLibraryPropertyOperation # (read only)
      '''List of overriding operations for a property
         @returns: Collection of IDOverrideLibraryPropertyOperation
      '''
      
      rna_path = str # (read only)
      '''RNA path leading to that property, from owning ID
         @returns: string, (never None)
      '''
      
   class IDOverrideLibraryPropertyOperation(types.bpy_struct):
      '''Description of an override operation over an overridden property
      '''
   
      flag = str # (read only)
      '''Optional flags (NOT USED)
         @returns: enum in ['MANDATORY', 'LOCKED']
      '''
      
      operation = str # (read only)
      '''What override operation is performed
         @returns: enum in ['NOOP', 'REPLACE', 'DIFF_ADD', 'DIFF_SUB', 'FACT_MULTIPLY', 'INSERT_AFTER', 'INSERT_BEFORE']
      '''
      
      subitem_local_index = int # (read only)
      '''Used to handle insertions into collection
         @returns: int in [-1, inf]
      '''
      
      subitem_local_name = str # (read only)
      '''Used to handle insertions into collection
         @returns: string, (never None)
      '''
      
      subitem_reference_index = int # (read only)
      '''Used to handle insertions into collection
         @returns: int in [-1, inf]
      '''
      
      subitem_reference_name = str # (read only)
      '''Used to handle insertions into collection
         @returns: string, (never None)
      '''
      
   class IDPropertyWrapPtr(types.bpy_struct):
      '''
      '''
   
   class IKParam(types.bpy_struct):
      '''Base type for IK solver parameters
      '''
   
      ik_solver = str # (read only)
      '''IK solver for which these parameters are defined
         @returns: enum in ['LEGACY', 'ITASC']
      '''
      
   class IMAGE_UL_render_slots(types.UIList):
      '''
      '''
   
      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      def draw_item(self, _context, layout, _data, item, _icon, _active_data, _active_propname, _index):
         
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class IMAGE_UL_udim_tiles(types.UIList):
      '''
      '''
   
      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      def draw_item(self, _context, layout, _data, item, _icon, _active_data, _active_propname, _index):
         
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class Image(types.ID):
      '''Image data-block referencing an external or packed image
      '''
   
      alpha_mode = str
      '''Representation of alpha in the image file, to convert to and from when saving and loading the image
         @returns: enum in ['STRAIGHT', 'PREMUL', 'CHANNEL_PACKED', 'NONE']
      '''
      
      bindcode = int # (read only)
      '''OpenGL bindcode
         @returns: int in [0, inf]
      '''
      
      channels = int # (read only)
      '''Number of channels in pixels buffer
         @returns: int in [0, inf]
      '''
      
      colorspace_settings = types.ColorManagedInputColorspaceSettings # (read only)
      '''Input color space settings
         @returns: ColorManagedInputColorspaceSettings
      '''
      
      depth = int # (read only)
      '''Image bit depth
         @returns: int in [0, inf]
      '''
      
      display_aspect = float
      '''Display Aspect for this image, does not affect rendering
         @returns: float array of 2 items in [0.1, inf]
      '''
      
      file_format = str
      '''Format used for re-saving this file
         @returns: enum in ['BMP', 'IRIS', 'PNG', 'JPEG', 'JPEG2000', 'TARGA', 'TARGA_RAW', 'CINEON', 'DPX', 'OPEN_EXR_MULTILAYER', 'OPEN_EXR', 'HDR', 'TIFF', 'AVI_JPEG', 'AVI_RAW', 'FFMPEG']
      '''
      
      filepath = str
      '''Image/Movie file name
         @returns: string, (never None)
      '''
      
      filepath_raw = str
      '''Image/Movie file name (without data refreshing)
         @returns: string, (never None)
      '''
      
      frame_duration = int # (read only)
      '''Duration (in frames) of the image (1 when not a video/sequence)
         @returns: int in [0, inf]
      '''
      
      generated_color = float
      '''Fill color for the generated image
         @returns: float array of 4 items in [0, inf]
      '''
      
      generated_height = int
      '''Generated image height
         @returns: int in [1, 65536]
      '''
      
      generated_type = str
      '''Generated image type
         @returns: enum in ['BLANK', 'UV_GRID', 'COLOR_GRID']
      '''
      
      generated_width = int
      '''Generated image width
         @returns: int in [1, 65536]
      '''
      
      has_data = bool # (read only)
      '''True if the image data is loaded into memory
         @returns: boolean
      '''
      
      is_dirty = bool # (read only)
      '''Image has changed and is not saved
         @returns: boolean
      '''
      
      is_float = bool # (read only)
      '''True if this image is stored in float buffer
         @returns: boolean
      '''
      
      is_multiview = bool # (read only)
      '''Image has more than one view
         @returns: boolean
      '''
      
      is_stereo_3d = bool # (read only)
      '''Image has left and right views
         @returns: boolean
      '''
      
      packed_file = types.PackedFile # (read only)
      '''First packed file of the image
         @returns: PackedFile
      '''
      
      packed_files = types.ImagePackedFile # (read only)
      '''Collection of packed images
         @returns: Collection of ImagePackedFile
      '''
      
      pixels = float
      '''Image pixels in floating point values
         @returns: float in [-inf, inf]
      '''
      
      render_slots = types.RenderSlots # (read only)
      '''Render slots of the image
         @returns: RenderSlots Collection of RenderSlot
      '''
      
      resolution = float
      '''X/Y pixels per meter
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      size = int # (read only)
      '''Width and height in pixels, zero when image data cant be loaded
         @returns: int array of 2 items in [-inf, inf]
      '''
      
      source = str
      '''Where the image comes from
         @returns: enum in ['FILE', 'SEQUENCE', 'MOVIE', 'GENERATED', 'VIEWER', 'TILED']
      '''
      
      stereo_3d_format = types.Stereo3dFormat # (read only)
      '''Settings for stereo 3d
         @returns: Stereo3dFormat, (never None)
      '''
      
      tiles = types.UDIMTiles # (read only)
      '''Tiles of the image
         @returns: UDIMTiles Collection of UDIMTile
      '''
      
      type = str # (read only)
      '''How to generate the image
         @returns: enum in ['IMAGE', 'MULTILAYER', 'UV_TEST', 'RENDER_RESULT', 'COMPOSITING']
      '''
      
      use_deinterlace = bool
      '''Deinterlace movie file on load
         @returns: boolean
      '''
      
      use_generated_float = bool
      '''Generate floating point buffer
         @returns: boolean
      '''
      
      use_half_precision = bool
      '''Use 16bits per channel to lower the memory usage during rendering
         @returns: boolean
      '''
      
      use_multiview = bool
      '''Use Multiple Views (when available)
         @returns: boolean
      '''
      
      use_view_as_render = bool
      '''Apply render part of display transformation when displaying this image on the screen
         @returns: boolean
      '''
      
      views_format = str
      '''Mode to load image views
         @returns: enum in ['INDIVIDUAL', 'STEREO_3D']
      '''
      
      def save_render(filepath, scene=None):
         '''Save image to a specific path using a scenes render settings
            Arguments:
            @filepath (str): Save path
               (never None)
            @scene (Scene): Scene to take image parameters from
               (optional)
      
         '''
      
         pass

      def save():
         '''Save image to its source path
         '''
      
         pass

      def pack(data="", data_len=0):
         '''Pack an image as embedded data into the .blend file
            Arguments:
            @data (str): Raw data (bytes, exact content of the embedded file)
               (optional, never None)
            @data_len (int): length of given data (mandatory if data is provided)
               in [0, inf], (optional)
      
         '''
      
         pass

      def unpack(method='USE_LOCAL'):
         '''Save an image packed in the .blend file to disk
            Arguments:
            @method (str): How to unpack
               in ['REMOVE', 'USE_LOCAL', 'WRITE_LOCAL', 'USE_ORIGINAL', 'WRITE_ORIGINAL'], (optional)
      
         '''
      
         pass

      def reload():
         '''Reload the image from its source path
         '''
      
         pass

      def update():
         '''Update the display image from the floating point buffer
         '''
      
         pass

      def scale(width, height):
         '''Scale the image in pixels
            Arguments:
            @width (int): Width
               in [1, 10000]
            @height (int): Height
               in [1, 10000]
      
         '''
      
         pass

      def gl_touch(frame=0):
         '''Delay the image from being cleaned from the cache due inactivity
            Arguments:
            @frame (int): Frame of image sequence or movie
               in [0, inf], (optional)
      
            @returns (int): OpenGL error value
               in [-inf, inf]
         '''
      
         return int

      def gl_load(frame=0):
         '''Load the image into an OpenGL texture. On success, image.bindcode will contain the OpenGL texture bindcode. Colors read from the texture will be in scene linear color space and have premultiplied or straight alpha matching the image alpha mode
            Arguments:
            @frame (int): Frame of image sequence or movie
               in [0, inf], (optional)
      
            @returns (int): OpenGL error value
               in [-inf, inf]
         '''
      
         return int

      def gl_free():
         '''Free the image from OpenGL graphics memory
         '''
      
         pass

      def filepath_from_user(image_user=None):
         '''Return the absolute path to the filepath of an image frame specified by the image user
            Arguments:
            @image_user (ImageUser): Image user of the image to get filepath for
               (optional)
      
            @returns (str): The resulting filepath from the image and it's user
               (never None)
         '''
      
         return str

      def buffers_free():
         '''Free the image buffers from memory
         '''
      
         pass

   class ImageFormatSettings(types.bpy_struct):
      '''Settings for image formats
      '''
   
      cineon_black = int
      '''Log conversion reference blackpoint
         @returns: int in [0, 1024]
      '''
      
      cineon_gamma = float
      '''Log conversion gamma
         @returns: float in [0, 10]
      '''
      
      cineon_white = int
      '''Log conversion reference whitepoint
         @returns: int in [0, 1024]
      '''
      
      color_depth = str
      '''Bit depth per channel
         @returns: enum in ['8', '10', '12', '16', '32']
      '''
      
      color_mode = str
      '''Choose BW for saving grayscale images, RGB for saving red, green and blue channels, and RGBA for saving red, green, blue and alpha channels
         @returns: enum in ['BW', 'RGB', 'RGBA']
      '''
      
      compression = int
      '''Amount of time to determine best compression: 0 = no compression with fast file output, 100 = maximum lossless compression with slow file output
         @returns: int in [0, 100]
      '''
      
      display_settings = types.ColorManagedDisplaySettings # (read only)
      '''Settings of device saved image would be displayed on
         @returns: ColorManagedDisplaySettings
      '''
      
      exr_codec = str
      '''Codec settings for OpenEXR
         @returns: enum in ['NONE', 'PXR24', 'ZIP', 'PIZ', 'RLE', 'ZIPS', 'B44', 'B44A', 'DWAA']
      '''
      
      file_format = str
      '''File format to save the rendered images as
         @returns: enum in ['BMP', 'IRIS', 'PNG', 'JPEG', 'JPEG2000', 'TARGA', 'TARGA_RAW', 'CINEON', 'DPX', 'OPEN_EXR_MULTILAYER', 'OPEN_EXR', 'HDR', 'TIFF', 'AVI_JPEG', 'AVI_RAW', 'FFMPEG']
      '''
      
      jpeg2k_codec = str
      '''Codec settings for Jpeg2000
         @returns: enum in ['JP2', 'J2K']
      '''
      
      quality = int
      '''Quality for image formats that support lossy compression
         @returns: int in [0, 100]
      '''
      
      stereo_3d_format = types.Stereo3dFormat # (read only)
      '''Settings for stereo 3d
         @returns: Stereo3dFormat, (never None)
      '''
      
      tiff_codec = str
      '''Compression mode for TIFF
         @returns: enum in ['NONE', 'DEFLATE', 'LZW', 'PACKBITS']
      '''
      
      use_cineon_log = bool
      '''Convert to logarithmic color space
         @returns: boolean
      '''
      
      use_jpeg2k_cinema_48 = bool
      '''Use Openjpeg Cinema Preset (48fps)
         @returns: boolean
      '''
      
      use_jpeg2k_cinema_preset = bool
      '''Use Openjpeg Cinema Preset
         @returns: boolean
      '''
      
      use_jpeg2k_ycc = bool
      '''Save luminance-chrominance-chrominance channels instead of RGB colors
         @returns: boolean
      '''
      
      use_preview = bool
      '''When rendering animations, save JPG preview images in same directory
         @returns: boolean
      '''
      
      use_zbuffer = bool
      '''Save the z-depth per pixel (32 bit unsigned int z-buffer)
         @returns: boolean
      '''
      
      view_settings = types.ColorManagedViewSettings # (read only)
      '''Color management settings applied on image before saving
         @returns: ColorManagedViewSettings
      '''
      
      views_format = str
      '''Format of multiview media
         @returns: enum in ['INDIVIDUAL', 'STEREO_3D']
      '''
      
   class ImagePackedFile(types.bpy_struct):
      '''
      '''
   
      filepath = str
      '''
         @returns: string, (never None)
      '''
      
      packed_file = types.PackedFile # (read only)
      '''
         @returns: PackedFile
      '''
      
      def save():
         '''Save the packed file to its filepath
         '''
      
         pass

   class ImagePaint(types.Paint):
      '''Properties of image and texture painting mode
      '''
   
      canvas = types.Image
      '''Image used as canvas
         @returns: Image
      '''
      
      clone_image = types.Image
      '''Image used as clone source
         @returns: Image
      '''
      
      dither = float
      '''Amount of dithering when painting on byte images
         @returns: float in [0, 2]
      '''
      
      interpolation = str
      '''Texture filtering type
         @returns: enum in ['LINEAR', 'CLOSEST']
      '''
      
      invert_stencil = bool
      '''Invert the stencil layer
         @returns: boolean
      '''
      
      missing_materials = bool # (read only)
      '''The mesh is missing materials
         @returns: boolean
      '''
      
      missing_stencil = bool # (read only)
      '''Image Painting does not have a stencil
         @returns: boolean
      '''
      
      missing_texture = bool # (read only)
      '''Image Painting does not have a texture to paint on
         @returns: boolean
      '''
      
      missing_uvs = bool # (read only)
      '''A UV layer is missing on the mesh
         @returns: boolean
      '''
      
      mode = str
      '''Mode of operation for projection painting
         @returns: enum in ['MATERIAL', 'IMAGE']
      '''
      
      normal_angle = int
      '''Paint most on faces pointing towards the view according to this angle
         @returns: int in [0, 90]
      '''
      
      screen_grab_size = int
      '''Size to capture the image for re-projecting
         @returns: int array of 2 items in [512, 16384]
      '''
      
      seam_bleed = int
      '''Extend paint beyond the faces UVs to reduce seams (in pixels, slower)
         @returns: int in [-32768, 32767]
      '''
      
      stencil_color = float
      '''Stencil color in the viewport
         @returns: float array of 3 items in [0, 1]
      '''
      
      stencil_image = types.Image
      '''Image used as stencil
         @returns: Image
      '''
      
      use_backface_culling = bool
      '''Ignore faces pointing away from the view (faster)
         @returns: boolean
      '''
      
      use_clone_layer = bool
      '''Use another UV map as clone source, otherwise use the 3D cursor as the source
         @returns: boolean
      '''
      
      use_normal_falloff = bool
      '''Paint most on faces pointing towards the view
         @returns: boolean
      '''
      
      use_occlude = bool
      '''Only paint onto the faces directly under the brush (slower)
         @returns: boolean
      '''
      
      use_stencil_layer = bool
      '''Set the mask layer from the UV map buttons
         @returns: boolean
      '''
      
      def detect_data():
         '''Check if required texpaint data exist
            @returns (bool): 
         '''
      
         return bool

   class ImagePreview(types.bpy_struct):
      '''Preview image and icon
      '''
   
      icon_id = int # (read only)
      '''Unique integer identifying this preview as an icon (zero means invalid)
         @returns: int in [-inf, inf]
      '''
      
      icon_pixels = int
      '''Icon pixels, as bytes (always RGBA 32bits)
         @returns: int in [-inf, inf]
      '''
      
      icon_pixels_float = float
      '''Icon pixels components, as floats (RGBA concatenated values)
         @returns: float in [-inf, inf]
      '''
      
      icon_size = int
      '''Width and height in pixels
         @returns: int array of 2 items in [-inf, inf]
      '''
      
      image_pixels = int
      '''Image pixels, as bytes (always RGBA 32bits)
         @returns: int in [-inf, inf]
      '''
      
      image_pixels_float = float
      '''Image pixels components, as floats (RGBA concatenated values)
         @returns: float in [-inf, inf]
      '''
      
      image_size = int
      '''Width and height in pixels
         @returns: int array of 2 items in [-inf, inf]
      '''
      
      is_icon_custom = bool
      '''True if this preview icon has been modified by py script,and is no more auto-generated by Blender
         @returns: boolean
      '''
      
      is_image_custom = bool
      '''True if this preview image has been modified by py script,and is no more auto-generated by Blender
         @returns: boolean
      '''
      
      def reload():
         '''Reload the preview from its source path
         '''
      
         pass

   class ImageSequence(types.Sequence):
      '''Sequence strip to load one or more images
      '''
   
      alpha_mode = str
      '''Representation of alpha information in the RGBA pixels
         @returns: enum in ['STRAIGHT', 'PREMUL']
      '''
      
      animation_offset_end = int
      '''Animation end offset (trim end)
         @returns: int in [0, inf]
      '''
      
      animation_offset_start = int
      '''Animation start offset (trim start)
         @returns: int in [0, inf]
      '''
      
      color_multiply = float
      '''
         @returns: float in [0, 20]
      '''
      
      color_saturation = float
      '''Adjust the intensity of the input's color
         @returns: float in [0, 20]
      '''
      
      colorspace_settings = types.ColorManagedInputColorspaceSettings # (read only)
      '''Input color space settings
         @returns: ColorManagedInputColorspaceSettings
      '''
      
      crop = types.SequenceCrop # (read only)
      '''
         @returns: SequenceCrop
      '''
      
      directory = str
      '''
         @returns: string, (never None)
      '''
      
      elements = types.SequenceElements # (read only)
      '''
         @returns: SequenceElements Collection of SequenceElement
      '''
      
      proxy = types.SequenceProxy # (read only)
      '''
         @returns: SequenceProxy
      '''
      
      stereo_3d_format = types.Stereo3dFormat # (read only)
      '''Settings for stereo 3d
         @returns: Stereo3dFormat, (never None)
      '''
      
      strobe = float
      '''Only display every nth frame
         @returns: float in [1, 30]
      '''
      
      transform = types.SequenceTransform # (read only)
      '''
         @returns: SequenceTransform
      '''
      
      use_crop = bool
      '''Crop image before processing
         @returns: boolean
      '''
      
      use_deinterlace = bool
      '''Remove fields from video movies
         @returns: boolean
      '''
      
      use_flip_x = bool
      '''Flip on the X axis
         @returns: boolean
      '''
      
      use_flip_y = bool
      '''Flip on the Y axis
         @returns: boolean
      '''
      
      use_float = bool
      '''Convert input to float data
         @returns: boolean
      '''
      
      use_multiview = bool
      '''Use Multiple Views (when available)
         @returns: boolean
      '''
      
      use_proxy = bool
      '''Use a preview proxy and/or timecode index for this strip
         @returns: boolean
      '''
      
      use_reverse_frames = bool
      '''Reverse frame order
         @returns: boolean
      '''
      
      use_translation = bool
      '''Translate image before processing
         @returns: boolean
      '''
      
      views_format = str
      '''Mode to load image views
         @returns: enum in ['INDIVIDUAL', 'STEREO_3D']
      '''
      
   class ImageTexture(types.Texture):
      '''
      '''
   
      checker_distance = float
      '''Distance between checker tiles
         @returns: float in [0, 0.99]
      '''
      
      crop_max_x = float
      '''Maximum X value to crop the image
         @returns: float in [-10, 10]
      '''
      
      crop_max_y = float
      '''Maximum Y value to crop the image
         @returns: float in [-10, 10]
      '''
      
      crop_min_x = float
      '''Minimum X value to crop the image
         @returns: float in [-10, 10]
      '''
      
      crop_min_y = float
      '''Minimum Y value to crop the image
         @returns: float in [-10, 10]
      '''
      
      extension = str
      '''How the image is extrapolated past its original bounds
         @returns: enum in ['EXTEND', 'CLIP', 'CLIP_CUBE', 'REPEAT', 'CHECKER']
      '''
      
      filter_eccentricity = int
      '''Maximum eccentricity (higher gives less blur at distant/oblique angles, but is also slower)
         @returns: int in [1, 256]
      '''
      
      filter_lightprobes = int
      '''Maximum number of samples (higher gives less blur at distant/oblique angles, but is also slower)
         @returns: int in [1, 256]
      '''
      
      filter_size = float
      '''Multiply the filter size used by MIP Map and Interpolation
         @returns: float in [0.1, 50]
      '''
      
      filter_type = str
      '''Texture filter to use for sampling image
         @returns: enum in ['BOX', 'EWA', 'FELINE', 'AREA']
      '''
      
      image = types.Image
      '''
         @returns: Image
      '''
      
      image_user = types.ImageUser # (read only)
      '''Parameters defining which layer, pass and frame of the image is displayed
         @returns: ImageUser
      '''
      
      invert_alpha = bool
      '''Invert all the alpha values in the image
         @returns: boolean
      '''
      
      repeat_x = int
      '''Repetition multiplier in the X direction
         @returns: int in [1, 512]
      '''
      
      repeat_y = int
      '''Repetition multiplier in the Y direction
         @returns: int in [1, 512]
      '''
      
      use_alpha = bool
      '''Use the alpha channel information in the image
         @returns: boolean
      '''
      
      use_calculate_alpha = bool
      '''Calculate an alpha channel based on RGB values in the image
         @returns: boolean
      '''
      
      use_checker_even = bool
      '''Even checker tiles
         @returns: boolean
      '''
      
      use_checker_odd = bool
      '''Odd checker tiles
         @returns: boolean
      '''
      
      use_filter_size_min = bool
      '''Use Filter Size as a minimal filter value in pixels
         @returns: boolean
      '''
      
      use_flip_axis = bool
      '''Flip the texture's X and Y axis
         @returns: boolean
      '''
      
      use_interpolation = bool
      '''Interpolate pixels using selected filter
         @returns: boolean
      '''
      
      use_mipmap = bool
      '''Use auto-generated MIP maps for the image
         @returns: boolean
      '''
      
      use_mipmap_gauss = bool
      '''Use Gauss filter to sample down MIP maps
         @returns: boolean
      '''
      
      use_mirror_x = bool
      '''Mirror the image repetition on the X direction
         @returns: boolean
      '''
      
      use_mirror_y = bool
      '''Mirror the image repetition on the Y direction
         @returns: boolean
      '''
      
      use_normal_map = bool
      '''Use image RGB values for normal mapping
         @returns: boolean
      '''
      
      users_material = None # (readonly)
      '''Materials that use this texture
         
      '''
      
      
      users_object_modifier = None # (readonly)
      '''Object modifiers that use this texture
         
      '''
      
      
   class ImageUser(types.bpy_struct):
      '''Parameters defining how an Image data-block is used by another data-block
      '''
   
      frame_current = int
      '''Current frame number in image sequence or movie
         @returns: int in [-1048574, 1048574]
      '''
      
      frame_duration = int
      '''Number of images of a movie to use
         @returns: int in [0, 1048574]
      '''
      
      frame_offset = int
      '''Offset the number of the frame to use in the animation
         @returns: int in [-inf, inf]
      '''
      
      frame_start = int
      '''Global starting frame of the movie/sequence, assuming first picture has a #1
         @returns: int in [-1048574, 1048574]
      '''
      
      multilayer_layer = int # (read only)
      '''Layer in multilayer image
         @returns: int in [0, 32767]
      '''
      
      multilayer_pass = int # (read only)
      '''Pass in multilayer image
         @returns: int in [0, 32767]
      '''
      
      multilayer_view = int # (read only)
      '''View in multilayer image
         @returns: int in [0, 32767]
      '''
      
      tile = int
      '''Tile in tiled image
         @returns: int in [0, inf]
      '''
      
      use_auto_refresh = bool
      '''Always refresh image on frame changes
         @returns: boolean
      '''
      
      use_cyclic = bool
      '''Cycle the images in the movie
         @returns: boolean
      '''
      
   class IntProperty(types.Property):
      '''RNA integer number property definition
      '''
   
      array_dimensions = int # (read only)
      '''Length of each dimension of the array
         @returns: int array of 3 items in [0, inf]
      '''
      
      array_length = int # (read only)
      '''Maximum length of the array, 0 means unlimited
         @returns: int in [0, inf]
      '''
      
      default = int # (read only)
      '''Default value for this number
         @returns: int in [-inf, inf]
      '''
      
      default_array = int # (read only)
      '''Default value for this array
         @returns: int array of 3 items in [-inf, inf]
      '''
      
      hard_max = int # (read only)
      '''Maximum value used by buttons
         @returns: int in [-inf, inf]
      '''
      
      hard_min = int # (read only)
      '''Minimum value used by buttons
         @returns: int in [-inf, inf]
      '''
      
      is_array = bool # (read only)
      '''
         @returns: boolean
      '''
      
      soft_max = int # (read only)
      '''Maximum value used by buttons
         @returns: int in [-inf, inf]
      '''
      
      soft_min = int # (read only)
      '''Minimum value used by buttons
         @returns: int in [-inf, inf]
      '''
      
      step = int # (read only)
      '''Step size used by number buttons, for floats 1/100th of the step size
         @returns: int in [0, inf]
      '''
      
   class Itasc(types.IKParam):
      '''Parameters for the iTaSC IK solver
      '''
   
      damping_epsilon = float
      '''Singular value under which damping is progressively applied (higher values=more stability, less reactivity - default=0.1)
         @returns: float in [0, 1]
      '''
      
      damping_max = float
      '''Maximum damping coefficient when singular value is nearly 0 (higher values=more stability, less reactivity - default=0.5)
         @returns: float in [0, 1]
      '''
      
      feedback = float
      '''Feedback coefficient for error correction, average response time is 1/feedback (default=20)
         @returns: float in [0, 100]
      '''
      
      iterations = int
      '''Maximum number of iterations for convergence in case of reiteration
         @returns: int in [0, 1000]
      '''
      
      mode = str
      '''
         @returns: enum in ['ANIMATION', 'SIMULATION']
      '''
      
      precision = float
      '''Precision of convergence in case of reiteration
         @returns: float in [0, 0.1]
      '''
      
      reiteration_method = str
      '''Defines if the solver is allowed to reiterate (converge until precision is met) on none, first or all frames
         @returns: enum in ['NEVER', 'INITIAL', 'ALWAYS']
      '''
      
      solver = str
      '''Solving method selection: automatic damping or manual damping
         @returns: enum in ['SDLS', 'DLS']
      '''
      
      step_count = int
      '''Divide the frame interval into this many steps
         @returns: int in [1, 50]
      '''
      
      step_max = float
      '''Higher bound for timestep in second in case of automatic substeps
         @returns: float in [0, 1]
      '''
      
      step_min = float
      '''Lower bound for timestep in second in case of automatic substeps
         @returns: float in [0, 0.1]
      '''
      
      use_auto_step = bool
      '''Automatically determine the optimal number of steps for best performance/accuracy trade off
         @returns: boolean
      '''
      
      velocity_max = float
      '''Maximum joint velocity in rad/s (default=50)
         @returns: float in [0, 100]
      '''
      
   class Key(types.ID):
      '''Shape keys data-block containing different shapes of geometric data-blocks
      '''
   
      animation_data = types.AnimData # (read only)
      '''Animation data for this data-block
         @returns: AnimData
      '''
      
      eval_time = float
      '''Evaluation time for absolute shape keys
         @returns: float in [0, 1.04857e+06]
      '''
      
      key_blocks = types.ShapeKey # (read only)
      '''Shape keys
         @returns: Collection of ShapeKey
      '''
      
      reference_key = types.ShapeKey # (read only)
      '''
         @returns: ShapeKey, (never None)
      '''
      
      use_relative = bool
      '''Make shape keys relative, otherwise play through shapes as a sequence using the evaluation time
         @returns: boolean
      '''
      
      user = types.ID # (read only)
      '''Data-block using these shape keys
         @returns: ID, (never None)
      '''
      
   class KeyConfig(types.bpy_struct):
      '''Input configuration, including keymaps
      '''
   
      is_user_defined = bool # (read only)
      '''Indicates that a keyconfig was defined by the user
         @returns: boolean
      '''
      
      keymaps = types.KeyMaps # (read only)
      '''Key maps configured as part of this configuration
         @returns: KeyMaps Collection of KeyMap
      '''
      
      name = str
      '''Name of the key configuration
         @returns: string, (never None)
      '''
      
      preferences = types.KeyConfigPreferences # (read only)
      '''
         @returns: KeyConfigPreferences
      '''
      
   class KeyConfigPreferences(types.bpy_struct):
      '''
      '''
   
      bl_idname = str
      '''
         @returns: string, (never None)
      '''
      
   class KeyConfigurations(types.bpy_struct):
      '''Collection of KeyConfigs
      '''
   
      active = types.KeyConfig
      '''Active key configuration (preset)
         @returns: KeyConfig
      '''
      
      addon = types.KeyConfig # (read only)
      '''Key configuration that can be extended by add-ons, and is added to the active configuration when handling events
         @returns: KeyConfig
      '''
      
      default = types.KeyConfig # (read only)
      '''Default builtin key configuration
         @returns: KeyConfig
      '''
      
      user = types.KeyConfig # (read only)
      '''Final key configuration that combines keymaps from the active and add-on configurations, and can be edited by the user
         @returns: KeyConfig
      '''
      
      def new(name):
         '''new
            Arguments:
            @name (str): (never None)
      
            @returns (types.KeyConfig): Added key configuration
               
         '''
      
         return types.KeyConfig

      def remove(keyconfig):
         '''remove
            Arguments:
            @keyconfig (KeyConfig): Removed key configuration
               (never None)
      
         '''
      
         pass

      def find_item_from_operator(idname, context='INVOKE_DEFAULT', properties=None, include={'ACTIONZONE', 'KEYBOARD', 'MOUSE', 'NDOF', 'TWEAK'}, exclude={}):
         '''find_item_from_operator
            Arguments:
            @idname (str): (never None)
            @context (str): in ['INVOKE_DEFAULT', 'INVOKE_REGION_WIN', 'INVOKE_REGION_CHANNELS', 'INVOKE_REGION_PREVIEW', 'INVOKE_AREA', 'INVOKE_SCREEN', 'EXEC_DEFAULT', 'EXEC_REGION_WIN', 'EXEC_REGION_CHANNELS', 'EXEC_REGION_PREVIEW', 'EXEC_AREA', 'EXEC_SCREEN'], (optional)
            @properties (OperatorProperties): (optional)
            @include (str): set in {'KEYBOARD_MODIFIER', 'KEYBOARD', 'MOUSE_WHEEL', 'MOUSE_GESTURE', 'MOUSE_BUTTON', 'MOUSE', 'NDOF', 'TWEAK', 'ACTIONZONE'}, (optional)
            @exclude (str): set in {'KEYBOARD_MODIFIER', 'KEYBOARD', 'MOUSE_WHEEL', 'MOUSE_GESTURE', 'MOUSE_BUTTON', 'MOUSE', 'NDOF', 'TWEAK', 'ACTIONZONE'}, (optional)
      
            @returns: 
            (
               keymap(types.KeyMap):
               item(types.KeyMapItem):
            )
         '''
      
         pass

      def update():
         '''update
         '''
      
         pass

   class KeyMap(types.bpy_struct):
      '''Input configuration, including keymaps
      '''
   
      bl_owner_id = str
      '''Internal owner
         @returns: string, (never None)
      '''
      
      is_modal = bool # (read only)
      '''Indicates that a keymap is used for translate modal events for an operator
         @returns: boolean
      '''
      
      is_user_modified = bool
      '''Keymap is defined by the user
         @returns: boolean
      '''
      
      keymap_items = types.KeyMapItems # (read only)
      '''Items in the keymap, linking an operator to an input event
         @returns: KeyMapItems Collection of KeyMapItem
      '''
      
      name = str # (read only)
      '''Name of the key map
         @returns: string, (never None)
      '''
      
      region_type = str # (read only)
      '''Optional region type keymap is associated with
         @returns: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW', 'HUD', 'NAVIGATION_BAR', 'EXECUTE', 'FOOTER', 'TOOL_HEADER']
      '''
      
      show_expanded_children = bool
      '''Children expanded in the user interface
         @returns: boolean
      '''
      
      show_expanded_items = bool
      '''Expanded in the user interface
         @returns: boolean
      '''
      
      space_type = str # (read only)
      '''Optional space type keymap is associated with
         @returns: enum in ['EMPTY', 'VIEW_3D', 'IMAGE_EDITOR', 'NODE_EDITOR', 'SEQUENCE_EDITOR', 'CLIP_EDITOR', 'DOPESHEET_EDITOR', 'GRAPH_EDITOR', 'NLA_EDITOR', 'TEXT_EDITOR', 'CONSOLE', 'INFO', 'TOPBAR', 'STATUSBAR', 'OUTLINER', 'PROPERTIES', 'FILE_BROWSER', 'PREFERENCES']
      '''
      
      def active():
         '''active
            @returns (types.KeyMap): Active key map
               
         '''
      
         return types.KeyMap

      def restore_to_default():
         '''restore_to_default
         '''
      
         pass

      def restore_item_to_default(item):
         '''restore_item_to_default
            Arguments:
            @item (KeyMapItem): (never None)
      
         '''
      
         pass

   class KeyMapItem(types.bpy_struct):
      '''Item in a Key Map
      '''
   
      active = bool
      '''Activate or deactivate item
         @returns: boolean
      '''
      
      alt = bool
      '''Alt key pressed
         @returns: boolean
      '''
      
      any = bool
      '''Any modifier keys pressed
         @returns: boolean
      '''
      
      ctrl = bool
      '''Control key pressed
         @returns: boolean
      '''
      
      id = int # (read only)
      '''ID of the item
         @returns: int in [-32768, 32767]
      '''
      
      idname = str
      '''Identifier of operator to call on input event
         @returns: string, (never None)
      '''
      
      is_user_defined = bool # (read only)
      '''Is this keymap item user defined (doesn't just replace a builtin item)
         @returns: boolean
      '''
      
      is_user_modified = bool # (read only)
      '''Is this keymap item modified by the user
         @returns: boolean
      '''
      
      key_modifier = str
      '''Regular key pressed as a modifier
         @returns: enum in ['NONE', 'LEFTMOUSE', 'MIDDLEMOUSE', 'RIGHTMOUSE', 'BUTTON4MOUSE', 'BUTTON5MOUSE', 'BUTTON6MOUSE', 'BUTTON7MOUSE', 'PEN', 'ERASER', 'MOUSEMOVE', 'INBETWEEN_MOUSEMOVE', 'TRACKPADPAN', 'TRACKPADZOOM', 'MOUSEROTATE', 'MOUSESMARTZOOM', 'WHEELUPMOUSE', 'WHEELDOWNMOUSE', 'WHEELINMOUSE', 'WHEELOUTMOUSE', 'EVT_TWEAK_L', 'EVT_TWEAK_M', 'EVT_TWEAK_R', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'ZERO', 'ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE', 'LEFT_CTRL', 'LEFT_ALT', 'LEFT_SHIFT', 'RIGHT_ALT', 'RIGHT_CTRL', 'RIGHT_SHIFT', 'OSKEY', 'APP', 'GRLESS', 'ESC', 'TAB', 'RET', 'SPACE', 'LINE_FEED', 'BACK_SPACE', 'DEL', 'SEMI_COLON', 'PERIOD', 'COMMA', 'QUOTE', 'ACCENT_GRAVE', 'MINUS', 'PLUS', 'SLASH', 'BACK_SLASH', 'EQUAL', 'LEFT_BRACKET', 'RIGHT_BRACKET', 'LEFT_ARROW', 'DOWN_ARROW', 'RIGHT_ARROW', 'UP_ARROW', 'NUMPAD_2', 'NUMPAD_4', 'NUMPAD_6', 'NUMPAD_8', 'NUMPAD_1', 'NUMPAD_3', 'NUMPAD_5', 'NUMPAD_7', 'NUMPAD_9', 'NUMPAD_PERIOD', 'NUMPAD_SLASH', 'NUMPAD_ASTERIX', 'NUMPAD_0', 'NUMPAD_MINUS', 'NUMPAD_ENTER', 'NUMPAD_PLUS', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12', 'F13', 'F14', 'F15', 'F16', 'F17', 'F18', 'F19', 'F20', 'F21', 'F22', 'F23', 'F24', 'PAUSE', 'INSERT', 'HOME', 'PAGE_UP', 'PAGE_DOWN', 'END', 'MEDIA_PLAY', 'MEDIA_STOP', 'MEDIA_FIRST', 'MEDIA_LAST', 'TEXTINPUT', 'WINDOW_DEACTIVATE', 'TIMER', 'TIMER0', 'TIMER1', 'TIMER2', 'TIMER_JOBS', 'TIMER_AUTOSAVE', 'TIMER_REPORT', 'TIMERREGION', 'NDOF_MOTION', 'NDOF_BUTTON_MENU', 'NDOF_BUTTON_FIT', 'NDOF_BUTTON_TOP', 'NDOF_BUTTON_BOTTOM', 'NDOF_BUTTON_LEFT', 'NDOF_BUTTON_RIGHT', 'NDOF_BUTTON_FRONT', 'NDOF_BUTTON_BACK', 'NDOF_BUTTON_ISO1', 'NDOF_BUTTON_ISO2', 'NDOF_BUTTON_ROLL_CW', 'NDOF_BUTTON_ROLL_CCW', 'NDOF_BUTTON_SPIN_CW', 'NDOF_BUTTON_SPIN_CCW', 'NDOF_BUTTON_TILT_CW', 'NDOF_BUTTON_TILT_CCW', 'NDOF_BUTTON_ROTATE', 'NDOF_BUTTON_PANZOOM', 'NDOF_BUTTON_DOMINANT', 'NDOF_BUTTON_PLUS', 'NDOF_BUTTON_MINUS', 'NDOF_BUTTON_ESC', 'NDOF_BUTTON_ALT', 'NDOF_BUTTON_SHIFT', 'NDOF_BUTTON_CTRL', 'NDOF_BUTTON_1', 'NDOF_BUTTON_2', 'NDOF_BUTTON_3', 'NDOF_BUTTON_4', 'NDOF_BUTTON_5', 'NDOF_BUTTON_6', 'NDOF_BUTTON_7', 'NDOF_BUTTON_8', 'NDOF_BUTTON_9', 'NDOF_BUTTON_10', 'NDOF_BUTTON_A', 'NDOF_BUTTON_B', 'NDOF_BUTTON_C', 'ACTIONZONE_AREA', 'ACTIONZONE_REGION', 'ACTIONZONE_FULLSCREEN']
      '''
      
      map_type = str
      '''Type of event mapping
         @returns: enum in ['KEYBOARD', 'TWEAK', 'MOUSE', 'NDOF', 'TEXTINPUT', 'TIMER']
      '''
      
      name = str # (read only)
      '''Name of operator (translated) to call on input event
         @returns: string, (never None)
      '''
      
      oskey = bool
      '''Operating system key pressed
         @returns: boolean
      '''
      
      properties = types.OperatorProperties # (read only)
      '''Properties to set when the operator is called
         @returns: OperatorProperties
      '''
      
      propvalue = str
      '''The value this event translates to in a modal keymap
         @returns: enum in ['NONE']
      '''
      
      repeat = bool
      '''Active on key-repeat events (when a key is held)
         @returns: boolean
      '''
      
      shift = bool
      '''Shift key pressed
         @returns: boolean
      '''
      
      show_expanded = bool
      '''Show key map event and property details in the user interface
         @returns: boolean
      '''
      
      type = str
      '''Type of event
         @returns: enum in ['NONE', 'LEFTMOUSE', 'MIDDLEMOUSE', 'RIGHTMOUSE', 'BUTTON4MOUSE', 'BUTTON5MOUSE', 'BUTTON6MOUSE', 'BUTTON7MOUSE', 'PEN', 'ERASER', 'MOUSEMOVE', 'INBETWEEN_MOUSEMOVE', 'TRACKPADPAN', 'TRACKPADZOOM', 'MOUSEROTATE', 'MOUSESMARTZOOM', 'WHEELUPMOUSE', 'WHEELDOWNMOUSE', 'WHEELINMOUSE', 'WHEELOUTMOUSE', 'EVT_TWEAK_L', 'EVT_TWEAK_M', 'EVT_TWEAK_R', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'ZERO', 'ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE', 'LEFT_CTRL', 'LEFT_ALT', 'LEFT_SHIFT', 'RIGHT_ALT', 'RIGHT_CTRL', 'RIGHT_SHIFT', 'OSKEY', 'APP', 'GRLESS', 'ESC', 'TAB', 'RET', 'SPACE', 'LINE_FEED', 'BACK_SPACE', 'DEL', 'SEMI_COLON', 'PERIOD', 'COMMA', 'QUOTE', 'ACCENT_GRAVE', 'MINUS', 'PLUS', 'SLASH', 'BACK_SLASH', 'EQUAL', 'LEFT_BRACKET', 'RIGHT_BRACKET', 'LEFT_ARROW', 'DOWN_ARROW', 'RIGHT_ARROW', 'UP_ARROW', 'NUMPAD_2', 'NUMPAD_4', 'NUMPAD_6', 'NUMPAD_8', 'NUMPAD_1', 'NUMPAD_3', 'NUMPAD_5', 'NUMPAD_7', 'NUMPAD_9', 'NUMPAD_PERIOD', 'NUMPAD_SLASH', 'NUMPAD_ASTERIX', 'NUMPAD_0', 'NUMPAD_MINUS', 'NUMPAD_ENTER', 'NUMPAD_PLUS', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12', 'F13', 'F14', 'F15', 'F16', 'F17', 'F18', 'F19', 'F20', 'F21', 'F22', 'F23', 'F24', 'PAUSE', 'INSERT', 'HOME', 'PAGE_UP', 'PAGE_DOWN', 'END', 'MEDIA_PLAY', 'MEDIA_STOP', 'MEDIA_FIRST', 'MEDIA_LAST', 'TEXTINPUT', 'WINDOW_DEACTIVATE', 'TIMER', 'TIMER0', 'TIMER1', 'TIMER2', 'TIMER_JOBS', 'TIMER_AUTOSAVE', 'TIMER_REPORT', 'TIMERREGION', 'NDOF_MOTION', 'NDOF_BUTTON_MENU', 'NDOF_BUTTON_FIT', 'NDOF_BUTTON_TOP', 'NDOF_BUTTON_BOTTOM', 'NDOF_BUTTON_LEFT', 'NDOF_BUTTON_RIGHT', 'NDOF_BUTTON_FRONT', 'NDOF_BUTTON_BACK', 'NDOF_BUTTON_ISO1', 'NDOF_BUTTON_ISO2', 'NDOF_BUTTON_ROLL_CW', 'NDOF_BUTTON_ROLL_CCW', 'NDOF_BUTTON_SPIN_CW', 'NDOF_BUTTON_SPIN_CCW', 'NDOF_BUTTON_TILT_CW', 'NDOF_BUTTON_TILT_CCW', 'NDOF_BUTTON_ROTATE', 'NDOF_BUTTON_PANZOOM', 'NDOF_BUTTON_DOMINANT', 'NDOF_BUTTON_PLUS', 'NDOF_BUTTON_MINUS', 'NDOF_BUTTON_ESC', 'NDOF_BUTTON_ALT', 'NDOF_BUTTON_SHIFT', 'NDOF_BUTTON_CTRL', 'NDOF_BUTTON_1', 'NDOF_BUTTON_2', 'NDOF_BUTTON_3', 'NDOF_BUTTON_4', 'NDOF_BUTTON_5', 'NDOF_BUTTON_6', 'NDOF_BUTTON_7', 'NDOF_BUTTON_8', 'NDOF_BUTTON_9', 'NDOF_BUTTON_10', 'NDOF_BUTTON_A', 'NDOF_BUTTON_B', 'NDOF_BUTTON_C', 'ACTIONZONE_AREA', 'ACTIONZONE_REGION', 'ACTIONZONE_FULLSCREEN']
      '''
      
      value = str
      '''
         @returns: enum in ['ANY', 'PRESS', 'RELEASE', 'CLICK', 'DOUBLE_CLICK', 'CLICK_DRAG', 'NORTH', 'NORTH_EAST', 'EAST', 'SOUTH_EAST', 'SOUTH', 'SOUTH_WEST', 'WEST', 'NORTH_WEST', 'NOTHING']
      '''
      
      def compare(item):
         '''compare
            Arguments:
            @item (KeyMapItem): 
      
            @returns (bool): 
         '''
      
         return bool

      def to_string(compact=False):
         '''to_string
            Arguments:
            @compact (bool): (optional)
      
            @returns (str): (never None)
         '''
      
         return str

   class KeyMapItems(types.bpy_struct):
      '''Collection of keymap items
      '''
   
      def new(idname, type, value, any=False, shift=False, ctrl=False, alt=False, oskey=False, key_modifier='NONE', repeat=True, head=False):
         '''new
            Arguments:
            @idname (str): (never None)
            @type (str): in ['NONE', 'LEFTMOUSE', 'MIDDLEMOUSE', 'RIGHTMOUSE', 'BUTTON4MOUSE', 'BUTTON5MOUSE', 'BUTTON6MOUSE', 'BUTTON7MOUSE', 'PEN', 'ERASER', 'MOUSEMOVE', 'INBETWEEN_MOUSEMOVE', 'TRACKPADPAN', 'TRACKPADZOOM', 'MOUSEROTATE', 'MOUSESMARTZOOM', 'WHEELUPMOUSE', 'WHEELDOWNMOUSE', 'WHEELINMOUSE', 'WHEELOUTMOUSE', 'EVT_TWEAK_L', 'EVT_TWEAK_M', 'EVT_TWEAK_R', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'ZERO', 'ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE', 'LEFT_CTRL', 'LEFT_ALT', 'LEFT_SHIFT', 'RIGHT_ALT', 'RIGHT_CTRL', 'RIGHT_SHIFT', 'OSKEY', 'APP', 'GRLESS', 'ESC', 'TAB', 'RET', 'SPACE', 'LINE_FEED', 'BACK_SPACE', 'DEL', 'SEMI_COLON', 'PERIOD', 'COMMA', 'QUOTE', 'ACCENT_GRAVE', 'MINUS', 'PLUS', 'SLASH', 'BACK_SLASH', 'EQUAL', 'LEFT_BRACKET', 'RIGHT_BRACKET', 'LEFT_ARROW', 'DOWN_ARROW', 'RIGHT_ARROW', 'UP_ARROW', 'NUMPAD_2', 'NUMPAD_4', 'NUMPAD_6', 'NUMPAD_8', 'NUMPAD_1', 'NUMPAD_3', 'NUMPAD_5', 'NUMPAD_7', 'NUMPAD_9', 'NUMPAD_PERIOD', 'NUMPAD_SLASH', 'NUMPAD_ASTERIX', 'NUMPAD_0', 'NUMPAD_MINUS', 'NUMPAD_ENTER', 'NUMPAD_PLUS', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12', 'F13', 'F14', 'F15', 'F16', 'F17', 'F18', 'F19', 'F20', 'F21', 'F22', 'F23', 'F24', 'PAUSE', 'INSERT', 'HOME', 'PAGE_UP', 'PAGE_DOWN', 'END', 'MEDIA_PLAY', 'MEDIA_STOP', 'MEDIA_FIRST', 'MEDIA_LAST', 'TEXTINPUT', 'WINDOW_DEACTIVATE', 'TIMER', 'TIMER0', 'TIMER1', 'TIMER2', 'TIMER_JOBS', 'TIMER_AUTOSAVE', 'TIMER_REPORT', 'TIMERREGION', 'NDOF_MOTION', 'NDOF_BUTTON_MENU', 'NDOF_BUTTON_FIT', 'NDOF_BUTTON_TOP', 'NDOF_BUTTON_BOTTOM', 'NDOF_BUTTON_LEFT', 'NDOF_BUTTON_RIGHT', 'NDOF_BUTTON_FRONT', 'NDOF_BUTTON_BACK', 'NDOF_BUTTON_ISO1', 'NDOF_BUTTON_ISO2', 'NDOF_BUTTON_ROLL_CW', 'NDOF_BUTTON_ROLL_CCW', 'NDOF_BUTTON_SPIN_CW', 'NDOF_BUTTON_SPIN_CCW', 'NDOF_BUTTON_TILT_CW', 'NDOF_BUTTON_TILT_CCW', 'NDOF_BUTTON_ROTATE', 'NDOF_BUTTON_PANZOOM', 'NDOF_BUTTON_DOMINANT', 'NDOF_BUTTON_PLUS', 'NDOF_BUTTON_MINUS', 'NDOF_BUTTON_ESC', 'NDOF_BUTTON_ALT', 'NDOF_BUTTON_SHIFT', 'NDOF_BUTTON_CTRL', 'NDOF_BUTTON_1', 'NDOF_BUTTON_2', 'NDOF_BUTTON_3', 'NDOF_BUTTON_4', 'NDOF_BUTTON_5', 'NDOF_BUTTON_6', 'NDOF_BUTTON_7', 'NDOF_BUTTON_8', 'NDOF_BUTTON_9', 'NDOF_BUTTON_10', 'NDOF_BUTTON_A', 'NDOF_BUTTON_B', 'NDOF_BUTTON_C', 'ACTIONZONE_AREA', 'ACTIONZONE_REGION', 'ACTIONZONE_FULLSCREEN']
            @value (str): in ['ANY', 'PRESS', 'RELEASE', 'CLICK', 'DOUBLE_CLICK', 'CLICK_DRAG', 'NORTH', 'NORTH_EAST', 'EAST', 'SOUTH_EAST', 'SOUTH', 'SOUTH_WEST', 'WEST', 'NORTH_WEST', 'NOTHING']
            @any (bool): (optional)
            @shift (bool): (optional)
            @ctrl (bool): (optional)
            @alt (bool): (optional)
            @oskey (bool): (optional)
            @key_modifier (str): in ['NONE', 'LEFTMOUSE', 'MIDDLEMOUSE', 'RIGHTMOUSE', 'BUTTON4MOUSE', 'BUTTON5MOUSE', 'BUTTON6MOUSE', 'BUTTON7MOUSE', 'PEN', 'ERASER', 'MOUSEMOVE', 'INBETWEEN_MOUSEMOVE', 'TRACKPADPAN', 'TRACKPADZOOM', 'MOUSEROTATE', 'MOUSESMARTZOOM', 'WHEELUPMOUSE', 'WHEELDOWNMOUSE', 'WHEELINMOUSE', 'WHEELOUTMOUSE', 'EVT_TWEAK_L', 'EVT_TWEAK_M', 'EVT_TWEAK_R', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'ZERO', 'ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE', 'LEFT_CTRL', 'LEFT_ALT', 'LEFT_SHIFT', 'RIGHT_ALT', 'RIGHT_CTRL', 'RIGHT_SHIFT', 'OSKEY', 'APP', 'GRLESS', 'ESC', 'TAB', 'RET', 'SPACE', 'LINE_FEED', 'BACK_SPACE', 'DEL', 'SEMI_COLON', 'PERIOD', 'COMMA', 'QUOTE', 'ACCENT_GRAVE', 'MINUS', 'PLUS', 'SLASH', 'BACK_SLASH', 'EQUAL', 'LEFT_BRACKET', 'RIGHT_BRACKET', 'LEFT_ARROW', 'DOWN_ARROW', 'RIGHT_ARROW', 'UP_ARROW', 'NUMPAD_2', 'NUMPAD_4', 'NUMPAD_6', 'NUMPAD_8', 'NUMPAD_1', 'NUMPAD_3', 'NUMPAD_5', 'NUMPAD_7', 'NUMPAD_9', 'NUMPAD_PERIOD', 'NUMPAD_SLASH', 'NUMPAD_ASTERIX', 'NUMPAD_0', 'NUMPAD_MINUS', 'NUMPAD_ENTER', 'NUMPAD_PLUS', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12', 'F13', 'F14', 'F15', 'F16', 'F17', 'F18', 'F19', 'F20', 'F21', 'F22', 'F23', 'F24', 'PAUSE', 'INSERT', 'HOME', 'PAGE_UP', 'PAGE_DOWN', 'END', 'MEDIA_PLAY', 'MEDIA_STOP', 'MEDIA_FIRST', 'MEDIA_LAST', 'TEXTINPUT', 'WINDOW_DEACTIVATE', 'TIMER', 'TIMER0', 'TIMER1', 'TIMER2', 'TIMER_JOBS', 'TIMER_AUTOSAVE', 'TIMER_REPORT', 'TIMERREGION', 'NDOF_MOTION', 'NDOF_BUTTON_MENU', 'NDOF_BUTTON_FIT', 'NDOF_BUTTON_TOP', 'NDOF_BUTTON_BOTTOM', 'NDOF_BUTTON_LEFT', 'NDOF_BUTTON_RIGHT', 'NDOF_BUTTON_FRONT', 'NDOF_BUTTON_BACK', 'NDOF_BUTTON_ISO1', 'NDOF_BUTTON_ISO2', 'NDOF_BUTTON_ROLL_CW', 'NDOF_BUTTON_ROLL_CCW', 'NDOF_BUTTON_SPIN_CW', 'NDOF_BUTTON_SPIN_CCW', 'NDOF_BUTTON_TILT_CW', 'NDOF_BUTTON_TILT_CCW', 'NDOF_BUTTON_ROTATE', 'NDOF_BUTTON_PANZOOM', 'NDOF_BUTTON_DOMINANT', 'NDOF_BUTTON_PLUS', 'NDOF_BUTTON_MINUS', 'NDOF_BUTTON_ESC', 'NDOF_BUTTON_ALT', 'NDOF_BUTTON_SHIFT', 'NDOF_BUTTON_CTRL', 'NDOF_BUTTON_1', 'NDOF_BUTTON_2', 'NDOF_BUTTON_3', 'NDOF_BUTTON_4', 'NDOF_BUTTON_5', 'NDOF_BUTTON_6', 'NDOF_BUTTON_7', 'NDOF_BUTTON_8', 'NDOF_BUTTON_9', 'NDOF_BUTTON_10', 'NDOF_BUTTON_A', 'NDOF_BUTTON_B', 'NDOF_BUTTON_C', 'ACTIONZONE_AREA', 'ACTIONZONE_REGION', 'ACTIONZONE_FULLSCREEN'], (optional)
            @repeat (bool): When set, accept key-repeat events
               (optional)
            @head (bool): Force item to be added at start (not end) of key map so that it doesn't get blocked by an existing key map item
               (optional)
      
            @returns (types.KeyMapItem): Added key map item
               
         '''
      
         return types.KeyMapItem

      def new_modal(propvalue, type, value, any=False, shift=False, ctrl=False, alt=False, oskey=False, key_modifier='NONE', repeat=True):
         '''new_modal
            Arguments:
            @propvalue (str): (never None)
            @type (str): in ['NONE', 'LEFTMOUSE', 'MIDDLEMOUSE', 'RIGHTMOUSE', 'BUTTON4MOUSE', 'BUTTON5MOUSE', 'BUTTON6MOUSE', 'BUTTON7MOUSE', 'PEN', 'ERASER', 'MOUSEMOVE', 'INBETWEEN_MOUSEMOVE', 'TRACKPADPAN', 'TRACKPADZOOM', 'MOUSEROTATE', 'MOUSESMARTZOOM', 'WHEELUPMOUSE', 'WHEELDOWNMOUSE', 'WHEELINMOUSE', 'WHEELOUTMOUSE', 'EVT_TWEAK_L', 'EVT_TWEAK_M', 'EVT_TWEAK_R', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'ZERO', 'ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE', 'LEFT_CTRL', 'LEFT_ALT', 'LEFT_SHIFT', 'RIGHT_ALT', 'RIGHT_CTRL', 'RIGHT_SHIFT', 'OSKEY', 'APP', 'GRLESS', 'ESC', 'TAB', 'RET', 'SPACE', 'LINE_FEED', 'BACK_SPACE', 'DEL', 'SEMI_COLON', 'PERIOD', 'COMMA', 'QUOTE', 'ACCENT_GRAVE', 'MINUS', 'PLUS', 'SLASH', 'BACK_SLASH', 'EQUAL', 'LEFT_BRACKET', 'RIGHT_BRACKET', 'LEFT_ARROW', 'DOWN_ARROW', 'RIGHT_ARROW', 'UP_ARROW', 'NUMPAD_2', 'NUMPAD_4', 'NUMPAD_6', 'NUMPAD_8', 'NUMPAD_1', 'NUMPAD_3', 'NUMPAD_5', 'NUMPAD_7', 'NUMPAD_9', 'NUMPAD_PERIOD', 'NUMPAD_SLASH', 'NUMPAD_ASTERIX', 'NUMPAD_0', 'NUMPAD_MINUS', 'NUMPAD_ENTER', 'NUMPAD_PLUS', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12', 'F13', 'F14', 'F15', 'F16', 'F17', 'F18', 'F19', 'F20', 'F21', 'F22', 'F23', 'F24', 'PAUSE', 'INSERT', 'HOME', 'PAGE_UP', 'PAGE_DOWN', 'END', 'MEDIA_PLAY', 'MEDIA_STOP', 'MEDIA_FIRST', 'MEDIA_LAST', 'TEXTINPUT', 'WINDOW_DEACTIVATE', 'TIMER', 'TIMER0', 'TIMER1', 'TIMER2', 'TIMER_JOBS', 'TIMER_AUTOSAVE', 'TIMER_REPORT', 'TIMERREGION', 'NDOF_MOTION', 'NDOF_BUTTON_MENU', 'NDOF_BUTTON_FIT', 'NDOF_BUTTON_TOP', 'NDOF_BUTTON_BOTTOM', 'NDOF_BUTTON_LEFT', 'NDOF_BUTTON_RIGHT', 'NDOF_BUTTON_FRONT', 'NDOF_BUTTON_BACK', 'NDOF_BUTTON_ISO1', 'NDOF_BUTTON_ISO2', 'NDOF_BUTTON_ROLL_CW', 'NDOF_BUTTON_ROLL_CCW', 'NDOF_BUTTON_SPIN_CW', 'NDOF_BUTTON_SPIN_CCW', 'NDOF_BUTTON_TILT_CW', 'NDOF_BUTTON_TILT_CCW', 'NDOF_BUTTON_ROTATE', 'NDOF_BUTTON_PANZOOM', 'NDOF_BUTTON_DOMINANT', 'NDOF_BUTTON_PLUS', 'NDOF_BUTTON_MINUS', 'NDOF_BUTTON_ESC', 'NDOF_BUTTON_ALT', 'NDOF_BUTTON_SHIFT', 'NDOF_BUTTON_CTRL', 'NDOF_BUTTON_1', 'NDOF_BUTTON_2', 'NDOF_BUTTON_3', 'NDOF_BUTTON_4', 'NDOF_BUTTON_5', 'NDOF_BUTTON_6', 'NDOF_BUTTON_7', 'NDOF_BUTTON_8', 'NDOF_BUTTON_9', 'NDOF_BUTTON_10', 'NDOF_BUTTON_A', 'NDOF_BUTTON_B', 'NDOF_BUTTON_C', 'ACTIONZONE_AREA', 'ACTIONZONE_REGION', 'ACTIONZONE_FULLSCREEN']
            @value (str): in ['ANY', 'PRESS', 'RELEASE', 'CLICK', 'DOUBLE_CLICK', 'CLICK_DRAG', 'NORTH', 'NORTH_EAST', 'EAST', 'SOUTH_EAST', 'SOUTH', 'SOUTH_WEST', 'WEST', 'NORTH_WEST', 'NOTHING']
            @any (bool): (optional)
            @shift (bool): (optional)
            @ctrl (bool): (optional)
            @alt (bool): (optional)
            @oskey (bool): (optional)
            @key_modifier (str): in ['NONE', 'LEFTMOUSE', 'MIDDLEMOUSE', 'RIGHTMOUSE', 'BUTTON4MOUSE', 'BUTTON5MOUSE', 'BUTTON6MOUSE', 'BUTTON7MOUSE', 'PEN', 'ERASER', 'MOUSEMOVE', 'INBETWEEN_MOUSEMOVE', 'TRACKPADPAN', 'TRACKPADZOOM', 'MOUSEROTATE', 'MOUSESMARTZOOM', 'WHEELUPMOUSE', 'WHEELDOWNMOUSE', 'WHEELINMOUSE', 'WHEELOUTMOUSE', 'EVT_TWEAK_L', 'EVT_TWEAK_M', 'EVT_TWEAK_R', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'ZERO', 'ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE', 'LEFT_CTRL', 'LEFT_ALT', 'LEFT_SHIFT', 'RIGHT_ALT', 'RIGHT_CTRL', 'RIGHT_SHIFT', 'OSKEY', 'APP', 'GRLESS', 'ESC', 'TAB', 'RET', 'SPACE', 'LINE_FEED', 'BACK_SPACE', 'DEL', 'SEMI_COLON', 'PERIOD', 'COMMA', 'QUOTE', 'ACCENT_GRAVE', 'MINUS', 'PLUS', 'SLASH', 'BACK_SLASH', 'EQUAL', 'LEFT_BRACKET', 'RIGHT_BRACKET', 'LEFT_ARROW', 'DOWN_ARROW', 'RIGHT_ARROW', 'UP_ARROW', 'NUMPAD_2', 'NUMPAD_4', 'NUMPAD_6', 'NUMPAD_8', 'NUMPAD_1', 'NUMPAD_3', 'NUMPAD_5', 'NUMPAD_7', 'NUMPAD_9', 'NUMPAD_PERIOD', 'NUMPAD_SLASH', 'NUMPAD_ASTERIX', 'NUMPAD_0', 'NUMPAD_MINUS', 'NUMPAD_ENTER', 'NUMPAD_PLUS', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12', 'F13', 'F14', 'F15', 'F16', 'F17', 'F18', 'F19', 'F20', 'F21', 'F22', 'F23', 'F24', 'PAUSE', 'INSERT', 'HOME', 'PAGE_UP', 'PAGE_DOWN', 'END', 'MEDIA_PLAY', 'MEDIA_STOP', 'MEDIA_FIRST', 'MEDIA_LAST', 'TEXTINPUT', 'WINDOW_DEACTIVATE', 'TIMER', 'TIMER0', 'TIMER1', 'TIMER2', 'TIMER_JOBS', 'TIMER_AUTOSAVE', 'TIMER_REPORT', 'TIMERREGION', 'NDOF_MOTION', 'NDOF_BUTTON_MENU', 'NDOF_BUTTON_FIT', 'NDOF_BUTTON_TOP', 'NDOF_BUTTON_BOTTOM', 'NDOF_BUTTON_LEFT', 'NDOF_BUTTON_RIGHT', 'NDOF_BUTTON_FRONT', 'NDOF_BUTTON_BACK', 'NDOF_BUTTON_ISO1', 'NDOF_BUTTON_ISO2', 'NDOF_BUTTON_ROLL_CW', 'NDOF_BUTTON_ROLL_CCW', 'NDOF_BUTTON_SPIN_CW', 'NDOF_BUTTON_SPIN_CCW', 'NDOF_BUTTON_TILT_CW', 'NDOF_BUTTON_TILT_CCW', 'NDOF_BUTTON_ROTATE', 'NDOF_BUTTON_PANZOOM', 'NDOF_BUTTON_DOMINANT', 'NDOF_BUTTON_PLUS', 'NDOF_BUTTON_MINUS', 'NDOF_BUTTON_ESC', 'NDOF_BUTTON_ALT', 'NDOF_BUTTON_SHIFT', 'NDOF_BUTTON_CTRL', 'NDOF_BUTTON_1', 'NDOF_BUTTON_2', 'NDOF_BUTTON_3', 'NDOF_BUTTON_4', 'NDOF_BUTTON_5', 'NDOF_BUTTON_6', 'NDOF_BUTTON_7', 'NDOF_BUTTON_8', 'NDOF_BUTTON_9', 'NDOF_BUTTON_10', 'NDOF_BUTTON_A', 'NDOF_BUTTON_B', 'NDOF_BUTTON_C', 'ACTIONZONE_AREA', 'ACTIONZONE_REGION', 'ACTIONZONE_FULLSCREEN'], (optional)
            @repeat (bool): When set, accept key-repeat events
               (optional)
      
            @returns (types.KeyMapItem): Added key map item
               
         '''
      
         return types.KeyMapItem

      def new_from_item(item, head=False):
         '''new_from_item
            Arguments:
            @item (KeyMapItem): Item to use as a reference
               (never None)
            @head (bool): (optional)
      
            @returns (types.KeyMapItem): Added key map item
               
         '''
      
         return types.KeyMapItem

      def remove(item):
         '''remove
            Arguments:
            @item (KeyMapItem): (never None)
      
         '''
      
         pass

      def from_id(id):
         '''from_id
            Arguments:
            @id (int): ID of the item
               in [-inf, inf]
      
            @returns (types.KeyMapItem): 
         '''
      
         return types.KeyMapItem

      def find_from_operator(idname, properties=None, include={'ACTIONZONE', 'KEYBOARD', 'MOUSE', 'NDOF', 'TWEAK'}, exclude={}):
         '''find_from_operator
            Arguments:
            @idname (str): (never None)
            @properties (OperatorProperties): (optional)
            @include (str): set in {'KEYBOARD_MODIFIER', 'KEYBOARD', 'MOUSE_WHEEL', 'MOUSE_GESTURE', 'MOUSE_BUTTON', 'MOUSE', 'NDOF', 'TWEAK', 'ACTIONZONE'}, (optional)
            @exclude (str): set in {'KEYBOARD_MODIFIER', 'KEYBOARD', 'MOUSE_WHEEL', 'MOUSE_GESTURE', 'MOUSE_BUTTON', 'MOUSE', 'NDOF', 'TWEAK', 'ACTIONZONE'}, (optional)
      
            @returns (types.KeyMapItem): 
         '''
      
         return types.KeyMapItem

      def match_event(event):
         '''match_event
            Arguments:
            @event (Event): 
      
            @returns (types.KeyMapItem): 
         '''
      
         return types.KeyMapItem

   class KeyMaps(types.bpy_struct):
      '''Collection of keymaps
      '''
   
      def new(name, space_type='EMPTY', region_type='WINDOW', modal=False, tool=False):
         '''new
            Arguments:
            @name (str): (never None)
            @space_type (str): in ['EMPTY', 'VIEW_3D', 'IMAGE_EDITOR', 'NODE_EDITOR', 'SEQUENCE_EDITOR', 'CLIP_EDITOR', 'DOPESHEET_EDITOR', 'GRAPH_EDITOR', 'NLA_EDITOR', 'TEXT_EDITOR', 'CONSOLE', 'INFO', 'TOPBAR', 'STATUSBAR', 'OUTLINER', 'PROPERTIES', 'FILE_BROWSER', 'PREFERENCES'], (optional)
            @region_type (str): in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW', 'HUD', 'NAVIGATION_BAR', 'EXECUTE', 'FOOTER', 'TOOL_HEADER'], (optional)
            @modal (bool): Keymap for modal operators
               (optional)
            @tool (bool): Keymap for active tools
               (optional)
      
            @returns (types.KeyMap): Added key map
               
         '''
      
         return types.KeyMap

      def remove(keymap):
         '''remove
            Arguments:
            @keymap (KeyMap): Removed key map
               (never None)
      
         '''
      
         pass

      def find(name, space_type='EMPTY', region_type='WINDOW'):
         '''find
            Arguments:
            @name (str): (never None)
            @space_type (str): in ['EMPTY', 'VIEW_3D', 'IMAGE_EDITOR', 'NODE_EDITOR', 'SEQUENCE_EDITOR', 'CLIP_EDITOR', 'DOPESHEET_EDITOR', 'GRAPH_EDITOR', 'NLA_EDITOR', 'TEXT_EDITOR', 'CONSOLE', 'INFO', 'TOPBAR', 'STATUSBAR', 'OUTLINER', 'PROPERTIES', 'FILE_BROWSER', 'PREFERENCES'], (optional)
            @region_type (str): in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW', 'HUD', 'NAVIGATION_BAR', 'EXECUTE', 'FOOTER', 'TOOL_HEADER'], (optional)
      
            @returns (types.KeyMap): Corresponding key map
               
         '''
      
         return types.KeyMap

      def find_modal(name):
         '''find_modal
            Arguments:
            @name (str): (never None)
      
            @returns (types.KeyMap): Corresponding key map
               
         '''
      
         return types.KeyMap

   class Keyframe(types.bpy_struct):
      '''Bezier curve point with two handles defining a Keyframe on an F-Curve
      '''
   
      amplitude = float
      '''Amount to boost elastic bounces for 'elastic' easing
         @returns: float in [0, inf]
      '''
      
      back = float
      '''Amount of overshoot for 'back' easing
         @returns: float in [-inf, inf]
      '''
      
      co = float
      '''Coordinates of the control point
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      easing = str
      '''Which ends of the segment between this and the next keyframe easing interpolation is applied to
         @returns: enum in ['AUTO', 'EASE_IN', 'EASE_OUT', 'EASE_IN_OUT']
      '''
      
      handle_left = float
      '''Coordinates of the left handle (before the control point)
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      handle_left_type = str
      '''Handle types
         @returns: enum in ['FREE', 'ALIGNED', 'VECTOR', 'AUTO', 'AUTO_CLAMPED']
      '''
      
      handle_right = float
      '''Coordinates of the right handle (after the control point)
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      handle_right_type = str
      '''Handle types
         @returns: enum in ['FREE', 'ALIGNED', 'VECTOR', 'AUTO', 'AUTO_CLAMPED']
      '''
      
      interpolation = str
      '''Interpolation method to use for segment of the F-Curve from this Keyframe until the next Keyframe
         @returns: enum in ['CONSTANT', 'LINEAR', 'BEZIER', 'SINE', 'QUAD', 'CUBIC', 'QUART', 'QUINT', 'EXPO', 'CIRC', 'BACK', 'BOUNCE', 'ELASTIC']
      '''
      
      period = float
      '''Time between bounces for elastic easing
         @returns: float in [-inf, inf]
      '''
      
      select_control_point = bool
      '''Control point selection status
         @returns: boolean
      '''
      
      select_left_handle = bool
      '''Left handle selection status
         @returns: boolean
      '''
      
      select_right_handle = bool
      '''Right handle selection status
         @returns: boolean
      '''
      
      type = str
      '''Type of keyframe (for visual purposes only)
         @returns: enum in ['KEYFRAME', 'BREAKDOWN', 'MOVING_HOLD', 'EXTREME', 'JITTER']
      '''
      
   class KeyingSet(types.bpy_struct):
      '''Settings that should be keyframed together
      '''
   
      bl_description = str
      '''A short description of the keying set
         @returns: string, (never None)
      '''
      
      bl_idname = str
      '''If this is set, the Keying Set gets a custom ID, otherwise it takes the name of the class used to define the Keying Set (for example, if the class name is "BUILTIN_KSI_location", and bl_idname is not set by the script, then bl_idname = "BUILTIN_KSI_location")
         @returns: string, (never None)
      '''
      
      bl_label = str
      '''
         @returns: string, (never None)
      '''
      
      is_path_absolute = bool # (read only)
      '''Keying Set defines specific paths/settings to be keyframed (i.e. is not reliant on context info)
         @returns: boolean
      '''
      
      paths = types.KeyingSetPaths # (read only)
      '''Keying Set Paths to define settings that get keyframed together
         @returns: KeyingSetPaths Collection of KeyingSetPath
      '''
      
      type_info = types.KeyingSetInfo # (read only)
      '''Callback function defines for built-in Keying Sets
         @returns: KeyingSetInfo
      '''
      
      use_insertkey_needed = bool
      '''Only insert keyframes where they're needed in the relevant F-Curves
         @returns: boolean
      '''
      
      use_insertkey_override_needed = bool
      '''Override default setting to only insert keyframes where they're needed in the relevant F-Curves
         @returns: boolean
      '''
      
      use_insertkey_override_visual = bool
      '''Override default setting to insert keyframes based on 'visual transforms'
         @returns: boolean
      '''
      
      use_insertkey_override_xyz_to_rgb = bool
      '''Override default setting to set color for newly added transformation F-Curves (Location, Rotation, Scale) to be based on the transform axis
         @returns: boolean
      '''
      
      use_insertkey_visual = bool
      '''Insert keyframes based on 'visual transforms'
         @returns: boolean
      '''
      
      use_insertkey_xyz_to_rgb = bool
      '''Color for newly added transformation F-Curves (Location, Rotation, Scale) is based on the transform axis
         @returns: boolean
      '''
      
      def refresh():
         '''Refresh Keying Set to ensure that it is valid for the current context (call before each use of one)
         '''
      
         pass

   class KeyingSetInfo(types.bpy_struct):
      '''Callback function defines for builtin Keying Sets
      '''
   
      bl_description = str
      '''A short description of the keying set
         @returns: string, (never None)
      '''
      
      bl_idname = str
      '''If this is set, the Keying Set gets a custom ID, otherwise it takes the name of the class used to define the Keying Set (for example, if the class name is "BUILTIN_KSI_location", and bl_idname is not set by the script, then bl_idname = "BUILTIN_KSI_location")
         @returns: string, (never None)
      '''
      
      bl_label = str
      '''
         @returns: string, (never None)
      '''
      
      bl_options = str
      '''Keying Set options to use when inserting keyframes
         @returns: enum set in {'INSERTKEY_NEEDED', 'INSERTKEY_VISUAL', 'INSERTKEY_XYZ_TO_RGB'}
      '''
      
      def poll(context):
         '''Test if Keying Set can be used or not
            Arguments:
            @context (Context): 
      
            @returns (bool): 
         '''
      
         return bool

      def iterator(context, ks):
         '''Call generate() on the structs which have properties to be keyframed
            Arguments:
            @context (Context): 
            @ks (KeyingSet): 
      
         '''
      
         pass

      def generate(context, ks, data):
         '''Add Paths to the Keying Set to keyframe the properties of the given data
            Arguments:
            @context (Context): 
            @ks (KeyingSet): 
            @data (AnyType): (never None)
      
         '''
      
         pass

   class KeyingSetPath(types.bpy_struct):
      '''Path to a setting for use in a Keying Set
      '''
   
      array_index = int
      '''Index to the specific setting if applicable
         @returns: int in [-inf, inf]
      '''
      
      data_path = str
      '''Path to property setting
         @returns: string, (never None)
      '''
      
      group = str
      '''Name of Action Group to assign setting(s) for this path to
         @returns: string, (never None)
      '''
      
      group_method = str
      '''Method used to define which Group-name to use
         @returns: enum in ['NAMED', 'NONE', 'KEYINGSET']
      '''
      
      id = types.ID
      '''ID-Block that keyframes for Keying Set should be added to (for Absolute Keying Sets only)
         @returns: ID
      '''
      
      id_type = str
      '''Type of ID-block that can be used
         @returns: enum in ['ACTION', 'ARMATURE', 'BRUSH', 'CAMERA', 'CACHEFILE', 'CURVE', 'FONT', 'GREASEPENCIL', 'COLLECTION', 'IMAGE', 'KEY', 'LIGHT', 'LIBRARY', 'LINESTYLE', 'LATTICE', 'MASK', 'MATERIAL', 'META', 'MESH', 'MOVIECLIP', 'NODETREE', 'OBJECT', 'PAINTCURVE', 'PALETTE', 'PARTICLE', 'LIGHT_PROBE', 'SCENE', 'SOUND', 'SPEAKER', 'TEXT', 'TEXTURE', 'VOLUME', 'WINDOWMANAGER', 'WORLD', 'WORKSPACE']
      '''
      
      use_entire_array = bool
      '''When an 'array/vector' type is chosen (Location, Rotation, Color, etc.), entire array is to be used
         @returns: boolean
      '''
      
      use_insertkey_needed = bool
      '''Only insert keyframes where they're needed in the relevant F-Curves
         @returns: boolean
      '''
      
      use_insertkey_override_needed = bool
      '''Override default setting to only insert keyframes where they're needed in the relevant F-Curves
         @returns: boolean
      '''
      
      use_insertkey_override_visual = bool
      '''Override default setting to insert keyframes based on 'visual transforms'
         @returns: boolean
      '''
      
      use_insertkey_override_xyz_to_rgb = bool
      '''Override default setting to set color for newly added transformation F-Curves (Location, Rotation, Scale) to be based on the transform axis
         @returns: boolean
      '''
      
      use_insertkey_visual = bool
      '''Insert keyframes based on 'visual transforms'
         @returns: boolean
      '''
      
      use_insertkey_xyz_to_rgb = bool
      '''Color for newly added transformation F-Curves (Location, Rotation, Scale) is based on the transform axis
         @returns: boolean
      '''
      
   class KeyingSetPaths(types.bpy_struct):
      '''Collection of keying set paths
      '''
   
      active = types.KeyingSetPath
      '''Active Keying Set used to insert/delete keyframes
         @returns: KeyingSetPath
      '''
      
      active_index = int
      '''Current Keying Set index
         @returns: int in [-inf, inf]
      '''
      
      def add(target_id, data_path, index=-1, group_method='KEYINGSET', group_name=""):
         '''Add a new path for the Keying Set
            Arguments:
            @target_id (ID): ID data-block for the destination
               
            @data_path (str): RNA-Path to destination property
               (never None)
            @index (int): The index of the destination property (i.e. axis of Location/Rotation/etc.), or -1 for the entire array
               in [-1, inf], (optional)
            @group_method (str): Method used to define which Group-name to use
               in ['NAMED', 'NONE', 'KEYINGSET'], (optional)
            @group_name (str): Name of Action Group to assign destination to (only if grouping mode is to use this name)
               (optional, never None)
      
            @returns (types.KeyingSetPath): Path created and added to the Keying Set
               
         '''
      
         return types.KeyingSetPath

      def remove(path):
         '''Remove the given path from the Keying Set
            Arguments:
            @path (KeyingSetPath): (never None)
      
         '''
      
         pass

      def clear():
         '''Remove all the paths from the Keying Set
         '''
      
         pass

   class KeyingSets(types.bpy_struct):
      '''Scene keying sets
      '''
   
      active = types.KeyingSet
      '''Active Keying Set used to insert/delete keyframes
         @returns: KeyingSet
      '''
      
      active_index = int
      '''Current Keying Set index (negative for 'builtin' and positive for 'absolute')
         @returns: int in [-inf, inf]
      '''
      
      def new(idname="KeyingSet", name="KeyingSet"):
         '''Add a new Keying Set to Scene
            Arguments:
            @idname (str): Internal identifier of Keying Set
               (optional, never None)
            @name (str): User visible name of Keying Set
               (optional, never None)
      
            @returns (types.KeyingSet): Newly created Keying Set
               
         '''
      
         return types.KeyingSet

   class KeyingSetsAll(types.bpy_struct):
      '''All available keying sets
      '''
   
      active = types.KeyingSet
      '''Active Keying Set used to insert/delete keyframes
         @returns: KeyingSet
      '''
      
      active_index = int
      '''Current Keying Set index (negative for 'builtin' and positive for 'absolute')
         @returns: int in [-inf, inf]
      '''
      
   class KinematicConstraint(types.Constraint):
      '''Inverse Kinematics
      '''
   
      chain_count = int
      '''How many bones are included in the IK effect - 0 uses all bones
         @returns: int in [0, 255]
      '''
      
      distance = float
      '''Radius of limiting sphere
         @returns: float in [0, 100]
      '''
      
      ik_type = str
      '''
         @returns: enum in ['COPY_POSE', 'DISTANCE']
      '''
      
      iterations = int
      '''Maximum number of solving iterations
         @returns: int in [0, 10000]
      '''
      
      limit_mode = str
      '''Distances in relation to sphere of influence to allow
         @returns: enum in ['LIMITDIST_INSIDE', 'LIMITDIST_OUTSIDE', 'LIMITDIST_ONSURFACE']
      '''
      
      lock_location_x = bool
      '''Constraint position along X axis
         @returns: boolean
      '''
      
      lock_location_y = bool
      '''Constraint position along Y axis
         @returns: boolean
      '''
      
      lock_location_z = bool
      '''Constraint position along Z axis
         @returns: boolean
      '''
      
      lock_rotation_x = bool
      '''Constraint rotation along X axis
         @returns: boolean
      '''
      
      lock_rotation_y = bool
      '''Constraint rotation along Y axis
         @returns: boolean
      '''
      
      lock_rotation_z = bool
      '''Constraint rotation along Z axis
         @returns: boolean
      '''
      
      orient_weight = float
      '''For Tree-IK: Weight of orientation control for this target
         @returns: float in [0.01, 1]
      '''
      
      pole_angle = float
      '''Pole rotation offset
         @returns: float in [-3.14159, 3.14159]
      '''
      
      pole_subtarget = str
      '''
         @returns: string, (never None)
      '''
      
      pole_target = types.Object
      '''Object for pole rotation
         @returns: Object
      '''
      
      reference_axis = str
      '''Constraint axis Lock options relative to Bone or Target reference
         @returns: enum in ['BONE', 'TARGET']
      '''
      
      subtarget = str
      '''Armature bone, mesh or lattice vertex group, ...
         @returns: string, (never None)
      '''
      
      target = types.Object
      '''Target object
         @returns: Object
      '''
      
      use_location = bool
      '''Chain follows position of target
         @returns: boolean
      '''
      
      use_rotation = bool
      '''Chain follows rotation of target
         @returns: boolean
      '''
      
      use_stretch = bool
      '''Enable IK Stretching
         @returns: boolean
      '''
      
      use_tail = bool
      '''Include bone's tail as last element in chain
         @returns: boolean
      '''
      
      weight = float
      '''For Tree-IK: Weight of position control for this target
         @returns: float in [0.01, 1]
      '''
      
   class LaplacianDeformModifier(types.Modifier):
      '''Mesh deform modifier
      '''
   
      invert_vertex_group = bool
      '''Invert vertex group influence
         @returns: boolean
      '''
      
      is_bind = bool # (read only)
      '''Whether geometry has been bound to anchors
         @returns: boolean
      '''
      
      iterations = int
      '''
         @returns: int in [-inf, inf]
      '''
      
      vertex_group = str
      '''Name of Vertex Group which determines Anchors
         @returns: string, (never None)
      '''
      
   class LaplacianSmoothModifier(types.Modifier):
      '''Smoothing effect modifier
      '''
   
      invert_vertex_group = bool
      '''Invert vertex group influence
         @returns: boolean
      '''
      
      iterations = int
      '''
         @returns: int in [-32768, 32767]
      '''
      
      lambda_border = float
      '''Lambda factor in border
         @returns: float in [-inf, inf]
      '''
      
      lambda_factor = float
      '''Smooth factor effect
         @returns: float in [-inf, inf]
      '''
      
      use_normalized = bool
      '''Improve and stabilize the enhanced shape
         @returns: boolean
      '''
      
      use_volume_preserve = bool
      '''Apply volume preservation after smooth
         @returns: boolean
      '''
      
      use_x = bool
      '''Smooth object along X axis
         @returns: boolean
      '''
      
      use_y = bool
      '''Smooth object along Y axis
         @returns: boolean
      '''
      
      use_z = bool
      '''Smooth object along Z axis
         @returns: boolean
      '''
      
      vertex_group = str
      '''Name of Vertex Group which determines influence of modifier per point
         @returns: string, (never None)
      '''
      
   class Lattice(types.ID):
      '''Lattice data-block defining a grid for deforming other objects
      '''
   
      animation_data = types.AnimData # (read only)
      '''Animation data for this data-block
         @returns: AnimData
      '''
      
      interpolation_type_u = str
      '''
         @returns: enum in ['KEY_LINEAR', 'KEY_CARDINAL', 'KEY_CATMULL_ROM', 'KEY_BSPLINE']
      '''
      
      interpolation_type_v = str
      '''
         @returns: enum in ['KEY_LINEAR', 'KEY_CARDINAL', 'KEY_CATMULL_ROM', 'KEY_BSPLINE']
      '''
      
      interpolation_type_w = str
      '''
         @returns: enum in ['KEY_LINEAR', 'KEY_CARDINAL', 'KEY_CATMULL_ROM', 'KEY_BSPLINE']
      '''
      
      is_editmode = bool # (read only)
      '''True when used in editmode
         @returns: boolean
      '''
      
      points = types.LatticePoint # (read only)
      '''Points of the lattice
         @returns: Collection of LatticePoint
      '''
      
      points_u = int
      '''Point in U direction (can't be changed when there are shape keys)
         @returns: int in [1, 64]
      '''
      
      points_v = int
      '''Point in V direction (can't be changed when there are shape keys)
         @returns: int in [1, 64]
      '''
      
      points_w = int
      '''Point in W direction (can't be changed when there are shape keys)
         @returns: int in [1, 64]
      '''
      
      shape_keys = types.Key # (read only)
      '''
         @returns: Key
      '''
      
      use_outside = bool
      '''Only draw, and take into account, the outer vertices
         @returns: boolean
      '''
      
      vertex_group = str
      '''Vertex group to apply the influence of the lattice
         @returns: string, (never None)
      '''
      
      def transform(matrix, shape_keys=False):
         '''Transform lattice by a matrix
            Arguments:
            @matrix (float): Matrix
               multi-dimensional array of 4 * 4 items in [-inf, inf]
            @shape_keys (bool): Transform Shape Keys
               (optional)
      
         '''
      
         pass

      def update_gpu_tag():
         '''update_gpu_tag
         '''
      
         pass

   class LatticeGpencilModifier(types.GpencilModifier):
      '''Change stroke using lattice to deform modifier
      '''
   
      invert_layer_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_layers = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_material_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_materials = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_vertex = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      layer = str
      '''Layer name
         @returns: string, (never None)
      '''
      
      layer_pass = int
      '''Layer pass index
         @returns: int in [0, 100]
      '''
      
      material = str
      '''Material name
         @returns: string, (never None)
      '''
      
      object = types.Object
      '''Lattice object to deform with
         @returns: Object
      '''
      
      pass_index = int
      '''Pass index
         @returns: int in [0, 100]
      '''
      
      strength = float
      '''Strength of modifier effect
         @returns: float in [-inf, inf]
      '''
      
      vertex_group = str
      '''Vertex group name for modulating the deform
         @returns: string, (never None)
      '''
      
   class LatticeModifier(types.Modifier):
      '''Lattice deformation modifier
      '''
   
      invert_vertex_group = bool
      '''Invert vertex group influence
         @returns: boolean
      '''
      
      object = types.Object
      '''Lattice object to deform with
         @returns: Object
      '''
      
      strength = float
      '''Strength of modifier effect
         @returns: float in [-inf, inf]
      '''
      
      vertex_group = str
      '''Name of Vertex Group which determines influence of modifier per point
         @returns: string, (never None)
      '''
      
   class LatticePoint(types.bpy_struct):
      '''Point in the lattice grid
      '''
   
      co = float # (read only)
      '''Original undeformed location used to calculate the strength of the deform effect (edit/animate the Deformed Location instead)
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      co_deform = float
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      groups = types.VertexGroupElement # (read only)
      '''Weights for the vertex groups this point is member of
         @returns: Collection of VertexGroupElement
      '''
      
      select = bool
      '''Selection status
         @returns: boolean
      '''
      
      weight_softbody = float
      '''Softbody goal weight
         @returns: float in [0.01, 100]
      '''
      
   class LayerCollection(types.bpy_struct):
      '''Layer collection
      '''
   
      children = types.LayerCollection # (read only)
      '''Child layer collections
         @returns: Collection of LayerCollection
      '''
      
      collection = types.Collection # (read only)
      '''Collection this layer collection is wrapping
         @returns: Collection, (never None)
      '''
      
      exclude = bool
      '''Exclude from view layer
         @returns: boolean
      '''
      
      hide_viewport = bool
      '''Temporarily hide in viewport
         @returns: boolean
      '''
      
      holdout = bool
      '''Mask out objects in collection from view layer
         @returns: boolean
      '''
      
      indirect_only = bool
      '''Objects in collection only contribute indirectly (through shadows and reflections) in the view layer
         @returns: boolean
      '''
      
      is_visible = bool # (read only)
      '''Whether this collection is visible for the view layer, take into account the collection parent
         @returns: boolean
      '''
      
      name = str # (read only)
      '''Name of this view layer (same as its collection one)
         @returns: string, (never None)
      '''
      
      def visible_get():
         '''Whether this collection is visible, take into account the collection parent and the viewport
            @returns (bool): 
         '''
      
         return bool

      def has_objects():
         '''
            @returns (bool): 
         '''
      
         return bool

      def has_selected_objects(view_layer):
         '''
            Arguments:
            @view_layer (ViewLayer): View layer the layer collection belongs to
               
      
            @returns (bool): 
         '''
      
         return bool

   class LayerObjects(types.bpy_struct):
      '''Collections of objects
      '''
   
      active = types.Object
      '''Active object for this layer
         @returns: Object
      '''
      
      selected = types.Object # (read only)
      '''All the selected objects of this layer
         @returns: Collection of Object
      '''
      
   class Library(types.ID):
      '''External .blend file from which data is linked
      '''
   
      filepath = str
      '''Path to the library .blend file
         @returns: string, (never None)
      '''
      
      packed_file = types.PackedFile # (read only)
      '''
         @returns: PackedFile
      '''
      
      parent = types.Library # (read only)
      '''
         @returns: Library
      '''
      
      version = int # (read only)
      '''Version of Blender the library .blend was saved with
         @returns: int array of 3 items in [0, inf]
      '''
      
      users_id = None # (readonly)
      '''ID data blocks which use this library
         
      '''
      
      
      def reload():
         '''Reload this library and all its linked data-blocks
         '''
      
         pass

   class Light(types.ID):
      '''Light data-block for lighting a scene
      '''
   
      animation_data = types.AnimData # (read only)
      '''Animation data for this data-block
         @returns: AnimData
      '''
      
      color = float
      '''Light color
         @returns: float array of 3 items in [0, inf]
      '''
      
      cutoff_distance = float
      '''Distance at which the light influence will be set to 0
         @returns: float in [0, inf]
      '''
      
      cycles = types.CyclesLightSettings # (read only)
      '''Cycles light settings
         @returns: CyclesLightSettings
      '''
      
      distance = float
      '''Falloff distance - the light is at half the original intensity at this point
         @returns: float in [0, inf]
      '''
      
      node_tree = types.NodeTree # (read only)
      '''Node tree for node based lights
         @returns: NodeTree
      '''
      
      specular_factor = float
      '''Specular reflection multiplier
         @returns: float in [0, 9999]
      '''
      
      type = str
      '''Type of Light
         @returns: enum in ['POINT', 'SUN', 'SPOT', 'AREA']
      '''
      
      use_custom_distance = bool
      '''Use custom attenuation distance instead of global light threshold
         @returns: boolean
      '''
      
      use_nodes = bool
      '''Use shader nodes to render the light
         @returns: boolean
      '''
      
   class LightProbe(types.ID):
      '''Light Probe data-block for lighting capture objects
      '''
   
      animation_data = types.AnimData # (read only)
      '''Animation data for this data-block
         @returns: AnimData
      '''
      
      clip_end = float
      '''Probe clip end, beyond which objects will not appear in reflections
         @returns: float in [1e-06, inf]
      '''
      
      clip_start = float
      '''Probe clip start, below which objects will not appear in reflections
         @returns: float in [1e-06, inf]
      '''
      
      falloff = float
      '''Control how fast the probe influence decreases
         @returns: float in [0, 1]
      '''
      
      grid_resolution_x = int
      '''Number of sample along the x axis of the volume
         @returns: int in [1, 256]
      '''
      
      grid_resolution_y = int
      '''Number of sample along the y axis of the volume
         @returns: int in [1, 256]
      '''
      
      grid_resolution_z = int
      '''Number of sample along the z axis of the volume
         @returns: int in [1, 256]
      '''
      
      influence_distance = float
      '''Influence distance of the probe
         @returns: float in [0, inf]
      '''
      
      influence_type = str
      '''Type of influence volume
         @returns: enum in ['ELIPSOID', 'BOX']
      '''
      
      intensity = float
      '''Modify the intensity of the lighting captured by this probe
         @returns: float in [0, inf]
      '''
      
      invert_visibility_collection = bool
      '''Invert visibility collection
         @returns: boolean
      '''
      
      parallax_distance = float
      '''Lowest corner of the parallax bounding box
         @returns: float in [0, inf]
      '''
      
      parallax_type = str
      '''Type of parallax volume
         @returns: enum in ['ELIPSOID', 'BOX']
      '''
      
      show_clip = bool
      '''Show the clipping distances in the 3D view
         @returns: boolean
      '''
      
      show_data = bool
      '''Show captured lighting data into the 3D view for debugging purpose
         @returns: boolean
      '''
      
      show_influence = bool
      '''Show the influence volume in the 3D view
         @returns: boolean
      '''
      
      show_parallax = bool
      '''Show the parallax correction volume in the 3D view
         @returns: boolean
      '''
      
      type = str # (read only)
      '''Type of light probe
         @returns: enum in ['CUBEMAP', 'PLANAR', 'GRID']
      '''
      
      use_custom_parallax = bool
      '''Enable custom settings for the parallax correction volume
         @returns: boolean
      '''
      
      visibility_bleed_bias = float
      '''Bias for reducing light-bleed on variance shadow maps
         @returns: float in [0, 1]
      '''
      
      visibility_blur = float
      '''Filter size of the visibility blur
         @returns: float in [0, 1]
      '''
      
      visibility_buffer_bias = float
      '''Bias for reducing self shadowing
         @returns: float in [0.001, 9999]
      '''
      
      visibility_collection = types.Collection
      '''Restrict objects visible for this probe
         @returns: Collection
      '''
      
   class LimitDistanceConstraint(types.Constraint):
      '''Limit the distance from target object
      '''
   
      distance = float
      '''Radius of limiting sphere
         @returns: float in [-inf, inf]
      '''
      
      head_tail = float
      '''Target along length of bone: Head=0, Tail=1
         @returns: float in [0, 1]
      '''
      
      limit_mode = str
      '''Distances in relation to sphere of influence to allow
         @returns: enum in ['LIMITDIST_INSIDE', 'LIMITDIST_OUTSIDE', 'LIMITDIST_ONSURFACE']
      '''
      
      subtarget = str
      '''Armature bone, mesh or lattice vertex group, ...
         @returns: string, (never None)
      '''
      
      target = types.Object
      '''Target object
         @returns: Object
      '''
      
      use_bbone_shape = bool
      '''Follow shape of B-Bone segments when calculating Head/Tail position
         @returns: boolean
      '''
      
      use_transform_limit = bool
      '''Transforms are affected by this constraint as well
         @returns: boolean
      '''
      
   class LimitLocationConstraint(types.Constraint):
      '''Limit the location of the constrained object
      '''
   
      max_x = float
      '''Highest X value to allow
         @returns: float in [-inf, inf]
      '''
      
      max_y = float
      '''Highest Y value to allow
         @returns: float in [-inf, inf]
      '''
      
      max_z = float
      '''Highest Z value to allow
         @returns: float in [-inf, inf]
      '''
      
      min_x = float
      '''Lowest X value to allow
         @returns: float in [-inf, inf]
      '''
      
      min_y = float
      '''Lowest Y value to allow
         @returns: float in [-inf, inf]
      '''
      
      min_z = float
      '''Lowest Z value to allow
         @returns: float in [-inf, inf]
      '''
      
      use_max_x = bool
      '''Use the maximum X value
         @returns: boolean
      '''
      
      use_max_y = bool
      '''Use the maximum Y value
         @returns: boolean
      '''
      
      use_max_z = bool
      '''Use the maximum Z value
         @returns: boolean
      '''
      
      use_min_x = bool
      '''Use the minimum X value
         @returns: boolean
      '''
      
      use_min_y = bool
      '''Use the minimum Y value
         @returns: boolean
      '''
      
      use_min_z = bool
      '''Use the minimum Z value
         @returns: boolean
      '''
      
      use_transform_limit = bool
      '''Transforms are affected by this constraint as well
         @returns: boolean
      '''
      
   class LimitRotationConstraint(types.Constraint):
      '''Limit the rotation of the constrained object
      '''
   
      max_x = float
      '''Highest X value to allow
         @returns: float in [-1000, 1000]
      '''
      
      max_y = float
      '''Highest Y value to allow
         @returns: float in [-1000, 1000]
      '''
      
      max_z = float
      '''Highest Z value to allow
         @returns: float in [-1000, 1000]
      '''
      
      min_x = float
      '''Lowest X value to allow
         @returns: float in [-1000, 1000]
      '''
      
      min_y = float
      '''Lowest Y value to allow
         @returns: float in [-1000, 1000]
      '''
      
      min_z = float
      '''Lowest Z value to allow
         @returns: float in [-1000, 1000]
      '''
      
      use_limit_x = bool
      '''Use the minimum X value
         @returns: boolean
      '''
      
      use_limit_y = bool
      '''Use the minimum Y value
         @returns: boolean
      '''
      
      use_limit_z = bool
      '''Use the minimum Z value
         @returns: boolean
      '''
      
      use_transform_limit = bool
      '''Transforms are affected by this constraint as well
         @returns: boolean
      '''
      
   class LimitScaleConstraint(types.Constraint):
      '''Limit the scaling of the constrained object
      '''
   
      max_x = float
      '''Highest X value to allow
         @returns: float in [-1000, 1000]
      '''
      
      max_y = float
      '''Highest Y value to allow
         @returns: float in [-1000, 1000]
      '''
      
      max_z = float
      '''Highest Z value to allow
         @returns: float in [-1000, 1000]
      '''
      
      min_x = float
      '''Lowest X value to allow
         @returns: float in [-1000, 1000]
      '''
      
      min_y = float
      '''Lowest Y value to allow
         @returns: float in [-1000, 1000]
      '''
      
      min_z = float
      '''Lowest Z value to allow
         @returns: float in [-1000, 1000]
      '''
      
      use_max_x = bool
      '''Use the maximum X value
         @returns: boolean
      '''
      
      use_max_y = bool
      '''Use the maximum Y value
         @returns: boolean
      '''
      
      use_max_z = bool
      '''Use the maximum Z value
         @returns: boolean
      '''
      
      use_min_x = bool
      '''Use the minimum X value
         @returns: boolean
      '''
      
      use_min_y = bool
      '''Use the minimum Y value
         @returns: boolean
      '''
      
      use_min_z = bool
      '''Use the minimum Z value
         @returns: boolean
      '''
      
      use_transform_limit = bool
      '''Transforms are affected by this constraint as well
         @returns: boolean
      '''
      
   class LineStyleAlphaModifier(types.LineStyleModifier):
      '''Base type to define alpha transparency modifiers
      '''
   
   class LineStyleAlphaModifier_AlongStroke(types.LineStyleAlphaModifier):
      '''Change alpha transparency along stroke
      '''
   
      blend = str
      '''Specify how the modifier value is blended into the base value
         @returns: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MINIMUM', 'MAXIMUM']
      '''
      
      curve = types.CurveMapping # (read only)
      '''Curve used for the curve mapping
         @returns: CurveMapping
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      influence = float
      '''Influence factor by which the modifier changes the property
         @returns: float in [0, 1]
      '''
      
      invert = bool
      '''Invert the fade-out direction of the linear mapping
         @returns: boolean
      '''
      
      mapping = str
      '''Select the mapping type
         @returns: enum in ['LINEAR', 'CURVE']
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleAlphaModifier_CreaseAngle(types.LineStyleAlphaModifier):
      '''Alpha transparency based on the angle between two adjacent faces
      '''
   
      angle_max = float
      '''Maximum angle to modify thickness
         @returns: float in [-inf, inf]
      '''
      
      angle_min = float
      '''Minimum angle to modify thickness
         @returns: float in [-inf, inf]
      '''
      
      blend = str
      '''Specify how the modifier value is blended into the base value
         @returns: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MINIMUM', 'MAXIMUM']
      '''
      
      curve = types.CurveMapping # (read only)
      '''Curve used for the curve mapping
         @returns: CurveMapping
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      influence = float
      '''Influence factor by which the modifier changes the property
         @returns: float in [0, 1]
      '''
      
      invert = bool
      '''Invert the fade-out direction of the linear mapping
         @returns: boolean
      '''
      
      mapping = str
      '''Select the mapping type
         @returns: enum in ['LINEAR', 'CURVE']
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleAlphaModifier_Curvature_3D(types.LineStyleAlphaModifier):
      '''Alpha transparency based on the radial curvature of 3D mesh surfaces
      '''
   
      blend = str
      '''Specify how the modifier value is blended into the base value
         @returns: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MINIMUM', 'MAXIMUM']
      '''
      
      curvature_max = float
      '''Maximum Curvature
         @returns: float in [0, 10000]
      '''
      
      curvature_min = float
      '''Minimum Curvature
         @returns: float in [0, 10000]
      '''
      
      curve = types.CurveMapping # (read only)
      '''Curve used for the curve mapping
         @returns: CurveMapping
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      influence = float
      '''Influence factor by which the modifier changes the property
         @returns: float in [0, 1]
      '''
      
      invert = bool
      '''Invert the fade-out direction of the linear mapping
         @returns: boolean
      '''
      
      mapping = str
      '''Select the mapping type
         @returns: enum in ['LINEAR', 'CURVE']
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleAlphaModifier_DistanceFromCamera(types.LineStyleAlphaModifier):
      '''Change alpha transparency based on the distance from the camera
      '''
   
      blend = str
      '''Specify how the modifier value is blended into the base value
         @returns: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MINIMUM', 'MAXIMUM']
      '''
      
      curve = types.CurveMapping # (read only)
      '''Curve used for the curve mapping
         @returns: CurveMapping
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      influence = float
      '''Influence factor by which the modifier changes the property
         @returns: float in [0, 1]
      '''
      
      invert = bool
      '''Invert the fade-out direction of the linear mapping
         @returns: boolean
      '''
      
      mapping = str
      '''Select the mapping type
         @returns: enum in ['LINEAR', 'CURVE']
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      range_max = float
      '''Upper bound of the input range the mapping is applied
         @returns: float in [-inf, inf]
      '''
      
      range_min = float
      '''Lower bound of the input range the mapping is applied
         @returns: float in [-inf, inf]
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleAlphaModifier_DistanceFromObject(types.LineStyleAlphaModifier):
      '''Change alpha transparency based on the distance from an object
      '''
   
      blend = str
      '''Specify how the modifier value is blended into the base value
         @returns: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MINIMUM', 'MAXIMUM']
      '''
      
      curve = types.CurveMapping # (read only)
      '''Curve used for the curve mapping
         @returns: CurveMapping
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      influence = float
      '''Influence factor by which the modifier changes the property
         @returns: float in [0, 1]
      '''
      
      invert = bool
      '''Invert the fade-out direction of the linear mapping
         @returns: boolean
      '''
      
      mapping = str
      '''Select the mapping type
         @returns: enum in ['LINEAR', 'CURVE']
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      range_max = float
      '''Upper bound of the input range the mapping is applied
         @returns: float in [-inf, inf]
      '''
      
      range_min = float
      '''Lower bound of the input range the mapping is applied
         @returns: float in [-inf, inf]
      '''
      
      target = types.Object
      '''Target object from which the distance is measured
         @returns: Object
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleAlphaModifier_Material(types.LineStyleAlphaModifier):
      '''Change alpha transparency based on a material attribute
      '''
   
      blend = str
      '''Specify how the modifier value is blended into the base value
         @returns: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MINIMUM', 'MAXIMUM']
      '''
      
      curve = types.CurveMapping # (read only)
      '''Curve used for the curve mapping
         @returns: CurveMapping
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      influence = float
      '''Influence factor by which the modifier changes the property
         @returns: float in [0, 1]
      '''
      
      invert = bool
      '''Invert the fade-out direction of the linear mapping
         @returns: boolean
      '''
      
      mapping = str
      '''Select the mapping type
         @returns: enum in ['LINEAR', 'CURVE']
      '''
      
      material_attribute = str
      '''Specify which material attribute is used
         @returns: enum in ['LINE', 'LINE_R', 'LINE_G', 'LINE_B', 'LINE_A', 'DIFF', 'DIFF_R', 'DIFF_G', 'DIFF_B', 'SPEC', 'SPEC_R', 'SPEC_G', 'SPEC_B', 'SPEC_HARD', 'ALPHA']
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleAlphaModifier_Noise(types.LineStyleAlphaModifier):
      '''Alpha transparency based on random noise
      '''
   
      amplitude = float
      '''Amplitude of the noise
         @returns: float in [-inf, inf]
      '''
      
      blend = str
      '''Specify how the modifier value is blended into the base value
         @returns: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MINIMUM', 'MAXIMUM']
      '''
      
      curve = types.CurveMapping # (read only)
      '''Curve used for the curve mapping
         @returns: CurveMapping
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      influence = float
      '''Influence factor by which the modifier changes the property
         @returns: float in [0, 1]
      '''
      
      invert = bool
      '''Invert the fade-out direction of the linear mapping
         @returns: boolean
      '''
      
      mapping = str
      '''Select the mapping type
         @returns: enum in ['LINEAR', 'CURVE']
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      period = float
      '''Period of the noise
         @returns: float in [-inf, inf]
      '''
      
      seed = int
      '''Seed for the noise generation
         @returns: int in [-inf, inf]
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleAlphaModifier_Tangent(types.LineStyleAlphaModifier):
      '''Alpha transparency based on the direction of the stroke
      '''
   
      blend = str
      '''Specify how the modifier value is blended into the base value
         @returns: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MINIMUM', 'MAXIMUM']
      '''
      
      curve = types.CurveMapping # (read only)
      '''Curve used for the curve mapping
         @returns: CurveMapping
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      influence = float
      '''Influence factor by which the modifier changes the property
         @returns: float in [0, 1]
      '''
      
      invert = bool
      '''Invert the fade-out direction of the linear mapping
         @returns: boolean
      '''
      
      mapping = str
      '''Select the mapping type
         @returns: enum in ['LINEAR', 'CURVE']
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleAlphaModifiers(types.bpy_struct):
      '''Alpha modifiers for changing line alphas
      '''
   
      def new(name, type):
         '''Add a alpha modifier to line style
            Arguments:
            @name (str): New name for the alpha modifier (not unique)
               (never None)
            @type (str): Alpha modifier type to add
               in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT']
      
            @returns (types.LineStyleAlphaModifier): Newly added alpha modifier
               
         '''
      
         return types.LineStyleAlphaModifier

      def remove(modifier):
         '''Remove a alpha modifier from line style
            Arguments:
            @modifier (LineStyleAlphaModifier): Alpha modifier to remove
               (never None)
      
         '''
      
         pass

   class LineStyleColorModifier(types.LineStyleModifier):
      '''Base type to define line color modifiers
      '''
   
   class LineStyleColorModifier_AlongStroke(types.LineStyleColorModifier):
      '''Change line color along stroke
      '''
   
      blend = str
      '''Specify how the modifier value is blended into the base value
         @returns: enum in ['MIX', 'DARKEN', 'MULTIPLY', 'BURN', 'LIGHTEN', 'SCREEN', 'DODGE', 'ADD', 'OVERLAY', 'SOFT_LIGHT', 'LINEAR_LIGHT', 'DIFFERENCE', 'SUBTRACT', 'DIVIDE', 'HUE', 'SATURATION', 'COLOR', 'VALUE']
      '''
      
      color_ramp = types.ColorRamp # (read only)
      '''Color ramp used to change line color
         @returns: ColorRamp
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      influence = float
      '''Influence factor by which the modifier changes the property
         @returns: float in [0, 1]
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleColorModifier_CreaseAngle(types.LineStyleColorModifier):
      '''Change line color based on the underlying crease angle
      '''
   
      angle_max = float
      '''Maximum angle to modify thickness
         @returns: float in [-inf, inf]
      '''
      
      angle_min = float
      '''Minimum angle to modify thickness
         @returns: float in [-inf, inf]
      '''
      
      blend = str
      '''Specify how the modifier value is blended into the base value
         @returns: enum in ['MIX', 'DARKEN', 'MULTIPLY', 'BURN', 'LIGHTEN', 'SCREEN', 'DODGE', 'ADD', 'OVERLAY', 'SOFT_LIGHT', 'LINEAR_LIGHT', 'DIFFERENCE', 'SUBTRACT', 'DIVIDE', 'HUE', 'SATURATION', 'COLOR', 'VALUE']
      '''
      
      color_ramp = types.ColorRamp # (read only)
      '''Color ramp used to change line color
         @returns: ColorRamp
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      influence = float
      '''Influence factor by which the modifier changes the property
         @returns: float in [0, 1]
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleColorModifier_Curvature_3D(types.LineStyleColorModifier):
      '''Change line color based on the radial curvature of 3D mesh surfaces
      '''
   
      blend = str
      '''Specify how the modifier value is blended into the base value
         @returns: enum in ['MIX', 'DARKEN', 'MULTIPLY', 'BURN', 'LIGHTEN', 'SCREEN', 'DODGE', 'ADD', 'OVERLAY', 'SOFT_LIGHT', 'LINEAR_LIGHT', 'DIFFERENCE', 'SUBTRACT', 'DIVIDE', 'HUE', 'SATURATION', 'COLOR', 'VALUE']
      '''
      
      color_ramp = types.ColorRamp # (read only)
      '''Color ramp used to change line color
         @returns: ColorRamp
      '''
      
      curvature_max = float
      '''Maximum Curvature
         @returns: float in [-inf, inf]
      '''
      
      curvature_min = float
      '''Minimum Curvature
         @returns: float in [-inf, inf]
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      influence = float
      '''Influence factor by which the modifier changes the property
         @returns: float in [0, 1]
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleColorModifier_DistanceFromCamera(types.LineStyleColorModifier):
      '''Change line color based on the distance from the camera
      '''
   
      blend = str
      '''Specify how the modifier value is blended into the base value
         @returns: enum in ['MIX', 'DARKEN', 'MULTIPLY', 'BURN', 'LIGHTEN', 'SCREEN', 'DODGE', 'ADD', 'OVERLAY', 'SOFT_LIGHT', 'LINEAR_LIGHT', 'DIFFERENCE', 'SUBTRACT', 'DIVIDE', 'HUE', 'SATURATION', 'COLOR', 'VALUE']
      '''
      
      color_ramp = types.ColorRamp # (read only)
      '''Color ramp used to change line color
         @returns: ColorRamp
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      influence = float
      '''Influence factor by which the modifier changes the property
         @returns: float in [0, 1]
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      range_max = float
      '''Upper bound of the input range the mapping is applied
         @returns: float in [-inf, inf]
      '''
      
      range_min = float
      '''Lower bound of the input range the mapping is applied
         @returns: float in [-inf, inf]
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleColorModifier_DistanceFromObject(types.LineStyleColorModifier):
      '''Change line color based on the distance from an object
      '''
   
      blend = str
      '''Specify how the modifier value is blended into the base value
         @returns: enum in ['MIX', 'DARKEN', 'MULTIPLY', 'BURN', 'LIGHTEN', 'SCREEN', 'DODGE', 'ADD', 'OVERLAY', 'SOFT_LIGHT', 'LINEAR_LIGHT', 'DIFFERENCE', 'SUBTRACT', 'DIVIDE', 'HUE', 'SATURATION', 'COLOR', 'VALUE']
      '''
      
      color_ramp = types.ColorRamp # (read only)
      '''Color ramp used to change line color
         @returns: ColorRamp
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      influence = float
      '''Influence factor by which the modifier changes the property
         @returns: float in [0, 1]
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      range_max = float
      '''Upper bound of the input range the mapping is applied
         @returns: float in [-inf, inf]
      '''
      
      range_min = float
      '''Lower bound of the input range the mapping is applied
         @returns: float in [-inf, inf]
      '''
      
      target = types.Object
      '''Target object from which the distance is measured
         @returns: Object
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleColorModifier_Material(types.LineStyleColorModifier):
      '''Change line color based on a material attribute
      '''
   
      blend = str
      '''Specify how the modifier value is blended into the base value
         @returns: enum in ['MIX', 'DARKEN', 'MULTIPLY', 'BURN', 'LIGHTEN', 'SCREEN', 'DODGE', 'ADD', 'OVERLAY', 'SOFT_LIGHT', 'LINEAR_LIGHT', 'DIFFERENCE', 'SUBTRACT', 'DIVIDE', 'HUE', 'SATURATION', 'COLOR', 'VALUE']
      '''
      
      color_ramp = types.ColorRamp # (read only)
      '''Color ramp used to change line color
         @returns: ColorRamp
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      influence = float
      '''Influence factor by which the modifier changes the property
         @returns: float in [0, 1]
      '''
      
      material_attribute = str
      '''Specify which material attribute is used
         @returns: enum in ['LINE', 'LINE_R', 'LINE_G', 'LINE_B', 'LINE_A', 'DIFF', 'DIFF_R', 'DIFF_G', 'DIFF_B', 'SPEC', 'SPEC_R', 'SPEC_G', 'SPEC_B', 'SPEC_HARD', 'ALPHA']
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
      use_ramp = bool
      '''Use color ramp to map the BW average into an RGB color
         @returns: boolean
      '''
      
   class LineStyleColorModifier_Noise(types.LineStyleColorModifier):
      '''Change line color based on random noise
      '''
   
      amplitude = float
      '''Amplitude of the noise
         @returns: float in [-inf, inf]
      '''
      
      blend = str
      '''Specify how the modifier value is blended into the base value
         @returns: enum in ['MIX', 'DARKEN', 'MULTIPLY', 'BURN', 'LIGHTEN', 'SCREEN', 'DODGE', 'ADD', 'OVERLAY', 'SOFT_LIGHT', 'LINEAR_LIGHT', 'DIFFERENCE', 'SUBTRACT', 'DIVIDE', 'HUE', 'SATURATION', 'COLOR', 'VALUE']
      '''
      
      color_ramp = types.ColorRamp # (read only)
      '''Color ramp used to change line color
         @returns: ColorRamp
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      influence = float
      '''Influence factor by which the modifier changes the property
         @returns: float in [0, 1]
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      period = float
      '''Period of the noise
         @returns: float in [-inf, inf]
      '''
      
      seed = int
      '''Seed for the noise generation
         @returns: int in [-inf, inf]
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleColorModifier_Tangent(types.LineStyleColorModifier):
      '''Change line color based on the direction of a stroke
      '''
   
      blend = str
      '''Specify how the modifier value is blended into the base value
         @returns: enum in ['MIX', 'DARKEN', 'MULTIPLY', 'BURN', 'LIGHTEN', 'SCREEN', 'DODGE', 'ADD', 'OVERLAY', 'SOFT_LIGHT', 'LINEAR_LIGHT', 'DIFFERENCE', 'SUBTRACT', 'DIVIDE', 'HUE', 'SATURATION', 'COLOR', 'VALUE']
      '''
      
      color_ramp = types.ColorRamp # (read only)
      '''Color ramp used to change line color
         @returns: ColorRamp
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      influence = float
      '''Influence factor by which the modifier changes the property
         @returns: float in [0, 1]
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleColorModifiers(types.bpy_struct):
      '''Color modifiers for changing line colors
      '''
   
      def new(name, type):
         '''Add a color modifier to line style
            Arguments:
            @name (str): New name for the color modifier (not unique)
               (never None)
            @type (str): Color modifier type to add
               in ['ALONG_STROKE', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT']
      
            @returns (types.LineStyleColorModifier): Newly added color modifier
               
         '''
      
         return types.LineStyleColorModifier

      def remove(modifier):
         '''Remove a color modifier from line style
            Arguments:
            @modifier (LineStyleColorModifier): Color modifier to remove
               (never None)
      
         '''
      
         pass

   class LineStyleGeometryModifier(types.LineStyleModifier):
      '''Base type to define stroke geometry modifiers
      '''
   
   class LineStyleGeometryModifier_2DOffset(types.LineStyleGeometryModifier):
      '''Add two-dimensional offsets to stroke backbone geometry
      '''
   
      end = float
      '''Displacement that is applied from the end of the stroke
         @returns: float in [-inf, inf]
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      start = float
      '''Displacement that is applied from the beginning of the stroke
         @returns: float in [-inf, inf]
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
      x = float
      '''Displacement that is applied to the X coordinates of stroke vertices
         @returns: float in [-inf, inf]
      '''
      
      y = float
      '''Displacement that is applied to the Y coordinates of stroke vertices
         @returns: float in [-inf, inf]
      '''
      
   class LineStyleGeometryModifier_2DTransform(types.LineStyleGeometryModifier):
      '''Apply two-dimensional scaling and rotation to stroke backbone geometry
      '''
   
      angle = float
      '''Rotation angle
         @returns: float in [-inf, inf]
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      pivot = str
      '''Pivot of scaling and rotation operations
         @returns: enum in ['CENTER', 'START', 'END', 'PARAM', 'ABSOLUTE']
      '''
      
      pivot_u = float
      '''Pivot in terms of the stroke point parameter u (0 <= u <= 1)
         @returns: float in [0, 1]
      '''
      
      pivot_x = float
      '''2D X coordinate of the absolute pivot
         @returns: float in [-inf, inf]
      '''
      
      pivot_y = float
      '''2D Y coordinate of the absolute pivot
         @returns: float in [-inf, inf]
      '''
      
      scale_x = float
      '''Scaling factor that is applied along the X axis
         @returns: float in [-inf, inf]
      '''
      
      scale_y = float
      '''Scaling factor that is applied along the Y axis
         @returns: float in [-inf, inf]
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleGeometryModifier_BackboneStretcher(types.LineStyleGeometryModifier):
      '''Stretch the beginning and the end of stroke backbone
      '''
   
      backbone_length = float
      '''Amount of backbone stretching
         @returns: float in [-inf, inf]
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleGeometryModifier_BezierCurve(types.LineStyleGeometryModifier):
      '''Replace stroke backbone geometry by a Bezier curve approximation of the original backbone geometry
      '''
   
      error = float
      '''Maximum distance allowed between the new Bezier curve and the original backbone geometry
         @returns: float in [-inf, inf]
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleGeometryModifier_Blueprint(types.LineStyleGeometryModifier):
      '''Produce a blueprint using circular, elliptic, and square contour strokes
      '''
   
      backbone_length = float
      '''Amount of backbone stretching
         @returns: float in [-inf, inf]
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      random_backbone = int
      '''Randomness of the backbone stretching
         @returns: int in [0, inf]
      '''
      
      random_center = int
      '''Randomness of the center
         @returns: int in [0, inf]
      '''
      
      random_radius = int
      '''Randomness of the radius
         @returns: int in [0, inf]
      '''
      
      rounds = int
      '''Number of rounds in contour strokes
         @returns: int in [1, 1000]
      '''
      
      shape = str
      '''Select the shape of blueprint contour strokes
         @returns: enum in ['CIRCLES', 'ELLIPSES', 'SQUARES']
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleGeometryModifier_GuidingLines(types.LineStyleGeometryModifier):
      '''Modify the stroke geometry so that it corresponds to its main direction line
      '''
   
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      offset = float
      '''Displacement that is applied to the main direction line along its normal
         @returns: float in [-inf, inf]
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleGeometryModifier_PerlinNoise1D(types.LineStyleGeometryModifier):
      '''Add one-dimensional Perlin noise to stroke backbone geometry
      '''
   
      amplitude = float
      '''Amplitude of the Perlin noise
         @returns: float in [-inf, inf]
      '''
      
      angle = float
      '''Displacement direction
         @returns: float in [-inf, inf]
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      frequency = float
      '''Frequency of the Perlin noise
         @returns: float in [-inf, inf]
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      octaves = int
      '''Number of octaves (i.e., the amount of detail of the Perlin noise)
         @returns: int in [0, inf]
      '''
      
      seed = int
      '''Seed for random number generation (if negative, time is used as a seed instead)
         @returns: int in [-inf, inf]
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleGeometryModifier_PerlinNoise2D(types.LineStyleGeometryModifier):
      '''Add two-dimensional Perlin noise to stroke backbone geometry
      '''
   
      amplitude = float
      '''Amplitude of the Perlin noise
         @returns: float in [-inf, inf]
      '''
      
      angle = float
      '''Displacement direction
         @returns: float in [-inf, inf]
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      frequency = float
      '''Frequency of the Perlin noise
         @returns: float in [-inf, inf]
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      octaves = int
      '''Number of octaves (i.e., the amount of detail of the Perlin noise)
         @returns: int in [0, inf]
      '''
      
      seed = int
      '''Seed for random number generation (if negative, time is used as a seed instead)
         @returns: int in [-inf, inf]
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleGeometryModifier_Polygonalization(types.LineStyleGeometryModifier):
      '''Modify the stroke geometry so that it looks more 'polygonal'
      '''
   
      error = float
      '''Maximum distance between the original stroke and its polygonal approximation
         @returns: float in [-inf, inf]
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleGeometryModifier_Sampling(types.LineStyleGeometryModifier):
      '''Specify a new sampling value that determines the resolution of stroke polylines
      '''
   
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      sampling = float
      '''New sampling value to be used for subsequent modifiers
         @returns: float in [0, 10000]
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleGeometryModifier_Simplification(types.LineStyleGeometryModifier):
      '''Simplify the stroke set
      '''
   
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      tolerance = float
      '''Distance below which segments will be merged
         @returns: float in [-inf, inf]
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleGeometryModifier_SinusDisplacement(types.LineStyleGeometryModifier):
      '''Add sinus displacement to stroke backbone geometry
      '''
   
      amplitude = float
      '''Amplitude of the sinus displacement
         @returns: float in [-inf, inf]
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      phase = float
      '''Phase of the sinus displacement
         @returns: float in [-inf, inf]
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
      wavelength = float
      '''Wavelength of the sinus displacement
         @returns: float in [-inf, inf]
      '''
      
   class LineStyleGeometryModifier_SpatialNoise(types.LineStyleGeometryModifier):
      '''Add spatial noise to stroke backbone geometry
      '''
   
      amplitude = float
      '''Amplitude of the spatial noise
         @returns: float in [-inf, inf]
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      octaves = int
      '''Number of octaves (i.e., the amount of detail of the spatial noise)
         @returns: int in [0, inf]
      '''
      
      scale = float
      '''Scale of the spatial noise
         @returns: float in [-inf, inf]
      '''
      
      smooth = bool
      '''If true, the spatial noise is smooth
         @returns: boolean
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
      use_pure_random = bool
      '''If true, the spatial noise does not show any coherence
         @returns: boolean
      '''
      
   class LineStyleGeometryModifier_TipRemover(types.LineStyleGeometryModifier):
      '''Remove a piece of stroke at the beginning and the end of stroke backbone
      '''
   
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      tip_length = float
      '''Length of tips to be removed
         @returns: float in [-inf, inf]
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleGeometryModifiers(types.bpy_struct):
      '''Geometry modifiers for changing line geometries
      '''
   
      def new(name, type):
         '''Add a geometry modifier to line style
            Arguments:
            @name (str): New name for the geometry modifier (not unique)
               (never None)
            @type (str): Geometry modifier type to add
               in ['2D_OFFSET', '2D_TRANSFORM', 'BACKBONE_STRETCHER', 'BEZIER_CURVE', 'BLUEPRINT', 'GUIDING_LINES', 'PERLIN_NOISE_1D', 'PERLIN_NOISE_2D', 'POLYGONIZATION', 'SAMPLING', 'SIMPLIFICATION', 'SINUS_DISPLACEMENT', 'SPATIAL_NOISE', 'TIP_REMOVER']
      
            @returns (types.LineStyleGeometryModifier): Newly added geometry modifier
               
         '''
      
         return types.LineStyleGeometryModifier

      def remove(modifier):
         '''Remove a geometry modifier from line style
            Arguments:
            @modifier (LineStyleGeometryModifier): Geometry modifier to remove
               (never None)
      
         '''
      
         pass

   class LineStyleModifier(types.bpy_struct):
      '''Base type to define modifiers
      '''
   
   class LineStyleTextureSlot(types.TextureSlot):
      '''Texture slot for textures in a LineStyle data-block
      '''
   
      alpha_factor = float
      '''Amount texture affects alpha
         @returns: float in [-inf, inf]
      '''
      
      diffuse_color_factor = float
      '''Amount texture affects diffuse color
         @returns: float in [-inf, inf]
      '''
      
      mapping = str
      '''
         @returns: enum in ['FLAT', 'CUBE', 'TUBE', 'SPHERE']
      '''
      
      mapping_x = str
      '''
         @returns: enum in ['NONE', 'X', 'Y', 'Z']
      '''
      
      mapping_y = str
      '''
         @returns: enum in ['NONE', 'X', 'Y', 'Z']
      '''
      
      mapping_z = str
      '''
         @returns: enum in ['NONE', 'X', 'Y', 'Z']
      '''
      
      texture_coords = str
      '''Texture coordinates used to map the texture onto the background
         @returns: enum in ['WINDOW', 'GLOBAL', 'ALONG_STROKE', 'ORCO']
      '''
      
      use_map_alpha = bool
      '''The texture affects the alpha value
         @returns: boolean
      '''
      
      use_map_color_diffuse = bool
      '''The texture affects basic color of the stroke
         @returns: boolean
      '''
      
   class LineStyleTextureSlots(types.bpy_struct):
      '''Collection of texture slots
      '''
   
      @classmethod
      def add():
         '''add
            @returns (types.LineStyleTextureSlot): The newly initialized mtex
               
         '''
      
         return types.LineStyleTextureSlot

      @classmethod
      def create(index):
         '''create
            Arguments:
            @index (int): Slot index to initialize
               in [0, inf]
      
            @returns (types.LineStyleTextureSlot): The newly initialized mtex
               
         '''
      
         return types.LineStyleTextureSlot

      @classmethod
      def clear(index):
         '''clear
            Arguments:
            @index (int): Slot index to clear
               in [0, inf]
      
         '''
      
         pass

   class LineStyleThicknessModifier(types.LineStyleModifier):
      '''Base type to define line thickness modifiers
      '''
   
   class LineStyleThicknessModifier_AlongStroke(types.LineStyleThicknessModifier):
      '''Change line thickness along stroke
      '''
   
      blend = str
      '''Specify how the modifier value is blended into the base value
         @returns: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MINIMUM', 'MAXIMUM']
      '''
      
      curve = types.CurveMapping # (read only)
      '''Curve used for the curve mapping
         @returns: CurveMapping
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      influence = float
      '''Influence factor by which the modifier changes the property
         @returns: float in [0, 1]
      '''
      
      invert = bool
      '''Invert the fade-out direction of the linear mapping
         @returns: boolean
      '''
      
      mapping = str
      '''Select the mapping type
         @returns: enum in ['LINEAR', 'CURVE']
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['ALONG_STROKE', 'CALLIGRAPHY', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
      value_max = float
      '''Maximum output value of the mapping
         @returns: float in [-inf, inf]
      '''
      
      value_min = float
      '''Minimum output value of the mapping
         @returns: float in [-inf, inf]
      '''
      
   class LineStyleThicknessModifier_Calligraphy(types.LineStyleThicknessModifier):
      '''Change line thickness so that stroke looks like made with a calligraphic pen
      '''
   
      blend = str
      '''Specify how the modifier value is blended into the base value
         @returns: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MINIMUM', 'MAXIMUM']
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      influence = float
      '''Influence factor by which the modifier changes the property
         @returns: float in [0, 1]
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      orientation = float
      '''Angle of the main direction
         @returns: float in [-inf, inf]
      '''
      
      thickness_max = float
      '''Maximum thickness in the main direction
         @returns: float in [0, 10000]
      '''
      
      thickness_min = float
      '''Minimum thickness in the direction perpendicular to the main direction
         @returns: float in [0, 10000]
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['ALONG_STROKE', 'CALLIGRAPHY', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleThicknessModifier_CreaseAngle(types.LineStyleThicknessModifier):
      '''Line thickness based on the angle between two adjacent faces
      '''
   
      angle_max = float
      '''Maximum angle to modify thickness
         @returns: float in [-inf, inf]
      '''
      
      angle_min = float
      '''Minimum angle to modify thickness
         @returns: float in [-inf, inf]
      '''
      
      blend = str
      '''Specify how the modifier value is blended into the base value
         @returns: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MINIMUM', 'MAXIMUM']
      '''
      
      curve = types.CurveMapping # (read only)
      '''Curve used for the curve mapping
         @returns: CurveMapping
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      influence = float
      '''Influence factor by which the modifier changes the property
         @returns: float in [0, 1]
      '''
      
      invert = bool
      '''Invert the fade-out direction of the linear mapping
         @returns: boolean
      '''
      
      mapping = str
      '''Select the mapping type
         @returns: enum in ['LINEAR', 'CURVE']
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      thickness_max = float
      '''Maximum thickness
         @returns: float in [0, 10000]
      '''
      
      thickness_min = float
      '''Minimum thickness
         @returns: float in [0, 10000]
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['ALONG_STROKE', 'CALLIGRAPHY', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleThicknessModifier_Curvature_3D(types.LineStyleThicknessModifier):
      '''Line thickness based on the radial curvature of 3D mesh surfaces
      '''
   
      blend = str
      '''Specify how the modifier value is blended into the base value
         @returns: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MINIMUM', 'MAXIMUM']
      '''
      
      curvature_max = float
      '''Maximum Curvature
         @returns: float in [0, 10000]
      '''
      
      curvature_min = float
      '''Minimum Curvature
         @returns: float in [0, 10000]
      '''
      
      curve = types.CurveMapping # (read only)
      '''Curve used for the curve mapping
         @returns: CurveMapping
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      influence = float
      '''Influence factor by which the modifier changes the property
         @returns: float in [0, 1]
      '''
      
      invert = bool
      '''Invert the fade-out direction of the linear mapping
         @returns: boolean
      '''
      
      mapping = str
      '''Select the mapping type
         @returns: enum in ['LINEAR', 'CURVE']
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      thickness_max = float
      '''Maximum thickness
         @returns: float in [0, 10000]
      '''
      
      thickness_min = float
      '''Minimum thickness
         @returns: float in [0, 10000]
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['ALONG_STROKE', 'CALLIGRAPHY', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleThicknessModifier_DistanceFromCamera(types.LineStyleThicknessModifier):
      '''Change line thickness based on the distance from the camera
      '''
   
      blend = str
      '''Specify how the modifier value is blended into the base value
         @returns: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MINIMUM', 'MAXIMUM']
      '''
      
      curve = types.CurveMapping # (read only)
      '''Curve used for the curve mapping
         @returns: CurveMapping
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      influence = float
      '''Influence factor by which the modifier changes the property
         @returns: float in [0, 1]
      '''
      
      invert = bool
      '''Invert the fade-out direction of the linear mapping
         @returns: boolean
      '''
      
      mapping = str
      '''Select the mapping type
         @returns: enum in ['LINEAR', 'CURVE']
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      range_max = float
      '''Upper bound of the input range the mapping is applied
         @returns: float in [-inf, inf]
      '''
      
      range_min = float
      '''Lower bound of the input range the mapping is applied
         @returns: float in [-inf, inf]
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['ALONG_STROKE', 'CALLIGRAPHY', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
      value_max = float
      '''Maximum output value of the mapping
         @returns: float in [-inf, inf]
      '''
      
      value_min = float
      '''Minimum output value of the mapping
         @returns: float in [-inf, inf]
      '''
      
   class LineStyleThicknessModifier_DistanceFromObject(types.LineStyleThicknessModifier):
      '''Change line thickness based on the distance from an object
      '''
   
      blend = str
      '''Specify how the modifier value is blended into the base value
         @returns: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MINIMUM', 'MAXIMUM']
      '''
      
      curve = types.CurveMapping # (read only)
      '''Curve used for the curve mapping
         @returns: CurveMapping
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      influence = float
      '''Influence factor by which the modifier changes the property
         @returns: float in [0, 1]
      '''
      
      invert = bool
      '''Invert the fade-out direction of the linear mapping
         @returns: boolean
      '''
      
      mapping = str
      '''Select the mapping type
         @returns: enum in ['LINEAR', 'CURVE']
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      range_max = float
      '''Upper bound of the input range the mapping is applied
         @returns: float in [-inf, inf]
      '''
      
      range_min = float
      '''Lower bound of the input range the mapping is applied
         @returns: float in [-inf, inf]
      '''
      
      target = types.Object
      '''Target object from which the distance is measured
         @returns: Object
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['ALONG_STROKE', 'CALLIGRAPHY', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
      value_max = float
      '''Maximum output value of the mapping
         @returns: float in [-inf, inf]
      '''
      
      value_min = float
      '''Minimum output value of the mapping
         @returns: float in [-inf, inf]
      '''
      
   class LineStyleThicknessModifier_Material(types.LineStyleThicknessModifier):
      '''Change line thickness based on a material attribute
      '''
   
      blend = str
      '''Specify how the modifier value is blended into the base value
         @returns: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MINIMUM', 'MAXIMUM']
      '''
      
      curve = types.CurveMapping # (read only)
      '''Curve used for the curve mapping
         @returns: CurveMapping
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      influence = float
      '''Influence factor by which the modifier changes the property
         @returns: float in [0, 1]
      '''
      
      invert = bool
      '''Invert the fade-out direction of the linear mapping
         @returns: boolean
      '''
      
      mapping = str
      '''Select the mapping type
         @returns: enum in ['LINEAR', 'CURVE']
      '''
      
      material_attribute = str
      '''Specify which material attribute is used
         @returns: enum in ['LINE', 'LINE_R', 'LINE_G', 'LINE_B', 'LINE_A', 'DIFF', 'DIFF_R', 'DIFF_G', 'DIFF_B', 'SPEC', 'SPEC_R', 'SPEC_G', 'SPEC_B', 'SPEC_HARD', 'ALPHA']
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['ALONG_STROKE', 'CALLIGRAPHY', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
      value_max = float
      '''Maximum output value of the mapping
         @returns: float in [-inf, inf]
      '''
      
      value_min = float
      '''Minimum output value of the mapping
         @returns: float in [-inf, inf]
      '''
      
   class LineStyleThicknessModifier_Noise(types.LineStyleThicknessModifier):
      '''Line thickness based on random noise
      '''
   
      amplitude = float
      '''Amplitude of the noise
         @returns: float in [-inf, inf]
      '''
      
      blend = str
      '''Specify how the modifier value is blended into the base value
         @returns: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MINIMUM', 'MAXIMUM']
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      influence = float
      '''Influence factor by which the modifier changes the property
         @returns: float in [0, 1]
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      period = float
      '''Period of the noise
         @returns: float in [-inf, inf]
      '''
      
      seed = int
      '''Seed for the noise generation
         @returns: int in [-inf, inf]
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['ALONG_STROKE', 'CALLIGRAPHY', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
      use_asymmetric = bool
      '''Allow thickness to be assigned asymmetrically
         @returns: boolean
      '''
      
   class LineStyleThicknessModifier_Tangent(types.LineStyleThicknessModifier):
      '''Thickness based on the direction of the stroke
      '''
   
      blend = str
      '''Specify how the modifier value is blended into the base value
         @returns: enum in ['MIX', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'DIFFERENCE', 'MINIMUM', 'MAXIMUM']
      '''
      
      curve = types.CurveMapping # (read only)
      '''Curve used for the curve mapping
         @returns: CurveMapping
      '''
      
      expanded = bool
      '''True if the modifier tab is expanded
         @returns: boolean
      '''
      
      influence = float
      '''Influence factor by which the modifier changes the property
         @returns: float in [0, 1]
      '''
      
      invert = bool
      '''Invert the fade-out direction of the linear mapping
         @returns: boolean
      '''
      
      mapping = str
      '''Select the mapping type
         @returns: enum in ['LINEAR', 'CURVE']
      '''
      
      name = str
      '''Name of the modifier
         @returns: string, (never None)
      '''
      
      thickness_max = float
      '''Maximum thickness
         @returns: float in [0, 10000]
      '''
      
      thickness_min = float
      '''Minimum thickness
         @returns: float in [0, 10000]
      '''
      
      type = str # (read only)
      '''Type of the modifier
         @returns: enum in ['ALONG_STROKE', 'CALLIGRAPHY', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT']
      '''
      
      use = bool
      '''Enable or disable this modifier during stroke rendering
         @returns: boolean
      '''
      
   class LineStyleThicknessModifiers(types.bpy_struct):
      '''Thickness modifiers for changing line thickness
      '''
   
      def new(name, type):
         '''Add a thickness modifier to line style
            Arguments:
            @name (str): New name for the thickness modifier (not unique)
               (never None)
            @type (str): Thickness modifier type to add
               in ['ALONG_STROKE', 'CALLIGRAPHY', 'CREASE_ANGLE', 'CURVATURE_3D', 'DISTANCE_FROM_CAMERA', 'DISTANCE_FROM_OBJECT', 'MATERIAL', 'NOISE', 'TANGENT']
      
            @returns (types.LineStyleThicknessModifier): Newly added thickness modifier
               
         '''
      
         return types.LineStyleThicknessModifier

      def remove(modifier):
         '''Remove a thickness modifier from line style
            Arguments:
            @modifier (LineStyleThicknessModifier): Thickness modifier to remove
               (never None)
      
         '''
      
         pass

   class Linesets(types.bpy_struct):
      '''Line sets for associating lines and style parameters
      '''
   
      active = types.FreestyleLineSet # (read only)
      '''Active line set being displayed
         @returns: FreestyleLineSet
      '''
      
      active_index = int
      '''Index of active line set slot
         @returns: int in [0, inf]
      '''
      
      def new(name):
         '''Add a line set to scene render layer Freestyle settings
            Arguments:
            @name (str): New name for the line set (not unique)
               (never None)
      
            @returns (types.FreestyleLineSet): Newly created line set
               
         '''
      
         return types.FreestyleLineSet

      def remove(lineset):
         '''Remove a line set from scene render layer Freestyle settings
            Arguments:
            @lineset (FreestyleLineSet): Line set to remove
               (never None)
      
         '''
      
         pass

   class LocRotScale(types.KeyingSetInfo):
      '''
      '''
   
      def generate(self, context, ks, data):
         
      
         pass
      
      def iterator(ksi, context, ks):
         
      
         pass
      
      def poll(ksi, context):
         
      
         pass
      
   class Location(types.KeyingSetInfo):
      '''
      '''
   
      def generate(_ksi, _context, ks, data):
         
      
         pass
      
      def iterator(ksi, context, ks):
         
      
         pass
      
      def poll(ksi, context):
         
      
         pass
      
   class LockedTrackConstraint(types.Constraint):
      '''Point toward the target along the track axis, while locking the other axis
      '''
   
      head_tail = float
      '''Target along length of bone: Head=0, Tail=1
         @returns: float in [0, 1]
      '''
      
      lock_axis = str
      '''Axis that points upward
         @returns: enum in ['LOCK_X', 'LOCK_Y', 'LOCK_Z']
      '''
      
      subtarget = str
      '''Armature bone, mesh or lattice vertex group, ...
         @returns: string, (never None)
      '''
      
      target = types.Object
      '''Target object
         @returns: Object
      '''
      
      track_axis = str
      '''Axis that points to the target object
         @returns: enum in ['TRACK_X', 'TRACK_Y', 'TRACK_Z', 'TRACK_NEGATIVE_X', 'TRACK_NEGATIVE_Y', 'TRACK_NEGATIVE_Z']
      '''
      
      use_bbone_shape = bool
      '''Follow shape of B-Bone segments when calculating Head/Tail position
         @returns: boolean
      '''
      
   class LoopColors(types.bpy_struct):
      '''Collection of vertex colors
      '''
   
      active = types.MeshLoopColorLayer
      '''Active vertex color layer
         @returns: MeshLoopColorLayer
      '''
      
      active_index = int
      '''Active vertex color index
         @returns: int in [0, inf]
      '''
      
      def new(name="Col", do_init=True):
         '''Add a vertex color layer to Mesh
            Arguments:
            @name (str): Vertex color name
               (optional, never None)
            @do_init (bool): Whether new layer's data should be initialized by copying current active one
               (optional)
      
            @returns (types.MeshLoopColorLayer): The newly created layer
               
         '''
      
         return types.MeshLoopColorLayer

      def remove(layer):
         '''Remove a vertex color layer
            Arguments:
            @layer (MeshLoopColorLayer): The layer to remove
               (never None)
      
         '''
      
         pass

   class MASK_UL_layers(types.UIList):
      '''
      '''
   
      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
         
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class MATERIAL_UL_matslots(types.UIList):
      '''
      '''
   
      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
         
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class MBPreferences(types.AddonPreferences):
      '''
      '''
   
      auto_check_update = bool
      '''If enabled, auto-check for updates using an interval
         @returns: boolean
      '''
      
      updater_intrval_days = int
      '''Number of days between checking for updates
         @returns: int in [0, 31]
      '''
      
      updater_intrval_hours = int
      '''Number of hours between checking for updates
         @returns: int in [0, 23]
      '''
      
      updater_intrval_minutes = int
      '''Number of minutes between checking for updates
         @returns: int in [0, 59]
      '''
      
      updater_intrval_months = int
      '''Number of months between checking for updates
         @returns: int in [0, inf]
      '''
      
      use_censors = bool
      '''Use censors to cover genitals and breasts
         @returns: boolean
      '''
      
      def draw(self, context):
         
      
         pass
      
   class MESH_UL_fmaps(types.UIList):
      '''
      '''
   
      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
         
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class MESH_UL_shape_keys(types.UIList):
      '''
      '''
   
      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      def draw_item(self, _context, layout, _data, item, icon, active_data, _active_propname, index):
         
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class MESH_UL_uvmaps(types.UIList):
      '''
      '''
   
      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
         
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class MESH_UL_vcols(types.UIList):
      '''
      '''
   
      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
         
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class MESH_UL_vgroups(types.UIList):
      '''
      '''
   
      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      def draw_item(self, _context, layout, _data, item, icon, _active_data_, _active_propname, _index):
         
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class Macro(types.bpy_struct):
      '''Storage of a macro operator being executed, or registered after execution
      '''
   
      bl_description = str
      '''
         @returns: string
      '''
      
      bl_idname = str
      '''
         @returns: string, (never None)
      '''
      
      bl_label = str
      '''
         @returns: string, (never None)
      '''
      
      bl_options = str
      '''Options for this operator type
         @returns: enum set in {'REGISTER', 'UNDO', 'UNDO_GROUPED', 'BLOCKING', 'MACRO', 'GRAB_CURSOR', 'GRAB_CURSOR_X', 'GRAB_CURSOR_Y', 'PRESET', 'INTERNAL'}
      '''
      
      bl_translation_context = str
      '''
         @returns: string
      '''
      
      bl_undo_group = str
      '''
         @returns: string
      '''
      
      name = str # (read only)
      '''
         @returns: string, (never None)
      '''
      
      properties = types.OperatorProperties # (read only)
      '''
         @returns: OperatorProperties, (never None)
      '''
      
      def report(type, message):
         '''report
            Arguments:
            @type (str): set in {'DEBUG', 'INFO', 'OPERATOR', 'PROPERTY', 'WARNING', 'ERROR', 'ERROR_INVALID_INPUT', 'ERROR_INVALID_CONTEXT', 'ERROR_OUT_OF_MEMORY'}
            @message (str): (never None)
      
         '''
      
         pass

      @classmethod
      def poll(context):
         '''Test if the operator can be called or not
            Arguments:
            @context (Context): (never None)
      
            @returns (bool): 
         '''
      
         return bool

      def draw(context):
         '''Draw function for the operator
            Arguments:
            @context (Context): (never None)
      
         '''
      
         pass

      def define(self, opname):
         
      
         pass
      
   class MagicTexture(types.Texture):
      '''Procedural noise texture
      '''
   
      noise_depth = int
      '''Depth of the noise
         @returns: int in [0, 30]
      '''
      
      turbulence = float
      '''Turbulence of the noise
         @returns: float in [0.0001, inf]
      '''
      
      users_material = None # (readonly)
      '''Materials that use this texture
         
      '''
      
      
      users_object_modifier = None # (readonly)
      '''Object modifiers that use this texture
         
      '''
      
      
   class MaintainVolumeConstraint(types.Constraint):
      '''Maintain a constant volume along a single scaling axis
      '''
   
      free_axis = str
      '''The free scaling axis of the object
         @returns: enum in ['SAMEVOL_X', 'SAMEVOL_Y', 'SAMEVOL_Z']
      '''
      
      mode = str
      '''The way the constraint treats original non-free axis scaling
         @returns: enum in ['STRICT', 'UNIFORM', 'SINGLE_AXIS']
      '''
      
      volume = float
      '''Volume of the bone at rest
         @returns: float in [0.001, 100]
      '''
      
   class MarbleTexture(types.Texture):
      '''Procedural noise texture
      '''
   
      marble_type = str
      '''
         @returns: enum in ['SOFT', 'SHARP', 'SHARPER']
      '''
      
      nabla = float
      '''Size of derivative offset used for calculating normal
         @returns: float in [0.001, 0.1]
      '''
      
      noise_basis = str
      '''Noise basis used for turbulence
         @returns: enum in ['BLENDER_ORIGINAL', 'ORIGINAL_PERLIN', 'IMPROVED_PERLIN', 'VORONOI_F1', 'VORONOI_F2', 'VORONOI_F3', 'VORONOI_F4', 'VORONOI_F2_F1', 'VORONOI_CRACKLE', 'CELL_NOISE']
      '''
      
      noise_basis_2 = str
      '''
         @returns: enum in ['SIN', 'SAW', 'TRI']
      '''
      
      noise_depth = int
      '''Depth of the cloud calculation
         @returns: int in [0, 30]
      '''
      
      noise_scale = float
      '''Scaling for noise input
         @returns: float in [0.0001, inf]
      '''
      
      noise_type = str
      '''
         @returns: enum in ['SOFT_NOISE', 'HARD_NOISE']
      '''
      
      turbulence = float
      '''Turbulence of the bandnoise and ringnoise types
         @returns: float in [0.0001, inf]
      '''
      
      users_material = None # (readonly)
      '''Materials that use this texture
         
      '''
      
      
      users_object_modifier = None # (readonly)
      '''Object modifiers that use this texture
         
      '''
      
      
   class Mask(types.ID):
      '''Mask data-block defining mask for compositing
      '''
   
      active_layer_index = int
      '''Index of active layer in list of all mask's layers
         @returns: int in [-inf, inf]
      '''
      
      animation_data = types.AnimData # (read only)
      '''Animation data for this data-block
         @returns: AnimData
      '''
      
      frame_end = int
      '''Final frame of the mask (used for sequencer)
         @returns: int in [0, 1048574]
      '''
      
      frame_start = int
      '''First frame of the mask (used for sequencer)
         @returns: int in [0, 1048574]
      '''
      
      layers = types.MaskLayers # (read only)
      '''Collection of layers which defines this mask
         @returns: MaskLayers Collection of MaskLayer
      '''
      
   class MaskLayer(types.bpy_struct):
      '''Single layer used for masking pixels
      '''
   
      alpha = float
      '''Render Opacity
         @returns: float in [-inf, inf]
      '''
      
      blend = str
      '''Method of blending mask layers
         @returns: enum in ['MERGE_ADD', 'MERGE_SUBTRACT', 'ADD', 'SUBTRACT', 'LIGHTEN', 'DARKEN', 'MUL', 'REPLACE', 'DIFFERENCE']
      '''
      
      falloff = str
      '''Falloff type the feather
         @returns: enum in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR']
      '''
      
      hide = bool
      '''Restrict visibility in the viewport
         @returns: boolean
      '''
      
      hide_render = bool
      '''Restrict renderability
         @returns: boolean
      '''
      
      hide_select = bool
      '''Restrict selection in the viewport
         @returns: boolean
      '''
      
      invert = bool
      '''Invert the mask black/white
         @returns: boolean
      '''
      
      name = str
      '''Unique name of layer
         @returns: string, (never None)
      '''
      
      select = bool
      '''Layer is selected for editing in the Dope Sheet
         @returns: boolean
      '''
      
      splines = types.MaskSplines # (read only)
      '''Collection of splines which defines this layer
         @returns: MaskSplines Collection of MaskSpline
      '''
      
      use_fill_holes = bool
      '''Calculate holes when filling overlapping curves
         @returns: boolean
      '''
      
      use_fill_overlap = bool
      '''Calculate self intersections and overlap before filling
         @returns: boolean
      '''
      
   class MaskLayers(types.bpy_struct):
      '''Collection of layers used by mask
      '''
   
      active = types.MaskLayer
      '''Active layer in this mask
         @returns: MaskLayer
      '''
      
      def new(name=""):
         '''Add layer to this mask
            Arguments:
            @name (str): Name of new layer
               (optional, never None)
      
            @returns (types.MaskLayer): New mask layer
               
         '''
      
         return types.MaskLayer

      def remove(layer):
         '''Remove layer from this mask
            Arguments:
            @layer (MaskLayer): Shape to be removed
               (never None)
      
         '''
      
         pass

      def clear():
         '''Remove all mask layers
         '''
      
         pass

   class MaskModifier(types.Modifier):
      '''Mask modifier to hide parts of the mesh
      '''
   
      armature = types.Object
      '''Armature to use as source of bones to mask
         @returns: Object
      '''
      
      invert_vertex_group = bool
      '''Use vertices that are not part of region defined
         @returns: boolean
      '''
      
      mode = str
      '''
         @returns: enum in ['VERTEX_GROUP', 'ARMATURE']
      '''
      
      threshold = float
      '''Weights over this threshold remain
         @returns: float in [0, 1]
      '''
      
      vertex_group = str
      '''Vertex group name
         @returns: string, (never None)
      '''
      
   class MaskParent(types.bpy_struct):
      '''Parenting settings for masking element
      '''
   
      id = types.ID
      '''ID-block to which masking element would be parented to or to it's property
         @returns: ID
      '''
      
      id_type = str
      '''Type of ID-block that can be used
         @returns: enum in ['MOVIECLIP']
      '''
      
      parent = str
      '''Name of parent object in specified data-block to which parenting happens
         @returns: string, (never None)
      '''
      
      sub_parent = str
      '''Name of parent sub-object in specified data-block to which parenting happens
         @returns: string, (never None)
      '''
      
      type = str
      '''Parent Type
         @returns: enum in ['POINT_TRACK', 'PLANE_TRACK']
      '''
      
   class MaskSequence(types.Sequence):
      '''Sequence strip to load a video from a mask
      '''
   
      alpha_mode = str
      '''Representation of alpha information in the RGBA pixels
         @returns: enum in ['STRAIGHT', 'PREMUL']
      '''
      
      animation_offset_end = int
      '''Animation end offset (trim end)
         @returns: int in [0, inf]
      '''
      
      animation_offset_start = int
      '''Animation start offset (trim start)
         @returns: int in [0, inf]
      '''
      
      color_multiply = float
      '''
         @returns: float in [0, 20]
      '''
      
      color_saturation = float
      '''Adjust the intensity of the input's color
         @returns: float in [0, 20]
      '''
      
      crop = types.SequenceCrop # (read only)
      '''
         @returns: SequenceCrop
      '''
      
      mask = types.Mask
      '''Mask that this sequence uses
         @returns: Mask
      '''
      
      strobe = float
      '''Only display every nth frame
         @returns: float in [1, 30]
      '''
      
      transform = types.SequenceTransform # (read only)
      '''
         @returns: SequenceTransform
      '''
      
      use_crop = bool
      '''Crop image before processing
         @returns: boolean
      '''
      
      use_deinterlace = bool
      '''Remove fields from video movies
         @returns: boolean
      '''
      
      use_flip_x = bool
      '''Flip on the X axis
         @returns: boolean
      '''
      
      use_flip_y = bool
      '''Flip on the Y axis
         @returns: boolean
      '''
      
      use_float = bool
      '''Convert input to float data
         @returns: boolean
      '''
      
      use_reverse_frames = bool
      '''Reverse frame order
         @returns: boolean
      '''
      
      use_translation = bool
      '''Translate image before processing
         @returns: boolean
      '''
      
   class MaskSpline(types.bpy_struct):
      '''Single spline used for defining mask shape
      '''
   
      offset_mode = str
      '''The method used for calculating the feather offset
         @returns: enum in ['EVEN', 'SMOOTH']
      '''
      
      points = types.MaskSplinePoints # (read only)
      '''Collection of points
         @returns: MaskSplinePoints Collection of MaskSplinePoint
      '''
      
      use_cyclic = bool
      '''Make this spline a closed loop
         @returns: boolean
      '''
      
      use_fill = bool
      '''Make this spline filled
         @returns: boolean
      '''
      
      use_self_intersection_check = bool
      '''Prevent feather from self-intersections
         @returns: boolean
      '''
      
      weight_interpolation = str
      '''The type of weight interpolation for spline
         @returns: enum in ['LINEAR', 'EASE']
      '''
      
   class MaskSplinePoint(types.bpy_struct):
      '''Single point in spline used for defining mask
      '''
   
      co = float
      '''Coordinates of the control point
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      feather_points = types.MaskSplinePointUW # (read only)
      '''Points defining feather
         @returns: Collection of MaskSplinePointUW
      '''
      
      handle_left = float
      '''Coordinates of the first handle
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      handle_left_type = str
      '''Handle type
         @returns: enum in ['AUTO', 'VECTOR', 'ALIGNED', 'ALIGNED_DOUBLESIDE', 'FREE']
      '''
      
      handle_right = float
      '''Coordinates of the second handle
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      handle_right_type = str
      '''Handle type
         @returns: enum in ['AUTO', 'VECTOR', 'ALIGNED', 'ALIGNED_DOUBLESIDE', 'FREE']
      '''
      
      handle_type = str
      '''Handle type
         @returns: enum in ['AUTO', 'VECTOR', 'ALIGNED', 'ALIGNED_DOUBLESIDE', 'FREE']
      '''
      
      parent = types.MaskParent # (read only)
      '''
         @returns: MaskParent
      '''
      
      select = bool
      '''Selection status
         @returns: boolean
      '''
      
      weight = float
      '''Weight of the point
         @returns: float in [0, 1]
      '''
      
   class MaskSplinePointUW(types.bpy_struct):
      '''Single point in spline segment defining feather
      '''
   
      select = bool
      '''Selection status
         @returns: boolean
      '''
      
      u = float
      '''U coordinate of point along spline segment
         @returns: float in [0, 1]
      '''
      
      weight = float
      '''Weight of feather point
         @returns: float in [0, 1]
      '''
      
   class MaskSplinePoints(types.bpy_struct):
      '''Collection of masking spline points
      '''
   
      def add(count):
         '''Add a number of point to this spline
            Arguments:
            @count (int): Number of points to add to the spline
               in [0, inf]
      
         '''
      
         pass

      def remove(point):
         '''Remove a point from a spline
            Arguments:
            @point (MaskSplinePoint): The point to remove
               (never None)
      
         '''
      
         pass

   class MaskSplines(types.bpy_struct):
      '''Collection of masking splines
      '''
   
      active = types.MaskSpline
      '''Active spline of masking layer
         @returns: MaskSpline
      '''
      
      active_point = types.MaskSplinePoint
      '''Active spline of masking layer
         @returns: MaskSplinePoint
      '''
      
      def new():
         '''Add a new spline to the layer
            @returns (types.MaskSpline): The newly created spline
               
         '''
      
         return types.MaskSpline

      def remove(spline):
         '''Remove a spline from a layer
            Arguments:
            @spline (MaskSpline): The spline to remove
               (never None)
      
         '''
      
         pass

   class Material(types.ID):
      '''Material data-block to define the appearance of geometric objects for rendering
      '''
   
      alpha_threshold = float
      '''A pixel is rendered only if its alpha value is above this threshold
         @returns: float in [0, 1]
      '''
      
      animation_data = types.AnimData # (read only)
      '''Animation data for this data-block
         @returns: AnimData
      '''
      
      blend_method = str
      '''Blend Mode for Transparent Faces
         @returns: enum in ['OPAQUE', 'CLIP', 'HASHED', 'BLEND']
      '''
      
      cycles = types.CyclesMaterialSettings # (read only)
      '''Cycles material settings
         @returns: CyclesMaterialSettings
      '''
      
      diffuse_color = float
      '''Diffuse color of the material
         @returns: float array of 4 items in [0, inf]
      '''
      
      grease_pencil = types.MaterialGPencilStyle # (read only)
      '''Grease pencil color settings for material
         @returns: MaterialGPencilStyle
      '''
      
      is_grease_pencil = bool # (read only)
      '''True if this material has grease pencil data
         @returns: boolean
      '''
      
      line_color = float
      '''Line color used for Freestyle line rendering
         @returns: float array of 4 items in [0, inf]
      '''
      
      line_priority = int
      '''The line color of a higher priority is used at material boundaries
         @returns: int in [0, 32767]
      '''
      
      metallic = float
      '''Amount of mirror reflection for raytrace
         @returns: float in [0, 1]
      '''
      
      node_tree = types.NodeTree # (read only)
      '''Node tree for node based materials
         @returns: NodeTree
      '''
      
      paint_active_slot = int
      '''Index of active texture paint slot
         @returns: int in [0, 32767]
      '''
      
      paint_clone_slot = int
      '''Index of clone texture paint slot
         @returns: int in [0, 32767]
      '''
      
      pass_index = int
      '''Index number for the "Material Index" render pass
         @returns: int in [0, 32767]
      '''
      
      preview_render_type = str
      '''Type of preview render
         @returns: enum in ['FLAT', 'SPHERE', 'CUBE', 'HAIR', 'SHADERBALL', 'CLOTH', 'FLUID']
      '''
      
      refraction_depth = float
      '''Approximate the thickness of the object to compute two refraction event (0 is disabled)
         @returns: float in [0, inf]
      '''
      
      roughness = float
      '''Roughness of the material
         @returns: float in [0, 1]
      '''
      
      shadow_method = str
      '''Shadow mapping method
         @returns: enum in ['NONE', 'OPAQUE', 'CLIP', 'HASHED']
      '''
      
      show_transparent_back = bool
      '''Limit transparency to a single layer (avoids transparency sorting problems)
         @returns: boolean
      '''
      
      specular_color = float
      '''Specular color of the material
         @returns: float array of 3 items in [0, inf]
      '''
      
      specular_intensity = float
      '''How intense (bright) the specular reflection is
         @returns: float in [0, 1]
      '''
      
      texture_paint_images = types.Image # (read only)
      '''Texture images used for texture painting
         @returns: Collection of Image
      '''
      
      texture_paint_slots = types.TexPaintSlot # (read only)
      '''Texture slots defining the mapping and influence of textures
         @returns: Collection of TexPaintSlot
      '''
      
      use_backface_culling = bool
      '''Use back face culling to hide the back side of faces
         @returns: boolean
      '''
      
      use_nodes = bool
      '''Use shader nodes to render the material
         @returns: boolean
      '''
      
      use_preview_world = bool
      '''Use the current world background to light the preview render
         @returns: boolean
      '''
      
      use_screen_refraction = bool
      '''Use raytraced screen space refractions
         @returns: boolean
      '''
      
      use_sss_translucency = bool
      '''Add translucency effect to subsurface
         @returns: boolean
      '''
      
   class MaterialGPencilStyle(types.bpy_struct):
      '''
      '''
   
      alignment_mode = str
      '''Defines how align Dots and Boxes with drawing path and object rotation
         @returns: enum in ['PATH', 'OBJECT', 'FIXED']
      '''
      
      color = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      fill_color = float
      '''Color for filling region bounded by each stroke
         @returns: float array of 4 items in [0, 1]
      '''
      
      fill_image = types.Image
      '''
         @returns: Image
      '''
      
      fill_style = str
      '''Select style used to fill strokes
         @returns: enum in ['SOLID', 'GRADIENT', 'TEXTURE']
      '''
      
      flip = bool
      '''Flip filling colors
         @returns: boolean
      '''
      
      ghost = bool
      '''Display strokes using this color when showing onion skins
         @returns: boolean
      '''
      
      gradient_type = str
      '''Select type of gradient used to fill strokes
         @returns: enum in ['LINEAR', 'RADIAL']
      '''
      
      hide = bool
      '''Set color Visibility
         @returns: boolean
      '''
      
      is_fill_visible = bool # (read only)
      '''True when opacity of fill is set high enough to be visible
         @returns: boolean
      '''
      
      is_stroke_visible = bool # (read only)
      '''True when opacity of stroke is set high enough to be visible
         @returns: boolean
      '''
      
      lock = bool
      '''Protect color from further editing and/or frame changes
         @returns: boolean
      '''
      
      mix_color = float
      '''Color for mixing with primary filling color
         @returns: float array of 4 items in [0, 1]
      '''
      
      mix_factor = float
      '''Mix Factor
         @returns: float in [0, 1]
      '''
      
      mix_stroke_factor = float
      '''Mix Stroke Factor
         @returns: float in [0, 1]
      '''
      
      mode = str
      '''Select draw mode for stroke
         @returns: enum in ['LINE', 'DOTS', 'BOX']
      '''
      
      pass_index = int
      '''Index number for the "Color Index" pass
         @returns: int in [0, 32767]
      '''
      
      pixel_size = float
      '''Texture Pixel Size factor along the stroke
         @returns: float in [1, 5000]
      '''
      
      show_fill = bool
      '''Show stroke fills of this material
         @returns: boolean
      '''
      
      show_stroke = bool
      '''Show stroke lines of this material
         @returns: boolean
      '''
      
      stroke_image = types.Image
      '''
         @returns: Image
      '''
      
      stroke_style = str
      '''Select style used to draw strokes
         @returns: enum in ['SOLID', 'TEXTURE']
      '''
      
      texture_angle = float
      '''Texture Orientation Angle
         @returns: float in [-inf, inf]
      '''
      
      texture_clamp = bool
      '''Do not repeat texture and clamp to one instance only
         @returns: boolean
      '''
      
      texture_offset = float
      '''Shift Texture in 2d Space
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      texture_scale = float
      '''Scale Factor for Texture
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      use_overlap_strokes = bool
      '''Disable stencil and overlap self intersections with alpha materials
         @returns: boolean
      '''
      
   class MaterialSlot(types.bpy_struct):
      '''Material slot in an object
      '''
   
      link = str
      '''Link material to object or the object's data
         @returns: enum in ['OBJECT', 'DATA']
      '''
      
      material = types.Material
      '''Material data-block used by this material slot
         @returns: Material
      '''
      
      name = str # (read only)
      '''Material slot name
         @returns: string, (never None)
      '''
      
   class Menu(types.bpy_struct):
      '''Editor menu containing buttons
      '''
   
      bl_description = str
      '''
         @returns: string
      '''
      
      bl_idname = str
      '''If this is set, the menu gets a custom ID, otherwise it takes the name of the class used to define the menu (for example, if the class name is "OBJECT_MT_hello", and bl_idname is not set by the script, then bl_idname = "OBJECT_MT_hello")
         @returns: string, (never None)
      '''
      
      bl_label = str
      '''The menu label
         @returns: string, (never None)
      '''
      
      bl_owner_id = str
      '''
         @returns: string, (never None)
      '''
      
      bl_translation_context = str
      '''
         @returns: string, (never None)
      '''
      
      layout = types.UILayout # (read only)
      '''Defines the structure of the menu in the UI
         @returns: UILayout
      '''
      
      @classmethod
      def poll(context):
         '''If this method returns a non-null output, then the menu can be drawn
            Arguments:
            @context (Context): 
      
            @returns (bool): 
         '''
      
         return bool

      def draw(context):
         '''Draw UI elements into the menu UI layout
            Arguments:
            @context (Context): 
      
         '''
      
         pass

      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def draw_collapsible(cls, context, layout):
         
      
         pass
      
      def draw_preset(self, _context):
         '''Define these on the subclass:
            - preset_operator (string)
            - preset_subdir (string)
            Optionally:
            - preset_add_operator (string)
            - preset_extensions (set of strings)
            - preset_operator_defaults (dict of keyword args)
            
         '''
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      #unable to describe the 'path_menu' method due to internal error

      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class Mesh(types.ID):
      '''Mesh data-block defining geometric surfaces
      '''
   
      animation_data = types.AnimData # (read only)
      '''Animation data for this data-block
         @returns: AnimData
      '''
      
      auto_smooth_angle = float
      '''Maximum angle between face normals that will be considered as smooth (unused if custom split normals data are available)
         @returns: float in [0, 3.14159]
      '''
      
      auto_texspace = bool
      '''Adjust active object's texture space automatically when transforming object
         @returns: boolean
      '''
      
      cycles = types.CyclesMeshSettings # (read only)
      '''Cycles mesh settings
         @returns: CyclesMeshSettings
      '''
      
      edges = types.MeshEdges # (read only)
      '''Edges of the mesh
         @returns: MeshEdges Collection of MeshEdge
      '''
      
      face_maps = types.MeshFaceMapLayers # (read only)
      '''
         @returns: MeshFaceMapLayers Collection of MeshFaceMapLayer
      '''
      
      has_custom_normals = bool # (read only)
      '''True if there are custom split normals data in this mesh
         @returns: boolean
      '''
      
      is_editmode = bool # (read only)
      '''True when used in editmode
         @returns: boolean
      '''
      
      loop_triangles = types.MeshLoopTriangles # (read only)
      '''Tessellation of mesh polygons into triangles
         @returns: MeshLoopTriangles Collection of MeshLoopTriangle
      '''
      
      loops = types.MeshLoops # (read only)
      '''Loops of the mesh (polygon corners)
         @returns: MeshLoops Collection of MeshLoop
      '''
      
      materials = types.IDMaterials # (read only)
      '''
         @returns: IDMaterials Collection of Material
      '''
      
      polygon_layers_float = types.PolygonFloatProperties # (read only)
      '''
         @returns: PolygonFloatProperties Collection of MeshPolygonFloatPropertyLayer
      '''
      
      polygon_layers_int = types.PolygonIntProperties # (read only)
      '''
         @returns: PolygonIntProperties Collection of MeshPolygonIntPropertyLayer
      '''
      
      polygon_layers_string = types.PolygonStringProperties # (read only)
      '''
         @returns: PolygonStringProperties Collection of MeshPolygonStringPropertyLayer
      '''
      
      polygons = types.MeshPolygons # (read only)
      '''Polygons of the mesh
         @returns: MeshPolygons Collection of MeshPolygon
      '''
      
      remesh_mode = str
      '''
         @returns: enum in ['VOXEL', 'QUAD']
      '''
      
      remesh_voxel_adaptivity = float
      '''Reduces the final face count by simplifying geometry where detail is not needed, generating triangles. A value greater than 0 disables Fix Poles
         @returns: float in [0, 1]
      '''
      
      remesh_voxel_size = float
      '''Size of the voxel in object space used for volume evaluation. Lower values preserve finer details
         @returns: float in [0.0001, inf]
      '''
      
      shape_keys = types.Key # (read only)
      '''
         @returns: Key
      '''
      
      skin_vertices = types.MeshSkinVertexLayer # (read only)
      '''All skin vertices
         @returns: Collection of MeshSkinVertexLayer
      '''
      
      texco_mesh = types.Mesh
      '''Derive texture coordinates from another mesh
         @returns: Mesh
      '''
      
      texspace_location = float
      '''Texture space location
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      texspace_size = float
      '''Texture space size
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      texture_mesh = types.Mesh
      '''Use another mesh for texture indices (vertex indices must be aligned)
         @returns: Mesh
      '''
      
      total_edge_sel = int # (read only)
      '''Selected edge count in editmode
         @returns: int in [0, inf]
      '''
      
      total_face_sel = int # (read only)
      '''Selected face count in editmode
         @returns: int in [0, inf]
      '''
      
      total_vert_sel = int # (read only)
      '''Selected vertex count in editmode
         @returns: int in [0, inf]
      '''
      
      use_auto_smooth = bool
      '''Auto smooth (based on smooth/sharp faces/edges and angle between faces), or use custom split normals data if available
         @returns: boolean
      '''
      
      use_auto_texspace = bool
      '''Adjust active object's texture space automatically when transforming object
         @returns: boolean
      '''
      
      use_customdata_edge_bevel = bool
      '''
         @returns: boolean
      '''
      
      use_customdata_edge_crease = bool
      '''
         @returns: boolean
      '''
      
      use_customdata_vertex_bevel = bool
      '''
         @returns: boolean
      '''
      
      use_mirror_topology = bool
      '''Use topology based mirroring (for when both sides of mesh have matching, unique topology)
         @returns: boolean
      '''
      
      use_mirror_x = bool
      '''X Axis mirror editing
         @returns: boolean
      '''
      
      use_mirror_y = bool
      '''Y Axis mirror editing
         @returns: boolean
      '''
      
      use_mirror_z = bool
      '''Z Axis mirror editing
         @returns: boolean
      '''
      
      use_paint_mask = bool
      '''Face selection masking for painting
         @returns: boolean
      '''
      
      use_paint_mask_vertex = bool
      '''Vertex selection masking for painting
         @returns: boolean
      '''
      
      use_remesh_fix_poles = bool
      '''Produces less poles and a better topology flow
         @returns: boolean
      '''
      
      use_remesh_preserve_paint_mask = bool
      '''Keep the current mask on the new mesh
         @returns: boolean
      '''
      
      use_remesh_preserve_sculpt_face_sets = bool
      '''Keep the current Face Sets on the new mesh
         @returns: boolean
      '''
      
      use_remesh_preserve_volume = bool
      '''Projects the mesh to preserve the volume and details of the original mesh
         @returns: boolean
      '''
      
      use_remesh_smooth_normals = bool
      '''Smooth the normals of the remesher result
         @returns: boolean
      '''
      
      uv_layer_clone = types.MeshUVLoopLayer
      '''UV loop layer to be used as cloning source
         @returns: MeshUVLoopLayer
      '''
      
      uv_layer_clone_index = int
      '''Clone UV loop layer index
         @returns: int in [0, inf]
      '''
      
      uv_layer_stencil = types.MeshUVLoopLayer
      '''UV loop layer to mask the painted area
         @returns: MeshUVLoopLayer
      '''
      
      uv_layer_stencil_index = int
      '''Mask UV loop layer index
         @returns: int in [0, inf]
      '''
      
      uv_layers = types.UVLoopLayers # (read only)
      '''All UV loop layers
         @returns: UVLoopLayers Collection of MeshUVLoopLayer
      '''
      
      vertex_colors = types.LoopColors # (read only)
      '''All vertex colors
         @returns: LoopColors Collection of MeshLoopColorLayer
      '''
      
      vertex_layers_float = types.VertexFloatProperties # (read only)
      '''
         @returns: VertexFloatProperties Collection of MeshVertexFloatPropertyLayer
      '''
      
      vertex_layers_int = types.VertexIntProperties # (read only)
      '''
         @returns: VertexIntProperties Collection of MeshVertexIntPropertyLayer
      '''
      
      vertex_layers_string = types.VertexStringProperties # (read only)
      '''
         @returns: VertexStringProperties Collection of MeshVertexStringPropertyLayer
      '''
      
      vertex_paint_masks = types.MeshPaintMaskLayer # (read only)
      '''Vertex paint mask
         @returns: Collection of MeshPaintMaskLayer
      '''
      
      vertices = types.MeshVertices # (read only)
      '''Vertices of the mesh
         @returns: MeshVertices Collection of MeshVertex
      '''
      
      edge_keys = None # (readonly)
      
      
      
      def transform(matrix, shape_keys=False):
         '''Transform mesh vertices by a matrix (Warning: inverts normals if matrix is negative)
            Arguments:
            @matrix (float): Matrix
               multi-dimensional array of 4 * 4 items in [-inf, inf]
            @shape_keys (bool): Transform Shape Keys
               (optional)
      
         '''
      
         pass

      def flip_normals():
         '''Invert winding of all polygons (clears tessellation, does not handle custom normals)
         '''
      
         pass

      def calc_normals():
         '''Calculate vertex normals
         '''
      
         pass

      def create_normals_split():
         '''Empty split vertex normals
         '''
      
         pass

      def calc_normals_split():
         '''Calculate split vertex normals, which preserve sharp edges
         '''
      
         pass

      def free_normals_split():
         '''Free split vertex normals
         '''
      
         pass

      def split_faces(free_loop_normals=True):
         '''Split faces based on the edge angle
            Arguments:
            @free_loop_normals (bool): Free loop normals custom data layer
               (optional)
      
         '''
      
         pass

      def calc_tangents(uvmap=""):
         '''Compute tangents and bitangent signs, to be used together with the split normals to get a complete tangent space for normal mapping (split normals are also computed if not yet present)
            Arguments:
            @uvmap (str): Name of the UV map to use for tangent space computation
               (optional, never None)
      
         '''
      
         pass

      def free_tangents():
         '''Free tangents
         '''
      
         pass

      def calc_loop_triangles():
         '''Calculate loop triangle tessellation (supports editmode too)
         '''
      
         pass

      def calc_smooth_groups(use_bitflags=False):
         '''Calculate smooth groups from sharp edges
            Arguments:
            @use_bitflags (bool): Produce bitflags groups instead of simple numeric values
               (optional)
      
            @returns: 
            (
               poly_groups(int):Smooth Groups
               array of 1 items in [-inf, inf]
               groups(int):Total number of groups
               in [0, inf]
            )
         '''
      
         pass

      def normals_split_custom_set(normals):
         '''Define custom split normals of this mesh (use zero-vectors to keep auto ones)
            Arguments:
            @normals (float): Normals
               multi-dimensional array of 1 * 3 items in [-1, 1]
      
         '''
      
         pass

      def normals_split_custom_set_from_vertices(normals):
         '''Define custom split normals of this mesh, from vertices' normals (use zero-vectors to keep auto ones)
            Arguments:
            @normals (float): Normals
               multi-dimensional array of 1 * 3 items in [-1, 1]
      
         '''
      
         pass

      def update(calc_edges=False, calc_edges_loose=False):
         '''update
            Arguments:
            @calc_edges (bool): Force recalculation of edges
               (optional)
            @calc_edges_loose (bool): Calculate the loose state of each edge
               (optional)
      
         '''
      
         pass

      def update_gpu_tag():
         '''update_gpu_tag
         '''
      
         pass

      def unit_test_compare(mesh=None, threshold=7.1526e-06):
         '''unit_test_compare
            Arguments:
            @mesh (Mesh): Mesh to compare to
               (optional)
            @threshold (float): Comparison tolerance threshold
               in [0, inf], (optional)
      
            @returns (str): String description of result of comparison
               (never None)
         '''
      
         return str

      def clear_geometry():
         '''Remove all geometry from the mesh. Note that this does not free shape keys or materials
         '''
      
         pass

      def validate(verbose=False, clean_customdata=True):
         '''Validate geometry, return True when the mesh has had invalid geometry corrected/removed
            Arguments:
            @verbose (bool): Output information about the errors found
               (optional)
            @clean_customdata (bool): Remove temp/cached custom-data layers, like e.g. normals...
               (optional)
      
            @returns (bool): 
         '''
      
         return bool

      def validate_material_indices():
         '''Validate material indices of polygons, return True when the mesh has had invalid indices corrected (to default 0)
            @returns (bool): 
         '''
      
         return bool

      def count_selected_items():
         '''Return the number of selected items (vert, edge, face)
            @returns (int): array of 3 items in [0, inf]
         '''
      
         return int

      def from_pydata(self, vertices, edges, faces):
         '''Make a mesh from a list of vertices/edges/faces
            Until we have a nicer way to make geometry, use this.
            
            Arguments:
            @vertices (iterable object): float triplets each representing (X, Y, Z)
            eg: [(0.0, 1.0, 0.5), ...].
            
            @edges (iterable object): int pairs, each pair contains two indices to the
            *vertices* argument. eg: [(1, 2), ...]
            When an empty iterable is passed in, the edges are inferred from the polygons.
            
            @faces (iterable object): iterator of faces, each faces contains three or more indices to
            the *vertices* argument. eg: [(5, 6, 8, 9), (1, 2, 3), ...]
            .. warning::
            Invalid mesh data
            *(out of range indices, edges with matching indices,
            2 sided faces... etc)* are **not** prevented.
            If the data used for mesh creation isn't known to be valid,
            run Mesh.validate after this function.
            
      
         '''
      
         pass
      
   class MeshCacheModifier(types.Modifier):
      '''Cache Mesh
      '''
   
      cache_format = str
      '''
         @returns: enum in ['MDD', 'PC2']
      '''
      
      deform_mode = str
      '''
         @returns: enum in ['OVERWRITE', 'INTEGRATE']
      '''
      
      eval_factor = float
      '''Evaluation time in seconds
         @returns: float in [0, 1]
      '''
      
      eval_frame = float
      '''The frame to evaluate (starting at 0)
         @returns: float in [0, 1.04857e+06]
      '''
      
      eval_time = float
      '''Evaluation time in seconds
         @returns: float in [0, inf]
      '''
      
      factor = float
      '''Influence of the deformation
         @returns: float in [0, 1]
      '''
      
      filepath = str
      '''Path to external displacements file
         @returns: string, (never None)
      '''
      
      flip_axis = str
      '''
         @returns: enum set in {'X', 'Y', 'Z'}
      '''
      
      forward_axis = str
      '''
         @returns: enum in ['POS_X', 'POS_Y', 'POS_Z', 'NEG_X', 'NEG_Y', 'NEG_Z']
      '''
      
      frame_scale = float
      '''Evaluation time in seconds
         @returns: float in [0, 100]
      '''
      
      frame_start = float
      '''Add this to the start frame
         @returns: float in [-1.04857e+06, 1.04857e+06]
      '''
      
      interpolation = str
      '''
         @returns: enum in ['NONE', 'LINEAR']
      '''
      
      play_mode = str
      '''
         @returns: enum in ['SCENE', 'CUSTOM']
      '''
      
      time_mode = str
      '''Method to control playback time
         @returns: enum in ['FRAME', 'TIME', 'FACTOR']
      '''
      
      up_axis = str
      '''
         @returns: enum in ['POS_X', 'POS_Y', 'POS_Z', 'NEG_X', 'NEG_Y', 'NEG_Z']
      '''
      
   class MeshDeformModifier(types.Modifier):
      '''Mesh deformation modifier to deform with other meshes
      '''
   
      invert_vertex_group = bool
      '''Invert vertex group influence
         @returns: boolean
      '''
      
      is_bound = bool # (read only)
      '''Whether geometry has been bound to control cage
         @returns: boolean
      '''
      
      object = types.Object
      '''Mesh object to deform with
         @returns: Object
      '''
      
      precision = int
      '''The grid size for binding
         @returns: int in [2, 10]
      '''
      
      use_dynamic_bind = bool
      '''Recompute binding dynamically on top of other deformers (slower and more memory consuming)
         @returns: boolean
      '''
      
      vertex_group = str
      '''Vertex group name
         @returns: string, (never None)
      '''
      
   class MeshEdge(types.bpy_struct):
      '''Edge in a Mesh data-block
      '''
   
      bevel_weight = float
      '''Weight used by the Bevel modifier
         @returns: float in [-inf, inf]
      '''
      
      crease = float
      '''Weight used by the Subdivision Surface modifier for creasing
         @returns: float in [0, 1]
      '''
      
      hide = bool
      '''
         @returns: boolean
      '''
      
      index = int # (read only)
      '''Index of this edge
         @returns: int in [0, inf]
      '''
      
      is_loose = bool
      '''Loose edge
         @returns: boolean
      '''
      
      select = bool
      '''
         @returns: boolean
      '''
      
      use_edge_sharp = bool
      '''Sharp edge for the Edge Split modifier
         @returns: boolean
      '''
      
      use_freestyle_mark = bool
      '''Edge mark for Freestyle line rendering
         @returns: boolean
      '''
      
      use_seam = bool
      '''Seam edge for UV unwrapping
         @returns: boolean
      '''
      
      vertices = int
      '''Vertex indices
         @returns: int array of 2 items in [0, inf]
      '''
      
      key = None # (readonly)
      
      
      
   class MeshEdges(types.bpy_struct):
      '''Collection of mesh edges
      '''
   
      def add(count):
         '''add
            Arguments:
            @count (int): Number of edges to add
               in [0, inf]
      
         '''
      
         pass

   class MeshFaceMap(types.bpy_struct):
      '''
      '''
   
      value = int
      '''
         @returns: int in [-inf, inf]
      '''
      
   class MeshFaceMapLayer(types.bpy_struct):
      '''Per-face map index
      '''
   
      data = types.MeshFaceMap # (read only)
      '''
         @returns: Collection of MeshFaceMap
      '''
      
      name = str
      '''Name of face-map layer
         @returns: string, (never None)
      '''
      
   class MeshFaceMapLayers(types.bpy_struct):
      '''Collection of mesh face-maps
      '''
   
      active = types.MeshFaceMapLayer # (read only)
      '''
         @returns: MeshFaceMapLayer
      '''
      
      def new(name="Face Map"):
         '''Add a float property layer to Mesh
            Arguments:
            @name (str): Face map name
               (optional, never None)
      
            @returns (types.MeshFaceMapLayer): The newly created layer
               
         '''
      
         return types.MeshFaceMapLayer

      def remove(layer):
         '''Remove a face map layer
            Arguments:
            @layer (MeshFaceMapLayer): The layer to remove
               (never None)
      
         '''
      
         pass

   class MeshLoop(types.bpy_struct):
      '''Loop in a Mesh data-block
      '''
   
      bitangent = float # (read only)
      '''Bitangent vector of this vertex for this polygon (must be computed beforehand using calc_tangents, *use it only if really needed*, slower access than bitangent_sign)
         @returns: float array of 3 items in [-1, 1]
      '''
      
      bitangent_sign = float # (read only)
      '''Sign of the bitangent vector of this vertex for this polygon (must be computed beforehand using calc_tangents, bitangent = bitangent_sign * cross(normal, tangent))
         @returns: float in [-1, 1]
      '''
      
      edge_index = int
      '''Edge index
         @returns: int in [0, inf]
      '''
      
      index = int # (read only)
      '''Index of this loop
         @returns: int in [0, inf]
      '''
      
      normal = float
      '''Local space unit length split normal vector of this vertex for this polygon (must be computed beforehand using calc_normals_split or calc_tangents)
         @returns: float array of 3 items in [-1, 1]
      '''
      
      tangent = float # (read only)
      '''Local space unit length tangent vector of this vertex for this polygon (must be computed beforehand using calc_tangents)
         @returns: float array of 3 items in [-1, 1]
      '''
      
      vertex_index = int
      '''Vertex index
         @returns: int in [0, inf]
      '''
      
   class MeshLoopColor(types.bpy_struct):
      '''Vertex loop colors in a Mesh
      '''
   
      color = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
   class MeshLoopColorLayer(types.bpy_struct):
      '''Layer of vertex colors in a Mesh data-block
      '''
   
      active = bool
      '''Sets the layer as active for display and editing
         @returns: boolean
      '''
      
      active_render = bool
      '''Sets the layer as active for rendering
         @returns: boolean
      '''
      
      data = types.MeshLoopColor # (read only)
      '''
         @returns: Collection of MeshLoopColor
      '''
      
      name = str
      '''Name of Vertex color layer
         @returns: string, (never None)
      '''
      
   class MeshLoopTriangle(types.bpy_struct):
      '''Tessellated triangle in a Mesh data-block
      '''
   
      area = float # (read only)
      '''Area of this triangle
         @returns: float in [0, inf]
      '''
      
      index = int # (read only)
      '''Index of this loop triangle
         @returns: int in [0, inf]
      '''
      
      loops = int # (read only)
      '''Indices of mesh loops that make up the triangle
         @returns: int array of 3 items in [0, inf]
      '''
      
      material_index = int # (read only)
      '''
         @returns: int in [0, inf]
      '''
      
      normal = float # (read only)
      '''Local space unit length normal vector for this triangle
         @returns: float array of 3 items in [-1, 1]
      '''
      
      polygon_index = int # (read only)
      '''Index of mesh polygon that the triangle is a part of
         @returns: int in [0, inf]
      '''
      
      split_normals = float # (read only)
      '''Local space unit length split normals vectors of the vertices of this triangle (must be computed beforehand using calc_normals_split or calc_tangents)
         @returns: float multi-dimensional array of 3 * 3 items in [-1, 1]
      '''
      
      use_smooth = bool # (read only)
      '''
         @returns: boolean
      '''
      
      vertices = int # (read only)
      '''Indices of triangle vertices
         @returns: int array of 3 items in [0, inf]
      '''
      
      center = None # (readonly)
      '''The midpoint of the face.
         
      '''
      
      
      edge_keys = None # (readonly)
      
      
      
   class MeshLoopTriangles(types.bpy_struct):
      '''Tessellation of mesh polygons into triangles
      '''
   
   class MeshLoops(types.bpy_struct):
      '''Collection of mesh loops
      '''
   
      def add(count):
         '''add
            Arguments:
            @count (int): Number of loops to add
               in [0, inf]
      
         '''
      
         pass

   class MeshPaintMaskLayer(types.bpy_struct):
      '''Per-vertex paint mask data
      '''
   
      data = types.MeshPaintMaskProperty # (read only)
      '''
         @returns: Collection of MeshPaintMaskProperty
      '''
      
   class MeshPaintMaskProperty(types.bpy_struct):
      '''Floating point paint mask value
      '''
   
      value = float
      '''
         @returns: float in [-inf, inf]
      '''
      
   class MeshPolygon(types.bpy_struct):
      '''Polygon in a Mesh data-block
      '''
   
      area = float # (read only)
      '''Read only area of this polygon
         @returns: float in [0, inf]
      '''
      
      center = float # (read only)
      '''Center of this polygon
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      hide = bool
      '''
         @returns: boolean
      '''
      
      index = int # (read only)
      '''Index of this polygon
         @returns: int in [0, inf]
      '''
      
      loop_start = int
      '''Index of the first loop of this polygon
         @returns: int in [0, inf]
      '''
      
      loop_total = int
      '''Number of loops used by this polygon
         @returns: int in [0, inf]
      '''
      
      material_index = int
      '''
         @returns: int in [0, 32767]
      '''
      
      normal = float # (read only)
      '''Local space unit length normal vector for this polygon
         @returns: float array of 3 items in [-1, 1]
      '''
      
      select = bool
      '''
         @returns: boolean
      '''
      
      use_freestyle_mark = bool
      '''Face mark for Freestyle line rendering
         @returns: boolean
      '''
      
      use_smooth = bool
      '''
         @returns: boolean
      '''
      
      vertices = int
      '''Vertex indices
         @returns: int array of 3 items in [0, inf]
      '''
      
      edge_keys = None # (readonly)
      
      
      
      loop_indices = None # (readonly)
      
      
      
      def flip():
         '''Invert winding of this polygon (flip its normal)
         '''
      
         pass

   class MeshPolygonFloatProperty(types.bpy_struct):
      '''User defined floating point number value in a float properties layer
      '''
   
      value = float
      '''
         @returns: float in [-inf, inf]
      '''
      
   class MeshPolygonFloatPropertyLayer(types.bpy_struct):
      '''User defined layer of floating point number values
      '''
   
      data = types.MeshPolygonFloatProperty # (read only)
      '''
         @returns: Collection of MeshPolygonFloatProperty
      '''
      
      name = str
      '''
         @returns: string, (never None)
      '''
      
   class MeshPolygonIntProperty(types.bpy_struct):
      '''User defined integer number value in an integer properties layer
      '''
   
      value = int
      '''
         @returns: int in [-inf, inf]
      '''
      
   class MeshPolygonIntPropertyLayer(types.bpy_struct):
      '''User defined layer of integer number values
      '''
   
      data = types.MeshPolygonIntProperty # (read only)
      '''
         @returns: Collection of MeshPolygonIntProperty
      '''
      
      name = str
      '''
         @returns: string, (never None)
      '''
      
   class MeshPolygonStringProperty(types.bpy_struct):
      '''User defined string text value in a string properties layer
      '''
   
      value = str
      '''
         @returns: string, (never None)
      '''
      
   class MeshPolygonStringPropertyLayer(types.bpy_struct):
      '''User defined layer of string text values
      '''
   
      data = types.MeshPolygonStringProperty # (read only)
      '''
         @returns: Collection of MeshPolygonStringProperty
      '''
      
      name = str
      '''
         @returns: string, (never None)
      '''
      
   class MeshPolygons(types.bpy_struct):
      '''Collection of mesh polygons
      '''
   
      active = int
      '''The active polygon for this mesh
         @returns: int in [-inf, inf]
      '''
      
      def add(count):
         '''add
            Arguments:
            @count (int): Number of polygons to add
               in [0, inf]
      
         '''
      
         pass

   class MeshSequenceCacheModifier(types.Modifier):
      '''Cache Mesh
      '''
   
      cache_file = types.CacheFile
      '''
         @returns: CacheFile
      '''
      
      object_path = str
      '''Path to the object in the Alembic archive used to lookup geometric data
         @returns: string, (never None)
      '''
      
      read_data = str
      '''
         @returns: enum set in {'VERT', 'POLY', 'UV', 'COLOR'}
      '''
      
   class MeshSkinVertex(types.bpy_struct):
      '''Per-vertex skin data for use with the Skin modifier
      '''
   
      radius = float
      '''Radius of the skin
         @returns: float array of 2 items in [0, inf]
      '''
      
      use_loose = bool
      '''If vertex has multiple adjacent edges, it is hulled to them directly
         @returns: boolean
      '''
      
      use_root = bool
      '''Vertex is a root for rotation calculations and armature generation, setting this flag does not clear other roots in the same mesh island
         @returns: boolean
      '''
      
   class MeshSkinVertexLayer(types.bpy_struct):
      '''Per-vertex skin data for use with the Skin modifier
      '''
   
      data = types.MeshSkinVertex # (read only)
      '''
         @returns: Collection of MeshSkinVertex
      '''
      
      name = str
      '''Name of skin layer
         @returns: string, (never None)
      '''
      
   class MeshStatVis(types.bpy_struct):
      '''
      '''
   
      distort_max = float
      '''Maximum angle to display
         @returns: float in [0, 3.14159]
      '''
      
      distort_min = float
      '''Minimum angle to display
         @returns: float in [0, 3.14159]
      '''
      
      overhang_axis = str
      '''
         @returns: enum in ['POS_X', 'POS_Y', 'POS_Z', 'NEG_X', 'NEG_Y', 'NEG_Z']
      '''
      
      overhang_max = float
      '''Maximum angle to display
         @returns: float in [0, 3.14159]
      '''
      
      overhang_min = float
      '''Minimum angle to display
         @returns: float in [0, 3.14159]
      '''
      
      sharp_max = float
      '''Maximum angle to display
         @returns: float in [-3.14159, 3.14159]
      '''
      
      sharp_min = float
      '''Minimum angle to display
         @returns: float in [-3.14159, 3.14159]
      '''
      
      thickness_max = float
      '''Maximum for measuring thickness
         @returns: float in [0, 1000]
      '''
      
      thickness_min = float
      '''Minimum for measuring thickness
         @returns: float in [0, 1000]
      '''
      
      thickness_samples = int
      '''Number of samples to test per face
         @returns: int in [1, 32]
      '''
      
      type = str
      '''Type of data to visualize/check
         @returns: enum in ['OVERHANG', 'THICKNESS', 'INTERSECT', 'DISTORT', 'SHARP']
      '''
      
   class MeshUVLoop(types.bpy_struct):
      '''
      '''
   
      pin_uv = bool
      '''
         @returns: boolean
      '''
      
      select = bool
      '''
         @returns: boolean
      '''
      
      uv = float
      '''
         @returns: float array of 2 items in [-inf, inf]
      '''
      
   class MeshUVLoopLayer(types.bpy_struct):
      '''
      '''
   
      active = bool
      '''Set the map as active for display and editing
         @returns: boolean
      '''
      
      active_clone = bool
      '''Set the map as active for cloning
         @returns: boolean
      '''
      
      active_render = bool
      '''Set the map as active for rendering
         @returns: boolean
      '''
      
      data = types.MeshUVLoop # (read only)
      '''
         @returns: Collection of MeshUVLoop
      '''
      
      name = str
      '''Name of UV map
         @returns: string, (never None)
      '''
      
   class MeshVertex(types.bpy_struct):
      '''Vertex in a Mesh data-block
      '''
   
      bevel_weight = float
      '''Weight used by the Bevel modifier 'Only Vertices' option
         @returns: float in [-inf, inf]
      '''
      
      co = float
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      groups = types.VertexGroupElement # (read only)
      '''Weights for the vertex groups this vertex is member of
         @returns: Collection of VertexGroupElement
      '''
      
      hide = bool
      '''
         @returns: boolean
      '''
      
      index = int # (read only)
      '''Index of this vertex
         @returns: int in [0, inf]
      '''
      
      normal = float
      '''Vertex Normal
         @returns: float array of 3 items in [-1, 1]
      '''
      
      select = bool
      '''
         @returns: boolean
      '''
      
      undeformed_co = float # (read only)
      '''For meshes with modifiers applied, the coordinate of the vertex with no deforming modifiers applied, as used for generated texture coordinates
         @returns: float array of 3 items in [-inf, inf]
      '''
      
   class MeshVertexFloatProperty(types.bpy_struct):
      '''User defined floating point number value in a float properties layer
      '''
   
      value = float
      '''
         @returns: float in [-inf, inf]
      '''
      
   class MeshVertexFloatPropertyLayer(types.bpy_struct):
      '''User defined layer of floating point number values
      '''
   
      data = types.MeshVertexFloatProperty # (read only)
      '''
         @returns: Collection of MeshVertexFloatProperty
      '''
      
      name = str
      '''
         @returns: string, (never None)
      '''
      
   class MeshVertexIntProperty(types.bpy_struct):
      '''User defined integer number value in an integer properties layer
      '''
   
      value = int
      '''
         @returns: int in [-inf, inf]
      '''
      
   class MeshVertexIntPropertyLayer(types.bpy_struct):
      '''User defined layer of integer number values
      '''
   
      data = types.MeshVertexIntProperty # (read only)
      '''
         @returns: Collection of MeshVertexIntProperty
      '''
      
      name = str
      '''
         @returns: string, (never None)
      '''
      
   class MeshVertexStringProperty(types.bpy_struct):
      '''User defined string text value in a string properties layer
      '''
   
      value = str
      '''
         @returns: string, (never None)
      '''
      
   class MeshVertexStringPropertyLayer(types.bpy_struct):
      '''User defined layer of string text values
      '''
   
      data = types.MeshVertexStringProperty # (read only)
      '''
         @returns: Collection of MeshVertexStringProperty
      '''
      
      name = str
      '''
         @returns: string, (never None)
      '''
      
   class MeshVertices(types.bpy_struct):
      '''Collection of mesh vertices
      '''
   
      def add(count):
         '''add
            Arguments:
            @count (int): Number of vertices to add
               in [0, inf]
      
         '''
      
         pass

   class MetaBall(types.ID):
      '''Metaball data-block to defined blobby surfaces
      '''
   
      animation_data = types.AnimData # (read only)
      '''Animation data for this data-block
         @returns: AnimData
      '''
      
      cycles = types.CyclesMeshSettings # (read only)
      '''Cycles mesh settings
         @returns: CyclesMeshSettings
      '''
      
      elements = types.MetaBallElements # (read only)
      '''Meta elements
         @returns: MetaBallElements Collection of MetaElement
      '''
      
      is_editmode = bool # (read only)
      '''True when used in editmode
         @returns: boolean
      '''
      
      materials = types.IDMaterials # (read only)
      '''
         @returns: IDMaterials Collection of Material
      '''
      
      render_resolution = float
      '''Polygonization resolution in rendering
         @returns: float in [0.005, 10000]
      '''
      
      resolution = float
      '''Polygonization resolution in the 3D viewport
         @returns: float in [0.005, 10000]
      '''
      
      texspace_location = float
      '''Texture space location
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      texspace_size = float
      '''Texture space size
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      threshold = float
      '''Influence of meta elements
         @returns: float in [0, 5]
      '''
      
      update_method = str
      '''Metaball edit update behavior
         @returns: enum in ['UPDATE_ALWAYS', 'HALFRES', 'FAST', 'NEVER']
      '''
      
      use_auto_texspace = bool
      '''Adjust active object's texture space automatically when transforming object
         @returns: boolean
      '''
      
      def transform(matrix):
         '''Transform meta elements by a matrix
            Arguments:
            @matrix (float): Matrix
               multi-dimensional array of 4 * 4 items in [-inf, inf]
      
         '''
      
         pass

      def update_gpu_tag():
         '''update_gpu_tag
         '''
      
         pass

   class MetaBallElements(types.bpy_struct):
      '''Collection of metaball elements
      '''
   
      active = types.MetaElement # (read only)
      '''Last selected element
         @returns: MetaElement
      '''
      
      def new(type='BALL'):
         '''Add a new element to the metaball
            Arguments:
            @type (str): type for the new meta-element
               in ['BALL', 'CAPSULE', 'PLANE', 'ELLIPSOID', 'CUBE'], (optional)
      
            @returns (types.MetaElement): The newly created meta-element
               
         '''
      
         return types.MetaElement

      def remove(element):
         '''Remove an element from the metaball
            Arguments:
            @element (MetaElement): The element to remove
               (never None)
      
         '''
      
         pass

      def clear():
         '''Remove all elements from the metaball
         '''
      
         pass

   class MetaElement(types.bpy_struct):
      '''Blobby element in a Metaball data-block
      '''
   
      co = float
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      hide = bool
      '''Hide element
         @returns: boolean
      '''
      
      radius = float
      '''
         @returns: float in [0, inf]
      '''
      
      rotation = float
      '''Normalized quaternion rotation
         @returns: float array of 4 items in [-inf, inf]
      '''
      
      select = bool
      '''Select element
         @returns: boolean
      '''
      
      size_x = float
      '''Size of element, use of components depends on element type
         @returns: float in [0, 20]
      '''
      
      size_y = float
      '''Size of element, use of components depends on element type
         @returns: float in [0, 20]
      '''
      
      size_z = float
      '''Size of element, use of components depends on element type
         @returns: float in [0, 20]
      '''
      
      stiffness = float
      '''Stiffness defines how much of the element to fill
         @returns: float in [0, 10]
      '''
      
      type = str
      '''Metaball types
         @returns: enum in ['BALL', 'CAPSULE', 'PLANE', 'ELLIPSOID', 'CUBE']
      '''
      
      use_negative = bool
      '''Set metaball as negative one
         @returns: boolean
      '''
      
      use_scale_stiffness = bool
      '''Scale stiffness instead of radius
         @returns: boolean
      '''
      
   class MetaSequence(types.Sequence):
      '''Sequence strip to group other strips as a single sequence strip
      '''
   
      alpha_mode = str
      '''Representation of alpha information in the RGBA pixels
         @returns: enum in ['STRAIGHT', 'PREMUL']
      '''
      
      animation_offset_end = int
      '''Animation end offset (trim end)
         @returns: int in [0, inf]
      '''
      
      animation_offset_start = int
      '''Animation start offset (trim start)
         @returns: int in [0, inf]
      '''
      
      color_multiply = float
      '''
         @returns: float in [0, 20]
      '''
      
      color_saturation = float
      '''Adjust the intensity of the input's color
         @returns: float in [0, 20]
      '''
      
      crop = types.SequenceCrop # (read only)
      '''
         @returns: SequenceCrop
      '''
      
      proxy = types.SequenceProxy # (read only)
      '''
         @returns: SequenceProxy
      '''
      
      sequences = types.Sequence # (read only)
      '''
         @returns: Collection of Sequence
      '''
      
      strobe = float
      '''Only display every nth frame
         @returns: float in [1, 30]
      '''
      
      transform = types.SequenceTransform # (read only)
      '''
         @returns: SequenceTransform
      '''
      
      use_crop = bool
      '''Crop image before processing
         @returns: boolean
      '''
      
      use_deinterlace = bool
      '''Remove fields from video movies
         @returns: boolean
      '''
      
      use_flip_x = bool
      '''Flip on the X axis
         @returns: boolean
      '''
      
      use_flip_y = bool
      '''Flip on the Y axis
         @returns: boolean
      '''
      
      use_float = bool
      '''Convert input to float data
         @returns: boolean
      '''
      
      use_proxy = bool
      '''Use a preview proxy and/or timecode index for this strip
         @returns: boolean
      '''
      
      use_reverse_frames = bool
      '''Reverse frame order
         @returns: boolean
      '''
      
      use_translation = bool
      '''Translate image before processing
         @returns: boolean
      '''
      
   class MirrorGpencilModifier(types.GpencilModifier):
      '''Change stroke using lattice to deform modifier
      '''
   
      invert_layer_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_layers = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_material_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_materials = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      layer = str
      '''Layer name
         @returns: string, (never None)
      '''
      
      layer_pass = int
      '''Layer pass index
         @returns: int in [0, 100]
      '''
      
      material = str
      '''Material name
         @returns: string, (never None)
      '''
      
      object = types.Object
      '''Object used as center
         @returns: Object
      '''
      
      pass_index = int
      '''Pass index
         @returns: int in [0, 100]
      '''
      
      use_clip = bool
      '''Clip points
         @returns: boolean
      '''
      
      x_axis = bool
      '''Mirror this axis
         @returns: boolean
      '''
      
      y_axis = bool
      '''Mirror this axis
         @returns: boolean
      '''
      
      z_axis = bool
      '''Mirror this axis
         @returns: boolean
      '''
      
   class MirrorModifier(types.Modifier):
      '''Mirroring modifier
      '''
   
      merge_threshold = float
      '''Distance within which mirrored vertices are merged
         @returns: float in [0, inf]
      '''
      
      mirror_object = types.Object
      '''Object to use as mirror
         @returns: Object
      '''
      
      mirror_offset_u = float
      '''Amount to offset mirrored UVs flipping point from the 0.5 on the U axis
         @returns: float in [-1, 1]
      '''
      
      mirror_offset_v = float
      '''Amount to offset mirrored UVs flipping point from the 0.5 point on the V axis
         @returns: float in [-1, 1]
      '''
      
      offset_u = float
      '''Mirrored UV offset on the U axis
         @returns: float in [-10000, 10000]
      '''
      
      offset_v = float
      '''Mirrored UV offset on the V axis
         @returns: float in [-10000, 10000]
      '''
      
      use_axis = bool
      '''Enable axis mirror
         @returns: boolean array of 3 items
      '''
      
      use_bisect_axis = bool
      '''Cuts the mesh across the mirror plane
         @returns: boolean array of 3 items
      '''
      
      use_bisect_flip_axis = bool
      '''Flips the direction of the slice
         @returns: boolean array of 3 items
      '''
      
      use_clip = bool
      '''Prevent vertices from going through the mirror during transform
         @returns: boolean
      '''
      
      use_mirror_merge = bool
      '''Merge vertices within the merge threshold
         @returns: boolean
      '''
      
      use_mirror_u = bool
      '''Mirror the U texture coordinate around the flip offset point
         @returns: boolean
      '''
      
      use_mirror_udim = bool
      '''Mirror the texture coordinate around each tile center
         @returns: boolean
      '''
      
      use_mirror_v = bool
      '''Mirror the V texture coordinate around the flip offset point
         @returns: boolean
      '''
      
      use_mirror_vertex_groups = bool
      '''Mirror vertex groups (e.g. .R->.L)
         @returns: boolean
      '''
      
   class Modifier(types.bpy_struct):
      '''Modifier affecting the geometry data of an object
      '''
   
      name = str
      '''Modifier name
         @returns: string, (never None)
      '''
      
      show_expanded = bool
      '''Set modifier expanded in the user interface
         @returns: boolean
      '''
      
      show_in_editmode = bool
      '''Display modifier in Edit mode
         @returns: boolean
      '''
      
      show_on_cage = bool
      '''Adjust edit cage to modifier result
         @returns: boolean
      '''
      
      show_render = bool
      '''Use modifier during render
         @returns: boolean
      '''
      
      show_viewport = bool
      '''Display modifier in viewport
         @returns: boolean
      '''
      
      type = str # (read only)
      '''
         @returns: enum in ['DATA_TRANSFER', 'MESH_CACHE', 'MESH_SEQUENCE_CACHE', 'NORMAL_EDIT', 'WEIGHTED_NORMAL', 'UV_PROJECT', 'UV_WARP', 'VERTEX_WEIGHT_EDIT', 'VERTEX_WEIGHT_MIX', 'VERTEX_WEIGHT_PROXIMITY', 'ARRAY', 'BEVEL', 'BOOLEAN', 'BUILD', 'DECIMATE', 'EDGE_SPLIT', 'MASK', 'MIRROR', 'MULTIRES', 'REMESH', 'SCREW', 'SKIN', 'SOLIDIFY', 'SUBSURF', 'TRIANGULATE', 'WELD', 'WIREFRAME', 'ARMATURE', 'CAST', 'CURVE', 'DISPLACE', 'HOOK', 'LAPLACIANDEFORM', 'LATTICE', 'MESH_DEFORM', 'SHRINKWRAP', 'SIMPLE_DEFORM', 'SMOOTH', 'CORRECTIVE_SMOOTH', 'LAPLACIANSMOOTH', 'SURFACE_DEFORM', 'WARP', 'WAVE', 'CLOTH', 'COLLISION', 'DYNAMIC_PAINT', 'EXPLODE', 'FLUID', 'OCEAN', 'PARTICLE_INSTANCE', 'PARTICLE_SYSTEM', 'SOFT_BODY', 'SURFACE']
      '''
      
      use_apply_on_spline = bool
      '''Apply this and all preceding deformation modifiers on splines' points rather than on filled curve/surface
         @returns: boolean
      '''
      
   class MotionPath(types.bpy_struct):
      '''Cache of the worldspace positions of an element over a frame range
      '''
   
      color = float
      '''Custom color for motion path
         @returns: float array of 3 items in [0, inf]
      '''
      
      frame_end = int # (read only)
      '''End frame of the stored range
         @returns: int in [-inf, inf]
      '''
      
      frame_start = int # (read only)
      '''Starting frame of the stored range
         @returns: int in [-inf, inf]
      '''
      
      is_modified = bool
      '''Path is being edited
         @returns: boolean
      '''
      
      length = int # (read only)
      '''Number of frames cached
         @returns: int in [-inf, inf]
      '''
      
      line_thickness = int
      '''Line thickness for drawing path
         @returns: int in [1, 6]
      '''
      
      lines = bool
      '''Draw straight lines between keyframe points
         @returns: boolean
      '''
      
      points = types.MotionPathVert # (read only)
      '''Cached positions per frame
         @returns: Collection of MotionPathVert
      '''
      
      use_bone_head = bool # (read only)
      '''For PoseBone paths, use the bone head location when calculating this path
         @returns: boolean
      '''
      
      use_custom_color = bool
      '''Use custom color for this motion path
         @returns: boolean
      '''
      
   class MotionPathVert(types.bpy_struct):
      '''Cached location on path
      '''
   
      co = float
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      select = bool
      '''Path point is selected for editing
         @returns: boolean
      '''
      
   class MovieClip(types.ID):
      '''MovieClip data-block referencing an external movie file
      '''
   
      animation_data = types.AnimData # (read only)
      '''Animation data for this data-block
         @returns: AnimData
      '''
      
      colorspace_settings = types.ColorManagedInputColorspaceSettings # (read only)
      '''Input color space settings
         @returns: ColorManagedInputColorspaceSettings
      '''
      
      display_aspect = float
      '''Display Aspect for this clip, does not affect rendering
         @returns: float array of 2 items in [0.1, inf]
      '''
      
      filepath = str
      '''Filename of the movie or sequence file
         @returns: string, (never None)
      '''
      
      fps = float # (read only)
      '''Detected frame rate of the movie clip in frames per second
         @returns: float in [-inf, inf]
      '''
      
      frame_duration = int # (read only)
      '''Detected duration of movie clip in frames
         @returns: int in [-inf, inf]
      '''
      
      frame_offset = int
      '''Offset of footage first frame relative to it's file name (affects only how footage is loading, does not change data associated with a clip)
         @returns: int in [-inf, inf]
      '''
      
      frame_start = int
      '''Global scene frame number at which this movie starts playing (affects all data associated with a clip)
         @returns: int in [-inf, inf]
      '''
      
      grease_pencil = types.GreasePencil
      '''Grease pencil data for this movie clip
         @returns: GreasePencil
      '''
      
      proxy = types.MovieClipProxy # (read only)
      '''
         @returns: MovieClipProxy
      '''
      
      size = int # (read only)
      '''Width and height in pixels, zero when image data cant be loaded
         @returns: int array of 2 items in [-inf, inf]
      '''
      
      source = str # (read only)
      '''Where the clip comes from
         @returns: enum in ['SEQUENCE', 'MOVIE']
      '''
      
      tracking = types.MovieTracking # (read only)
      '''
         @returns: MovieTracking
      '''
      
      use_proxy = bool
      '''Use a preview proxy and/or timecode index for this clip
         @returns: boolean
      '''
      
      use_proxy_custom_directory = bool
      '''Create proxy images in a custom directory (default is movie location)
         @returns: boolean
      '''
      
      def metadata():
         '''Retrieve metadata of the movie file
            @returns (types.IDPropertyWrapPtr): Dict-like object containing the metadata
               
         '''
      
         return types.IDPropertyWrapPtr

   class MovieClipProxy(types.bpy_struct):
      '''Proxy parameters for a movie clip
      '''
   
      build_100 = bool
      '''Build proxy resolution 100% of the original footage dimension
         @returns: boolean
      '''
      
      build_25 = bool
      '''Build proxy resolution 25% of the original footage dimension
         @returns: boolean
      '''
      
      build_50 = bool
      '''Build proxy resolution 50% of the original footage dimension
         @returns: boolean
      '''
      
      build_75 = bool
      '''Build proxy resolution 75% of the original footage dimension
         @returns: boolean
      '''
      
      build_free_run = bool
      '''Build free run time code index
         @returns: boolean
      '''
      
      build_free_run_rec_date = bool
      '''Build free run time code index using Record Date/Time
         @returns: boolean
      '''
      
      build_record_run = bool
      '''Build record run time code index
         @returns: boolean
      '''
      
      build_undistorted_100 = bool
      '''Build proxy resolution 100% of the original undistorted footage dimension
         @returns: boolean
      '''
      
      build_undistorted_25 = bool
      '''Build proxy resolution 25% of the original undistorted footage dimension
         @returns: boolean
      '''
      
      build_undistorted_50 = bool
      '''Build proxy resolution 50% of the original undistorted footage dimension
         @returns: boolean
      '''
      
      build_undistorted_75 = bool
      '''Build proxy resolution 75% of the original undistorted footage dimension
         @returns: boolean
      '''
      
      directory = str
      '''Location to store the proxy files
         @returns: string, (never None)
      '''
      
      quality = int
      '''JPEG quality of proxy images
         @returns: int in [0, 32767]
      '''
      
      timecode = str
      '''
         @returns: enum in ['NONE', 'RECORD_RUN', 'FREE_RUN', 'FREE_RUN_REC_DATE', 'FREE_RUN_NO_GAPS']
      '''
      
   class MovieClipScopes(types.bpy_struct):
      '''Scopes for statistical view of a movie clip
      '''
   
   class MovieClipSequence(types.Sequence):
      '''Sequence strip to load a video from the clip editor
      '''
   
      alpha_mode = str
      '''Representation of alpha information in the RGBA pixels
         @returns: enum in ['STRAIGHT', 'PREMUL']
      '''
      
      animation_offset_end = int
      '''Animation end offset (trim end)
         @returns: int in [0, inf]
      '''
      
      animation_offset_start = int
      '''Animation start offset (trim start)
         @returns: int in [0, inf]
      '''
      
      color_multiply = float
      '''
         @returns: float in [0, 20]
      '''
      
      color_saturation = float
      '''Adjust the intensity of the input's color
         @returns: float in [0, 20]
      '''
      
      crop = types.SequenceCrop # (read only)
      '''
         @returns: SequenceCrop
      '''
      
      fps = float # (read only)
      '''Frames per second
         @returns: float in [-inf, inf]
      '''
      
      stabilize2d = bool
      '''Use the 2D stabilized version of the clip
         @returns: boolean
      '''
      
      strobe = float
      '''Only display every nth frame
         @returns: float in [1, 30]
      '''
      
      transform = types.SequenceTransform # (read only)
      '''
         @returns: SequenceTransform
      '''
      
      undistort = bool
      '''Use the undistorted version of the clip
         @returns: boolean
      '''
      
      use_crop = bool
      '''Crop image before processing
         @returns: boolean
      '''
      
      use_deinterlace = bool
      '''Remove fields from video movies
         @returns: boolean
      '''
      
      use_flip_x = bool
      '''Flip on the X axis
         @returns: boolean
      '''
      
      use_flip_y = bool
      '''Flip on the Y axis
         @returns: boolean
      '''
      
      use_float = bool
      '''Convert input to float data
         @returns: boolean
      '''
      
      use_reverse_frames = bool
      '''Reverse frame order
         @returns: boolean
      '''
      
      use_translation = bool
      '''Translate image before processing
         @returns: boolean
      '''
      
   class MovieClipUser(types.bpy_struct):
      '''Parameters defining how a MovieClip data-block is used by another data-block
      '''
   
      frame_current = int
      '''Current frame number in movie or image sequence
         @returns: int in [-1048574, 1048574]
      '''
      
      proxy_render_size = str
      '''Draw preview using full resolution or different proxy resolutions
         @returns: enum in ['PROXY_25', 'PROXY_50', 'PROXY_75', 'PROXY_100', 'FULL']
      '''
      
      use_render_undistorted = bool
      '''Render preview using undistorted proxy
         @returns: boolean
      '''
      
   class MovieReconstructedCamera(types.bpy_struct):
      '''Match-moving reconstructed camera data from tracker
      '''
   
      average_error = float # (read only)
      '''Average error of reconstruction
         @returns: float in [-inf, inf]
      '''
      
      frame = int # (read only)
      '''Frame number marker is keyframed on
         @returns: int in [-inf, inf]
      '''
      
      matrix = float # (read only)
      '''Worldspace transformation matrix
         @returns: float multi-dimensional array of 4 * 4 items in [-inf, inf]
      '''
      
   class MovieSequence(types.Sequence):
      '''Sequence strip to load a video
      '''
   
      alpha_mode = str
      '''Representation of alpha information in the RGBA pixels
         @returns: enum in ['STRAIGHT', 'PREMUL']
      '''
      
      animation_offset_end = int
      '''Animation end offset (trim end)
         @returns: int in [0, inf]
      '''
      
      animation_offset_start = int
      '''Animation start offset (trim start)
         @returns: int in [0, inf]
      '''
      
      color_multiply = float
      '''
         @returns: float in [0, 20]
      '''
      
      color_saturation = float
      '''Adjust the intensity of the input's color
         @returns: float in [0, 20]
      '''
      
      colorspace_settings = types.ColorManagedInputColorspaceSettings # (read only)
      '''Input color space settings
         @returns: ColorManagedInputColorspaceSettings
      '''
      
      crop = types.SequenceCrop # (read only)
      '''
         @returns: SequenceCrop
      '''
      
      elements = types.SequenceElement # (read only)
      '''
         @returns: Collection of SequenceElement
      '''
      
      filepath = str
      '''
         @returns: string, (never None)
      '''
      
      fps = float # (read only)
      '''Frames per second
         @returns: float in [-inf, inf]
      '''
      
      mpeg_preseek = int
      '''For MPEG movies, preseek this many frames
         @returns: int in [0, 50]
      '''
      
      proxy = types.SequenceProxy # (read only)
      '''
         @returns: SequenceProxy
      '''
      
      stereo_3d_format = types.Stereo3dFormat # (read only)
      '''Settings for stereo 3d
         @returns: Stereo3dFormat, (never None)
      '''
      
      stream_index = int
      '''For files with several movie streams, use the stream with the given index
         @returns: int in [0, 20]
      '''
      
      strobe = float
      '''Only display every nth frame
         @returns: float in [1, 30]
      '''
      
      transform = types.SequenceTransform # (read only)
      '''
         @returns: SequenceTransform
      '''
      
      use_crop = bool
      '''Crop image before processing
         @returns: boolean
      '''
      
      use_deinterlace = bool
      '''Remove fields from video movies
         @returns: boolean
      '''
      
      use_flip_x = bool
      '''Flip on the X axis
         @returns: boolean
      '''
      
      use_flip_y = bool
      '''Flip on the Y axis
         @returns: boolean
      '''
      
      use_float = bool
      '''Convert input to float data
         @returns: boolean
      '''
      
      use_multiview = bool
      '''Use Multiple Views (when available)
         @returns: boolean
      '''
      
      use_proxy = bool
      '''Use a preview proxy and/or timecode index for this strip
         @returns: boolean
      '''
      
      use_reverse_frames = bool
      '''Reverse frame order
         @returns: boolean
      '''
      
      use_translation = bool
      '''Translate image before processing
         @returns: boolean
      '''
      
      views_format = str
      '''Mode to load movie views
         @returns: enum in ['INDIVIDUAL', 'STEREO_3D']
      '''
      
      def metadata():
         '''Retrieve metadata of the movie file
            @returns (types.IDPropertyWrapPtr): Dict-like object containing the metadata
               
         '''
      
         return types.IDPropertyWrapPtr

   class MovieTracking(types.bpy_struct):
      '''Match-moving data for tracking
      '''
   
      active_object_index = int
      '''Index of active object
         @returns: int in [-inf, inf]
      '''
      
      camera = types.MovieTrackingCamera # (read only)
      '''
         @returns: MovieTrackingCamera
      '''
      
      dopesheet = types.MovieTrackingDopesheet # (read only)
      '''
         @returns: MovieTrackingDopesheet
      '''
      
      objects = types.MovieTrackingObjects # (read only)
      '''Collection of objects in this tracking data object
         @returns: MovieTrackingObjects Collection of MovieTrackingObject
      '''
      
      plane_tracks = types.MovieTrackingPlaneTracks # (read only)
      '''Collection of plane tracks in this tracking data object
         @returns: MovieTrackingPlaneTracks Collection of MovieTrackingPlaneTrack
      '''
      
      reconstruction = types.MovieTrackingReconstruction # (read only)
      '''
         @returns: MovieTrackingReconstruction
      '''
      
      settings = types.MovieTrackingSettings # (read only)
      '''
         @returns: MovieTrackingSettings
      '''
      
      stabilization = types.MovieTrackingStabilization # (read only)
      '''
         @returns: MovieTrackingStabilization
      '''
      
      tracks = types.MovieTrackingTracks # (read only)
      '''Collection of tracks in this tracking data object
         @returns: MovieTrackingTracks Collection of MovieTrackingTrack
      '''
      
   class MovieTrackingCamera(types.bpy_struct):
      '''Match-moving camera data for tracking
      '''
   
      distortion_model = str
      '''Distortion model used for camera lenses
         @returns: enum in ['POLYNOMIAL', 'DIVISION']
      '''
      
      division_k1 = float
      '''First coefficient of second order division distortion
         @returns: float in [-inf, inf]
      '''
      
      division_k2 = float
      '''First coefficient of second order division distortion
         @returns: float in [-inf, inf]
      '''
      
      focal_length = float
      '''Camera's focal length
         @returns: float in [0.0001, inf]
      '''
      
      focal_length_pixels = float
      '''Camera's focal length
         @returns: float in [0, inf]
      '''
      
      k1 = float
      '''First coefficient of third order polynomial radial distortion
         @returns: float in [-inf, inf]
      '''
      
      k2 = float
      '''Second coefficient of third order polynomial radial distortion
         @returns: float in [-inf, inf]
      '''
      
      k3 = float
      '''Third coefficient of third order polynomial radial distortion
         @returns: float in [-inf, inf]
      '''
      
      pixel_aspect = float
      '''Pixel aspect ratio
         @returns: float in [0.1, inf]
      '''
      
      principal = float
      '''Optical center of lens
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      sensor_width = float
      '''Width of CCD sensor in millimeters
         @returns: float in [0, 500]
      '''
      
      units = str
      '''Units used for camera focal length
         @returns: enum in ['PIXELS', 'MILLIMETERS']
      '''
      
   class MovieTrackingDopesheet(types.bpy_struct):
      '''Match-moving dopesheet data
      '''
   
      show_hidden = bool
      '''Include channels from objects/bone that aren't visible
         @returns: boolean
      '''
      
      show_only_selected = bool
      '''Only include channels relating to selected objects and data
         @returns: boolean
      '''
      
      sort_method = str
      '''Method to be used to sort channels in dopesheet view
         @returns: enum in ['NAME', 'LONGEST', 'TOTAL', 'AVERAGE_ERROR']
      '''
      
      use_invert_sort = bool
      '''Invert sort order of dopesheet channels
         @returns: boolean
      '''
      
   class MovieTrackingMarker(types.bpy_struct):
      '''Match-moving marker data for tracking
      '''
   
      co = float
      '''Marker position at frame in normalized coordinates
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      frame = int
      '''Frame number marker is keyframed on
         @returns: int in [-inf, inf]
      '''
      
      is_keyed = bool
      '''Whether the position of the marker is keyframed or tracked
         @returns: boolean
      '''
      
      mute = bool
      '''Is marker muted for current frame
         @returns: boolean
      '''
      
      pattern_bound_box = float # (read only)
      '''Pattern area bounding box in normalized coordinates
         @returns: float multi-dimensional array of 2 * 2 items in [-inf, inf]
      '''
      
      pattern_corners = float
      '''Array of coordinates which represents pattern's corners in normalized coordinates relative to marker position
         @returns: float multi-dimensional array of 4 * 2 items in [-inf, inf]
      '''
      
      search_max = float
      '''Right-bottom corner of search area in normalized coordinates relative to marker position
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      search_min = float
      '''Left-bottom corner of search area in normalized coordinates relative to marker position
         @returns: float array of 2 items in [-inf, inf]
      '''
      
   class MovieTrackingMarkers(types.bpy_struct):
      '''Collection of markers for movie tracking track
      '''
   
      def find_frame(frame, exact=True):
         '''Get marker for specified frame
            Arguments:
            @frame (int): Frame number to find marker for
               in [0, 1048574]
            @exact (bool): Get marker at exact frame number rather than get estimated marker
               (optional)
      
            @returns (types.MovieTrackingMarker): Marker for specified frame
               
         '''
      
         return types.MovieTrackingMarker

      def insert_frame(frame, co=(0.0, 0.0)):
         '''Insert a new marker at the specified frame
            Arguments:
            @frame (int): Frame number to insert marker to
               in [0, 1048574]
            @co (float): Place new marker at the given frame using specified in normalized space coordinates
               array of 2 items in [-1, 1], (optional)
      
            @returns (types.MovieTrackingMarker): Newly created marker
               
         '''
      
         return types.MovieTrackingMarker

      def delete_frame(frame):
         '''Delete marker at specified frame
            Arguments:
            @frame (int): Frame number to delete marker from
               in [0, 1048574]
      
         '''
      
         pass

   class MovieTrackingObject(types.bpy_struct):
      '''Match-moving object tracking and reconstruction data
      '''
   
      is_camera = bool # (read only)
      '''Object is used for camera tracking
         @returns: boolean
      '''
      
      keyframe_a = int
      '''First keyframe used for reconstruction initialization
         @returns: int in [-inf, inf]
      '''
      
      keyframe_b = int
      '''Second keyframe used for reconstruction initialization
         @returns: int in [-inf, inf]
      '''
      
      name = str
      '''Unique name of object
         @returns: string, (never None)
      '''
      
      plane_tracks = types.MovieTrackingObjectPlaneTracks # (read only)
      '''Collection of plane tracks in this tracking data object
         @returns: MovieTrackingObjectPlaneTracks Collection of MovieTrackingPlaneTrack
      '''
      
      reconstruction = types.MovieTrackingReconstruction # (read only)
      '''
         @returns: MovieTrackingReconstruction
      '''
      
      scale = float
      '''Scale of object solution in camera space
         @returns: float in [0.0001, 10000]
      '''
      
      tracks = types.MovieTrackingObjectTracks # (read only)
      '''Collection of tracks in this tracking data object
         @returns: MovieTrackingObjectTracks Collection of MovieTrackingTrack
      '''
      
   class MovieTrackingObjectPlaneTracks(types.bpy_struct):
      '''Collection of tracking plane tracks
      '''
   
      active = types.MovieTrackingTrack
      '''Active track in this tracking data object
         @returns: MovieTrackingTrack
      '''
      
   class MovieTrackingObjectTracks(types.bpy_struct):
      '''Collection of movie tracking tracks
      '''
   
      active = types.MovieTrackingTrack
      '''Active track in this tracking data object
         @returns: MovieTrackingTrack
      '''
      
      def new(name="", frame=1):
         '''create new motion track in this movie clip
            Arguments:
            @name (str): Name of new track
               (optional, never None)
            @frame (int): Frame number to add tracks on
               in [0, 1048574], (optional)
      
            @returns (types.MovieTrackingTrack): Newly created track
               
         '''
      
         return types.MovieTrackingTrack

   class MovieTrackingObjects(types.bpy_struct):
      '''Collection of movie tracking objects
      '''
   
      active = types.MovieTrackingObject
      '''Active object in this tracking data object
         @returns: MovieTrackingObject
      '''
      
      def new(name):
         '''Add tracking object to this movie clip
            Arguments:
            @name (str): Name of new object
               (never None)
      
            @returns (types.MovieTrackingObject): New motion tracking object
               
         '''
      
         return types.MovieTrackingObject

      def remove(object):
         '''Remove tracking object from this movie clip
            Arguments:
            @object (MovieTrackingObject): Motion tracking object to be removed
               (never None)
      
         '''
      
         pass

   class MovieTrackingPlaneMarker(types.bpy_struct):
      '''Match-moving plane marker data for tracking
      '''
   
      corners = float
      '''Array of coordinates which represents UI rectangle corners in frame normalized coordinates
         @returns: float multi-dimensional array of 4 * 2 items in [-inf, inf]
      '''
      
      frame = int
      '''Frame number marker is keyframed on
         @returns: int in [-inf, inf]
      '''
      
      mute = bool
      '''Is marker muted for current frame
         @returns: boolean
      '''
      
   class MovieTrackingPlaneMarkers(types.bpy_struct):
      '''Collection of markers for movie tracking plane track
      '''
   
      def find_frame(frame, exact=True):
         '''Get plane marker for specified frame
            Arguments:
            @frame (int): Frame number to find marker for
               in [0, 1048574]
            @exact (bool): Get plane marker at exact frame number rather than get estimated marker
               (optional)
      
            @returns (types.MovieTrackingPlaneMarker): Plane marker for specified frame
               
         '''
      
         return types.MovieTrackingPlaneMarker

      def insert_frame(frame):
         '''Insert a new plane marker at the specified frame
            Arguments:
            @frame (int): Frame number to insert marker to
               in [0, 1048574]
      
            @returns (types.MovieTrackingPlaneMarker): Newly created plane marker
               
         '''
      
         return types.MovieTrackingPlaneMarker

      def delete_frame(frame):
         '''Delete plane marker at specified frame
            Arguments:
            @frame (int): Frame number to delete plane marker from
               in [0, 1048574]
      
         '''
      
         pass

   class MovieTrackingPlaneTrack(types.bpy_struct):
      '''Match-moving plane track data for tracking
      '''
   
      image = types.Image
      '''Image displayed in the track during editing in clip editor
         @returns: Image
      '''
      
      image_opacity = float
      '''Opacity of the image
         @returns: float in [0, 1]
      '''
      
      markers = types.MovieTrackingPlaneMarkers # (read only)
      '''Collection of markers in track
         @returns: MovieTrackingPlaneMarkers Collection of MovieTrackingPlaneMarker
      '''
      
      name = str
      '''Unique name of track
         @returns: string, (never None)
      '''
      
      select = bool
      '''Plane track is selected
         @returns: boolean
      '''
      
      use_auto_keying = bool
      '''Automatic keyframe insertion when moving plane corners
         @returns: boolean
      '''
      
   class MovieTrackingPlaneTracks(types.bpy_struct):
      '''Collection of movie tracking plane tracks
      '''
   
      active = types.MovieTrackingPlaneTrack
      '''Active plane track in this tracking data object
         @returns: MovieTrackingPlaneTrack
      '''
      
   class MovieTrackingReconstructedCameras(types.bpy_struct):
      '''Collection of solved cameras
      '''
   
      def find_frame(frame=1):
         '''Find a reconstructed camera for a give frame number
            Arguments:
            @frame (int): Frame number to find camera for
               in [0, 1048574], (optional)
      
            @returns (types.MovieReconstructedCamera): Camera for a given frame
               
         '''
      
         return types.MovieReconstructedCamera

      def matrix_from_frame(frame=1):
         '''Return interpolated camera matrix for a given frame
            Arguments:
            @frame (int): Frame number to find camera for
               in [0, 1048574], (optional)
      
            @returns (float): Interpolated camera matrix for a given frame
               multi-dimensional array of 4 * 4 items in [-inf, inf]
         '''
      
         return float

   class MovieTrackingReconstruction(types.bpy_struct):
      '''Match-moving reconstruction data from tracker
      '''
   
      average_error = float # (read only)
      '''Average error of reconstruction
         @returns: float in [-inf, inf]
      '''
      
      cameras = types.MovieTrackingReconstructedCameras # (read only)
      '''Collection of solved cameras
         @returns: MovieTrackingReconstructedCameras Collection of MovieReconstructedCamera
      '''
      
      is_valid = bool # (read only)
      '''Is tracking data contains valid reconstruction information
         @returns: boolean
      '''
      
   class MovieTrackingSettings(types.bpy_struct):
      '''Match moving settings
      '''
   
      clean_action = str
      '''Cleanup action to execute
         @returns: enum in ['SELECT', 'DELETE_TRACK', 'DELETE_SEGMENTS']
      '''
      
      clean_error = float
      '''Effect on tracks which have a larger re-projection error
         @returns: float in [0, inf]
      '''
      
      clean_frames = int
      '''Effect on tracks which are tracked less than the specified amount of frames
         @returns: int in [0, inf]
      '''
      
      default_correlation_min = float
      '''Default minimum value of correlation between matched pattern and reference that is still treated as successful tracking
         @returns: float in [0, 1]
      '''
      
      default_frames_limit = int
      '''Every tracking cycle, this number of frames are tracked
         @returns: int in [0, 32767]
      '''
      
      default_margin = int
      '''Default distance from image boundary at which marker stops tracking
         @returns: int in [0, 300]
      '''
      
      default_motion_model = str
      '''Default motion model to use for tracking
         @returns: enum in ['Perspective', 'Affine', 'LocRotScale', 'LocScale', 'LocRot', 'Loc']
      '''
      
      default_pattern_match = str
      '''Track pattern from given frame when tracking marker to next frame
         @returns: enum in ['KEYFRAME', 'PREV_FRAME']
      '''
      
      default_pattern_size = int
      '''Size of pattern area for newly created tracks
         @returns: int in [5, 1000]
      '''
      
      default_search_size = int
      '''Size of search area for newly created tracks
         @returns: int in [5, 1000]
      '''
      
      default_weight = float
      '''Influence of newly created track on a final solution
         @returns: float in [0, 1]
      '''
      
      distance = float
      '''Distance between two bundles used for scene scaling
         @returns: float in [-inf, inf]
      '''
      
      object_distance = float
      '''Distance between two bundles used for object scaling
         @returns: float in [0.001, 10000]
      '''
      
      refine_intrinsics = str
      '''Refine intrinsics during camera solving
         @returns: enum in ['NONE', 'FOCAL_LENGTH', 'FOCAL_LENGTH_RADIAL_K1', 'FOCAL_LENGTH_RADIAL_K1_K2', 'FOCAL_LENGTH_PRINCIPAL_POINT_RADIAL_K1_K2', 'FOCAL_LENGTH_PRINCIPAL_POINT', 'RADIAL_K1_K2']
      '''
      
      show_default_expanded = bool
      '''Show default options expanded in the user interface
         @returns: boolean
      '''
      
      show_extra_expanded = bool
      '''Show extra options expanded in the user interface
         @returns: boolean
      '''
      
      speed = str
      '''Limit speed of tracking to make visual feedback easier (this does not affect the tracking quality)
         @returns: enum in ['FASTEST', 'DOUBLE', 'REALTIME', 'HALF', 'QUARTER']
      '''
      
      use_default_blue_channel = bool
      '''Use blue channel from footage for tracking
         @returns: boolean
      '''
      
      use_default_brute = bool
      '''Use a brute-force translation-only initialization when tracking
         @returns: boolean
      '''
      
      use_default_green_channel = bool
      '''Use green channel from footage for tracking
         @returns: boolean
      '''
      
      use_default_mask = bool
      '''Use a grease pencil data-block as a mask to use only specified areas of pattern when tracking
         @returns: boolean
      '''
      
      use_default_normalization = bool
      '''Normalize light intensities while tracking (slower)
         @returns: boolean
      '''
      
      use_default_red_channel = bool
      '''Use red channel from footage for tracking
         @returns: boolean
      '''
      
      use_keyframe_selection = bool
      '''Automatically select keyframes when solving camera/object motion
         @returns: boolean
      '''
      
      use_tripod_solver = bool
      '''Use special solver to track a stable camera position, such as a tripod
         @returns: boolean
      '''
      
   class MovieTrackingStabilization(types.bpy_struct):
      '''2D stabilization based on tracking markers
      '''
   
      active_rotation_track_index = int
      '''Index of active track in rotation stabilization tracks list
         @returns: int in [-inf, inf]
      '''
      
      active_track_index = int
      '''Index of active track in translation stabilization tracks list
         @returns: int in [-inf, inf]
      '''
      
      anchor_frame = int
      '''Reference point to anchor stabilization (other frames will be adjusted relative to this frame's position)
         @returns: int in [0, 1048574]
      '''
      
      filter_type = str
      '''Interpolation to use for sub-pixel shifts and rotations due to stabilization
         @returns: enum in ['NEAREST', 'BILINEAR', 'BICUBIC']
      '''
      
      influence_location = float
      '''Influence of stabilization algorithm on footage location
         @returns: float in [0, 1]
      '''
      
      influence_rotation = float
      '''Influence of stabilization algorithm on footage rotation
         @returns: float in [0, 1]
      '''
      
      influence_scale = float
      '''Influence of stabilization algorithm on footage scale
         @returns: float in [0, 1]
      '''
      
      rotation_tracks = types.MovieTrackingTrack # (read only)
      '''Collection of tracks used for 2D stabilization (translation)
         @returns: Collection of MovieTrackingTrack
      '''
      
      scale_max = float
      '''Limit the amount of automatic scaling
         @returns: float in [0, 10]
      '''
      
      show_tracks_expanded = bool
      '''Show UI list of tracks participating in stabilization
         @returns: boolean
      '''
      
      target_position = float
      '''Known relative offset of original shot, will be subtracted (e.g. for panning shot, can be animated)
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      target_rotation = float
      '''Rotation present on original shot, will be compensated (e.g. for deliberate tilting)
         @returns: float in [-inf, inf]
      '''
      
      target_scale = float
      '''Explicitly scale resulting frame to compensate zoom of original shot
         @returns: float in [1.192e-07, inf]
      '''
      
      tracks = types.MovieTrackingTrack # (read only)
      '''Collection of tracks used for 2D stabilization (translation)
         @returns: Collection of MovieTrackingTrack
      '''
      
      use_2d_stabilization = bool
      '''Use 2D stabilization for footage
         @returns: boolean
      '''
      
      use_autoscale = bool
      '''Automatically scale footage to cover unfilled areas when stabilizing
         @returns: boolean
      '''
      
      use_stabilize_rotation = bool
      '''Stabilize detected rotation around center of frame
         @returns: boolean
      '''
      
      use_stabilize_scale = bool
      '''Compensate any scale changes relative to center of rotation
         @returns: boolean
      '''
      
   class MovieTrackingTrack(types.bpy_struct):
      '''Match-moving track data for tracking
      '''
   
      average_error = float # (read only)
      '''Average error of re-projection
         @returns: float in [-inf, inf]
      '''
      
      bundle = float # (read only)
      '''Position of bundle reconstructed from this track
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      color = float
      '''Color of the track in the Movie Clip Editor and the 3D viewport after a solve
         @returns: float array of 3 items in [0, 1]
      '''
      
      correlation_min = float
      '''Minimal value of correlation between matched pattern and reference that is still treated as successful tracking
         @returns: float in [0, 1]
      '''
      
      frames_limit = int
      '''Every tracking cycle, this number of frames are tracked
         @returns: int in [0, 32767]
      '''
      
      grease_pencil = types.GreasePencil
      '''Grease pencil data for this track
         @returns: GreasePencil
      '''
      
      has_bundle = bool # (read only)
      '''True if track has a valid bundle
         @returns: boolean
      '''
      
      hide = bool
      '''Track is hidden
         @returns: boolean
      '''
      
      lock = bool
      '''Track is locked and all changes to it are disabled
         @returns: boolean
      '''
      
      margin = int
      '''Distance from image boundary at which marker stops tracking
         @returns: int in [0, 300]
      '''
      
      markers = types.MovieTrackingMarkers # (read only)
      '''Collection of markers in track
         @returns: MovieTrackingMarkers Collection of MovieTrackingMarker
      '''
      
      motion_model = str
      '''Default motion model to use for tracking
         @returns: enum in ['Perspective', 'Affine', 'LocRotScale', 'LocScale', 'LocRot', 'Loc']
      '''
      
      name = str
      '''Unique name of track
         @returns: string, (never None)
      '''
      
      offset = float
      '''Offset of track from the parenting point
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      pattern_match = str
      '''Track pattern from given frame when tracking marker to next frame
         @returns: enum in ['KEYFRAME', 'PREV_FRAME']
      '''
      
      select = bool
      '''Track is selected
         @returns: boolean
      '''
      
      select_anchor = bool
      '''Track's anchor point is selected
         @returns: boolean
      '''
      
      select_pattern = bool
      '''Track's pattern area is selected
         @returns: boolean
      '''
      
      select_search = bool
      '''Track's search area is selected
         @returns: boolean
      '''
      
      use_alpha_preview = bool
      '''Apply track's mask on displaying preview
         @returns: boolean
      '''
      
      use_blue_channel = bool
      '''Use blue channel from footage for tracking
         @returns: boolean
      '''
      
      use_brute = bool
      '''Use a brute-force translation only pre-track before refinement
         @returns: boolean
      '''
      
      use_custom_color = bool
      '''Use custom color instead of theme-defined
         @returns: boolean
      '''
      
      use_grayscale_preview = bool
      '''Display what the tracking algorithm sees in the preview
         @returns: boolean
      '''
      
      use_green_channel = bool
      '''Use green channel from footage for tracking
         @returns: boolean
      '''
      
      use_mask = bool
      '''Use a grease pencil data-block as a mask to use only specified areas of pattern when tracking
         @returns: boolean
      '''
      
      use_normalization = bool
      '''Normalize light intensities while tracking. Slower
         @returns: boolean
      '''
      
      use_red_channel = bool
      '''Use red channel from footage for tracking
         @returns: boolean
      '''
      
      weight = float
      '''Influence of this track on a final solution
         @returns: float in [0, 1]
      '''
      
      weight_stab = float
      '''Influence of this track on 2D stabilization
         @returns: float in [0, 1]
      '''
      
   class MovieTrackingTracks(types.bpy_struct):
      '''Collection of movie tracking tracks
      '''
   
      active = types.MovieTrackingTrack
      '''Active track in this tracking data object
         @returns: MovieTrackingTrack
      '''
      
      def new(name="", frame=1):
         '''Create new motion track in this movie clip
            Arguments:
            @name (str): Name of new track
               (optional, never None)
            @frame (int): Frame number to add track on
               in [0, 1048574], (optional)
      
            @returns (types.MovieTrackingTrack): Newly created track
               
         '''
      
         return types.MovieTrackingTrack

   class MulticamSequence(types.EffectSequence):
      '''Sequence strip to perform multicam editing
      '''
   
      animation_offset_end = int
      '''Animation end offset (trim end)
         @returns: int in [0, inf]
      '''
      
      animation_offset_start = int
      '''Animation start offset (trim start)
         @returns: int in [0, inf]
      '''
      
      input_count = int # (read only)
      '''
         @returns: int in [0, inf]
      '''
      
      multicam_source = int
      '''
         @returns: int in [0, 31]
      '''
      
   class MultiplyGpencilModifier(types.GpencilModifier):
      '''Generate multiple strokes from one stroke
      '''
   
      distance = float
      '''Distance of duplications
         @returns: float in [-inf, inf]
      '''
      
      duplicates = int
      '''How many copies of strokes be displayed
         @returns: int in [0, 999]
      '''
      
      enable_angle_splitting = bool
      '''Enable angle splitting
         @returns: boolean
      '''
      
      fading_center = float
      '''Fade center
         @returns: float in [0, 1]
      '''
      
      fading_opacity = float
      '''Fade influence of stroke's opacity
         @returns: float in [0, 1]
      '''
      
      fading_thickness = float
      '''Fade influence of stroke's thickness
         @returns: float in [0, 1]
      '''
      
      invert_layer_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_layers = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_material_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_materials = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      layer = str
      '''Layer name
         @returns: string, (never None)
      '''
      
      layer_pass = int
      '''Layer pass index
         @returns: int in [0, 100]
      '''
      
      material = str
      '''Material name
         @returns: string, (never None)
      '''
      
      offset = float
      '''Offset of duplicates. -1 to 1: inner to outer
         @returns: float in [-inf, inf]
      '''
      
      pass_index = int
      '''Pass index
         @returns: int in [0, 100]
      '''
      
      split_angle = float
      '''Split angle for segments
         @returns: float in [0, 3.14159]
      '''
      
      use_fade = bool
      '''Fade the stroke thickness for each generated stroke
         @returns: boolean
      '''
      
   class MultiplySequence(types.EffectSequence):
      '''Multiply Sequence
      '''
   
      input_1 = types.Sequence
      '''First input for the effect strip
         @returns: Sequence, (never None)
      '''
      
      input_2 = types.Sequence
      '''Second input for the effect strip
         @returns: Sequence, (never None)
      '''
      
      input_count = int # (read only)
      '''
         @returns: int in [0, inf]
      '''
      
   class MultiresModifier(types.Modifier):
      '''Multiresolution mesh modifier
      '''
   
      filepath = str
      '''Path to external displacements file
         @returns: string, (never None)
      '''
      
      is_external = bool # (read only)
      '''Store multires displacements outside the .blend file, to save memory
         @returns: boolean
      '''
      
      levels = int
      '''Number of subdivisions to use in the viewport
         @returns: int in [0, 255]
      '''
      
      quality = int
      '''Accuracy of vertex positions, lower value is faster but less precise
         @returns: int in [1, 10]
      '''
      
      render_levels = int
      '''The subdivision level visible at render time
         @returns: int in [0, 255]
      '''
      
      sculpt_levels = int
      '''Number of subdivisions to use in sculpt mode
         @returns: int in [0, 255]
      '''
      
      show_only_control_edges = bool
      '''Skip drawing/rendering of interior subdivided edges
         @returns: boolean
      '''
      
      subdivision_type = str
      '''Select type of subdivision algorithm
         @returns: enum in ['CATMULL_CLARK', 'SIMPLE']
      '''
      
      total_levels = int # (read only)
      '''Number of subdivisions for which displacements are stored
         @returns: int in [0, 255]
      '''
      
      use_creases = bool
      '''Use mesh edge crease information to sharpen edges
         @returns: boolean
      '''
      
      uv_smooth = str
      '''Controls how smoothing is applied to UVs
         @returns: enum in ['NONE', 'PRESERVE_CORNERS']
      '''
      
   class MusgraveTexture(types.Texture):
      '''Procedural musgrave texture
      '''
   
      dimension_max = float
      '''Highest fractal dimension
         @returns: float in [0.0001, 2]
      '''
      
      gain = float
      '''The gain multiplier
         @returns: float in [0, 6]
      '''
      
      lacunarity = float
      '''Gap between successive frequencies
         @returns: float in [0, 6]
      '''
      
      musgrave_type = str
      '''Fractal noise algorithm
         @returns: enum in ['MULTIFRACTAL', 'RIDGED_MULTIFRACTAL', 'HYBRID_MULTIFRACTAL', 'FBM', 'HETERO_TERRAIN']
      '''
      
      nabla = float
      '''Size of derivative offset used for calculating normal
         @returns: float in [0.001, 0.1]
      '''
      
      noise_basis = str
      '''Noise basis used for turbulence
         @returns: enum in ['BLENDER_ORIGINAL', 'ORIGINAL_PERLIN', 'IMPROVED_PERLIN', 'VORONOI_F1', 'VORONOI_F2', 'VORONOI_F3', 'VORONOI_F4', 'VORONOI_F2_F1', 'VORONOI_CRACKLE', 'CELL_NOISE']
      '''
      
      noise_intensity = float
      '''Intensity of the noise
         @returns: float in [0, 10]
      '''
      
      noise_scale = float
      '''Scaling for noise input
         @returns: float in [0.0001, inf]
      '''
      
      octaves = float
      '''Number of frequencies used
         @returns: float in [0, 8]
      '''
      
      offset = float
      '''The fractal offset
         @returns: float in [0, 6]
      '''
      
      users_material = None # (readonly)
      '''Materials that use this texture
         
      '''
      
      
      users_object_modifier = None # (readonly)
      '''Object modifiers that use this texture
         
      '''
      
      
   class NODE_UL_interface_sockets(types.UIList):
      '''
      '''
   
      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      def draw_item(self, context, layout, _data, item, icon, _active_data, _active_propname, _index):
         
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class NlaStrip(types.bpy_struct):
      '''A container referencing an existing Action
      '''
   
      action = types.Action
      '''Action referenced by this strip
         @returns: Action
      '''
      
      action_frame_end = float
      '''Last frame from action to use
         @returns: float in [-inf, inf]
      '''
      
      action_frame_start = float
      '''First frame from action to use
         @returns: float in [-inf, inf]
      '''
      
      active = bool # (read only)
      '''NLA Strip is active
         @returns: boolean
      '''
      
      blend_in = float
      '''Number of frames at start of strip to fade in influence
         @returns: float in [-inf, inf]
      '''
      
      blend_out = float
      '''
         @returns: float in [-inf, inf]
      '''
      
      blend_type = str
      '''Method used for combining strip's result with accumulated result
         @returns: enum in ['REPLACE', 'COMBINE', 'ADD', 'SUBTRACT', 'MULTIPLY']
      '''
      
      extrapolation = str
      '''Action to take for gaps past the strip extents
         @returns: enum in ['NOTHING', 'HOLD', 'HOLD_FORWARD']
      '''
      
      fcurves = types.NlaStripFCurves # (read only)
      '''F-Curves for controlling the strip's influence and timing
         @returns: NlaStripFCurves Collection of FCurve
      '''
      
      frame_end = float
      '''
         @returns: float in [-inf, inf]
      '''
      
      frame_start = float
      '''
         @returns: float in [-inf, inf]
      '''
      
      influence = float
      '''Amount the strip contributes to the current result
         @returns: float in [0, 1]
      '''
      
      modifiers = types.FModifier # (read only)
      '''Modifiers affecting all the F-Curves in the referenced Action
         @returns: Collection of FModifier
      '''
      
      mute = bool
      '''Disable NLA Strip evaluation
         @returns: boolean
      '''
      
      name = str
      '''
         @returns: string, (never None)
      '''
      
      repeat = float
      '''Number of times to repeat the action range
         @returns: float in [0.1, 1000]
      '''
      
      scale = float
      '''Scaling factor for action
         @returns: float in [0.0001, 1000]
      '''
      
      select = bool
      '''NLA Strip is selected
         @returns: boolean
      '''
      
      strip_time = float
      '''Frame of referenced Action to evaluate
         @returns: float in [-inf, inf]
      '''
      
      strips = types.NlaStrip # (read only)
      '''NLA Strips that this strip acts as a container for (if it is of type Meta)
         @returns: Collection of NlaStrip
      '''
      
      type = str # (read only)
      '''Type of NLA Strip
         @returns: enum in ['CLIP', 'TRANSITION', 'META', 'SOUND']
      '''
      
      use_animated_influence = bool
      '''Influence setting is controlled by an F-Curve rather than automatically determined
         @returns: boolean
      '''
      
      use_animated_time = bool
      '''Strip time is controlled by an F-Curve rather than automatically determined
         @returns: boolean
      '''
      
      use_animated_time_cyclic = bool
      '''Cycle the animated time within the action start & end
         @returns: boolean
      '''
      
      use_auto_blend = bool
      '''Number of frames for Blending In/Out is automatically determined from overlapping strips
         @returns: boolean
      '''
      
      use_reverse = bool
      '''NLA Strip is played back in reverse order (only when timing is automatically determined)
         @returns: boolean
      '''
      
      use_sync_length = bool
      '''Update range of frames referenced from action after tweaking strip and its keyframes
         @returns: boolean
      '''
      
   class NlaStripFCurves(types.bpy_struct):
      '''Collection of NLA strip F-Curves
      '''
   
      def find(data_path, index=0):
         '''Find an F-Curve. Note that this function performs a linear scan of all F-Curves in the NLA strip.
            Arguments:
            @data_path (str): F-Curve data path
               (never None)
            @index (int): Array index
               in [0, inf], (optional)
      
            @returns (types.FCurve): The found F-Curve, or None if it doesn't exist
               
         '''
      
         return types.FCurve

   class NlaStrips(types.bpy_struct):
      '''Collection of Nla Strips
      '''
   
      def new(name, start, action):
         '''Add a new Action-Clip strip to the track
            Arguments:
            @name (str): Name for the NLA Strips
               (never None)
            @start (int): Start frame for this strip
               in [-inf, inf]
            @action (Action): Action to assign to this strip
               (never None)
      
            @returns (types.NlaStrip): New NLA Strip
               
         '''
      
         return types.NlaStrip

      def remove(strip):
         '''Remove a NLA Strip
            Arguments:
            @strip (NlaStrip): NLA Strip to remove
               (never None)
      
         '''
      
         pass

   class NlaTrack(types.bpy_struct):
      '''A animation layer containing Actions referenced as NLA strips
      '''
   
      active = bool # (read only)
      '''NLA Track is active
         @returns: boolean
      '''
      
      is_solo = bool
      '''NLA Track is evaluated itself (i.e. active Action and all other NLA Tracks in the same AnimData block are disabled)
         @returns: boolean
      '''
      
      lock = bool
      '''NLA Track is locked
         @returns: boolean
      '''
      
      mute = bool
      '''Disable NLA Track evaluation
         @returns: boolean
      '''
      
      name = str
      '''
         @returns: string, (never None)
      '''
      
      select = bool
      '''NLA Track is selected
         @returns: boolean
      '''
      
      strips = types.NlaStrips # (read only)
      '''NLA Strips on this NLA-track
         @returns: NlaStrips Collection of NlaStrip
      '''
      
   class NlaTracks(types.bpy_struct):
      '''Collection of NLA Tracks
      '''
   
      active = types.NlaTrack
      '''Active Object constraint
         @returns: NlaTrack
      '''
      
      def new(prev=None):
         '''Add a new NLA Track
            Arguments:
            @prev (NlaTrack): NLA Track to add the new one after
               (optional)
      
            @returns (types.NlaTrack): New NLA Track
               
         '''
      
         return types.NlaTrack

      def remove(track):
         '''Remove a NLA Track
            Arguments:
            @track (NlaTrack): NLA Track to remove
               (never None)
      
         '''
      
         pass

   class Node(types.bpy_struct):
      '''Node in a node tree
      '''
   
      bl_description = str
      '''
         @returns: string, (never None)
      '''
      
      bl_height_default = float
      '''
         @returns: float in [0, inf]
      '''
      
      bl_height_max = float
      '''
         @returns: float in [0, inf]
      '''
      
      bl_height_min = float
      '''
         @returns: float in [0, inf]
      '''
      
      bl_icon = str
      '''The node icon
         @returns: enum in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_RIGHT', 'DISCLOSURE_TRI_DOWN', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'DUPLICATE', 'TRASH', 'COLLECTION_NEW', 'OPTIONS', 'NODE', 'NODE_SEL', 'WINDOW', 'WORKSPACE', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ADD', 'REMOVE', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'CHECKMARK', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'FCURVE_SNAPSHOT', 'OBJECT_HIDDEN', 'TOPBAR', 'STATUSBAR', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'UNLINKED', 'LINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'DRIVER_DISTANCE', 'DRIVER_ROTATIONAL_DIFFERENCE', 'DRIVER_TRANSFORM', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'FILE_NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'THREE_DOTS', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BRUSHES_ALL', 'LIGHT', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'OUTPUT', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TOOL_SETTINGS', 'SHADERFX', 'MODIFIER', 'BLANK1', 'FAKE_USER_OFF', 'FAKE_USER_ON', 'VIEW3D', 'GRAPH', 'OUTLINER', 'PROPERTIES', 'FILEBROWSER', 'IMAGE', 'INFO', 'SEQUENCE', 'TEXT', 'SOUND', 'ACTION', 'NLA', 'PREFERENCES', 'TIME', 'NODETREE', 'CONSOLE', 'TRACKER', 'ASSET_MANAGER', 'NODE_COMPOSITING', 'NODE_TEXTURE', 'NODE_MATERIAL', 'UV', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'UV_DATA', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'TRACKING', 'TRACKING_BACKWARDS', 'TRACKING_FORWARDS', 'TRACKING_BACKWARDS_SINGLE', 'TRACKING_FORWARDS_SINGLE', 'TRACKING_CLEAR_BACKWARDS', 'TRACKING_CLEAR_FORWARDS', 'TRACKING_REFINE_BACKWARDS', 'TRACKING_REFINE_FORWARDS', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LIGHT_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'COMMUNITY', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'EXPERIMENTAL', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'PRESET', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'LIBRARY_DATA_OVERRIDE', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'FACE_MAPS', 'RNA', 'RNA_ADD', 'MOUSE_LMB', 'MOUSE_MMB', 'MOUSE_RMB', 'MOUSE_MOVE', 'MOUSE_LMB_DRAG', 'MOUSE_MMB_DRAG', 'MOUSE_RMB_DRAG', 'MEMORY', 'PRESET_NEW', 'DECORATE', 'DECORATE_KEYFRAME', 'DECORATE_ANIMATE', 'DECORATE_DRIVER', 'DECORATE_LINKED', 'DECORATE_LIBRARY_OVERRIDE', 'DECORATE_UNLOCKED', 'DECORATE_LOCKED', 'DECORATE_OVERRIDE', 'FUND', 'TRACKER_DATA', 'HEART', 'ORPHAN_DATA', 'USER', 'SYSTEM', 'SETTINGS', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LIGHT', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'OUTLINER_OB_FORCE_FIELD', 'OUTLINER_OB_GROUP_INSTANCE', 'OUTLINER_OB_GREASEPENCIL', 'OUTLINER_OB_LIGHTPROBE', 'OUTLINER_OB_IMAGE', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'HIDE_ON', 'HIDE_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_RENDER_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_INSTANCED_OFF', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LIGHT', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_LIGHTPROBE', 'OUTLINER_DATA_GP_LAYER', 'OUTLINER_DATA_GREASEPENCIL', 'GP_SELECT_POINTS', 'GP_SELECT_STROKES', 'GP_MULTIFRAME_EDITING', 'GP_ONLY_SELECTED', 'GP_SELECT_BETWEEN_STROKES', 'MODIFIER_OFF', 'MODIFIER_ON', 'ONIONSKIN_OFF', 'ONIONSKIN_ON', 'RESTRICT_VIEW_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_INSTANCED_ON', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'EMPTY_SINGLE_ARROW', 'LIGHT_POINT', 'LIGHT_SUN', 'LIGHT_SPOT', 'LIGHT_HEMI', 'LIGHT_AREA', 'CUBE', 'SPHERE', 'CONE', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'EMPTY_AXIS', 'STROKE', 'EMPTY_ARROWS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'LIGHTPROBE_CUBEMAP', 'LIGHTPROBE_PLANAR', 'LIGHTPROBE_GRID', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'RIGID_BODY', 'RIGID_BODY_CONSTRAINT', 'IMAGE_PLANE', 'IMAGE_BACKGROUND', 'IMAGE_REFERENCE', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'NODE_TOP', 'NODE_SIDE', 'NODE_CORNER', 'ANCHOR_TOP', 'ANCHOR_BOTTOM', 'ANCHOR_LEFT', 'ANCHOR_RIGHT', 'ANCHOR_CENTER', 'SELECT_SET', 'SELECT_EXTEND', 'SELECT_SUBTRACT', 'SELECT_INTERSECT', 'SELECT_DIFFERENCE', 'ALIGN_LEFT', 'ALIGN_CENTER', 'ALIGN_RIGHT', 'ALIGN_JUSTIFY', 'ALIGN_FLUSH', 'ALIGN_TOP', 'ALIGN_MIDDLE', 'ALIGN_BOTTOM', 'BOLD', 'ITALIC', 'UNDERLINE', 'SMALL_CAPS', 'CON_ACTION', 'HOLDOUT_OFF', 'HOLDOUT_ON', 'INDIRECT_ONLY_OFF', 'INDIRECT_ONLY_ON', 'CON_CAMERASOLVER', 'CON_FOLLOWTRACK', 'CON_OBJECTSOLVER', 'CON_LOCLIKE', 'CON_ROTLIKE', 'CON_SIZELIKE', 'CON_TRANSLIKE', 'CON_DISTLIMIT', 'CON_LOCLIMIT', 'CON_ROTLIMIT', 'CON_SIZELIMIT', 'CON_SAMEVOL', 'CON_TRANSFORM', 'CON_TRANSFORM_CACHE', 'CON_CLAMPTO', 'CON_KINEMATIC', 'CON_LOCKTRACK', 'CON_SPLINEIK', 'CON_STRETCHTO', 'CON_TRACKTO', 'CON_ARMATURE', 'CON_CHILDOF', 'CON_FLOOR', 'CON_FOLLOWPATH', 'CON_PIVOT', 'CON_SHRINKWRAP', 'MODIFIER_DATA', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'MOD_TINT', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_FLUID', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'MOD_PARTICLE_INSTANCE', 'MOD_HUE_SATURATION', 'MOD_NOISE', 'MOD_OFFSET', 'MOD_SIMPLIFY', 'MOD_THICKNESS', 'MOD_INSTANCE', 'MOD_TIME', 'MOD_OPACITY', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_SOUND', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'KEYFRAME_HLT', 'KEYFRAME', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'CURSOR', 'PIVOT_BOUNDBOX', 'PIVOT_CURSOR', 'PIVOT_INDIVIDUAL', 'PIVOT_MEDIAN', 'PIVOT_ACTIVE', 'CENTER_ONLY', 'ROOTCURVE', 'SMOOTHCURVE', 'SPHERECURVE', 'INVERSESQUARECURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'PROP_PROJECTED', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'SNAP_FACE_CENTER', 'SNAP_PERPENDICULAR', 'SNAP_MIDPOINT', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'OBJECT_ORIGIN', 'ORIENTATION_GLOBAL', 'ORIENTATION_GIMBAL', 'ORIENTATION_LOCAL', 'ORIENTATION_NORMAL', 'ORIENTATION_VIEW', 'COPYDOWN', 'PASTEDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'VIS_SEL_11', 'VIS_SEL_10', 'VIS_SEL_01', 'VIS_SEL_00', 'AUTOMERGE_OFF', 'AUTOMERGE_ON', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'TRANSFORM_ORIGINS', 'GIZMO', 'ORIENTATION_CURSOR', 'NORMALS_VERTEX', 'NORMALS_FACE', 'NORMALS_VERTEX_FACE', 'SHADING_BBOX', 'SHADING_WIRE', 'SHADING_SOLID', 'SHADING_RENDERED', 'SHADING_TEXTURE', 'OVERLAY', 'XRAY', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'LAYER_USED', 'LAYER_ACTIVE', 'OUTLINER_OB_HAIR', 'OUTLINER_DATA_HAIR', 'HAIR_DATA', 'OUTLINER_OB_POINTCLOUD', 'OUTLINER_DATA_POINTCLOUD', 'POINTCLOUD_DATA', 'OUTLINER_OB_VOLUME', 'OUTLINER_DATA_VOLUME', 'VOLUME_DATA', 'HOME', 'DOCUMENTS', 'TEMP', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'SHORTDISPLAY', 'LONGDISPLAY', 'IMGDISPLAY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'FOLDER_REDIRECT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'SORT_DESC', 'SORT_ASC', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_ARCHIVE', 'FILE_CACHE', 'FILE_VOLUME', 'FILE_3D', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'MATSHADERBALL', 'MATCLOTH', 'MATFLUID', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'DISC', 'DESKTOP', 'EXTERNAL_DRIVE', 'NETWORK_DRIVE', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'SEQ_STRIP_META', 'SEQ_STRIP_DUPLICATE', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'HANDLE_AUTOCLAMPED', 'HANDLE_AUTO', 'HANDLE_ALIGNED', 'HANDLE_VECTOR', 'HANDLE_FREE', 'VIEW_PERSPECTIVE', 'VIEW_ORTHO', 'VIEW_CAMERA', 'VIEW_PAN', 'VIEW_ZOOM', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'GPBRUSH_SMOOTH', 'GPBRUSH_THICKNESS', 'GPBRUSH_STRENGTH', 'GPBRUSH_GRAB', 'GPBRUSH_PUSH', 'GPBRUSH_TWIST', 'GPBRUSH_PINCH', 'GPBRUSH_RANDOMIZE', 'GPBRUSH_CLONE', 'GPBRUSH_WEIGHT', 'GPBRUSH_PENCIL', 'GPBRUSH_PEN', 'GPBRUSH_INK', 'GPBRUSH_INKNOISE', 'GPBRUSH_BLOCK', 'GPBRUSH_MARKER', 'GPBRUSH_FILL', 'GPBRUSH_AIRBRUSH', 'GPBRUSH_CHISEL', 'GPBRUSH_ERASE_SOFT', 'GPBRUSH_ERASE_HARD', 'GPBRUSH_ERASE_STROKE', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'HANDLETYPE_FREE_VEC', 'HANDLETYPE_ALIGNED_VEC', 'HANDLETYPE_VECTOR_VEC', 'HANDLETYPE_AUTO_VEC', 'HANDLETYPE_AUTO_CLAMP_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC', 'EVENT_A', 'EVENT_B', 'EVENT_C', 'EVENT_D', 'EVENT_E', 'EVENT_F', 'EVENT_G', 'EVENT_H', 'EVENT_I', 'EVENT_J', 'EVENT_K', 'EVENT_L', 'EVENT_M', 'EVENT_N', 'EVENT_O', 'EVENT_P', 'EVENT_Q', 'EVENT_R', 'EVENT_S', 'EVENT_T', 'EVENT_U', 'EVENT_V', 'EVENT_W', 'EVENT_X', 'EVENT_Y', 'EVENT_Z', 'EVENT_SHIFT', 'EVENT_CTRL', 'EVENT_ALT', 'EVENT_OS', 'EVENT_F1', 'EVENT_F2', 'EVENT_F3', 'EVENT_F4', 'EVENT_F5', 'EVENT_F6', 'EVENT_F7', 'EVENT_F8', 'EVENT_F9', 'EVENT_F10', 'EVENT_F11', 'EVENT_F12', 'EVENT_ESC', 'EVENT_TAB', 'EVENT_PAGEUP', 'EVENT_PAGEDOWN', 'EVENT_RETURN', 'EVENT_SPACEKEY']
      '''
      
      bl_idname = str
      '''
         @returns: string, (never None)
      '''
      
      bl_label = str
      '''The node label
         @returns: string, (never None)
      '''
      
      bl_static_type = str
      '''Node type (deprecated, use with care)
         @returns: enum in ['CUSTOM']
      '''
      
      bl_width_default = float
      '''
         @returns: float in [0, inf]
      '''
      
      bl_width_max = float
      '''
         @returns: float in [0, inf]
      '''
      
      bl_width_min = float
      '''
         @returns: float in [0, inf]
      '''
      
      color = float
      '''Custom color of the node body
         @returns: float array of 3 items in [0, 1]
      '''
      
      dimensions = float # (read only)
      '''Absolute bounding box dimensions of the node
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      height = float
      '''Height of the node
         @returns: float in [-inf, inf]
      '''
      
      hide = bool
      '''
         @returns: boolean
      '''
      
      inputs = types.NodeInputs # (read only)
      '''
         @returns: NodeInputs Collection of NodeSocket
      '''
      
      internal_links = types.NodeLink # (read only)
      '''Internal input-to-output connections for muting
         @returns: Collection of NodeLink
      '''
      
      label = str
      '''Optional custom node label
         @returns: string, (never None)
      '''
      
      location = float
      '''
         @returns: float array of 2 items in [-100000, 100000]
      '''
      
      mute = bool
      '''
         @returns: boolean
      '''
      
      name = str
      '''Unique node identifier
         @returns: string, (never None)
      '''
      
      outputs = types.NodeOutputs # (read only)
      '''
         @returns: NodeOutputs Collection of NodeSocket
      '''
      
      parent = types.Node
      '''Parent this node is attached to
         @returns: Node
      '''
      
      select = bool
      '''Node selection state
         @returns: boolean
      '''
      
      show_options = bool
      '''
         @returns: boolean
      '''
      
      show_preview = bool
      '''
         @returns: boolean
      '''
      
      show_texture = bool
      '''Draw node in viewport textured draw mode
         @returns: boolean
      '''
      
      type = str # (read only)
      '''Node type (deprecated, use bl_static_type or bl_idname for the actual identifier string)
         @returns: enum in ['CUSTOM']
      '''
      
      use_custom_color = bool
      '''Use custom color for the node
         @returns: boolean
      '''
      
      width = float
      '''Width of the node
         @returns: float in [-inf, inf]
      '''
      
      width_hidden = float
      '''Width of the node in hidden state
         @returns: float in [-inf, inf]
      '''
      
      def socket_value_update(context):
         '''Update after property changes
            Arguments:
            @context (Context): (never None)
      
         '''
      
         pass

      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def poll(node_tree):
         '''If non-null output is returned, the node type can be added to the tree
            Arguments:
            @node_tree (NodeTree): 
      
            @returns (bool): 
         '''
      
         return bool

      def poll_instance(node_tree):
         '''If non-null output is returned, the node can be added to the tree
            Arguments:
            @node_tree (NodeTree): 
      
            @returns (bool): 
         '''
      
         return bool

      def update():
         '''Update on node graph topology changes (adding or removing nodes and links)
         '''
      
         pass

      def insert_link(link):
         '''Handle creation of a link to or from the node
            Arguments:
            @link (NodeLink): Node link that will be inserted
               (never None)
      
         '''
      
         pass

      def init(context):
         '''Initialize a new instance of this node
            Arguments:
            @context (Context): (never None)
      
         '''
      
         pass

      def copy(node):
         '''Initialize a new instance of this node from an existing node
            Arguments:
            @node (Node): Existing node to copy
               (never None)
      
         '''
      
         pass

      def free():
         '''Clean up node on removal
         '''
      
         pass

      def draw_buttons(context, layout):
         '''Draw node buttons
            Arguments:
            @context (Context): (never None)
            @layout (UILayout): Layout in the UI
               (never None)
      
         '''
      
         pass

      def draw_buttons_ext(context, layout):
         '''Draw node buttons in the sidebar
            Arguments:
            @context (Context): (never None)
            @layout (UILayout): Layout in the UI
               (never None)
      
         '''
      
         pass

      def draw_label():
         '''Returns a dynamic label string
            @returns (str): (never None)
         '''
      
         return str

      @classmethod
      def poll(cls, _ntree):
         
      
         pass
      
   class NodeCustomGroup(types.Node):
      '''Base node type for custom registered node group types
      '''
   
      interface = types.PropertyGroup # (read only)
      '''Interface socket data
         @returns: PropertyGroup
      '''
      
      node_tree = types.NodeTree
      '''
         @returns: NodeTree
      '''
      
      @classmethod
      def poll(cls, _ntree):
         
      
         pass
      
   class NodeFrame(types.NodeInternal):
      '''
      '''
   
      label_size = int
      '''Font size to use for displaying the label
         @returns: int in [8, 64]
      '''
      
      shrink = bool
      '''Shrink the frame to minimal bounding box
         @returns: boolean
      '''
      
      text = types.Text
      '''
         @returns: Text
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

   class NodeGroup(types.NodeInternal):
      '''
      '''
   
      interface = types.PropertyGroup # (read only)
      '''Interface socket data
         @returns: PropertyGroup
      '''
      
      node_tree = types.NodeTree
      '''
         @returns: NodeTree
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

   class NodeGroupInput(types.NodeInternal):
      '''
      '''
   
      interface = types.PropertyGroup # (read only)
      '''Interface socket data
         @returns: PropertyGroup
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

   class NodeGroupOutput(types.NodeInternal):
      '''
      '''
   
      interface = types.PropertyGroup # (read only)
      '''Interface socket data
         @returns: PropertyGroup
      '''
      
      is_active_output = bool
      '''True if this node is used as the active group output
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

   class NodeInputs(types.bpy_struct):
      '''Collection of Node Sockets
      '''
   
      def new(type, name, identifier=""):
         '''Add a socket to this node
            Arguments:
            @type (str): Data type
               (never None)
            @name (str): (never None)
            @identifier (str): Unique socket identifier
               (optional, never None)
      
            @returns (types.NodeSocket): New socket
               
         '''
      
         return types.NodeSocket

      def remove(socket):
         '''Remove a socket from this node
            Arguments:
            @socket (NodeSocket): The socket to remove
               
      
         '''
      
         pass

      def clear():
         '''Remove all sockets from this node
         '''
      
         pass

      def move(from_index, to_index):
         '''Move a socket to another position
            Arguments:
            @from_index (int): Index of the socket to move
               in [0, inf]
            @to_index (int): Target index for the socket
               in [0, inf]
      
         '''
      
         pass

   class NodeInstanceHash(types.bpy_struct):
      '''Hash table containing node instance data
      '''
   
   class NodeInternal(types.Node):
      '''
      '''
   
      @classmethod
      def poll(node_tree):
         '''If non-null output is returned, the node type can be added to the tree
            Arguments:
            @node_tree (NodeTree): 
      
            @returns (bool): 
         '''
      
         return bool

      def poll_instance(node_tree):
         '''If non-null output is returned, the node can be added to the tree
            Arguments:
            @node_tree (NodeTree): 
      
            @returns (bool): 
         '''
      
         return bool

      def update():
         '''Update on node graph topology changes (adding or removing nodes and links)
         '''
      
         pass

      def draw_buttons(context, layout):
         '''Draw node buttons
            Arguments:
            @context (Context): (never None)
            @layout (UILayout): Layout in the UI
               (never None)
      
         '''
      
         pass

      def draw_buttons_ext(context, layout):
         '''Draw node buttons in the sidebar
            Arguments:
            @context (Context): (never None)
            @layout (UILayout): Layout in the UI
               (never None)
      
         '''
      
         pass

   class NodeInternalSocketTemplate(types.bpy_struct):
      '''Type and default value of a node socket
      '''
   
      identifier = str # (read only)
      '''Identifier of the socket
         @returns: string, (never None)
      '''
      
      name = str # (read only)
      '''Name of the socket
         @returns: string, (never None)
      '''
      
      type = str # (read only)
      '''Data type of the socket
         @returns: enum in ['CUSTOM', 'VALUE', 'INT', 'BOOLEAN', 'VECTOR', 'STRING', 'RGBA', 'SHADER']
      '''
      
   class NodeLink(types.bpy_struct):
      '''Link is valid
      '''
   
      from_node = types.Node # (read only)
      '''
         @returns: Node
      '''
      
      from_socket = types.NodeSocket # (read only)
      '''
         @returns: NodeSocket
      '''
      
      is_hidden = bool # (read only)
      '''Link is hidden due to invisible sockets
         @returns: boolean
      '''
      
      is_valid = bool
      '''
         @returns: boolean
      '''
      
      to_node = types.Node # (read only)
      '''
         @returns: Node
      '''
      
      to_socket = types.NodeSocket # (read only)
      '''
         @returns: NodeSocket
      '''
      
   class NodeLinks(types.bpy_struct):
      '''Collection of Node Links
      '''
   
      def new(input, output, verify_limits=True):
         '''Add a node link to this node tree
            Arguments:
            @input (NodeSocket): The input socket
               (never None)
            @output (NodeSocket): The output socket
               (never None)
            @verify_limits (bool): Remove existing links if connection limit is exceeded
               (optional)
      
            @returns (types.NodeLink): New node link
               
         '''
      
         return types.NodeLink

      def remove(link):
         '''remove a node link from the node tree
            Arguments:
            @link (NodeLink): The node link to remove
               (never None)
      
         '''
      
         pass

      def clear():
         '''remove all node links from the node tree
         '''
      
         pass

   class NodeOutputFileSlotFile(types.bpy_struct):
      '''Single layer file slot of the file output node
      '''
   
      format = types.ImageFormatSettings # (read only)
      '''
         @returns: ImageFormatSettings
      '''
      
      path = str
      '''Subpath used for this slot
         @returns: string, (never None)
      '''
      
      use_node_format = bool
      '''
         @returns: boolean
      '''
      
   class NodeOutputFileSlotLayer(types.bpy_struct):
      '''Multilayer slot of the file output node
      '''
   
      name = str
      '''OpenEXR layer name used for this slot
         @returns: string, (never None)
      '''
      
   class NodeOutputs(types.bpy_struct):
      '''Collection of Node Sockets
      '''
   
      def new(type, name, identifier=""):
         '''Add a socket to this node
            Arguments:
            @type (str): Data type
               (never None)
            @name (str): (never None)
            @identifier (str): Unique socket identifier
               (optional, never None)
      
            @returns (types.NodeSocket): New socket
               
         '''
      
         return types.NodeSocket

      def remove(socket):
         '''Remove a socket from this node
            Arguments:
            @socket (NodeSocket): The socket to remove
               
      
         '''
      
         pass

      def clear():
         '''Remove all sockets from this node
         '''
      
         pass

      def move(from_index, to_index):
         '''Move a socket to another position
            Arguments:
            @from_index (int): Index of the socket to move
               in [0, inf]
            @to_index (int): Target index for the socket
               in [0, inf]
      
         '''
      
         pass

   class NodeReroute(types.NodeInternal):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

   class NodeSetting(types.PropertyGroup):
      '''
      '''
   
      value = str
      '''Python expression to be evaluated as the initial node setting
         @returns: string, (never None)
      '''
      
   class NodeSocket(types.bpy_struct):
      '''Input or output socket of a node
      '''
   
      bl_idname = str
      '''
         @returns: string, (never None)
      '''
      
      display_shape = str
      '''Socket shape
         @returns: enum in ['CIRCLE', 'SQUARE', 'DIAMOND', 'CIRCLE_DOT', 'SQUARE_DOT', 'DIAMOND_DOT']
      '''
      
      enabled = bool
      '''Enable the socket
         @returns: boolean
      '''
      
      hide = bool
      '''Hide the socket
         @returns: boolean
      '''
      
      hide_value = bool
      '''Hide the socket input value
         @returns: boolean
      '''
      
      identifier = str # (read only)
      '''Unique identifier for mapping sockets
         @returns: string, (never None)
      '''
      
      is_linked = bool # (read only)
      '''True if the socket is connected
         @returns: boolean
      '''
      
      is_output = bool # (read only)
      '''True if the socket is an output, otherwise input
         @returns: boolean
      '''
      
      label = str # (read only)
      '''Custom dynamic defined socket label
         @returns: string, (never None)
      '''
      
      link_limit = int
      '''Max number of links allowed for this socket
         @returns: int in [1, 4095]
      '''
      
      name = str
      '''Socket name
         @returns: string, (never None)
      '''
      
      node = types.Node # (read only)
      '''Node owning this socket
         @returns: Node
      '''
      
      show_expanded = bool
      '''Socket links are expanded in the user interface
         @returns: boolean
      '''
      
      type = str
      '''Data type
         @returns: enum in ['CUSTOM', 'VALUE', 'INT', 'BOOLEAN', 'VECTOR', 'STRING', 'RGBA', 'SHADER']
      '''
      
      links = None # (readonly)
      '''List of node links from or to this socket. Warning: takes O(len(nodetree.links)) time.
         
      '''
      
      
      def draw(context, layout, node, text):
         '''Draw socket
            Arguments:
            @context (Context): (never None)
            @layout (UILayout): Layout in the UI
               (never None)
            @node (Node): Node the socket belongs to
               (never None)
            @text (str): Text label to draw alongside properties
               (never None)
      
         '''
      
         pass

      def draw_color(context, node):
         '''Color of the socket icon
            Arguments:
            @context (Context): (never None)
            @node (Node): Node the socket belongs to
               (never None)
      
            @returns (float): array of 4 items in [0, 1]
         '''
      
         return float

   class NodeSocketBool(types.NodeSocketStandard):
      '''Boolean value socket of a node
      '''
   
      default_value = bool
      '''Input value used for unconnected socket
         @returns: boolean
      '''
      
      links = None # (readonly)
      '''List of node links from or to this socket. Warning: takes O(len(nodetree.links)) time.
         
      '''
      
      
   class NodeSocketColor(types.NodeSocketStandard):
      '''RGBA color socket of a node
      '''
   
      default_value = float
      '''Input value used for unconnected socket
         @returns: float array of 4 items in [0, inf]
      '''
      
      links = None # (readonly)
      '''List of node links from or to this socket. Warning: takes O(len(nodetree.links)) time.
         
      '''
      
      
   class NodeSocketFloat(types.NodeSocketStandard):
      '''Floating point number socket of a node
      '''
   
      default_value = float
      '''Input value used for unconnected socket
         @returns: float in [-inf, inf]
      '''
      
      links = None # (readonly)
      '''List of node links from or to this socket. Warning: takes O(len(nodetree.links)) time.
         
      '''
      
      
   class NodeSocketFloatAngle(types.NodeSocketStandard):
      '''Floating point number socket of a node
      '''
   
      default_value = float
      '''Input value used for unconnected socket
         @returns: float in [-inf, inf]
      '''
      
      links = None # (readonly)
      '''List of node links from or to this socket. Warning: takes O(len(nodetree.links)) time.
         
      '''
      
      
   class NodeSocketFloatFactor(types.NodeSocketStandard):
      '''Floating point number socket of a node
      '''
   
      default_value = float
      '''Input value used for unconnected socket
         @returns: float in [0, 1]
      '''
      
      links = None # (readonly)
      '''List of node links from or to this socket. Warning: takes O(len(nodetree.links)) time.
         
      '''
      
      
   class NodeSocketFloatPercentage(types.NodeSocketStandard):
      '''Floating point number socket of a node
      '''
   
      default_value = float
      '''Input value used for unconnected socket
         @returns: float in [-inf, inf]
      '''
      
      links = None # (readonly)
      '''List of node links from or to this socket. Warning: takes O(len(nodetree.links)) time.
         
      '''
      
      
   class NodeSocketFloatTime(types.NodeSocketStandard):
      '''Floating point number socket of a node
      '''
   
      default_value = float
      '''Input value used for unconnected socket
         @returns: float in [-inf, inf]
      '''
      
      links = None # (readonly)
      '''List of node links from or to this socket. Warning: takes O(len(nodetree.links)) time.
         
      '''
      
      
   class NodeSocketFloatUnsigned(types.NodeSocketStandard):
      '''Floating point number socket of a node
      '''
   
      default_value = float
      '''Input value used for unconnected socket
         @returns: float in [0, inf]
      '''
      
      links = None # (readonly)
      '''List of node links from or to this socket. Warning: takes O(len(nodetree.links)) time.
         
      '''
      
      
   class NodeSocketInt(types.NodeSocketStandard):
      '''Integer number socket of a node
      '''
   
      default_value = int
      '''Input value used for unconnected socket
         @returns: int in [-inf, inf]
      '''
      
      links = None # (readonly)
      '''List of node links from or to this socket. Warning: takes O(len(nodetree.links)) time.
         
      '''
      
      
   class NodeSocketIntFactor(types.NodeSocketStandard):
      '''Integer number socket of a node
      '''
   
      default_value = int
      '''Input value used for unconnected socket
         @returns: int in [0, inf]
      '''
      
      links = None # (readonly)
      '''List of node links from or to this socket. Warning: takes O(len(nodetree.links)) time.
         
      '''
      
      
   class NodeSocketIntPercentage(types.NodeSocketStandard):
      '''Integer number socket of a node
      '''
   
      default_value = int
      '''Input value used for unconnected socket
         @returns: int in [0, inf]
      '''
      
      links = None # (readonly)
      '''List of node links from or to this socket. Warning: takes O(len(nodetree.links)) time.
         
      '''
      
      
   class NodeSocketIntUnsigned(types.NodeSocketStandard):
      '''Integer number socket of a node
      '''
   
      default_value = int
      '''Input value used for unconnected socket
         @returns: int in [0, inf]
      '''
      
      links = None # (readonly)
      '''List of node links from or to this socket. Warning: takes O(len(nodetree.links)) time.
         
      '''
      
      
   class NodeSocketInterface(types.bpy_struct):
      '''Parameters to define node sockets
      '''
   
      bl_socket_idname = str
      '''
         @returns: string, (never None)
      '''
      
      identifier = str # (read only)
      '''Unique identifier for mapping sockets
         @returns: string, (never None)
      '''
      
      is_output = bool # (read only)
      '''True if the socket is an output, otherwise input
         @returns: boolean
      '''
      
      name = str
      '''Socket name
         @returns: string, (never None)
      '''
      
      def draw(context, layout):
         '''Draw template settings
            Arguments:
            @context (Context): (never None)
            @layout (UILayout): Layout in the UI
               (never None)
      
         '''
      
         pass

      def draw_color(context):
         '''Color of the socket icon
            Arguments:
            @context (Context): (never None)
      
            @returns (float): array of 4 items in [0, 1]
         '''
      
         return float

      def register_properties(data_rna_type):
         '''Define RNA properties of a socket
            Arguments:
            @data_rna_type (Struct): RNA type for special socket properties
               
      
         '''
      
         pass

      def init_socket(node, socket, data_path):
         '''Initialize a node socket instance
            Arguments:
            @node (Node): Node of the socket to initialize
               (never None)
            @socket (NodeSocket): Socket to initialize
               (never None)
            @data_path (str): Path to specialized socket data
               (never None)
      
         '''
      
         pass

      def from_socket(node, socket):
         '''Setup template parameters from an existing socket
            Arguments:
            @node (Node): Node of the original socket
               (never None)
            @socket (NodeSocket): Original socket
               (never None)
      
         '''
      
         pass

   class NodeSocketInterfaceBool(types.NodeSocketInterfaceStandard):
      '''Boolean value socket of a node
      '''
   
      default_value = bool
      '''Input value used for unconnected socket
         @returns: boolean
      '''
      
   class NodeSocketInterfaceColor(types.NodeSocketInterfaceStandard):
      '''RGBA color socket of a node
      '''
   
      default_value = float
      '''Input value used for unconnected socket
         @returns: float array of 4 items in [0, inf]
      '''
      
   class NodeSocketInterfaceFloat(types.NodeSocketInterfaceStandard):
      '''Floating point number socket of a node
      '''
   
      default_value = float
      '''Input value used for unconnected socket
         @returns: float in [-inf, inf]
      '''
      
      max_value = float
      '''Maximum value
         @returns: float in [-inf, inf]
      '''
      
      min_value = float
      '''Minimum value
         @returns: float in [-inf, inf]
      '''
      
   class NodeSocketInterfaceFloatAngle(types.NodeSocketInterfaceStandard):
      '''Floating point number socket of a node
      '''
   
      default_value = float
      '''Input value used for unconnected socket
         @returns: float in [-inf, inf]
      '''
      
      max_value = float
      '''Maximum value
         @returns: float in [-inf, inf]
      '''
      
      min_value = float
      '''Minimum value
         @returns: float in [-inf, inf]
      '''
      
   class NodeSocketInterfaceFloatFactor(types.NodeSocketInterfaceStandard):
      '''Floating point number socket of a node
      '''
   
      default_value = float
      '''Input value used for unconnected socket
         @returns: float in [0, 1]
      '''
      
      max_value = float
      '''Maximum value
         @returns: float in [-inf, inf]
      '''
      
      min_value = float
      '''Minimum value
         @returns: float in [-inf, inf]
      '''
      
   class NodeSocketInterfaceFloatPercentage(types.NodeSocketInterfaceStandard):
      '''Floating point number socket of a node
      '''
   
      default_value = float
      '''Input value used for unconnected socket
         @returns: float in [-inf, inf]
      '''
      
      max_value = float
      '''Maximum value
         @returns: float in [-inf, inf]
      '''
      
      min_value = float
      '''Minimum value
         @returns: float in [-inf, inf]
      '''
      
   class NodeSocketInterfaceFloatTime(types.NodeSocketInterfaceStandard):
      '''Floating point number socket of a node
      '''
   
      default_value = float
      '''Input value used for unconnected socket
         @returns: float in [-inf, inf]
      '''
      
      max_value = float
      '''Maximum value
         @returns: float in [-inf, inf]
      '''
      
      min_value = float
      '''Minimum value
         @returns: float in [-inf, inf]
      '''
      
   class NodeSocketInterfaceFloatUnsigned(types.NodeSocketInterfaceStandard):
      '''Floating point number socket of a node
      '''
   
      default_value = float
      '''Input value used for unconnected socket
         @returns: float in [0, inf]
      '''
      
      max_value = float
      '''Maximum value
         @returns: float in [-inf, inf]
      '''
      
      min_value = float
      '''Minimum value
         @returns: float in [-inf, inf]
      '''
      
   class NodeSocketInterfaceInt(types.NodeSocketInterfaceStandard):
      '''Integer number socket of a node
      '''
   
      default_value = int
      '''Input value used for unconnected socket
         @returns: int in [-inf, inf]
      '''
      
      max_value = int
      '''Maximum value
         @returns: int in [-inf, inf]
      '''
      
      min_value = int
      '''Minimum value
         @returns: int in [-inf, inf]
      '''
      
   class NodeSocketInterfaceIntFactor(types.NodeSocketInterfaceStandard):
      '''Integer number socket of a node
      '''
   
      default_value = int
      '''Input value used for unconnected socket
         @returns: int in [0, inf]
      '''
      
      max_value = int
      '''Maximum value
         @returns: int in [-inf, inf]
      '''
      
      min_value = int
      '''Minimum value
         @returns: int in [-inf, inf]
      '''
      
   class NodeSocketInterfaceIntPercentage(types.NodeSocketInterfaceStandard):
      '''Integer number socket of a node
      '''
   
      default_value = int
      '''Input value used for unconnected socket
         @returns: int in [0, inf]
      '''
      
      max_value = int
      '''Maximum value
         @returns: int in [-inf, inf]
      '''
      
      min_value = int
      '''Minimum value
         @returns: int in [-inf, inf]
      '''
      
   class NodeSocketInterfaceIntUnsigned(types.NodeSocketInterfaceStandard):
      '''Integer number socket of a node
      '''
   
      default_value = int
      '''Input value used for unconnected socket
         @returns: int in [0, inf]
      '''
      
      max_value = int
      '''Maximum value
         @returns: int in [-inf, inf]
      '''
      
      min_value = int
      '''Minimum value
         @returns: int in [-inf, inf]
      '''
      
   class NodeSocketInterfaceShader(types.NodeSocketInterfaceStandard):
      '''Shader socket of a node
      '''
   
   class NodeSocketInterfaceStandard(types.NodeSocketInterface):
      '''
      '''
   
      type = str # (read only)
      '''Data type
         @returns: enum in ['CUSTOM', 'VALUE', 'INT', 'BOOLEAN', 'VECTOR', 'STRING', 'RGBA', 'SHADER']
      '''
      
      def draw(context, layout):
         '''Draw template settings
            Arguments:
            @context (Context): (never None)
            @layout (UILayout): Layout in the UI
               (never None)
      
         '''
      
         pass

      def draw_color(context):
         '''Color of the socket icon
            Arguments:
            @context (Context): (never None)
      
            @returns (float): array of 4 items in [0, 1]
         '''
      
         return float

   class NodeSocketInterfaceString(types.NodeSocketInterfaceStandard):
      '''String socket of a node
      '''
   
      default_value = str
      '''Input value used for unconnected socket
         @returns: string, (never None)
      '''
      
   class NodeSocketInterfaceVector(types.NodeSocketInterfaceStandard):
      '''3D vector socket of a node
      '''
   
      default_value = float
      '''Input value used for unconnected socket
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      max_value = float
      '''Maximum value
         @returns: float in [-inf, inf]
      '''
      
      min_value = float
      '''Minimum value
         @returns: float in [-inf, inf]
      '''
      
   class NodeSocketInterfaceVectorAcceleration(types.NodeSocketInterfaceStandard):
      '''3D vector socket of a node
      '''
   
      default_value = float
      '''Input value used for unconnected socket
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      max_value = float
      '''Maximum value
         @returns: float in [-inf, inf]
      '''
      
      min_value = float
      '''Minimum value
         @returns: float in [-inf, inf]
      '''
      
   class NodeSocketInterfaceVectorDirection(types.NodeSocketInterfaceStandard):
      '''3D vector socket of a node
      '''
   
      default_value = float
      '''Input value used for unconnected socket
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      max_value = float
      '''Maximum value
         @returns: float in [-inf, inf]
      '''
      
      min_value = float
      '''Minimum value
         @returns: float in [-inf, inf]
      '''
      
   class NodeSocketInterfaceVectorEuler(types.NodeSocketInterfaceStandard):
      '''3D vector socket of a node
      '''
   
      default_value = float
      '''Input value used for unconnected socket
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      max_value = float
      '''Maximum value
         @returns: float in [-inf, inf]
      '''
      
      min_value = float
      '''Minimum value
         @returns: float in [-inf, inf]
      '''
      
   class NodeSocketInterfaceVectorTranslation(types.NodeSocketInterfaceStandard):
      '''3D vector socket of a node
      '''
   
      default_value = float
      '''Input value used for unconnected socket
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      max_value = float
      '''Maximum value
         @returns: float in [-inf, inf]
      '''
      
      min_value = float
      '''Minimum value
         @returns: float in [-inf, inf]
      '''
      
   class NodeSocketInterfaceVectorVelocity(types.NodeSocketInterfaceStandard):
      '''3D vector socket of a node
      '''
   
      default_value = float
      '''Input value used for unconnected socket
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      max_value = float
      '''Maximum value
         @returns: float in [-inf, inf]
      '''
      
      min_value = float
      '''Minimum value
         @returns: float in [-inf, inf]
      '''
      
   class NodeSocketInterfaceVectorXYZ(types.NodeSocketInterfaceStandard):
      '''3D vector socket of a node
      '''
   
      default_value = float
      '''Input value used for unconnected socket
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      max_value = float
      '''Maximum value
         @returns: float in [-inf, inf]
      '''
      
      min_value = float
      '''Minimum value
         @returns: float in [-inf, inf]
      '''
      
   class NodeSocketShader(types.NodeSocketStandard):
      '''Shader socket of a node
      '''
   
      links = None # (readonly)
      '''List of node links from or to this socket. Warning: takes O(len(nodetree.links)) time.
         
      '''
      
      
   class NodeSocketStandard(types.NodeSocket):
      '''
      '''
   
      links = None # (readonly)
      '''List of node links from or to this socket. Warning: takes O(len(nodetree.links)) time.
         
      '''
      
      
      def draw(context, layout, node, text):
         '''Draw socket
            Arguments:
            @context (Context): (never None)
            @layout (UILayout): Layout in the UI
               (never None)
            @node (Node): Node the socket belongs to
               (never None)
            @text (str): Text label to draw alongside properties
               (never None)
      
         '''
      
         pass

      def draw_color(context, node):
         '''Color of the socket icon
            Arguments:
            @context (Context): (never None)
            @node (Node): Node the socket belongs to
               (never None)
      
            @returns (float): array of 4 items in [0, 1]
         '''
      
         return float

   class NodeSocketString(types.NodeSocketStandard):
      '''String socket of a node
      '''
   
      default_value = str
      '''Input value used for unconnected socket
         @returns: string, (never None)
      '''
      
      links = None # (readonly)
      '''List of node links from or to this socket. Warning: takes O(len(nodetree.links)) time.
         
      '''
      
      
   class NodeSocketVector(types.NodeSocketStandard):
      '''3D vector socket of a node
      '''
   
      default_value = float
      '''Input value used for unconnected socket
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      links = None # (readonly)
      '''List of node links from or to this socket. Warning: takes O(len(nodetree.links)) time.
         
      '''
      
      
   class NodeSocketVectorAcceleration(types.NodeSocketStandard):
      '''3D vector socket of a node
      '''
   
      default_value = float
      '''Input value used for unconnected socket
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      links = None # (readonly)
      '''List of node links from or to this socket. Warning: takes O(len(nodetree.links)) time.
         
      '''
      
      
   class NodeSocketVectorDirection(types.NodeSocketStandard):
      '''3D vector socket of a node
      '''
   
      default_value = float
      '''Input value used for unconnected socket
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      links = None # (readonly)
      '''List of node links from or to this socket. Warning: takes O(len(nodetree.links)) time.
         
      '''
      
      
   class NodeSocketVectorEuler(types.NodeSocketStandard):
      '''3D vector socket of a node
      '''
   
      default_value = float
      '''Input value used for unconnected socket
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      links = None # (readonly)
      '''List of node links from or to this socket. Warning: takes O(len(nodetree.links)) time.
         
      '''
      
      
   class NodeSocketVectorTranslation(types.NodeSocketStandard):
      '''3D vector socket of a node
      '''
   
      default_value = float
      '''Input value used for unconnected socket
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      links = None # (readonly)
      '''List of node links from or to this socket. Warning: takes O(len(nodetree.links)) time.
         
      '''
      
      
   class NodeSocketVectorVelocity(types.NodeSocketStandard):
      '''3D vector socket of a node
      '''
   
      default_value = float
      '''Input value used for unconnected socket
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      links = None # (readonly)
      '''List of node links from or to this socket. Warning: takes O(len(nodetree.links)) time.
         
      '''
      
      
   class NodeSocketVectorXYZ(types.NodeSocketStandard):
      '''3D vector socket of a node
      '''
   
      default_value = float
      '''Input value used for unconnected socket
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      links = None # (readonly)
      '''List of node links from or to this socket. Warning: takes O(len(nodetree.links)) time.
         
      '''
      
      
   class NodeSocketVirtual(types.NodeSocketStandard):
      '''Virtual socket of a node
      '''
   
      links = None # (readonly)
      '''List of node links from or to this socket. Warning: takes O(len(nodetree.links)) time.
         
      '''
      
      
   class NodeTree(types.ID):
      '''Node tree consisting of linked nodes used for shading, textures and compositing
      '''
   
      active_input = int
      '''Index of the active input
         @returns: int in [0, inf]
      '''
      
      active_output = int
      '''Index of the active output
         @returns: int in [0, inf]
      '''
      
      animation_data = types.AnimData # (read only)
      '''Animation data for this data-block
         @returns: AnimData
      '''
      
      bl_description = str
      '''
         @returns: string, (never None)
      '''
      
      bl_icon = str
      '''The node tree icon
         @returns: enum in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_RIGHT', 'DISCLOSURE_TRI_DOWN', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'DUPLICATE', 'TRASH', 'COLLECTION_NEW', 'OPTIONS', 'NODE', 'NODE_SEL', 'WINDOW', 'WORKSPACE', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ADD', 'REMOVE', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'CHECKMARK', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'FCURVE_SNAPSHOT', 'OBJECT_HIDDEN', 'TOPBAR', 'STATUSBAR', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'UNLINKED', 'LINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'DRIVER_DISTANCE', 'DRIVER_ROTATIONAL_DIFFERENCE', 'DRIVER_TRANSFORM', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'FILE_NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'THREE_DOTS', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BRUSHES_ALL', 'LIGHT', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'OUTPUT', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TOOL_SETTINGS', 'SHADERFX', 'MODIFIER', 'BLANK1', 'FAKE_USER_OFF', 'FAKE_USER_ON', 'VIEW3D', 'GRAPH', 'OUTLINER', 'PROPERTIES', 'FILEBROWSER', 'IMAGE', 'INFO', 'SEQUENCE', 'TEXT', 'SOUND', 'ACTION', 'NLA', 'PREFERENCES', 'TIME', 'NODETREE', 'CONSOLE', 'TRACKER', 'ASSET_MANAGER', 'NODE_COMPOSITING', 'NODE_TEXTURE', 'NODE_MATERIAL', 'UV', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'UV_DATA', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'TRACKING', 'TRACKING_BACKWARDS', 'TRACKING_FORWARDS', 'TRACKING_BACKWARDS_SINGLE', 'TRACKING_FORWARDS_SINGLE', 'TRACKING_CLEAR_BACKWARDS', 'TRACKING_CLEAR_FORWARDS', 'TRACKING_REFINE_BACKWARDS', 'TRACKING_REFINE_FORWARDS', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LIGHT_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'COMMUNITY', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'EXPERIMENTAL', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'PRESET', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'LIBRARY_DATA_OVERRIDE', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'FACE_MAPS', 'RNA', 'RNA_ADD', 'MOUSE_LMB', 'MOUSE_MMB', 'MOUSE_RMB', 'MOUSE_MOVE', 'MOUSE_LMB_DRAG', 'MOUSE_MMB_DRAG', 'MOUSE_RMB_DRAG', 'MEMORY', 'PRESET_NEW', 'DECORATE', 'DECORATE_KEYFRAME', 'DECORATE_ANIMATE', 'DECORATE_DRIVER', 'DECORATE_LINKED', 'DECORATE_LIBRARY_OVERRIDE', 'DECORATE_UNLOCKED', 'DECORATE_LOCKED', 'DECORATE_OVERRIDE', 'FUND', 'TRACKER_DATA', 'HEART', 'ORPHAN_DATA', 'USER', 'SYSTEM', 'SETTINGS', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LIGHT', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'OUTLINER_OB_FORCE_FIELD', 'OUTLINER_OB_GROUP_INSTANCE', 'OUTLINER_OB_GREASEPENCIL', 'OUTLINER_OB_LIGHTPROBE', 'OUTLINER_OB_IMAGE', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'HIDE_ON', 'HIDE_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_RENDER_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_INSTANCED_OFF', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LIGHT', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_LIGHTPROBE', 'OUTLINER_DATA_GP_LAYER', 'OUTLINER_DATA_GREASEPENCIL', 'GP_SELECT_POINTS', 'GP_SELECT_STROKES', 'GP_MULTIFRAME_EDITING', 'GP_ONLY_SELECTED', 'GP_SELECT_BETWEEN_STROKES', 'MODIFIER_OFF', 'MODIFIER_ON', 'ONIONSKIN_OFF', 'ONIONSKIN_ON', 'RESTRICT_VIEW_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_INSTANCED_ON', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'EMPTY_SINGLE_ARROW', 'LIGHT_POINT', 'LIGHT_SUN', 'LIGHT_SPOT', 'LIGHT_HEMI', 'LIGHT_AREA', 'CUBE', 'SPHERE', 'CONE', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'EMPTY_AXIS', 'STROKE', 'EMPTY_ARROWS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'LIGHTPROBE_CUBEMAP', 'LIGHTPROBE_PLANAR', 'LIGHTPROBE_GRID', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'RIGID_BODY', 'RIGID_BODY_CONSTRAINT', 'IMAGE_PLANE', 'IMAGE_BACKGROUND', 'IMAGE_REFERENCE', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'NODE_TOP', 'NODE_SIDE', 'NODE_CORNER', 'ANCHOR_TOP', 'ANCHOR_BOTTOM', 'ANCHOR_LEFT', 'ANCHOR_RIGHT', 'ANCHOR_CENTER', 'SELECT_SET', 'SELECT_EXTEND', 'SELECT_SUBTRACT', 'SELECT_INTERSECT', 'SELECT_DIFFERENCE', 'ALIGN_LEFT', 'ALIGN_CENTER', 'ALIGN_RIGHT', 'ALIGN_JUSTIFY', 'ALIGN_FLUSH', 'ALIGN_TOP', 'ALIGN_MIDDLE', 'ALIGN_BOTTOM', 'BOLD', 'ITALIC', 'UNDERLINE', 'SMALL_CAPS', 'CON_ACTION', 'HOLDOUT_OFF', 'HOLDOUT_ON', 'INDIRECT_ONLY_OFF', 'INDIRECT_ONLY_ON', 'CON_CAMERASOLVER', 'CON_FOLLOWTRACK', 'CON_OBJECTSOLVER', 'CON_LOCLIKE', 'CON_ROTLIKE', 'CON_SIZELIKE', 'CON_TRANSLIKE', 'CON_DISTLIMIT', 'CON_LOCLIMIT', 'CON_ROTLIMIT', 'CON_SIZELIMIT', 'CON_SAMEVOL', 'CON_TRANSFORM', 'CON_TRANSFORM_CACHE', 'CON_CLAMPTO', 'CON_KINEMATIC', 'CON_LOCKTRACK', 'CON_SPLINEIK', 'CON_STRETCHTO', 'CON_TRACKTO', 'CON_ARMATURE', 'CON_CHILDOF', 'CON_FLOOR', 'CON_FOLLOWPATH', 'CON_PIVOT', 'CON_SHRINKWRAP', 'MODIFIER_DATA', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'MOD_TINT', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_FLUID', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'MOD_PARTICLE_INSTANCE', 'MOD_HUE_SATURATION', 'MOD_NOISE', 'MOD_OFFSET', 'MOD_SIMPLIFY', 'MOD_THICKNESS', 'MOD_INSTANCE', 'MOD_TIME', 'MOD_OPACITY', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_SOUND', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'KEYFRAME_HLT', 'KEYFRAME', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'CURSOR', 'PIVOT_BOUNDBOX', 'PIVOT_CURSOR', 'PIVOT_INDIVIDUAL', 'PIVOT_MEDIAN', 'PIVOT_ACTIVE', 'CENTER_ONLY', 'ROOTCURVE', 'SMOOTHCURVE', 'SPHERECURVE', 'INVERSESQUARECURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'PROP_PROJECTED', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'SNAP_FACE_CENTER', 'SNAP_PERPENDICULAR', 'SNAP_MIDPOINT', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'OBJECT_ORIGIN', 'ORIENTATION_GLOBAL', 'ORIENTATION_GIMBAL', 'ORIENTATION_LOCAL', 'ORIENTATION_NORMAL', 'ORIENTATION_VIEW', 'COPYDOWN', 'PASTEDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'VIS_SEL_11', 'VIS_SEL_10', 'VIS_SEL_01', 'VIS_SEL_00', 'AUTOMERGE_OFF', 'AUTOMERGE_ON', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'TRANSFORM_ORIGINS', 'GIZMO', 'ORIENTATION_CURSOR', 'NORMALS_VERTEX', 'NORMALS_FACE', 'NORMALS_VERTEX_FACE', 'SHADING_BBOX', 'SHADING_WIRE', 'SHADING_SOLID', 'SHADING_RENDERED', 'SHADING_TEXTURE', 'OVERLAY', 'XRAY', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'LAYER_USED', 'LAYER_ACTIVE', 'OUTLINER_OB_HAIR', 'OUTLINER_DATA_HAIR', 'HAIR_DATA', 'OUTLINER_OB_POINTCLOUD', 'OUTLINER_DATA_POINTCLOUD', 'POINTCLOUD_DATA', 'OUTLINER_OB_VOLUME', 'OUTLINER_DATA_VOLUME', 'VOLUME_DATA', 'HOME', 'DOCUMENTS', 'TEMP', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'SHORTDISPLAY', 'LONGDISPLAY', 'IMGDISPLAY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'FOLDER_REDIRECT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'SORT_DESC', 'SORT_ASC', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_ARCHIVE', 'FILE_CACHE', 'FILE_VOLUME', 'FILE_3D', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'MATSHADERBALL', 'MATCLOTH', 'MATFLUID', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'DISC', 'DESKTOP', 'EXTERNAL_DRIVE', 'NETWORK_DRIVE', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'SEQ_STRIP_META', 'SEQ_STRIP_DUPLICATE', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'HANDLE_AUTOCLAMPED', 'HANDLE_AUTO', 'HANDLE_ALIGNED', 'HANDLE_VECTOR', 'HANDLE_FREE', 'VIEW_PERSPECTIVE', 'VIEW_ORTHO', 'VIEW_CAMERA', 'VIEW_PAN', 'VIEW_ZOOM', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'GPBRUSH_SMOOTH', 'GPBRUSH_THICKNESS', 'GPBRUSH_STRENGTH', 'GPBRUSH_GRAB', 'GPBRUSH_PUSH', 'GPBRUSH_TWIST', 'GPBRUSH_PINCH', 'GPBRUSH_RANDOMIZE', 'GPBRUSH_CLONE', 'GPBRUSH_WEIGHT', 'GPBRUSH_PENCIL', 'GPBRUSH_PEN', 'GPBRUSH_INK', 'GPBRUSH_INKNOISE', 'GPBRUSH_BLOCK', 'GPBRUSH_MARKER', 'GPBRUSH_FILL', 'GPBRUSH_AIRBRUSH', 'GPBRUSH_CHISEL', 'GPBRUSH_ERASE_SOFT', 'GPBRUSH_ERASE_HARD', 'GPBRUSH_ERASE_STROKE', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'HANDLETYPE_FREE_VEC', 'HANDLETYPE_ALIGNED_VEC', 'HANDLETYPE_VECTOR_VEC', 'HANDLETYPE_AUTO_VEC', 'HANDLETYPE_AUTO_CLAMP_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC', 'EVENT_A', 'EVENT_B', 'EVENT_C', 'EVENT_D', 'EVENT_E', 'EVENT_F', 'EVENT_G', 'EVENT_H', 'EVENT_I', 'EVENT_J', 'EVENT_K', 'EVENT_L', 'EVENT_M', 'EVENT_N', 'EVENT_O', 'EVENT_P', 'EVENT_Q', 'EVENT_R', 'EVENT_S', 'EVENT_T', 'EVENT_U', 'EVENT_V', 'EVENT_W', 'EVENT_X', 'EVENT_Y', 'EVENT_Z', 'EVENT_SHIFT', 'EVENT_CTRL', 'EVENT_ALT', 'EVENT_OS', 'EVENT_F1', 'EVENT_F2', 'EVENT_F3', 'EVENT_F4', 'EVENT_F5', 'EVENT_F6', 'EVENT_F7', 'EVENT_F8', 'EVENT_F9', 'EVENT_F10', 'EVENT_F11', 'EVENT_F12', 'EVENT_ESC', 'EVENT_TAB', 'EVENT_PAGEUP', 'EVENT_PAGEDOWN', 'EVENT_RETURN', 'EVENT_SPACEKEY']
      '''
      
      bl_idname = str
      '''
         @returns: string, (never None)
      '''
      
      bl_label = str
      '''The node tree label
         @returns: string, (never None)
      '''
      
      grease_pencil = types.GreasePencil
      '''Grease Pencil data-block
         @returns: GreasePencil
      '''
      
      inputs = types.NodeTreeInputs # (read only)
      '''Node tree inputs
         @returns: NodeTreeInputs Collection of NodeSocketInterface
      '''
      
      links = types.NodeLinks # (read only)
      '''
         @returns: NodeLinks Collection of NodeLink
      '''
      
      nodes = types.Nodes # (read only)
      '''
         @returns: Nodes Collection of Node
      '''
      
      outputs = types.NodeTreeOutputs # (read only)
      '''Node tree outputs
         @returns: NodeTreeOutputs Collection of NodeSocketInterface
      '''
      
      type = str # (read only)
      '''Node Tree type (deprecated, bl_idname is the actual node tree type identifier)
         @returns: enum in ['SHADER', 'TEXTURE', 'COMPOSITING']
      '''
      
      view_center = float # (read only)
      '''
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      def interface_update(context):
         '''Updated node group interface
            Arguments:
            @context (Context): (never None)
      
         '''
      
         pass

      @classmethod
      def poll(context):
         '''Check visibility in the editor
            Arguments:
            @context (Context): (never None)
      
            @returns (bool): 
         '''
      
         return bool

      def update():
         '''Update on editor changes
         '''
      
         pass

      @classmethod
      def get_from_context(context):
         '''Get a node tree from the context
            Arguments:
            @context (Context): (never None)
      
            @returns: 
            (
               result_1(types.NodeTree):Active node tree from context
               
               result_2(types.ID):ID data-block that owns the node tree
               
               result_3(types.ID):Original ID data-block selected from the context
               
            )
         '''
      
         pass

   class NodeTreeInputs(types.bpy_struct):
      '''Collection of Node Tree Sockets
      '''
   
      def new(type, name):
         '''Add a socket to this node tree
            Arguments:
            @type (str): Data type
               (never None)
            @name (str): (never None)
      
            @returns (types.NodeSocketInterface): New socket
               
         '''
      
         return types.NodeSocketInterface

      def remove(socket):
         '''Remove a socket from this node tree
            Arguments:
            @socket (NodeSocketInterface): The socket to remove
               
      
         '''
      
         pass

      def clear():
         '''Remove all sockets from this node tree
         '''
      
         pass

      def move(from_index, to_index):
         '''Move a socket to another position
            Arguments:
            @from_index (int): Index of the socket to move
               in [0, inf]
            @to_index (int): Target index for the socket
               in [0, inf]
      
         '''
      
         pass

   class NodeTreeOutputs(types.bpy_struct):
      '''Collection of Node Tree Sockets
      '''
   
      def new(type, name):
         '''Add a socket to this node tree
            Arguments:
            @type (str): Data type
               (never None)
            @name (str): (never None)
      
            @returns (types.NodeSocketInterface): New socket
               
         '''
      
         return types.NodeSocketInterface

      def remove(socket):
         '''Remove a socket from this node tree
            Arguments:
            @socket (NodeSocketInterface): The socket to remove
               
      
         '''
      
         pass

      def clear():
         '''Remove all sockets from this node tree
         '''
      
         pass

      def move(from_index, to_index):
         '''Move a socket to another position
            Arguments:
            @from_index (int): Index of the socket to move
               in [0, inf]
            @to_index (int): Target index for the socket
               in [0, inf]
      
         '''
      
         pass

   class NodeTreePath(types.bpy_struct):
      '''Element of the node space tree path
      '''
   
      node_tree = types.NodeTree # (read only)
      '''Base node tree from context
         @returns: NodeTree
      '''
      
   class Nodes(types.bpy_struct):
      '''Collection of Nodes
      '''
   
      active = types.Node
      '''Active node in this tree
         @returns: Node
      '''
      
      def new(type):
         '''Add a node to this node tree
            Arguments:
            @type (str): Type of node to add (Warning: should be same as node.bl_idname, not node.type!)
               (never None)
      
            @returns (types.Node): New node
               
         '''
      
         return types.Node

      def remove(node):
         '''Remove a node from this node tree
            Arguments:
            @node (Node): The node to remove
               (never None)
      
         '''
      
         pass

      def clear():
         '''Remove all nodes from this node tree
         '''
      
         pass

   class NoiseGpencilModifier(types.GpencilModifier):
      '''Noise effect modifier
      '''
   
      curve = types.CurveMapping # (read only)
      '''Custom curve to apply effect
         @returns: CurveMapping
      '''
      
      factor = float
      '''Amount of noise to apply
         @returns: float in [0, inf]
      '''
      
      factor_strength = float
      '''Amount of noise to apply to opacity
         @returns: float in [0, inf]
      '''
      
      factor_thickness = float
      '''Amount of noise to apply to thickness
         @returns: float in [0, inf]
      '''
      
      factor_uvs = float
      '''Amount of noise to apply uv rotation
         @returns: float in [0, inf]
      '''
      
      invert_layer_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_layers = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_material_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_materials = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_vertex = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      layer = str
      '''Layer name
         @returns: string, (never None)
      '''
      
      layer_pass = int
      '''Layer pass index
         @returns: int in [0, 100]
      '''
      
      material = str
      '''Material name
         @returns: string, (never None)
      '''
      
      noise_scale = float
      '''Scale the noise frequency
         @returns: float in [0, 1]
      '''
      
      pass_index = int
      '''Pass index
         @returns: int in [0, 100]
      '''
      
      random = bool
      '''Use random values over time
         @returns: boolean
      '''
      
      seed = int
      '''Random seed
         @returns: int in [0, inf]
      '''
      
      step = int
      '''Number of frames before recalculate random values again
         @returns: int in [1, 100]
      '''
      
      use_custom_curve = bool
      '''Use a custom curve to define noise effect along the strokes
         @returns: boolean
      '''
      
      vertex_group = str
      '''Vertex group name for modulating the deform
         @returns: string, (never None)
      '''
      
   class NoiseTexture(types.Texture):
      '''Procedural noise texture
      '''
   
      users_material = None # (readonly)
      '''Materials that use this texture
         
      '''
      
      
      users_object_modifier = None # (readonly)
      '''Object modifiers that use this texture
         
      '''
      
      
   class NormalEditModifier(types.Modifier):
      '''Modifier affecting/generating custom normals
      '''
   
      invert_vertex_group = bool
      '''Invert vertex group influence
         @returns: boolean
      '''
      
      mix_factor = float
      '''How much of generated normals to mix with exiting ones
         @returns: float in [0, 1]
      '''
      
      mix_limit = float
      '''Maximum angle between old and new normals
         @returns: float in [0, 3.14159]
      '''
      
      mix_mode = str
      '''How to mix generated normals with existing ones
         @returns: enum in ['COPY', 'ADD', 'SUB', 'MUL']
      '''
      
      mode = str
      '''How to affect (generate) normals
         @returns: enum in ['RADIAL', 'DIRECTIONAL']
      '''
      
      no_polynors_fix = bool
      '''Do not flip polygons when their normals are not consistent with their newly computed custom vertex normals
         @returns: boolean
      '''
      
      offset = float
      '''Offset from object's center
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      target = types.Object
      '''Target object used to affect normals
         @returns: Object
      '''
      
      use_direction_parallel = bool
      '''Use same direction for all normals, from origin to target's center (Directional mode only)
         @returns: boolean
      '''
      
      vertex_group = str
      '''Vertex group name for selecting/weighting the affected areas
         @returns: string, (never None)
      '''
      
   class Object(types.ID):
      '''Object data-block defining an object in a scene
      '''
   
      active_material = types.Material
      '''Active material being displayed
         @returns: Material
      '''
      
      active_material_index = int
      '''Index of active material slot
         @returns: int in [0, inf]
      '''
      
      active_shape_key = types.ShapeKey # (read only)
      '''Current shape key
         @returns: ShapeKey
      '''
      
      active_shape_key_index = int
      '''Current shape key index
         @returns: int in [-32768, 32767]
      '''
      
      animation_data = types.AnimData # (read only)
      '''Animation data for this data-block
         @returns: AnimData
      '''
      
      animation_visualization = types.AnimViz # (read only)
      '''Animation data for this data-block
         @returns: AnimViz, (never None)
      '''
      
      bound_box = float # (read only)
      '''Object's bounding box in object-space coordinates, all values are -1.0 when not available
         @returns: float multi-dimensional array of 8 * 3 items in [-inf, inf]
      '''
      
      collision = types.CollisionSettings # (read only)
      '''Settings for using the object as a collider in physics simulation
         @returns: CollisionSettings
      '''
      
      color = float
      '''Object color and alpha, used when faces have the ObColor mode enabled
         @returns: float array of 4 items in [0, inf]
      '''
      
      constraints = types.ObjectConstraints # (read only)
      '''Constraints affecting the transformation of the object
         @returns: ObjectConstraints Collection of Constraint
      '''
      
      cycles = types.CyclesObjectSettings # (read only)
      '''Cycles object settings
         @returns: CyclesObjectSettings
      '''
      
      cycles_visibility = types.CyclesVisibilitySettings # (read only)
      '''Cycles visibility settings
         @returns: CyclesVisibilitySettings
      '''
      
      data = types.ID
      '''Object data
         @returns: ID
      '''
      
      delta_location = float
      '''Extra translation added to the location of the object
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      delta_rotation_euler = float
      '''Extra rotation added to the rotation of the object (when using Euler rotations)
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      delta_rotation_quaternion = float
      '''Extra rotation added to the rotation of the object (when using Quaternion rotations)
         @returns: float array of 4 items in [-inf, inf]
      '''
      
      delta_scale = float
      '''Extra scaling added to the scale of the object
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      dimensions = float
      '''Absolute bounding box dimensions of the object (WARNING: assigning to it or its members multiple consecutive times will not work correctly, as this needs up-to-date evaluated data)
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      display = types.ObjectDisplay # (read only)
      '''Object display settings for 3d viewport
         @returns: ObjectDisplay, (never None)
      '''
      
      display_bounds_type = str
      '''Object boundary display type
         @returns: enum in ['BOX', 'SPHERE', 'CYLINDER', 'CONE', 'CAPSULE']
      '''
      
      display_type = str
      '''How to display object in viewport
         @returns: enum in ['BOUNDS', 'WIRE', 'SOLID', 'TEXTURED']
      '''
      
      empty_display_size = float
      '''Size of display for empties in the viewport
         @returns: float in [0.0001, 1000]
      '''
      
      empty_display_type = str
      '''Viewport display style for empties
         @returns: enum in ['PLAIN_AXES', 'ARROWS', 'SINGLE_ARROW', 'CIRCLE', 'CUBE', 'SPHERE', 'CONE', 'IMAGE']
      '''
      
      empty_image_depth = str
      '''Determine which other objects will occlude the image
         @returns: enum in ['DEFAULT', 'FRONT', 'BACK']
      '''
      
      empty_image_offset = float
      '''Origin offset distance
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      empty_image_side = str
      '''Show front/back side
         @returns: enum in ['DOUBLE_SIDED', 'FRONT', 'BACK']
      '''
      
      face_maps = types.FaceMaps # (read only)
      '''Maps of faces of the object
         @returns: FaceMaps Collection of FaceMap
      '''
      
      field = types.FieldSettings # (read only)
      '''Settings for using the object as a field in physics simulation
         @returns: FieldSettings
      '''
      
      grease_pencil_modifiers = types.ObjectGpencilModifiers # (read only)
      '''Modifiers affecting the data of the grease pencil object
         @returns: ObjectGpencilModifiers Collection of GpencilModifier
      '''
      
      hide_render = bool
      '''Globally disable in renders
         @returns: boolean
      '''
      
      hide_select = bool
      '''Disable selection in viewport
         @returns: boolean
      '''
      
      hide_viewport = bool
      '''Globally disable in viewports
         @returns: boolean
      '''
      
      image_user = types.ImageUser # (read only)
      '''Parameters defining which layer, pass and frame of the image is displayed
         @returns: ImageUser, (never None)
      '''
      
      instance_collection = types.Collection
      '''Instance an existing collection
         @returns: Collection
      '''
      
      instance_faces_scale = float
      '''Scale the face instance objects
         @returns: float in [0.001, 10000]
      '''
      
      instance_type = str
      '''If not None, object instancing method to use
         @returns: enum in ['NONE', 'VERTS', 'FACES', 'COLLECTION']
      '''
      
      is_from_instancer = bool # (read only)
      '''Object comes from a instancer
         @returns: boolean
      '''
      
      is_from_set = bool # (read only)
      '''Object comes from a background set
         @returns: boolean
      '''
      
      is_instancer = bool # (read only)
      '''
         @returns: boolean
      '''
      
      location = float
      '''Location of the object
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      lock_location = bool
      '''Lock editing of location when transforming
         @returns: boolean array of 3 items
      '''
      
      lock_rotation = bool
      '''Lock editing of rotation when transforming
         @returns: boolean array of 3 items
      '''
      
      lock_rotation_w = bool
      '''Lock editing of 'angle' component of four-component rotations when transforming
         @returns: boolean
      '''
      
      lock_rotations_4d = bool
      '''Lock editing of four component rotations by components (instead of as Eulers)
         @returns: boolean
      '''
      
      lock_scale = bool
      '''Lock editing of scale when transforming
         @returns: boolean array of 3 items
      '''
      
      material_slots = types.MaterialSlot # (read only)
      '''Material slots in the object
         @returns: Collection of MaterialSlot
      '''
      
      matrix_basis = float
      '''Matrix access to location, rotation and scale (including deltas), before constraints and parenting are applied
         @returns: float multi-dimensional array of 4 * 4 items in [-inf, inf]
      '''
      
      matrix_local = float
      '''Parent relative transformation matrix - WARNING: Only takes into account 'Object' parenting, so e.g. in case of bone parenting you get a matrix relative to the Armature object, not to the actual parent bone
         @returns: float multi-dimensional array of 4 * 4 items in [-inf, inf]
      '''
      
      matrix_parent_inverse = float
      '''Inverse of object's parent matrix at time of parenting
         @returns: float multi-dimensional array of 4 * 4 items in [-inf, inf]
      '''
      
      matrix_world = float
      '''Worldspace transformation matrix
         @returns: float multi-dimensional array of 4 * 4 items in [-inf, inf]
      '''
      
      mblab_use_inch = bool
      '''Use inch instead of cm
         @returns: boolean
      '''
      
      mode = str # (read only)
      '''Object interaction mode
         @returns: enum in ['OBJECT', 'EDIT', 'POSE', 'SCULPT', 'VERTEX_PAINT', 'WEIGHT_PAINT', 'TEXTURE_PAINT', 'PARTICLE_EDIT', 'EDIT_GPENCIL', 'SCULPT_GPENCIL', 'PAINT_GPENCIL', 'VERTEX_GPENCIL', 'WEIGHT_GPENCIL']
      '''
      
      modifiers = types.ObjectModifiers # (read only)
      '''Modifiers affecting the geometric data of the object
         @returns: ObjectModifiers Collection of Modifier
      '''
      
      motion_path = types.MotionPath # (read only)
      '''Motion Path for this element
         @returns: MotionPath
      '''
      
      parent = types.Object
      '''Parent Object
         @returns: Object
      '''
      
      parent_bone = str
      '''Name of parent bone in case of a bone parenting relation
         @returns: string, (never None)
      '''
      
      parent_type = str
      '''Type of parent relation
         @returns: enum in ['OBJECT', 'ARMATURE', 'LATTICE', 'VERTEX', 'VERTEX_3', 'BONE']
      '''
      
      parent_vertices = int
      '''Indices of vertices in case of a vertex parenting relation
         @returns: int array of 3 items in [0, inf]
      '''
      
      particle_systems = types.ParticleSystems # (read only)
      '''Particle systems emitted from the object
         @returns: ParticleSystems Collection of ParticleSystem
      '''
      
      pass_index = int
      '''Index number for the "Object Index" render pass
         @returns: int in [0, 32767]
      '''
      
      pose = types.Pose # (read only)
      '''Current pose for armatures
         @returns: Pose
      '''
      
      pose_library = types.Action
      '''Action used as a pose library for armatures
         @returns: Action
      '''
      
      proxy = types.Object # (read only)
      '''Library object this proxy object controls
         @returns: Object
      '''
      
      proxy_collection = types.Object # (read only)
      '''Library collection duplicator object this proxy object controls
         @returns: Object
      '''
      
      rigid_body = types.RigidBodyObject # (read only)
      '''Settings for rigid body simulation
         @returns: RigidBodyObject
      '''
      
      rigid_body_constraint = types.RigidBodyConstraint # (read only)
      '''Constraint constraining rigid bodies
         @returns: RigidBodyConstraint
      '''
      
      rotation_axis_angle = float
      '''Angle of Rotation for Axis-Angle rotation representation
         @returns: float array of 4 items in [-inf, inf]
      '''
      
      rotation_euler = float
      '''Rotation in Eulers
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      rotation_mode = str
      '''
         @returns: enum in ['QUATERNION', 'XYZ', 'XZY', 'YXZ', 'YZX', 'ZXY', 'ZYX', 'AXIS_ANGLE']
      '''
      
      rotation_quaternion = float
      '''Rotation in Quaternions
         @returns: float array of 4 items in [-inf, inf]
      '''
      
      scale = float
      '''Scaling of the object
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      shader_effects = types.ObjectShaderFx # (read only)
      '''Effects affecting display of object
         @returns: ObjectShaderFx Collection of ShaderFx
      '''
      
      show_all_edges = bool
      '''Display all edges for mesh objects
         @returns: boolean
      '''
      
      show_axis = bool
      '''Display the object's origin and axes
         @returns: boolean
      '''
      
      show_bounds = bool
      '''Display the object's bounds
         @returns: boolean
      '''
      
      show_empty_image_only_axis_aligned = bool
      '''Only display the image when it is aligned with the view axis
         @returns: boolean
      '''
      
      show_empty_image_orthographic = bool
      '''Display image in orthographic mode
         @returns: boolean
      '''
      
      show_empty_image_perspective = bool
      '''Display image in perspective mode
         @returns: boolean
      '''
      
      show_in_front = bool
      '''Make the object draw in front of others
         @returns: boolean
      '''
      
      show_instancer_for_render = bool
      '''Make instancer visible when rendering
         @returns: boolean
      '''
      
      show_instancer_for_viewport = bool
      '''Make instancer visible in the viewport
         @returns: boolean
      '''
      
      show_name = bool
      '''Display the object's name
         @returns: boolean
      '''
      
      show_only_shape_key = bool
      '''Always show the current Shape for this Object
         @returns: boolean
      '''
      
      show_texture_space = bool
      '''Display the object's texture space
         @returns: boolean
      '''
      
      show_transparent = bool
      '''Display material transparency in the object
         @returns: boolean
      '''
      
      show_wire = bool
      '''Add the object's wireframe over solid drawing
         @returns: boolean
      '''
      
      soft_body = types.SoftBodySettings # (read only)
      '''Settings for soft body simulation
         @returns: SoftBodySettings
      '''
      
      track_axis = str
      '''Axis that points in 'forward' direction (applies to InstanceFrame when parent 'Follow' is enabled)
         @returns: enum in ['POS_X', 'POS_Y', 'POS_Z', 'NEG_X', 'NEG_Y', 'NEG_Z']
      '''
      
      type = str # (read only)
      '''Type of Object
         @returns: enum in ['MESH', 'CURVE', 'SURFACE', 'META', 'FONT', 'VOLUME', 'ARMATURE', 'LATTICE', 'EMPTY', 'GPENCIL', 'CAMERA', 'LIGHT', 'SPEAKER', 'LIGHT_PROBE']
      '''
      
      up_axis = str
      '''Axis that points in the upward direction (applies to InstanceFrame when parent 'Follow' is enabled)
         @returns: enum in ['X', 'Y', 'Z']
      '''
      
      use_dynamic_topology_sculpting = bool # (read only)
      '''
         @returns: boolean
      '''
      
      use_empty_image_alpha = bool
      '''Use alpha blending instead of alpha test (can produce sorting artifacts)
         @returns: boolean
      '''
      
      use_grease_pencil_lights = bool
      '''Lights affect grease pencil object
         @returns: boolean
      '''
      
      use_instance_faces_scale = bool
      '''Scale instance based on face size
         @returns: boolean
      '''
      
      use_instance_vertices_rotation = bool
      '''Rotate instance according to vertex normal
         @returns: boolean
      '''
      
      use_shape_key_edit_mode = bool
      '''Apply shape keys in edit mode (for Meshes only)
         @returns: boolean
      '''
      
      vertex_groups = types.VertexGroups # (read only)
      '''Vertex groups of the object
         @returns: VertexGroups Collection of VertexGroup
      '''
      
      children = None # (readonly)
      '''All the children of this object. Warning: takes O(len(bpy.data.objects)) time.
         
      '''
      
      
      users_collection = None # (readonly)
      '''The collections this object is in. Warning: takes O(len(bpy.data.collections) + len(bpy.data.scenes)) time.
         
      '''
      
      
      users_scene = None # (readonly)
      '''The scenes this object is in. Warning: takes O(len(bpy.data.scenes) * len(bpy.data.objects)) time.
         
      '''
      
      
      def select_get(view_layer=None):
         '''Test if the object is selected. The selection state is per view layer
            Arguments:
            @view_layer (ViewLayer): Use this instead of the active view layer
               (optional)
      
            @returns (bool): Object selected
               
         '''
      
         return bool

      def select_set(state, view_layer=None):
         '''Select or deselect the object. The selection state is per view layer
            Arguments:
            @state (bool): Selection state to define
               
            @view_layer (ViewLayer): Use this instead of the active view layer
               (optional)
      
         '''
      
         pass

      def hide_get(view_layer=None):
         '''Test if the object is hidden for viewport editing. This hiding state is per view layer
            Arguments:
            @view_layer (ViewLayer): Use this instead of the active view layer
               (optional)
      
            @returns (bool): Object hidden
               
         '''
      
         return bool

      def hide_set(state, view_layer=None):
         '''Hide the object for viewport editing. This hiding state is per view layer
            Arguments:
            @state (bool): Hide state to define
               
            @view_layer (ViewLayer): Use this instead of the active view layer
               (optional)
      
         '''
      
         pass

      def visible_get(view_layer=None, viewport=None):
         '''Test if the object is visible in the 3D viewport, taking into account all visibility settings
            Arguments:
            @view_layer (ViewLayer): Use this instead of the active view layer
               (optional)
            @viewport (SpaceView3D): Use this instead of the active 3D viewport
               (optional)
      
            @returns (bool): Object visible
               
         '''
      
         return bool

      def holdout_get(view_layer=None):
         '''Test if object is masked in the view layer
            Arguments:
            @view_layer (ViewLayer): Use this instead of the active view layer
               (optional)
      
            @returns (bool): Object holdout
               
         '''
      
         return bool

      def indirect_only_get(view_layer=None):
         '''Test if object is set to contribute only indirectly (through shadows and reflections) in the view layer
            Arguments:
            @view_layer (ViewLayer): Use this instead of the active view layer
               (optional)
      
            @returns (bool): Object indirect only
               
         '''
      
         return bool

      def local_view_get(viewport):
         '''Get the local view state for this object
            Arguments:
            @viewport (SpaceView3D): Viewport in local view
               
      
            @returns (bool): Object local view state
               
         '''
      
         return bool

      def local_view_set(viewport, state):
         '''Set the local view state for this object
            Arguments:
            @viewport (SpaceView3D): Viewport in local view
               
            @state (bool): Local view state to define
               
      
         '''
      
         pass

      def visible_in_viewport_get(viewport):
         '''Check for local view and local collections for this viewport and object
            Arguments:
            @viewport (SpaceView3D): Viewport in local collections
               
      
            @returns (bool): Object viewport visibility
               
         '''
      
         return bool

      def convert_space(pose_bone=None, matrix=((0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0)), from_space='WORLD', to_space='WORLD'):
         '''Convert (transform) the given matrix from one space to another
            Arguments:
            @pose_bone (PoseBone): Bone to use to define spaces (may be None, in which case only the two 'WORLD' and 'LOCAL' spaces are usable)
               (optional)
            @matrix (float): The matrix to transform
               multi-dimensional array of 4 * 4 items in [-inf, inf], (optional)
            @from_space (str): The space in which 'matrix' is currently
               in ['WORLD', 'POSE', 'LOCAL_WITH_PARENT', 'LOCAL'], (optional)
            @to_space (str): The space to which you want to transform 'matrix'
               in ['WORLD', 'POSE', 'LOCAL_WITH_PARENT', 'LOCAL'], (optional)
      
            @returns (float): The transformed matrix
               multi-dimensional array of 4 * 4 items in [-inf, inf]
         '''
      
         return float

      def calc_matrix_camera(depsgraph, x=1, y=1, scale_x=1.0, scale_y=1.0):
         '''Generate the camera projection matrix of this object (mostly useful for Camera and Light types)
            Arguments:
            @depsgraph (Depsgraph): Depsgraph to get evaluated data from
               
            @x (int): Width of the render area
               in [0, inf], (optional)
            @y (int): Height of the render area
               in [0, inf], (optional)
            @scale_x (float): Width scaling factor
               in [1e-06, inf], (optional)
            @scale_y (float): Height scaling factor
               in [1e-06, inf], (optional)
      
            @returns (float): The camera projection matrix
               multi-dimensional array of 4 * 4 items in [-inf, inf]
         '''
      
         return float

      def camera_fit_coords(depsgraph, coordinates):
         '''Compute the coordinate (and scale for ortho cameras) given object should be to 'see' all given coordinates
            Arguments:
            @depsgraph (Depsgraph): Depsgraph to get evaluated data from
               
            @coordinates (float): Coordinates to fit in
               array of 1 items in [-inf, inf], (never None)
      
            @returns: 
            (
               co_return(float):The location to aim to be able to see all given points
               array of 3 items in [-inf, inf]
               scale_return(float):The ortho scale to aim to be able to see all given points (if relevant)
               in [-inf, inf]
            )
         '''
      
         pass

      def to_mesh(preserve_all_data_layers=False, depsgraph=None):
         '''Create a Mesh data-block from the current state of the object. The object owns the data-block. To force free it use to_mesh_clear(). The result is temporary and can not be used by objects from the main database
            Arguments:
            @preserve_all_data_layers (bool): Preserve all data layers in the mesh, like UV maps and vertex groups. By default Blender only computes the subset of data layers needed for viewport display and rendering, for better performance
               (optional)
            @depsgraph (Depsgraph): Evaluated dependency graph which is required when preserve_all_data_layers is true
               (optional)
      
            @returns (types.Mesh): Mesh created from object
               
         '''
      
         return types.Mesh

      def to_mesh_clear():
         '''Clears mesh data-block created by to_mesh()
         '''
      
         pass

      def find_armature():
         '''Find armature influencing this object as a parent or via a modifier
            @returns (types.Object): Armature object influencing this object or NULL
               
         '''
      
         return types.Object

      def shape_key_add(name="Key", from_mix=True):
         '''Add shape key to this object
            Arguments:
            @name (str): Unique name for the new keyblock
               (optional, never None)
            @from_mix (bool): Create new shape from existing mix of shapes
               (optional)
      
            @returns (types.ShapeKey): New shape keyblock
               
         '''
      
         return types.ShapeKey

      def shape_key_remove(key):
         '''Remove a Shape Key from this object
            Arguments:
            @key (ShapeKey): Keyblock to be removed
               (never None)
      
         '''
      
         pass

      def shape_key_clear():
         '''Remove all Shape Keys from this object
         '''
      
         pass

      def ray_cast(origin, direction, distance=1.70141e+38, depsgraph=None):
         '''Cast a ray onto evaluated geometry, in object space (using context's or provided depsgraph to get evaluated mesh if needed)
            Arguments:
            @origin (float): Origin of the ray, in object space
               array of 3 items in [-inf, inf]
            @direction (float): Direction of the ray, in object space
               array of 3 items in [-inf, inf]
            @distance (float): Maximum distance
               in [0, inf], (optional)
            @depsgraph (Depsgraph): Depsgraph to use to get evaluated data, when called from original object (only needed if current Context's depsgraph is not suitable)
               (optional)
      
            @returns: 
            (
               result(bool):Whether the ray successfully hit the geometry
               
               location(float):The hit location of this ray cast
               array of 3 items in [-inf, inf]
               normal(float):The face normal at the ray cast hit location
               array of 3 items in [-inf, inf]
               index(int):The face index, -1 when original data isn't available
               in [-inf, inf]
            )
         '''
      
         pass

      def closest_point_on_mesh(origin, distance=1.84467e+19, depsgraph=None):
         '''Find the nearest point on evaluated geometry, in object space (using context's or provided depsgraph to get evaluated mesh if needed)
            Arguments:
            @origin (float): Point to find closest geometry from (in object space)
               array of 3 items in [-inf, inf]
            @distance (float): Maximum distance
               in [0, inf], (optional)
            @depsgraph (Depsgraph): Depsgraph to use to get evaluated data, when called from original object (only needed if current Context's depsgraph is not suitable)
               (optional)
      
            @returns: 
            (
               result(bool):Whether closest point on geometry was found
               
               location(float):The location on the object closest to the point
               array of 3 items in [-inf, inf]
               normal(float):The face normal at the closest point
               array of 3 items in [-inf, inf]
               index(int):The face index, -1 when original data isn't available
               in [-inf, inf]
            )
         '''
      
         pass

      def is_modified(scene, settings):
         '''Determine if this object is modified from the base mesh data
            Arguments:
            @scene (Scene): Scene in which to check the object
               (never None)
            @settings (str): Modifier settings to apply
               in ['PREVIEW', 'RENDER']
      
            @returns (bool): Whether the object is modified
               
         '''
      
         return bool

      def is_deform_modified(scene, settings):
         '''Determine if this object is modified by a deformation from the base mesh data
            Arguments:
            @scene (Scene): Scene in which to check the object
               (never None)
            @settings (str): Modifier settings to apply
               in ['PREVIEW', 'RENDER']
      
            @returns (bool): Whether the object is deform-modified
               
         '''
      
         return bool

      def update_from_editmode():
         '''Load the objects edit-mode data into the object data
            @returns (bool): Success
               
         '''
      
         return bool

      def cache_release():
         '''Release memory used by caches associated with this object. Intended to be used by render engines only
         '''
      
         pass

      def generate_gpencil_strokes(ob_gpencil, gpencil_lines=False, use_collections=True):
         '''Convert a curve object to grease pencil strokes.
            Arguments:
            @ob_gpencil (Object): Grease Pencil object used to create new strokes
               (never None)
            @gpencil_lines (bool): Create Lines
               (optional)
            @use_collections (bool): Use Collections
               (optional)
      
            @returns (bool): Result
               
         '''
      
         return bool

   class ObjectBase(types.bpy_struct):
      '''An object instance in a render layer
      '''
   
      hide_viewport = bool
      '''Temporarily hide in viewport
         @returns: boolean
      '''
      
      object = types.Object # (read only)
      '''Object this base links to
         @returns: Object
      '''
      
      select = bool
      '''Object base selection state
         @returns: boolean
      '''
      
   class ObjectConstraints(types.bpy_struct):
      '''Collection of object constraints
      '''
   
      active = types.Constraint
      '''Active Object constraint
         @returns: Constraint
      '''
      
      def new(type):
         '''Add a new constraint to this object
            Arguments:
            @type (str): Constraint type to add
               in ['CAMERA_SOLVER', 'FOLLOW_TRACK', 'OBJECT_SOLVER', 'COPY_LOCATION', 'COPY_ROTATION', 'COPY_SCALE', 'COPY_TRANSFORMS', 'LIMIT_DISTANCE', 'LIMIT_LOCATION', 'LIMIT_ROTATION', 'LIMIT_SCALE', 'MAINTAIN_VOLUME', 'TRANSFORM', 'TRANSFORM_CACHE', 'CLAMP_TO', 'DAMPED_TRACK', 'IK', 'LOCKED_TRACK', 'SPLINE_IK', 'STRETCH_TO', 'TRACK_TO', 'ACTION', 'ARMATURE', 'CHILD_OF', 'FLOOR', 'FOLLOW_PATH', 'PIVOT', 'SHRINKWRAP']
      
            @returns (types.Constraint): New constraint
               
         '''
      
         return types.Constraint

      def remove(constraint):
         '''Remove a constraint from this object
            Arguments:
            @constraint (Constraint): Removed constraint
               (never None)
      
         '''
      
         pass

      def clear():
         '''Remove all constraint from this object
         '''
      
         pass

      def move(from_index, to_index):
         '''Move a constraint to a different position
            Arguments:
            @from_index (int): Index to move
               in [-inf, inf]
            @to_index (int): Target index
               in [-inf, inf]
      
         '''
      
         pass

   class ObjectDisplay(types.bpy_struct):
      '''Object display settings for 3d viewport
      '''
   
      show_shadows = bool
      '''Object cast shadows in the 3d viewport
         @returns: boolean
      '''
      
   class ObjectGpencilModifiers(types.bpy_struct):
      '''Collection of object grease pencil modifiers
      '''
   
      def new(name, type):
         '''Add a new greasepencil_modifier
            Arguments:
            @name (str): New name for the greasepencil_modifier
               (never None)
            @type (str): Modifier type to add
               in ['GP_ARRAY', 'GP_BUILD', 'GP_MIRROR', 'GP_MULTIPLY', 'GP_SIMPLIFY', 'GP_SUBDIV', 'GP_ARMATURE', 'GP_HOOK', 'GP_LATTICE', 'GP_NOISE', 'GP_OFFSET', 'GP_SMOOTH', 'GP_THICK', 'GP_TIME', 'GP_COLOR', 'GP_OPACITY', 'GP_TINT']
      
            @returns (types.GpencilModifier): Newly created modifier
               
         '''
      
         return types.GpencilModifier

      def remove(greasepencil_modifier):
         '''Remove an existing greasepencil_modifier from the object
            Arguments:
            @greasepencil_modifier (GpencilModifier): Modifier to remove
               (never None)
      
         '''
      
         pass

      def clear():
         '''Remove all grease pencil modifiers from the object
         '''
      
         pass

   class ObjectModifiers(types.bpy_struct):
      '''Collection of object modifiers
      '''
   
      def new(name, type):
         '''Add a new modifier
            Arguments:
            @name (str): New name for the modifier
               (never None)
            @type (str): Modifier type to add
               in ['DATA_TRANSFER', 'MESH_CACHE', 'MESH_SEQUENCE_CACHE', 'NORMAL_EDIT', 'WEIGHTED_NORMAL', 'UV_PROJECT', 'UV_WARP', 'VERTEX_WEIGHT_EDIT', 'VERTEX_WEIGHT_MIX', 'VERTEX_WEIGHT_PROXIMITY', 'ARRAY', 'BEVEL', 'BOOLEAN', 'BUILD', 'DECIMATE', 'EDGE_SPLIT', 'MASK', 'MIRROR', 'MULTIRES', 'REMESH', 'SCREW', 'SKIN', 'SOLIDIFY', 'SUBSURF', 'TRIANGULATE', 'WELD', 'WIREFRAME', 'ARMATURE', 'CAST', 'CURVE', 'DISPLACE', 'HOOK', 'LAPLACIANDEFORM', 'LATTICE', 'MESH_DEFORM', 'SHRINKWRAP', 'SIMPLE_DEFORM', 'SMOOTH', 'CORRECTIVE_SMOOTH', 'LAPLACIANSMOOTH', 'SURFACE_DEFORM', 'WARP', 'WAVE', 'CLOTH', 'COLLISION', 'DYNAMIC_PAINT', 'EXPLODE', 'FLUID', 'OCEAN', 'PARTICLE_INSTANCE', 'PARTICLE_SYSTEM', 'SOFT_BODY', 'SURFACE']
      
            @returns (types.Modifier): Newly created modifier
               
         '''
      
         return types.Modifier

      def remove(modifier):
         '''Remove an existing modifier from the object
            Arguments:
            @modifier (Modifier): Modifier to remove
               (never None)
      
         '''
      
         pass

      def clear():
         '''Remove all modifiers from the object
         '''
      
         pass

   class ObjectShaderFx(types.bpy_struct):
      '''Collection of object effects
      '''
   
      def new(name, type):
         '''Add a new shader fx
            Arguments:
            @name (str): New name for the effect
               (never None)
            @type (str): Effect type to add
               in ['FX_BLUR', 'FX_COLORIZE', 'FX_FLIP', 'FX_GLOW', 'FX_PIXEL', 'FX_RIM', 'FX_SHADOW', 'FX_SWIRL', 'FX_WAVE']
      
            @returns (types.ShaderFx): Newly created effect
               
         '''
      
         return types.ShaderFx

      def remove(shader_fx):
         '''Remove an existing effect from the object
            Arguments:
            @shader_fx (ShaderFx): Effect to remove
               (never None)
      
         '''
      
         pass

      def clear():
         '''Remove all effects from the object
         '''
      
         pass

   class ObjectSolverConstraint(types.Constraint):
      '''Lock motion to the reconstructed object movement
      '''
   
      camera = types.Object
      '''Camera to which motion is parented (if empty active scene camera is used)
         @returns: Object
      '''
      
      clip = types.MovieClip
      '''Movie Clip to get tracking data from
         @returns: MovieClip
      '''
      
      object = str
      '''Movie tracking object to follow
         @returns: string, (never None)
      '''
      
      set_inverse_pending = bool
      '''Set to true to request recalculation of the inverse matrix
         @returns: boolean
      '''
      
      use_active_clip = bool
      '''Use active clip defined in scene
         @returns: boolean
      '''
      
   class OceanModifier(types.Modifier):
      '''Simulate an ocean surface
      '''
   
      bake_foam_fade = float
      '''How much foam accumulates over time (baked ocean only)
         @returns: float in [0, inf]
      '''
      
      choppiness = float
      '''Choppiness of the wave's crest (adds some horizontal component to the displacement)
         @returns: float in [0, inf]
      '''
      
      damping = float
      '''Damp reflected waves going in opposite direction to the wind
         @returns: float in [0, 1]
      '''
      
      depth = float
      '''Depth of the solid ground below the water surface
         @returns: float in [-inf, inf]
      '''
      
      fetch_jonswap = float
      '''This is the distance from a lee shore, called the fetch, or the distance over which the wind blows with constant velocity. Used by 'JONSWAP' and 'TMA' models
         @returns: float in [0, inf]
      '''
      
      filepath = str
      '''Path to a folder to store external baked images
         @returns: string, (never None)
      '''
      
      foam_coverage = float
      '''Amount of generated foam
         @returns: float in [-inf, inf]
      '''
      
      foam_layer_name = str
      '''Name of the vertex color layer used for foam
         @returns: string, (never None)
      '''
      
      frame_end = int
      '''End frame of the ocean baking
         @returns: int in [-inf, inf]
      '''
      
      frame_start = int
      '''Start frame of the ocean baking
         @returns: int in [-inf, inf]
      '''
      
      geometry_mode = str
      '''Method of modifying geometry
         @returns: enum in ['GENERATE', 'DISPLACE']
      '''
      
      is_cached = bool # (read only)
      '''Whether the ocean is using cached data or simulating
         @returns: boolean
      '''
      
      random_seed = int
      '''Seed of the random generator
         @returns: int in [0, inf]
      '''
      
      repeat_x = int
      '''Repetitions of the generated surface in X
         @returns: int in [1, 1024]
      '''
      
      repeat_y = int
      '''Repetitions of the generated surface in Y
         @returns: int in [1, 1024]
      '''
      
      resolution = int
      '''Resolution of the generated surface
         @returns: int in [1, 1024]
      '''
      
      sharpen_peak_jonswap = float
      '''Peak sharpening for 'JONSWAP' and 'TMA' models
         @returns: float in [0, 10]
      '''
      
      size = float
      '''Surface scale factor (does not affect the height of the waves)
         @returns: float in [0, inf]
      '''
      
      spatial_size = int
      '''Size of the simulation domain (in meters), and of the generated geometry (in BU)
         @returns: int in [-inf, inf]
      '''
      
      spectrum = str
      '''Spectrum to use
         @returns: enum in ['PHILLIPS', 'PIERSON_MOSKOWITZ', 'JONSWAP', 'TEXEL_MARSEN_ARSLOE']
      '''
      
      time = float
      '''Current time of the simulation
         @returns: float in [0, inf]
      '''
      
      use_foam = bool
      '''Generate foam mask as a vertex color channel
         @returns: boolean
      '''
      
      use_normals = bool
      '''Output normals for bump mapping - disabling can speed up performance if its not needed
         @returns: boolean
      '''
      
      wave_alignment = float
      '''How much the waves are aligned to each other
         @returns: float in [0, 10]
      '''
      
      wave_direction = float
      '''Main direction of the waves when they are (partially) aligned
         @returns: float in [-inf, inf]
      '''
      
      wave_scale = float
      '''Scale of the displacement effect
         @returns: float in [0, inf]
      '''
      
      wave_scale_min = float
      '''Shortest allowed wavelength
         @returns: float in [0, inf]
      '''
      
      wind_velocity = float
      '''Wind speed
         @returns: float in [-inf, inf]
      '''
      
   class OffsetGpencilModifier(types.GpencilModifier):
      '''Offset Stroke modifier
      '''
   
      invert_layer_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_layers = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_material_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_materials = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_vertex = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      layer = str
      '''Layer name
         @returns: string, (never None)
      '''
      
      layer_pass = int
      '''Layer pass index
         @returns: int in [0, 100]
      '''
      
      location = float
      '''Values for change location
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      material = str
      '''Material name
         @returns: string, (never None)
      '''
      
      pass_index = int
      '''Pass index
         @returns: int in [0, 100]
      '''
      
      rotation = float
      '''Values for changes in rotation
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      scale = float
      '''Values for changes in scale
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      vertex_group = str
      '''Vertex group name for modulating the deform
         @returns: string, (never None)
      '''
      
   class OpacityGpencilModifier(types.GpencilModifier):
      '''Opacity of Strokes modifier
      '''
   
      curve = types.CurveMapping # (read only)
      '''Custom curve to apply effect
         @returns: CurveMapping
      '''
      
      factor = float
      '''Factor of Opacity
         @returns: float in [-inf, inf]
      '''
      
      hardness = float
      '''Factor of stroke hardness
         @returns: float in [0, inf]
      '''
      
      invert_layer_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_layers = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_material_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_materials = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_vertex = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      layer = str
      '''Layer name
         @returns: string, (never None)
      '''
      
      layer_pass = int
      '''Layer pass index
         @returns: int in [0, 100]
      '''
      
      material = str
      '''Material name
         @returns: string, (never None)
      '''
      
      modify_color = str
      '''Set what colors of the stroke are affected
         @returns: enum in ['BOTH', 'STROKE', 'FILL', 'HARDNESS']
      '''
      
      normalize_opacity = bool
      '''Replace the stroke opacity
         @returns: boolean
      '''
      
      pass_index = int
      '''Pass index
         @returns: int in [0, 100]
      '''
      
      use_custom_curve = bool
      '''Use a custom curve to define opacity effect along the strokes
         @returns: boolean
      '''
      
      vertex_group = str
      '''Vertex group name for modulating the deform
         @returns: string, (never None)
      '''
      
   class Operator(types.bpy_struct):
      '''Storage of an operator being executed, or registered after execution
      '''
   
      bl_description = str
      '''
         @returns: string
      '''
      
      bl_idname = str
      '''
         @returns: string, (never None)
      '''
      
      bl_label = str
      '''
         @returns: string, (never None)
      '''
      
      bl_options = str
      '''Options for this operator type
         @returns: enum set in {'REGISTER', 'UNDO', 'UNDO_GROUPED', 'BLOCKING', 'MACRO', 'GRAB_CURSOR', 'GRAB_CURSOR_X', 'GRAB_CURSOR_Y', 'PRESET', 'INTERNAL'}
      '''
      
      bl_translation_context = str
      '''
         @returns: string
      '''
      
      bl_undo_group = str
      '''
         @returns: string
      '''
      
      has_reports = bool # (read only)
      '''Operator has a set of reports (warnings and errors) from last execution
         @returns: boolean
      '''
      
      layout = types.UILayout # (read only)
      '''
         @returns: UILayout
      '''
      
      macros = types.Macro # (read only)
      '''
         @returns: Collection of Macro
      '''
      
      name = str # (read only)
      '''
         @returns: string, (never None)
      '''
      
      options = types.OperatorOptions # (read only)
      '''Runtime options
         @returns: OperatorOptions, (never None)
      '''
      
      properties = types.OperatorProperties # (read only)
      '''
         @returns: OperatorProperties, (never None)
      '''
      
      def report(type, message):
         '''report
            Arguments:
            @type (str): set in {'DEBUG', 'INFO', 'OPERATOR', 'PROPERTY', 'WARNING', 'ERROR', 'ERROR_INVALID_INPUT', 'ERROR_INVALID_CONTEXT', 'ERROR_OUT_OF_MEMORY'}
            @message (str): (never None)
      
         '''
      
         pass

      def is_repeat():
         '''is_repeat
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def poll(context):
         '''Test if the operator can be called or not
            Arguments:
            @context (Context): (never None)
      
            @returns (bool): 
         '''
      
         return bool

      def execute(context):
         '''Execute the operator
            Arguments:
            @context (Context): (never None)
      
            @returns (str): set in {'RUNNING_MODAL', 'CANCELLED', 'FINISHED', 'PASS_THROUGH', 'INTERFACE'}
         '''
      
         return str

      def check(context):
         '''Check the operator settings, return True to signal a change to redraw
            Arguments:
            @context (Context): (never None)
      
            @returns (bool): 
         '''
      
         return bool

      def invoke(context, event):
         '''Invoke the operator
            Arguments:
            @context (Context): (never None)
            @event (Event): (never None)
      
            @returns (str): set in {'RUNNING_MODAL', 'CANCELLED', 'FINISHED', 'PASS_THROUGH', 'INTERFACE'}
         '''
      
         return str

      def modal(context, event):
         '''Modal operator function
            Arguments:
            @context (Context): (never None)
            @event (Event): (never None)
      
            @returns (str): set in {'RUNNING_MODAL', 'CANCELLED', 'FINISHED', 'PASS_THROUGH', 'INTERFACE'}
         '''
      
         return str

      def draw(context):
         '''Draw function for the operator
            Arguments:
            @context (Context): (never None)
      
         '''
      
         pass

      def cancel(context):
         '''Called when the operator is canceled
            Arguments:
            @context (Context): (never None)
      
         '''
      
         pass

      @classmethod
      def description(context, properties):
         '''Compute a description string that depends on parameters
            Arguments:
            @context (Context): (never None)
            @properties (OperatorProperties): (never None)
      
            @returns (str): 
         '''
      
         return str

      def as_keywords(self, ignore=()):
         '''Return a copy of the properties as a dictionary
            
         '''
      
         pass
      
   class OperatorFileListElement(types.PropertyGroup):
      '''
      '''
   
      name = str
      '''Name of a file or directory within a file list
         @returns: string, (never None)
      '''
      
   class OperatorMacro(types.bpy_struct):
      '''Storage of a sub operator in a macro after it has been added
      '''
   
      properties = types.OperatorProperties # (read only)
      '''
         @returns: OperatorProperties, (never None)
      '''
      
   class OperatorMousePath(types.PropertyGroup):
      '''Mouse path values for operators that record such paths
      '''
   
      loc = float
      '''Mouse location
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      time = float
      '''Time of mouse location
         @returns: float in [-inf, inf]
      '''
      
   class OperatorOptions(types.bpy_struct):
      '''Runtime options
      '''
   
      is_grab_cursor = bool # (read only)
      '''True when the cursor is grabbed
         @returns: boolean
      '''
      
      is_invoke = bool # (read only)
      '''True when invoked (even if only the execute callbacks available)
         @returns: boolean
      '''
      
      is_repeat = bool # (read only)
      '''True when run from the 'Adjust Last Operation' panel
         @returns: boolean
      '''
      
      is_repeat_last = bool # (read only)
      '''True when run from the operator 'Repeat Last'
         @returns: boolean
      '''
      
      use_cursor_region = bool
      '''Enable to use the region under the cursor for modal execution
         @returns: boolean
      '''
      
   class OperatorProperties(types.bpy_struct):
      '''Input properties of an Operator
      '''
   
   class OperatorStrokeElement(types.PropertyGroup):
      '''
      '''
   
      is_start = bool
      '''
         @returns: boolean
      '''
      
      location = float
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      mouse = float
      '''
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      pen_flip = bool
      '''
         @returns: boolean
      '''
      
      pressure = float
      '''Tablet pressure
         @returns: float in [0, 1]
      '''
      
      size = float
      '''Brush size in screen space
         @returns: float in [0, inf]
      '''
      
      time = float
      '''
         @returns: float in [0, inf]
      '''
      
   class OverDropSequence(types.EffectSequence):
      '''Over Drop Sequence
      '''
   
      input_1 = types.Sequence
      '''First input for the effect strip
         @returns: Sequence, (never None)
      '''
      
      input_2 = types.Sequence
      '''Second input for the effect strip
         @returns: Sequence, (never None)
      '''
      
      input_count = int # (read only)
      '''
         @returns: int in [0, inf]
      '''
      
   class PARTICLE_UL_particle_systems(types.UIList):
      '''
      '''
   
      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      def draw_item(self, _context, layout, data, item, icon, _active_data, _active_propname, _index, _flt_flag):
         
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class PHYSICS_UL_dynapaint_surfaces(types.UIList):
      '''
      '''
   
      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
         
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class PackedFile(types.bpy_struct):
      '''External file packed into the .blend file
      '''
   
      data = str # (read only)
      '''Raw data (bytes, exact content of the embedded file)
         @returns: string, (never None)
      '''
      
      size = int # (read only)
      '''Size of packed file in bytes
         @returns: int in [-inf, inf]
      '''
      
   class Paint(types.bpy_struct):
      '''
      '''
   
      brush = types.Brush
      '''Active Brush
         @returns: Brush
      '''
      
      cavity_curve = types.CurveMapping # (read only)
      '''Editable cavity curve
         @returns: CurveMapping, (never None)
      '''
      
      input_samples = int
      '''Average multiple input samples together to smooth the brush stroke
         @returns: int in [0, inf]
      '''
      
      palette = types.Palette
      '''Active Palette
         @returns: Palette
      '''
      
      show_brush = bool
      '''
         @returns: boolean
      '''
      
      show_brush_on_surface = bool
      '''
         @returns: boolean
      '''
      
      show_low_resolution = bool
      '''For multires, show low resolution while navigating the view
         @returns: boolean
      '''
      
      tile_offset = float
      '''Stride at which tiled strokes are copied
         @returns: float array of 3 items in [0.01, inf]
      '''
      
      tile_x = bool
      '''Tile along X axis
         @returns: boolean
      '''
      
      tile_y = bool
      '''Tile along Y axis
         @returns: boolean
      '''
      
      tile_z = bool
      '''Tile along Z axis
         @returns: boolean
      '''
      
      tool_slots = types.PaintToolSlot # (read only)
      '''
         @returns: Collection of PaintToolSlot
      '''
      
      use_cavity = bool
      '''Mask painting according to mesh geometry cavity
         @returns: boolean
      '''
      
      use_sculpt_delay_updates = bool
      '''Update the geometry when it enters the view, providing faster view navigation
         @returns: boolean
      '''
      
      use_symmetry_feather = bool
      '''Reduce the strength of the brush where it overlaps symmetrical daubs
         @returns: boolean
      '''
      
      use_symmetry_x = bool
      '''Mirror brush across the X axis
         @returns: boolean
      '''
      
      use_symmetry_y = bool
      '''Mirror brush across the Y axis
         @returns: boolean
      '''
      
      use_symmetry_z = bool
      '''Mirror brush across the Z axis
         @returns: boolean
      '''
      
   class PaintCurve(types.ID):
      '''
      '''
   
   class PaintToolSlot(types.bpy_struct):
      '''
      '''
   
      brush = types.Brush
      '''
         @returns: Brush
      '''
      
   class Palette(types.ID):
      '''
      '''
   
      colors = types.PaletteColors # (read only)
      '''
         @returns: PaletteColors Collection of PaletteColor
      '''
      
   class PaletteColor(types.bpy_struct):
      '''
      '''
   
      color = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      strength = float
      '''
         @returns: float in [0, 1]
      '''
      
      weight = float
      '''
         @returns: float in [0, 1]
      '''
      
   class PaletteColors(types.bpy_struct):
      '''Collection of palette colors
      '''
   
      active = types.PaletteColor
      '''
         @returns: PaletteColor
      '''
      
      def new():
         '''Add a new color to the palette
            @returns (types.PaletteColor): The newly created color
               
         '''
      
         return types.PaletteColor

      def remove(color):
         '''Remove a color from the palette
            Arguments:
            @color (PaletteColor): The color to remove
               (never None)
      
         '''
      
         pass

      def clear():
         '''Remove all colors from the palette
         '''
      
         pass

   class Panel(types.bpy_struct):
      '''Panel containing UI elements
      '''
   
      bl_category = str
      '''
         @returns: string, (never None)
      '''
      
      bl_context = str
      '''The context in which the panel belongs to. (TODO: explain the possible combinations bl_context/bl_region_type/bl_space_type)
         @returns: string, (never None)
      '''
      
      bl_idname = str
      '''If this is set, the panel gets a custom ID, otherwise it takes the name of the class used to define the panel. For example, if the class name is "OBJECT_PT_hello", and bl_idname is not set by the script, then bl_idname = "OBJECT_PT_hello"
         @returns: string, (never None)
      '''
      
      bl_label = str
      '''The panel label, shows up in the panel header at the right of the triangle used to collapse the panel
         @returns: string, (never None)
      '''
      
      bl_options = str
      '''Options for this panel type
         @returns: enum set in {'DEFAULT_CLOSED', 'HIDE_HEADER'}
      '''
      
      bl_order = int
      '''Panels with lower numbers are default ordered before panels with higher numbers
         @returns: int in [0, inf]
      '''
      
      bl_owner_id = str
      '''
         @returns: string, (never None)
      '''
      
      bl_parent_id = str
      '''If this is set, the panel becomes a sub-panel
         @returns: string, (never None)
      '''
      
      bl_region_type = str
      '''The region where the panel is going to be used in
         @returns: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW', 'HUD', 'NAVIGATION_BAR', 'EXECUTE', 'FOOTER', 'TOOL_HEADER']
      '''
      
      bl_space_type = str
      '''The space where the panel is going to be used in
         @returns: enum in ['EMPTY', 'VIEW_3D', 'IMAGE_EDITOR', 'NODE_EDITOR', 'SEQUENCE_EDITOR', 'CLIP_EDITOR', 'DOPESHEET_EDITOR', 'GRAPH_EDITOR', 'NLA_EDITOR', 'TEXT_EDITOR', 'CONSOLE', 'INFO', 'TOPBAR', 'STATUSBAR', 'OUTLINER', 'PROPERTIES', 'FILE_BROWSER', 'PREFERENCES']
      '''
      
      bl_translation_context = str
      '''
         @returns: string, (never None)
      '''
      
      bl_ui_units_x = int
      '''When set, defines popup panel width
         @returns: int in [0, inf]
      '''
      
      is_popover = bool # (read only)
      '''
         @returns: boolean
      '''
      
      layout = types.UILayout # (read only)
      '''Defines the structure of the panel in the UI
         @returns: UILayout
      '''
      
      text = str
      '''XXX todo
         @returns: string, (never None)
      '''
      
      use_pin = bool
      '''Show the panel on all tabs
         @returns: boolean
      '''
      
      @classmethod
      def poll(context):
         '''If this method returns a non-null output, then the panel can be drawn
            Arguments:
            @context (Context): (never None)
      
            @returns (bool): 
         '''
      
         return bool

      def draw(context):
         '''Draw UI elements into the panel UI layout
            Arguments:
            @context (Context): (never None)
      
         '''
      
         pass

      def draw_header(context):
         '''Draw UI elements into the panel's header UI layout
            Arguments:
            @context (Context): (never None)
      
         '''
      
         pass

      def draw_header_preset(context):
         '''Draw UI elements for presets in the panel's header
            Arguments:
            @context (Context): (never None)
      
         '''
      
         pass

      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class Particle(types.bpy_struct):
      '''Particle in a particle system
      '''
   
      alive_state = str
      '''
         @returns: enum in ['DEAD', 'UNBORN', 'ALIVE', 'DYING']
      '''
      
      angular_velocity = float
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      birth_time = float
      '''
         @returns: float in [-inf, inf]
      '''
      
      die_time = float
      '''
         @returns: float in [-inf, inf]
      '''
      
      hair_keys = types.ParticleHairKey # (read only)
      '''
         @returns: Collection of ParticleHairKey
      '''
      
      is_exist = bool # (read only)
      '''
         @returns: boolean
      '''
      
      is_visible = bool # (read only)
      '''
         @returns: boolean
      '''
      
      lifetime = float
      '''
         @returns: float in [-inf, inf]
      '''
      
      location = float
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      particle_keys = types.ParticleKey # (read only)
      '''
         @returns: Collection of ParticleKey
      '''
      
      prev_angular_velocity = float
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      prev_location = float
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      prev_rotation = float
      '''
         @returns: float array of 4 items in [-inf, inf]
      '''
      
      prev_velocity = float
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      rotation = float
      '''
         @returns: float array of 4 items in [-inf, inf]
      '''
      
      size = float
      '''
         @returns: float in [-inf, inf]
      '''
      
      velocity = float
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      def uv_on_emitter(modifier):
         '''Obtain UV coordinates for a particle on an evaluated mesh.
            Arguments:
            @modifier (ParticleSystemModifier): Particle modifier from an evaluated object
               (never None)
      
            @returns (float): array of 2 items in [-inf, inf]
         '''
      
         return float

   class ParticleBrush(types.bpy_struct):
      '''Particle editing brush
      '''
   
      count = int
      '''Particle count
         @returns: int in [1, 1000]
      '''
      
      curve = types.CurveMapping # (read only)
      '''
         @returns: CurveMapping
      '''
      
      length_mode = str
      '''
         @returns: enum in ['GROW', 'SHRINK']
      '''
      
      puff_mode = str
      '''
         @returns: enum in ['ADD', 'SUB']
      '''
      
      size = int
      '''Radius of the brush in pixels
         @returns: int in [1, 32767]
      '''
      
      steps = int
      '''Brush steps
         @returns: int in [1, 32767]
      '''
      
      strength = float
      '''Brush strength
         @returns: float in [0.001, 1]
      '''
      
      use_puff_volume = bool
      '''Apply puff to unselected end-points (helps maintain hair volume when puffing root)
         @returns: boolean
      '''
      
   class ParticleDupliWeight(types.bpy_struct):
      '''Weight of a particle dupliobject in a collection
      '''
   
      count = int
      '''The number of times this object is repeated with respect to other objects
         @returns: int in [0, 32767]
      '''
      
      name = str # (read only)
      '''Particle dupliobject name
         @returns: string, (never None)
      '''
      
   class ParticleEdit(types.bpy_struct):
      '''Properties of particle editing mode
      '''
   
      brush = types.ParticleBrush # (read only)
      '''
         @returns: ParticleBrush
      '''
      
      default_key_count = int
      '''How many keys to make new particles with
         @returns: int in [2, 32767]
      '''
      
      display_step = int
      '''How many steps to display the path with
         @returns: int in [1, 10]
      '''
      
      emitter_distance = float
      '''Distance to keep particles away from the emitter
         @returns: float in [-inf, inf]
      '''
      
      fade_frames = int
      '''How many frames to fade
         @returns: int in [1, 100]
      '''
      
      is_editable = bool # (read only)
      '''A valid edit mode exists
         @returns: boolean
      '''
      
      is_hair = bool # (read only)
      '''Editing hair
         @returns: boolean
      '''
      
      object = types.Object # (read only)
      '''The edited object
         @returns: Object
      '''
      
      select_mode = str
      '''Particle select and display mode
         @returns: enum in ['PATH', 'POINT', 'TIP']
      '''
      
      shape_object = types.Object
      '''Outer shape to use for tools
         @returns: Object
      '''
      
      show_particles = bool
      '''Display actual particles
         @returns: boolean
      '''
      
      tool = str
      '''
         @returns: enum in ['COMB', 'SMOOTH', 'ADD', 'LENGTH', 'PUFF', 'CUT', 'WEIGHT']
      '''
      
      type = str
      '''
         @returns: enum in ['PARTICLES', 'SOFT_BODY', 'CLOTH']
      '''
      
      use_auto_velocity = bool
      '''Calculate point velocities automatically
         @returns: boolean
      '''
      
      use_default_interpolate = bool
      '''Interpolate new particles from the existing ones
         @returns: boolean
      '''
      
      use_emitter_deflect = bool
      '''Keep paths from intersecting the emitter
         @returns: boolean
      '''
      
      use_fade_time = bool
      '''Fade paths and keys further away from current frame
         @returns: boolean
      '''
      
      use_preserve_length = bool
      '''Keep path lengths constant
         @returns: boolean
      '''
      
      use_preserve_root = bool
      '''Keep root keys unmodified
         @returns: boolean
      '''
      
   class ParticleHairKey(types.bpy_struct):
      '''Particle key for hair particle system
      '''
   
      co = float
      '''Location of the hair key in object space
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      co_local = float
      '''Location of the hair key in its local coordinate system, relative to the emitting face
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      time = float
      '''Relative time of key over hair length
         @returns: float in [0, inf]
      '''
      
      weight = float
      '''Weight for cloth simulation
         @returns: float in [0, 1]
      '''
      
      def co_object(object, modifier, particle):
         '''Obtain hairkey location with particle and modifier data
            Arguments:
            @object (Object): Object
               (never None)
            @modifier (ParticleSystemModifier): Particle modifier
               (never None)
            @particle (Particle): hair particle
               (never None)
      
            @returns (float): Exported hairkey location
               array of 3 items in [-inf, inf]
         '''
      
         return float

   class ParticleInstanceModifier(types.Modifier):
      '''Particle system instancing modifier
      '''
   
      axis = str
      '''Pole axis for rotation
         @returns: enum in ['X', 'Y', 'Z']
      '''
      
      index_layer_name = str
      '''Custom data layer name for the index
         @returns: string, (never None)
      '''
      
      object = types.Object
      '''Object that has the particle system
         @returns: Object
      '''
      
      particle_amount = float
      '''Amount of particles to use for instancing
         @returns: float in [0, 1]
      '''
      
      particle_offset = float
      '''Relative offset of particles to use for instancing, to avoid overlap of multiple instances
         @returns: float in [0, 1]
      '''
      
      particle_system = types.ParticleSystem
      '''
         @returns: ParticleSystem
      '''
      
      particle_system_index = int
      '''
         @returns: int in [1, 32767]
      '''
      
      position = float
      '''Position along path
         @returns: float in [0, 1]
      '''
      
      random_position = float
      '''Randomize position along path
         @returns: float in [0, 1]
      '''
      
      random_rotation = float
      '''Randomize rotation around path
         @returns: float in [0, 1]
      '''
      
      rotation = float
      '''Rotation around path
         @returns: float in [0, 1]
      '''
      
      show_alive = bool
      '''Show instances when particles are alive
         @returns: boolean
      '''
      
      show_dead = bool
      '''Show instances when particles are dead
         @returns: boolean
      '''
      
      show_unborn = bool
      '''Show instances when particles are unborn
         @returns: boolean
      '''
      
      space = str
      '''Space to use for copying mesh data
         @returns: enum in ['LOCAL', 'WORLD']
      '''
      
      use_children = bool
      '''Create instances from child particles
         @returns: boolean
      '''
      
      use_normal = bool
      '''Create instances from normal particles
         @returns: boolean
      '''
      
      use_path = bool
      '''Create instances along particle paths
         @returns: boolean
      '''
      
      use_preserve_shape = bool
      '''Don't stretch the object
         @returns: boolean
      '''
      
      use_size = bool
      '''Use particle size to scale the instances
         @returns: boolean
      '''
      
      value_layer_name = str
      '''Custom data layer name for the randomized value
         @returns: string, (never None)
      '''
      
   class ParticleKey(types.bpy_struct):
      '''Key location for a particle over time
      '''
   
      angular_velocity = float
      '''Key angular velocity
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      location = float
      '''Key location
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      rotation = float
      '''Key rotation quaternion
         @returns: float array of 4 items in [-inf, inf]
      '''
      
      time = float
      '''Time of key over the simulation
         @returns: float in [0, inf]
      '''
      
      velocity = float
      '''Key velocity
         @returns: float array of 3 items in [-inf, inf]
      '''
      
   class ParticleSettings(types.ID):
      '''Particle settings, reusable by multiple particle systems
      '''
   
      active_instanceweight = types.ParticleDupliWeight # (read only)
      '''
         @returns: ParticleDupliWeight
      '''
      
      active_instanceweight_index = int
      '''
         @returns: int in [0, inf]
      '''
      
      active_texture = types.Texture
      '''Active texture slot being displayed
         @returns: Texture
      '''
      
      active_texture_index = int
      '''Index of active texture slot
         @returns: int in [0, 17]
      '''
      
      adaptive_angle = int
      '''How many degrees path has to curve to make another render segment
         @returns: int in [0, 45]
      '''
      
      adaptive_pixel = int
      '''How many pixels path has to cover to make another render segment
         @returns: int in [0, 50]
      '''
      
      angular_velocity_factor = float
      '''Angular velocity amount (in radians per second)
         @returns: float in [-200, 200]
      '''
      
      angular_velocity_mode = str
      '''What axis is used to change particle rotation with time
         @returns: enum in ['NONE', 'VELOCITY', 'HORIZONTAL', 'VERTICAL', 'GLOBAL_X', 'GLOBAL_Y', 'GLOBAL_Z', 'RAND']
      '''
      
      animation_data = types.AnimData # (read only)
      '''Animation data for this data-block
         @returns: AnimData
      '''
      
      apply_effector_to_children = bool
      '''Apply effectors to children
         @returns: boolean
      '''
      
      apply_guide_to_children = bool
      '''
         @returns: boolean
      '''
      
      bending_random = float
      '''Random stiffness of hairs
         @returns: float in [0, 1]
      '''
      
      boids = types.BoidSettings # (read only)
      '''
         @returns: BoidSettings
      '''
      
      branch_threshold = float
      '''Threshold of branching
         @returns: float in [0, 1]
      '''
      
      brownian_factor = float
      '''Amount of random, erratic particle movement
         @returns: float in [0, 200]
      '''
      
      child_length = float
      '''Length of child paths
         @returns: float in [0, 1]
      '''
      
      child_length_threshold = float
      '''Amount of particles left untouched by child path length
         @returns: float in [0, 1]
      '''
      
      child_nbr = int
      '''Number of children/parent
         @returns: int in [0, 100000]
      '''
      
      child_parting_factor = float
      '''Create parting in the children based on parent strands
         @returns: float in [0, 1]
      '''
      
      child_parting_max = float
      '''Maximum root to tip angle (tip distance/root distance for long hair)
         @returns: float in [0, 180]
      '''
      
      child_parting_min = float
      '''Minimum root to tip angle (tip distance/root distance for long hair)
         @returns: float in [0, 180]
      '''
      
      child_radius = float
      '''Radius of children around parent
         @returns: float in [0, 100000]
      '''
      
      child_roundness = float
      '''Roundness of children around parent
         @returns: float in [0, 1]
      '''
      
      child_size = float
      '''A multiplier for the child particle size
         @returns: float in [0.001, 100000]
      '''
      
      child_size_random = float
      '''Random variation to the size of the child particles
         @returns: float in [0, 1]
      '''
      
      child_type = str
      '''Create child particles
         @returns: enum in ['NONE', 'SIMPLE', 'INTERPOLATED']
      '''
      
      clump_curve = types.CurveMapping # (read only)
      '''Curve defining clump tapering
         @returns: CurveMapping
      '''
      
      clump_factor = float
      '''Amount of clumping
         @returns: float in [-1, 1]
      '''
      
      clump_noise_size = float
      '''Size of clump noise
         @returns: float in [1e-05, 100000]
      '''
      
      clump_shape = float
      '''Shape of clumping
         @returns: float in [-0.999, 0.999]
      '''
      
      collision_collection = types.Collection
      '''Limit colliders to this collection
         @returns: Collection
      '''
      
      color_maximum = float
      '''Maximum length of the particle color vector
         @returns: float in [0.01, 100]
      '''
      
      count = int
      '''Total number of particles
         @returns: int in [0, inf]
      '''
      
      courant_target = float
      '''The relative distance a particle can move before requiring more subframes (target Courant number); 0.01-0.3 is the recommended range
         @returns: float in [0.0001, 10]
      '''
      
      create_long_hair_children = bool
      '''Calculate children that suit long hair well
         @returns: boolean
      '''
      
      damping = float
      '''Amount of damping
         @returns: float in [0, 1]
      '''
      
      display_color = str
      '''Draw additional particle data as a color
         @returns: enum in ['NONE', 'MATERIAL', 'VELOCITY', 'ACCELERATION']
      '''
      
      display_method = str
      '''How particles are drawn in viewport
         @returns: enum in ['NONE', 'RENDER', 'DOT', 'CIRC', 'CROSS', 'AXIS']
      '''
      
      display_percentage = int
      '''Percentage of particles to display in 3D view
         @returns: int in [0, 100]
      '''
      
      display_size = float
      '''Size of particles on viewport in BU
         @returns: float in [0, 1000]
      '''
      
      display_step = int
      '''How many steps paths are drawn with (power of 2)
         @returns: int in [0, 10]
      '''
      
      distribution = str
      '''How to distribute particles on selected element
         @returns: enum in ['JIT', 'RAND', 'GRID']
      '''
      
      drag_factor = float
      '''Amount of air-drag
         @returns: float in [0, 1]
      '''
      
      effect_hair = float
      '''Hair stiffness for effectors
         @returns: float in [0, 1]
      '''
      
      effector_amount = int
      '''How many particles are effectors (0 is all particles)
         @returns: int in [0, 10000]
      '''
      
      effector_weights = types.EffectorWeights # (read only)
      '''
         @returns: EffectorWeights
      '''
      
      emit_from = str
      '''Where to emit particles from
         @returns: enum in ['VERT', 'FACE', 'VOLUME']
      '''
      
      factor_random = float
      '''Give the starting velocity a random variation
         @returns: float in [0, 200]
      '''
      
      fluid = types.SPHFluidSettings # (read only)
      '''
         @returns: SPHFluidSettings
      '''
      
      force_field_1 = types.FieldSettings # (read only)
      '''
         @returns: FieldSettings
      '''
      
      force_field_2 = types.FieldSettings # (read only)
      '''
         @returns: FieldSettings
      '''
      
      frame_end = float
      '''Frame number to stop emitting particles
         @returns: float in [-1.04857e+06, 1.04857e+06]
      '''
      
      frame_start = float
      '''Frame number to start emitting particles
         @returns: float in [-1.04857e+06, 1.04857e+06]
      '''
      
      grid_random = float
      '''Add random offset to the grid locations
         @returns: float in [0, 1]
      '''
      
      grid_resolution = int
      '''The resolution of the particle grid
         @returns: int in [1, 250]
      '''
      
      hair_length = float
      '''Length of the hair
         @returns: float in [0, 1000]
      '''
      
      hair_step = int
      '''Number of hair segments
         @returns: int in [2, 32767]
      '''
      
      hexagonal_grid = bool
      '''Create the grid in a hexagonal pattern
         @returns: boolean
      '''
      
      instance_collection = types.Collection
      '''Show Objects in this collection in place of particles
         @returns: Collection
      '''
      
      instance_object = types.Object
      '''Show this Object in place of particles
         @returns: Object
      '''
      
      instance_weights = types.ParticleDupliWeight # (read only)
      '''Weights for all of the objects in the dupli collection
         @returns: Collection of ParticleDupliWeight
      '''
      
      integrator = str
      '''Algorithm used to calculate physics, from the fastest to the most stable/accurate: Midpoint, Euler, Verlet, RK4 (Old)
         @returns: enum in ['EULER', 'VERLET', 'MIDPOINT', 'RK4']
      '''
      
      invert_grid = bool
      '''Invert what is considered object and what is not
         @returns: boolean
      '''
      
      is_fluid = bool # (read only)
      '''Particles were created by a fluid simulation
         @returns: boolean
      '''
      
      jitter_factor = float
      '''Amount of jitter applied to the sampling
         @returns: float in [0, 2]
      '''
      
      keyed_loops = int
      '''Number of times the keys are looped
         @returns: int in [1, 10000]
      '''
      
      keys_step = int
      '''
         @returns: int in [0, 32767]
      '''
      
      kink = str
      '''Type of periodic offset on the path
         @returns: enum in ['NO', 'CURL', 'RADIAL', 'WAVE', 'BRAID', 'SPIRAL']
      '''
      
      kink_amplitude = float
      '''The amplitude of the offset
         @returns: float in [-100000, 100000]
      '''
      
      kink_amplitude_clump = float
      '''How much clump affects kink amplitude
         @returns: float in [0, 1]
      '''
      
      kink_amplitude_random = float
      '''Random variation of the amplitude
         @returns: float in [0, 1]
      '''
      
      kink_axis = str
      '''Which axis to use for offset
         @returns: enum in ['X', 'Y', 'Z']
      '''
      
      kink_axis_random = float
      '''Random variation of the orientation
         @returns: float in [0, 1]
      '''
      
      kink_extra_steps = int
      '''Extra steps for resolution of special kink features
         @returns: int in [1, inf]
      '''
      
      kink_flat = float
      '''How flat the hairs are
         @returns: float in [0, 1]
      '''
      
      kink_frequency = float
      '''The frequency of the offset (1/total length)
         @returns: float in [-100000, 100000]
      '''
      
      kink_shape = float
      '''Adjust the offset to the beginning/end
         @returns: float in [-0.999, 0.999]
      '''
      
      length_random = float
      '''Give path length a random variation
         @returns: float in [0, 1]
      '''
      
      lifetime = float
      '''Life span of the particles
         @returns: float in [1, 1.04857e+06]
      '''
      
      lifetime_random = float
      '''Give the particle life a random variation
         @returns: float in [0, 1]
      '''
      
      line_length_head = float
      '''Length of the line's head
         @returns: float in [0, 100000]
      '''
      
      line_length_tail = float
      '''Length of the line's tail
         @returns: float in [0, 100000]
      '''
      
      lock_boids_to_surface = bool
      '''Constrain boids to a surface
         @returns: boolean
      '''
      
      mass = float
      '''Mass of the particles
         @returns: float in [1e-08, 100000]
      '''
      
      material = int
      '''Index of material slot used for rendering particles
         @returns: int in [1, 32767]
      '''
      
      material_slot = str
      '''Material slot used for rendering particles
         @returns: enum in ['DUMMY']
      '''
      
      normal_factor = float
      '''Let the surface normal give the particle a starting velocity
         @returns: float in [-1000, 1000]
      '''
      
      object_align_factor = float
      '''Let the emitter object orientation give the particle a starting velocity
         @returns: float array of 3 items in [-200, 200]
      '''
      
      object_factor = float
      '''Let the object give the particle a starting velocity
         @returns: float in [-200, 200]
      '''
      
      particle_factor = float
      '''Let the target particle give the particle a starting velocity
         @returns: float in [-200, 200]
      '''
      
      particle_size = float
      '''The size of the particles
         @returns: float in [0.001, 100000]
      '''
      
      path_end = float
      '''End time of drawn path
         @returns: float in [-inf, inf]
      '''
      
      path_start = float
      '''Starting time of drawn path
         @returns: float in [-inf, inf]
      '''
      
      phase_factor = float
      '''Rotation around the chosen orientation axis
         @returns: float in [-1, 1]
      '''
      
      phase_factor_random = float
      '''Randomize rotation around the chosen orientation axis
         @returns: float in [0, 2]
      '''
      
      physics_type = str
      '''Particle physics type
         @returns: enum in ['NO', 'NEWTON', 'KEYED', 'BOIDS', 'FLUID']
      '''
      
      radius_scale = float
      '''Multiplier of diameter properties
         @returns: float in [0, inf]
      '''
      
      react_event = str
      '''The event of target particles to react on
         @returns: enum in ['DEATH', 'COLLIDE', 'NEAR']
      '''
      
      reactor_factor = float
      '''Let the vector away from the target particle's location give the particle a starting velocity
         @returns: float in [-10, 10]
      '''
      
      render_step = int
      '''How many steps paths are rendered with (power of 2)
         @returns: int in [0, 20]
      '''
      
      render_type = str
      '''How particles are rendered
         @returns: enum in ['NONE', 'HALO', 'LINE', 'PATH', 'OBJECT', 'COLLECTION']
      '''
      
      rendered_child_count = int
      '''Number of children/parent for rendering
         @returns: int in [0, 100000]
      '''
      
      root_radius = float
      '''Strand diameter width at the root
         @returns: float in [0, inf]
      '''
      
      rotation_factor_random = float
      '''Randomize particle orientation
         @returns: float in [0, 1]
      '''
      
      rotation_mode = str
      '''Particle orientation axis (does not affect Explode modifier's results)
         @returns: enum in ['NONE', 'NOR', 'NOR_TAN', 'VEL', 'GLOB_X', 'GLOB_Y', 'GLOB_Z', 'OB_X', 'OB_Y', 'OB_Z']
      '''
      
      roughness_1 = float
      '''Amount of location dependent rough
         @returns: float in [0, 100000]
      '''
      
      roughness_1_size = float
      '''Size of location dependent rough
         @returns: float in [0.01, 100000]
      '''
      
      roughness_2 = float
      '''Amount of random rough
         @returns: float in [0, 100000]
      '''
      
      roughness_2_size = float
      '''Size of random rough
         @returns: float in [0.01, 100000]
      '''
      
      roughness_2_threshold = float
      '''Amount of particles left untouched by random rough
         @returns: float in [0, 1]
      '''
      
      roughness_curve = types.CurveMapping # (read only)
      '''Curve defining roughness
         @returns: CurveMapping
      '''
      
      roughness_end_shape = float
      '''Shape of end point rough
         @returns: float in [0, 10]
      '''
      
      roughness_endpoint = float
      '''Amount of end point rough
         @returns: float in [0, 100000]
      '''
      
      shape = float
      '''Strand shape parameter
         @returns: float in [-1, 1]
      '''
      
      show_guide_hairs = bool
      '''Show guide hairs
         @returns: boolean
      '''
      
      show_hair_grid = bool
      '''Show hair simulation grid
         @returns: boolean
      '''
      
      show_health = bool
      '''Draw boid health
         @returns: boolean
      '''
      
      show_number = bool
      '''Show particle number
         @returns: boolean
      '''
      
      show_size = bool
      '''Show particle size
         @returns: boolean
      '''
      
      show_unborn = bool
      '''Show particles before they are emitted
         @returns: boolean
      '''
      
      show_velocity = bool
      '''Show particle velocity
         @returns: boolean
      '''
      
      size_random = float
      '''Give the particle size a random variation
         @returns: float in [0, 1]
      '''
      
      subframes = int
      '''Subframes to simulate for improved stability and finer granularity simulations (dt = timestep / (subframes + 1))
         @returns: int in [0, 1000]
      '''
      
      tangent_factor = float
      '''Let the surface tangent give the particle a starting velocity
         @returns: float in [-1000, 1000]
      '''
      
      tangent_phase = float
      '''Rotate the surface tangent
         @returns: float in [-1, 1]
      '''
      
      texture_slots = types.ParticleSettingsTextureSlots # (read only)
      '''Texture slots defining the mapping and influence of textures
         @returns: ParticleSettingsTextureSlots Collection of ParticleSettingsTextureSlot
      '''
      
      time_tweak = float
      '''A multiplier for physics timestep (1.0 means one frame = 1/25 seconds)
         @returns: float in [0, 100]
      '''
      
      timestep = float
      '''The simulation timestep per frame (seconds per frame)
         @returns: float in [0.0001, 100]
      '''
      
      tip_radius = float
      '''Strand diameter width at the tip
         @returns: float in [0, inf]
      '''
      
      trail_count = int
      '''Number of trail particles
         @returns: int in [1, 100000]
      '''
      
      twist = float
      '''Number of turns around parent along the strand
         @returns: float in [-100000, 100000]
      '''
      
      twist_curve = types.CurveMapping # (read only)
      '''Curve defining twist
         @returns: CurveMapping
      '''
      
      type = str
      '''Particle Type
         @returns: enum in ['EMITTER', 'HAIR']
      '''
      
      use_absolute_path_time = bool
      '''Path timing is in absolute frames
         @returns: boolean
      '''
      
      use_adaptive_subframes = bool
      '''Automatically set the number of subframes
         @returns: boolean
      '''
      
      use_advanced_hair = bool
      '''Use full physics calculations for growing hair
         @returns: boolean
      '''
      
      use_close_tip = bool
      '''Set tip radius to zero
         @returns: boolean
      '''
      
      use_clump_curve = bool
      '''Use a curve to define clump tapering
         @returns: boolean
      '''
      
      use_clump_noise = bool
      '''Create random clumps around the parent
         @returns: boolean
      '''
      
      use_collection_count = bool
      '''Use object multiple times in the same collection
         @returns: boolean
      '''
      
      use_collection_pick_random = bool
      '''Pick objects from collection randomly
         @returns: boolean
      '''
      
      use_dead = bool
      '''Show particles after they have died
         @returns: boolean
      '''
      
      use_die_on_collision = bool
      '''Particles die when they collide with a deflector object
         @returns: boolean
      '''
      
      use_dynamic_rotation = bool
      '''Particle rotations are affected by collisions and effectors
         @returns: boolean
      '''
      
      use_emit_random = bool
      '''Emit in random order of elements
         @returns: boolean
      '''
      
      use_even_distribution = bool
      '''Use even distribution from faces based on face areas or edge lengths
         @returns: boolean
      '''
      
      use_global_instance = bool
      '''Use object's global coordinates for duplication
         @returns: boolean
      '''
      
      use_hair_bspline = bool
      '''Interpolate hair using B-Splines
         @returns: boolean
      '''
      
      use_modifier_stack = bool
      '''Emit particles from mesh with modifiers applied (must use same subsurf level for viewport and render for correct results)
         @returns: boolean
      '''
      
      use_multiply_size_mass = bool
      '''Multiply mass by particle size
         @returns: boolean
      '''
      
      use_parent_particles = bool
      '''Render parent particles
         @returns: boolean
      '''
      
      use_react_multiple = bool
      '''React multiple times
         @returns: boolean
      '''
      
      use_react_start_end = bool
      '''Give birth to unreacted particles eventually
         @returns: boolean
      '''
      
      use_regrow_hair = bool
      '''Regrow hair for each frame
         @returns: boolean
      '''
      
      use_render_adaptive = bool
      '''Draw steps of the particle path
         @returns: boolean
      '''
      
      use_rotation_instance = bool
      '''Use object's rotation for duplication (global x-axis is aligned particle rotation axis)
         @returns: boolean
      '''
      
      use_rotations = bool
      '''Calculate particle rotations
         @returns: boolean
      '''
      
      use_roughness_curve = bool
      '''Use a curve to define roughness
         @returns: boolean
      '''
      
      use_scale_instance = bool
      '''Use object's scale for duplication
         @returns: boolean
      '''
      
      use_self_effect = bool
      '''Particle effectors affect themselves
         @returns: boolean
      '''
      
      use_size_deflect = bool
      '''Use particle's size in deflection
         @returns: boolean
      '''
      
      use_strand_primitive = bool
      '''Use the strand primitive for rendering
         @returns: boolean
      '''
      
      use_twist_curve = bool
      '''Use a curve to define twist
         @returns: boolean
      '''
      
      use_velocity_length = bool
      '''Multiply line length by particle speed
         @returns: boolean
      '''
      
      use_whole_collection = bool
      '''Use whole collection at once
         @returns: boolean
      '''
      
      userjit = int
      '''Emission locations / face (0 = automatic)
         @returns: int in [0, 1000]
      '''
      
      virtual_parents = float
      '''Relative amount of virtual parents
         @returns: float in [0, 1]
      '''
      
   class ParticleSettingsTextureSlot(types.TextureSlot):
      '''Texture slot for textures in a Particle Settings data-block
      '''
   
      clump_factor = float
      '''Amount texture affects child clump
         @returns: float in [-inf, inf]
      '''
      
      damp_factor = float
      '''Amount texture affects particle damping
         @returns: float in [-inf, inf]
      '''
      
      density_factor = float
      '''Amount texture affects particle density
         @returns: float in [-inf, inf]
      '''
      
      field_factor = float
      '''Amount texture affects particle force fields
         @returns: float in [-inf, inf]
      '''
      
      gravity_factor = float
      '''Amount texture affects particle gravity
         @returns: float in [-inf, inf]
      '''
      
      kink_amp_factor = float
      '''Amount texture affects child kink amplitude
         @returns: float in [-inf, inf]
      '''
      
      kink_freq_factor = float
      '''Amount texture affects child kink frequency
         @returns: float in [-inf, inf]
      '''
      
      length_factor = float
      '''Amount texture affects child hair length
         @returns: float in [-inf, inf]
      '''
      
      life_factor = float
      '''Amount texture affects particle life time
         @returns: float in [-inf, inf]
      '''
      
      mapping = str
      '''
         @returns: enum in ['FLAT', 'CUBE', 'TUBE', 'SPHERE']
      '''
      
      mapping_x = str
      '''
         @returns: enum in ['NONE', 'X', 'Y', 'Z']
      '''
      
      mapping_y = str
      '''
         @returns: enum in ['NONE', 'X', 'Y', 'Z']
      '''
      
      mapping_z = str
      '''
         @returns: enum in ['NONE', 'X', 'Y', 'Z']
      '''
      
      object = types.Object
      '''Object to use for mapping with Object texture coordinates
         @returns: Object
      '''
      
      rough_factor = float
      '''Amount texture affects child roughness
         @returns: float in [-inf, inf]
      '''
      
      size_factor = float
      '''Amount texture affects physical particle size
         @returns: float in [-inf, inf]
      '''
      
      texture_coords = str
      '''Texture coordinates used to map the texture onto the background
         @returns: enum in ['GLOBAL', 'OBJECT', 'UV', 'ORCO', 'STRAND']
      '''
      
      time_factor = float
      '''Amount texture affects particle emission time
         @returns: float in [-inf, inf]
      '''
      
      twist_factor = float
      '''Amount texture affects child twist
         @returns: float in [-inf, inf]
      '''
      
      use_map_clump = bool
      '''Affect the child clumping
         @returns: boolean
      '''
      
      use_map_damp = bool
      '''Affect the particle velocity damping
         @returns: boolean
      '''
      
      use_map_density = bool
      '''Affect the density of the particles
         @returns: boolean
      '''
      
      use_map_field = bool
      '''Affect the particle force fields
         @returns: boolean
      '''
      
      use_map_gravity = bool
      '''Affect the particle gravity
         @returns: boolean
      '''
      
      use_map_kink_amp = bool
      '''Affect the child kink amplitude
         @returns: boolean
      '''
      
      use_map_kink_freq = bool
      '''Affect the child kink frequency
         @returns: boolean
      '''
      
      use_map_length = bool
      '''Affect the child hair length
         @returns: boolean
      '''
      
      use_map_life = bool
      '''Affect the life time of the particles
         @returns: boolean
      '''
      
      use_map_rough = bool
      '''Affect the child rough
         @returns: boolean
      '''
      
      use_map_size = bool
      '''Affect the particle size
         @returns: boolean
      '''
      
      use_map_time = bool
      '''Affect the emission time of the particles
         @returns: boolean
      '''
      
      use_map_twist = bool
      '''Affect the child twist
         @returns: boolean
      '''
      
      use_map_velocity = bool
      '''Affect the particle initial velocity
         @returns: boolean
      '''
      
      uv_layer = str
      '''UV map to use for mapping with UV texture coordinates
         @returns: string, (never None)
      '''
      
      velocity_factor = float
      '''Amount texture affects particle initial velocity
         @returns: float in [-inf, inf]
      '''
      
   class ParticleSettingsTextureSlots(types.bpy_struct):
      '''Collection of texture slots
      '''
   
      @classmethod
      def add():
         '''add
            @returns (types.ParticleSettingsTextureSlot): The newly initialized mtex
               
         '''
      
         return types.ParticleSettingsTextureSlot

      @classmethod
      def create(index):
         '''create
            Arguments:
            @index (int): Slot index to initialize
               in [0, inf]
      
            @returns (types.ParticleSettingsTextureSlot): The newly initialized mtex
               
         '''
      
         return types.ParticleSettingsTextureSlot

      @classmethod
      def clear(index):
         '''clear
            Arguments:
            @index (int): Slot index to clear
               in [0, inf]
      
         '''
      
         pass

   class ParticleSystem(types.bpy_struct):
      '''Particle system in an object
      '''
   
      active_particle_target = types.ParticleTarget # (read only)
      '''
         @returns: ParticleTarget
      '''
      
      active_particle_target_index = int
      '''
         @returns: int in [0, inf]
      '''
      
      child_particles = types.ChildParticle # (read only)
      '''Child particles generated by the particle system
         @returns: Collection of ChildParticle
      '''
      
      child_seed = int
      '''Offset in the random number table for child particles, to get a different randomized result
         @returns: int in [0, inf]
      '''
      
      cloth = types.ClothModifier # (read only)
      '''Cloth dynamics for hair
         @returns: ClothModifier, (never None)
      '''
      
      dt_frac = float # (read only)
      '''The current simulation time step size, as a fraction of a frame
         @returns: float in [0.00990099, 1]
      '''
      
      has_multiple_caches = bool # (read only)
      '''Particle system has multiple point caches
         @returns: boolean
      '''
      
      invert_vertex_group_clump = bool
      '''Negate the effect of the clump vertex group
         @returns: boolean
      '''
      
      invert_vertex_group_density = bool
      '''Negate the effect of the density vertex group
         @returns: boolean
      '''
      
      invert_vertex_group_field = bool
      '''Negate the effect of the field vertex group
         @returns: boolean
      '''
      
      invert_vertex_group_kink = bool
      '''Negate the effect of the kink vertex group
         @returns: boolean
      '''
      
      invert_vertex_group_length = bool
      '''Negate the effect of the length vertex group
         @returns: boolean
      '''
      
      invert_vertex_group_rotation = bool
      '''Negate the effect of the rotation vertex group
         @returns: boolean
      '''
      
      invert_vertex_group_roughness_1 = bool
      '''Negate the effect of the roughness 1 vertex group
         @returns: boolean
      '''
      
      invert_vertex_group_roughness_2 = bool
      '''Negate the effect of the roughness 2 vertex group
         @returns: boolean
      '''
      
      invert_vertex_group_roughness_end = bool
      '''Negate the effect of the roughness end vertex group
         @returns: boolean
      '''
      
      invert_vertex_group_size = bool
      '''Negate the effect of the size vertex group
         @returns: boolean
      '''
      
      invert_vertex_group_tangent = bool
      '''Negate the effect of the tangent vertex group
         @returns: boolean
      '''
      
      invert_vertex_group_twist = bool
      '''Negate the effect of the twist vertex group
         @returns: boolean
      '''
      
      invert_vertex_group_velocity = bool
      '''Negate the effect of the velocity vertex group
         @returns: boolean
      '''
      
      is_editable = bool # (read only)
      '''Particle system can be edited in particle mode
         @returns: boolean
      '''
      
      is_edited = bool # (read only)
      '''Particle system has been edited in particle mode
         @returns: boolean
      '''
      
      is_global_hair = bool # (read only)
      '''Hair keys are in global coordinate space
         @returns: boolean
      '''
      
      name = str
      '''Particle system name
         @returns: string, (never None)
      '''
      
      parent = types.Object
      '''Use this object's coordinate system instead of global coordinate system
         @returns: Object
      '''
      
      particles = types.Particle # (read only)
      '''Particles generated by the particle system
         @returns: Collection of Particle
      '''
      
      point_cache = types.PointCache # (read only)
      '''
         @returns: PointCache, (never None)
      '''
      
      reactor_target_object = types.Object
      '''For reactor systems, the object that has the target particle system (empty if same object)
         @returns: Object
      '''
      
      reactor_target_particle_system = int
      '''For reactor systems, index of particle system on the target object
         @returns: int in [1, 32767]
      '''
      
      seed = int
      '''Offset in the random number table, to get a different randomized result
         @returns: int in [0, inf]
      '''
      
      settings = types.ParticleSettings
      '''Particle system settings
         @returns: ParticleSettings, (never None)
      '''
      
      targets = types.ParticleTarget # (read only)
      '''Target particle systems
         @returns: Collection of ParticleTarget
      '''
      
      use_hair_dynamics = bool
      '''Enable hair dynamics using cloth simulation
         @returns: boolean
      '''
      
      use_keyed_timing = bool
      '''Use key times
         @returns: boolean
      '''
      
      vertex_group_clump = str
      '''Vertex group to control clump
         @returns: string, (never None)
      '''
      
      vertex_group_density = str
      '''Vertex group to control density
         @returns: string, (never None)
      '''
      
      vertex_group_field = str
      '''Vertex group to control field
         @returns: string, (never None)
      '''
      
      vertex_group_kink = str
      '''Vertex group to control kink
         @returns: string, (never None)
      '''
      
      vertex_group_length = str
      '''Vertex group to control length
         @returns: string, (never None)
      '''
      
      vertex_group_rotation = str
      '''Vertex group to control rotation
         @returns: string, (never None)
      '''
      
      vertex_group_roughness_1 = str
      '''Vertex group to control roughness 1
         @returns: string, (never None)
      '''
      
      vertex_group_roughness_2 = str
      '''Vertex group to control roughness 2
         @returns: string, (never None)
      '''
      
      vertex_group_roughness_end = str
      '''Vertex group to control roughness end
         @returns: string, (never None)
      '''
      
      vertex_group_size = str
      '''Vertex group to control size
         @returns: string, (never None)
      '''
      
      vertex_group_tangent = str
      '''Vertex group to control tangent
         @returns: string, (never None)
      '''
      
      vertex_group_twist = str
      '''Vertex group to control twist
         @returns: string, (never None)
      '''
      
      vertex_group_velocity = str
      '''Vertex group to control velocity
         @returns: string, (never None)
      '''
      
      def co_hair(object, particle_no=0, step=0):
         '''Obtain cache hair data
            Arguments:
            @object (Object): Object
               (never None)
            @particle_no (int): in [-inf, inf], (optional)
            @step (int): in [-inf, inf], (optional)
      
            @returns (float): Exported hairkey location
               array of 3 items in [-inf, inf]
         '''
      
         return float

      def uv_on_emitter(modifier, particle=None, particle_no=0, uv_no=0):
         '''Obtain uv for all particles
            Arguments:
            @modifier (ParticleSystemModifier): Particle modifier
               (never None)
            @particle (Particle): Particle
               (optional)
            @particle_no (int): in [-inf, inf], (optional)
            @uv_no (int): in [-inf, inf], (optional)
      
            @returns (float): array of 2 items in [-inf, inf]
         '''
      
         return float

      def mcol_on_emitter(modifier, particle, particle_no=0, vcol_no=0):
         '''Obtain mcol for all particles
            Arguments:
            @modifier (ParticleSystemModifier): Particle modifier
               (never None)
            @particle (Particle): Particle
               (never None)
            @particle_no (int): in [-inf, inf], (optional)
            @vcol_no (int): in [-inf, inf], (optional)
      
            @returns (float): array of 3 items in [0, inf]
         '''
      
         return float

   class ParticleSystemModifier(types.Modifier):
      '''Particle system simulation modifier
      '''
   
      particle_system = types.ParticleSystem # (read only)
      '''Particle System that this modifier controls
         @returns: ParticleSystem, (never None)
      '''
      
   class ParticleSystems(types.bpy_struct):
      '''Collection of particle systems
      '''
   
      active = types.ParticleSystem # (read only)
      '''Active particle system being displayed
         @returns: ParticleSystem
      '''
      
      active_index = int
      '''Index of active particle system slot
         @returns: int in [0, inf]
      '''
      
   class ParticleTarget(types.bpy_struct):
      '''Target particle system
      '''
   
      alliance = str
      '''
         @returns: enum in ['FRIEND', 'NEUTRAL', 'ENEMY']
      '''
      
      duration = float
      '''
         @returns: float in [0, 1.04857e+06]
      '''
      
      is_valid = bool
      '''Keyed particles target is valid
         @returns: boolean
      '''
      
      name = str # (read only)
      '''Particle target name
         @returns: string, (never None)
      '''
      
      object = types.Object
      '''The object that has the target particle system (empty if same object)
         @returns: Object
      '''
      
      system = int
      '''The index of particle system on the target object
         @returns: int in [1, inf]
      '''
      
      time = float
      '''
         @returns: float in [0, 1.04857e+06]
      '''
      
   class PathCompare(types.bpy_struct):
      '''Match paths against this value
      '''
   
      path = str
      '''
         @returns: string, (never None)
      '''
      
      use_glob = bool
      '''Enable wildcard globbing
         @returns: boolean
      '''
      
   class PathCompareCollection(types.bpy_struct):
      '''Collection of paths
      '''
   
      @classmethod
      def new():
         '''Add a new path
            @returns (types.PathCompare): 
         '''
      
         return types.PathCompare

      @classmethod
      def remove(pathcmp):
         '''Remove path
            Arguments:
            @pathcmp (PathCompare): (never None)
      
         '''
      
         pass

   class PivotConstraint(types.Constraint):
      '''Rotate around a different point
      '''
   
      head_tail = float
      '''Target along length of bone: Head=0, Tail=1
         @returns: float in [0, 1]
      '''
      
      offset = float
      '''Offset of pivot from target (when set), or from owner's location (when Fixed Position is off), or the absolute pivot point
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      rotation_range = str
      '''Rotation range on which pivoting should occur
         @returns: enum in ['ALWAYS_ACTIVE', 'NX', 'NY', 'NZ', 'X', 'Y', 'Z']
      '''
      
      subtarget = str
      '''
         @returns: string, (never None)
      '''
      
      target = types.Object
      '''Target Object, defining the position of the pivot when defined
         @returns: Object
      '''
      
      use_bbone_shape = bool
      '''Follow shape of B-Bone segments when calculating Head/Tail position
         @returns: boolean
      '''
      
      use_relative_location = bool
      '''Offset will be an absolute point in space instead of relative to the target
         @returns: boolean
      '''
      
   class PointCache(types.bpy_struct):
      '''Active point cache for physics simulations
      '''
   
      compression = str
      '''Compression method to be used
         @returns: enum in ['NO', 'LIGHT', 'HEAVY']
      '''
      
      filepath = str
      '''Cache file path
         @returns: string, (never None)
      '''
      
      frame_end = int
      '''Frame on which the simulation stops
         @returns: int in [1, 1048574]
      '''
      
      frame_start = int
      '''Frame on which the simulation starts
         @returns: int in [-1048574, 1048574]
      '''
      
      frame_step = int
      '''Number of frames between cached frames
         @returns: int in [1, 20]
      '''
      
      index = int
      '''Index number of cache files
         @returns: int in [-1, 100]
      '''
      
      info = str # (read only)
      '''Info on current cache status
         @returns: string, (never None)
      '''
      
      is_baked = bool # (read only)
      '''
         @returns: boolean
      '''
      
      is_baking = bool # (read only)
      '''
         @returns: boolean
      '''
      
      is_frame_skip = bool # (read only)
      '''
         @returns: boolean
      '''
      
      is_outdated = bool # (read only)
      '''
         @returns: boolean
      '''
      
      name = str
      '''Cache name
         @returns: string, (never None)
      '''
      
      point_caches = types.PointCaches # (read only)
      '''
         @returns: PointCaches Collection of PointCacheItem
      '''
      
      use_disk_cache = bool
      '''Save cache files to disk (.blend file must be saved first)
         @returns: boolean
      '''
      
      use_external = bool
      '''Read cache from an external location
         @returns: boolean
      '''
      
      use_library_path = bool
      '''Use this file's path for the disk cache when library linked into another file (for local bakes per scene file, disable this option)
         @returns: boolean
      '''
      
   class PointCacheItem(types.bpy_struct):
      '''Point cache for physics simulations
      '''
   
      compression = str
      '''Compression method to be used
         @returns: enum in ['NO', 'LIGHT', 'HEAVY']
      '''
      
      filepath = str
      '''Cache file path
         @returns: string, (never None)
      '''
      
      frame_end = int
      '''Frame on which the simulation stops
         @returns: int in [1, 1048574]
      '''
      
      frame_start = int
      '''Frame on which the simulation starts
         @returns: int in [-1048574, 1048574]
      '''
      
      frame_step = int
      '''Number of frames between cached frames
         @returns: int in [1, 20]
      '''
      
      index = int
      '''Index number of cache files
         @returns: int in [-1, 100]
      '''
      
      info = str # (read only)
      '''Info on current cache status
         @returns: string, (never None)
      '''
      
      is_baked = bool # (read only)
      '''
         @returns: boolean
      '''
      
      is_baking = bool # (read only)
      '''
         @returns: boolean
      '''
      
      is_frame_skip = bool # (read only)
      '''
         @returns: boolean
      '''
      
      is_outdated = bool # (read only)
      '''
         @returns: boolean
      '''
      
      name = str
      '''Cache name
         @returns: string, (never None)
      '''
      
      use_disk_cache = bool
      '''Save cache files to disk (.blend file must be saved first)
         @returns: boolean
      '''
      
      use_external = bool
      '''Read cache from an external location
         @returns: boolean
      '''
      
      use_library_path = bool
      '''Use this file's path for the disk cache when library linked into another file (for local bakes per scene file, disable this option)
         @returns: boolean
      '''
      
   class PointCaches(types.bpy_struct):
      '''Collection of point caches
      '''
   
      active_index = int
      '''
         @returns: int in [0, inf]
      '''
      
   class PointLight(types.Light):
      '''Omnidirectional point Light
      '''
   
      constant_coefficient = float
      '''Constant distance attenuation coefficient
         @returns: float in [0, inf]
      '''
      
      contact_shadow_bias = float
      '''Bias to avoid self shadowing
         @returns: float in [0.001, 9999]
      '''
      
      contact_shadow_distance = float
      '''World space distance in which to search for screen space occluder
         @returns: float in [0, 9999]
      '''
      
      contact_shadow_thickness = float
      '''Pixel thickness used to detect occlusion
         @returns: float in [0, 9999]
      '''
      
      energy = float
      '''Amount of light emitted
         @returns: float in [-inf, inf]
      '''
      
      falloff_curve = types.CurveMapping # (read only)
      '''Custom light falloff curve
         @returns: CurveMapping
      '''
      
      falloff_type = str
      '''Intensity Decay with distance
         @returns: enum in ['CONSTANT', 'INVERSE_LINEAR', 'INVERSE_SQUARE', 'INVERSE_COEFFICIENTS', 'CUSTOM_CURVE', 'LINEAR_QUADRATIC_WEIGHTED']
      '''
      
      linear_attenuation = float
      '''Linear distance attenuation
         @returns: float in [0, 1]
      '''
      
      linear_coefficient = float
      '''Linear distance attenuation coefficient
         @returns: float in [0, inf]
      '''
      
      quadratic_attenuation = float
      '''Quadratic distance attenuation
         @returns: float in [0, 1]
      '''
      
      quadratic_coefficient = float
      '''Quadratic distance attenuation coefficient
         @returns: float in [0, inf]
      '''
      
      shadow_buffer_bias = float
      '''Bias for reducing self shadowing
         @returns: float in [0, inf]
      '''
      
      shadow_buffer_clip_start = float
      '''Shadow map clip start, below which objects will not generate shadows
         @returns: float in [1e-06, inf]
      '''
      
      shadow_buffer_samples = int
      '''Number of shadow buffer samples
         @returns: int in [1, 16]
      '''
      
      shadow_buffer_size = int
      '''Resolution of the shadow buffer, higher values give crisper shadows but use more memory
         @returns: int in [128, 10240]
      '''
      
      shadow_color = float
      '''Color of shadows cast by the light
         @returns: float array of 3 items in [0, inf]
      '''
      
      shadow_soft_size = float
      '''Light size for ray shadow sampling (Raytraced shadows)
         @returns: float in [0, inf]
      '''
      
      use_contact_shadow = bool
      '''Use screen space raytracing to have correct shadowing near occluder, or for small features that does not appear in shadow maps
         @returns: boolean
      '''
      
      use_shadow = bool
      '''
         @returns: boolean
      '''
      
   class PointerProperty(types.Property):
      '''RNA pointer property to point to another RNA struct
      '''
   
      fixed_type = types.Struct # (read only)
      '''Fixed pointer type, empty if variable type
         @returns: Struct
      '''
      
   class PolygonFloatProperties(types.bpy_struct):
      '''Collection of float properties
      '''
   
      def new(name="Float Prop"):
         '''Add a float property layer to Mesh
            Arguments:
            @name (str): Float property name
               (optional, never None)
      
            @returns (types.MeshPolygonFloatPropertyLayer): The newly created layer
               
         '''
      
         return types.MeshPolygonFloatPropertyLayer

   class PolygonIntProperties(types.bpy_struct):
      '''Collection of int properties
      '''
   
      def new(name="Int Prop"):
         '''Add a integer property layer to Mesh
            Arguments:
            @name (str): Int property name
               (optional, never None)
      
            @returns (types.MeshPolygonIntPropertyLayer): The newly created layer
               
         '''
      
         return types.MeshPolygonIntPropertyLayer

   class PolygonStringProperties(types.bpy_struct):
      '''Collection of string properties
      '''
   
      def new(name="String Prop"):
         '''Add a string property layer to Mesh
            Arguments:
            @name (str): String property name
               (optional, never None)
      
            @returns (types.MeshPolygonStringPropertyLayer): The newly created layer
               
         '''
      
         return types.MeshPolygonStringPropertyLayer

   class Pose(types.bpy_struct):
      '''A collection of pose channels, including settings for animating bones
      '''
   
      animation_visualization = types.AnimViz # (read only)
      '''Animation data for this data-block
         @returns: AnimViz, (never None)
      '''
      
      bone_groups = types.BoneGroups # (read only)
      '''Groups of the bones
         @returns: BoneGroups Collection of BoneGroup
      '''
      
      bones = types.PoseBone # (read only)
      '''Individual pose bones for the armature
         @returns: Collection of PoseBone
      '''
      
      ik_param = types.IKParam # (read only)
      '''Parameters for IK solver
         @returns: IKParam
      '''
      
      ik_solver = str
      '''Selection of IK solver for IK chain
         @returns: enum in ['LEGACY', 'ITASC']
      '''
      
      use_auto_ik = bool
      '''Add temporary IK constraints while grabbing bones in Pose Mode
         @returns: boolean
      '''
      
      use_mirror_relative = bool
      '''Apply relative transformations in X-mirror mode (not supported with Auto IK)
         @returns: boolean
      '''
      
      use_mirror_x = bool
      '''Apply changes to matching bone on opposite side of X-Axis
         @returns: boolean
      '''
      
   class PoseBone(types.bpy_struct):
      '''Channel defining pose data for a bone in a Pose
      '''
   
      bbone_curveinx = float
      '''X-axis handle offset for start of the B-Bone's curve, adjusts curvature
         @returns: float in [-inf, inf]
      '''
      
      bbone_curveiny = float
      '''Y-axis handle offset for start of the B-Bone's curve, adjusts curvature
         @returns: float in [-inf, inf]
      '''
      
      bbone_curveoutx = float
      '''X-axis handle offset for end of the B-Bone's curve, adjusts curvature
         @returns: float in [-inf, inf]
      '''
      
      bbone_curveouty = float
      '''Y-axis handle offset for end of the B-Bone's curve, adjusts curvature
         @returns: float in [-inf, inf]
      '''
      
      bbone_custom_handle_end = types.PoseBone # (read only)
      '''Bone that serves as the end handle for the B-Bone curve
         @returns: PoseBone
      '''
      
      bbone_custom_handle_start = types.PoseBone # (read only)
      '''Bone that serves as the start handle for the B-Bone curve
         @returns: PoseBone
      '''
      
      bbone_easein = float
      '''Length of first Bezier Handle (for B-Bones only)
         @returns: float in [-inf, inf]
      '''
      
      bbone_easeout = float
      '''Length of second Bezier Handle (for B-Bones only)
         @returns: float in [-inf, inf]
      '''
      
      bbone_rollin = float
      '''Roll offset for the start of the B-Bone, adjusts twist
         @returns: float in [-inf, inf]
      '''
      
      bbone_rollout = float
      '''Roll offset for the end of the B-Bone, adjusts twist
         @returns: float in [-inf, inf]
      '''
      
      bbone_scaleinx = float
      '''X-axis scale factor for start of the B-Bone, adjusts thickness (for tapering effects)
         @returns: float in [-inf, inf]
      '''
      
      bbone_scaleiny = float
      '''Y-axis scale factor for start of the B-Bone, adjusts thickness (for tapering effects)
         @returns: float in [-inf, inf]
      '''
      
      bbone_scaleoutx = float
      '''X-axis scale factor for end of the B-Bone, adjusts thickness (for tapering effects)
         @returns: float in [-inf, inf]
      '''
      
      bbone_scaleouty = float
      '''Y-axis scale factor for end of the B-Bone, adjusts thickness (for tapering effects)
         @returns: float in [-inf, inf]
      '''
      
      bone = types.Bone # (read only)
      '''Bone associated with this PoseBone
         @returns: Bone, (never None)
      '''
      
      bone_group = types.BoneGroup
      '''Bone Group this pose channel belongs to
         @returns: BoneGroup
      '''
      
      bone_group_index = int
      '''Bone Group this pose channel belongs to (0=no group)
         @returns: int in [-32768, 32767]
      '''
      
      child = types.PoseBone # (read only)
      '''Child of this pose bone
         @returns: PoseBone
      '''
      
      constraints = types.PoseBoneConstraints # (read only)
      '''Constraints that act on this PoseChannel
         @returns: PoseBoneConstraints Collection of Constraint
      '''
      
      custom_shape = types.Object
      '''Object that defines custom draw type for this bone
         @returns: Object
      '''
      
      custom_shape_scale = float
      '''Adjust the size of the custom shape
         @returns: float in [0, 1000]
      '''
      
      custom_shape_transform = types.PoseBone
      '''Bone that defines the display transform of this custom shape
         @returns: PoseBone
      '''
      
      head = float # (read only)
      '''Location of head of the channel's bone
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      ik_linear_weight = float
      '''Weight of scale constraint for IK
         @returns: float in [0, 1]
      '''
      
      ik_max_x = float
      '''Maximum angles for IK Limit
         @returns: float in [0, 3.14159]
      '''
      
      ik_max_y = float
      '''Maximum angles for IK Limit
         @returns: float in [0, 3.14159]
      '''
      
      ik_max_z = float
      '''Maximum angles for IK Limit
         @returns: float in [0, 3.14159]
      '''
      
      ik_min_x = float
      '''Minimum angles for IK Limit
         @returns: float in [-3.14159, 0]
      '''
      
      ik_min_y = float
      '''Minimum angles for IK Limit
         @returns: float in [-3.14159, 0]
      '''
      
      ik_min_z = float
      '''Minimum angles for IK Limit
         @returns: float in [-3.14159, 0]
      '''
      
      ik_rotation_weight = float
      '''Weight of rotation constraint for IK
         @returns: float in [0, 1]
      '''
      
      ik_stiffness_x = float
      '''IK stiffness around the X axis
         @returns: float in [0, 0.99]
      '''
      
      ik_stiffness_y = float
      '''IK stiffness around the Y axis
         @returns: float in [0, 0.99]
      '''
      
      ik_stiffness_z = float
      '''IK stiffness around the Z axis
         @returns: float in [0, 0.99]
      '''
      
      ik_stretch = float
      '''Allow scaling of the bone for IK
         @returns: float in [0, 1]
      '''
      
      is_in_ik_chain = bool # (read only)
      '''Is part of an IK chain
         @returns: boolean
      '''
      
      length = float # (read only)
      '''Length of the bone
         @returns: float in [-inf, inf]
      '''
      
      location = float
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      lock_ik_x = bool
      '''Disallow movement around the X axis
         @returns: boolean
      '''
      
      lock_ik_y = bool
      '''Disallow movement around the Y axis
         @returns: boolean
      '''
      
      lock_ik_z = bool
      '''Disallow movement around the Z axis
         @returns: boolean
      '''
      
      lock_location = bool
      '''Lock editing of location when transforming
         @returns: boolean array of 3 items
      '''
      
      lock_rotation = bool
      '''Lock editing of rotation when transforming
         @returns: boolean array of 3 items
      '''
      
      lock_rotation_w = bool
      '''Lock editing of 'angle' component of four-component rotations when transforming
         @returns: boolean
      '''
      
      lock_rotations_4d = bool
      '''Lock editing of four component rotations by components (instead of as Eulers)
         @returns: boolean
      '''
      
      lock_scale = bool
      '''Lock editing of scale when transforming
         @returns: boolean array of 3 items
      '''
      
      matrix = float
      '''Final 4x4 matrix after constraints and drivers are applied (object space)
         @returns: float multi-dimensional array of 4 * 4 items in [-inf, inf]
      '''
      
      matrix_basis = float
      '''Alternative access to location/scale/rotation relative to the parent and own rest bone
         @returns: float multi-dimensional array of 4 * 4 items in [-inf, inf]
      '''
      
      matrix_channel = float # (read only)
      '''4x4 matrix, before constraints
         @returns: float multi-dimensional array of 4 * 4 items in [-inf, inf]
      '''
      
      motion_path = types.MotionPath # (read only)
      '''Motion Path for this element
         @returns: MotionPath
      '''
      
      name = str
      '''
         @returns: string, (never None)
      '''
      
      parent = types.PoseBone # (read only)
      '''Parent of this pose bone
         @returns: PoseBone
      '''
      
      rotation_axis_angle = float
      '''Angle of Rotation for Axis-Angle rotation representation
         @returns: float array of 4 items in [-inf, inf]
      '''
      
      rotation_euler = float
      '''Rotation in Eulers
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      rotation_mode = str
      '''
         @returns: enum in ['QUATERNION', 'XYZ', 'XZY', 'YXZ', 'YZX', 'ZXY', 'ZYX', 'AXIS_ANGLE']
      '''
      
      rotation_quaternion = float
      '''Rotation in Quaternions
         @returns: float array of 4 items in [-inf, inf]
      '''
      
      scale = float
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      tail = float # (read only)
      '''Location of tail of the channel's bone
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      use_custom_shape_bone_size = bool
      '''Scale the custom object by the bone length
         @returns: boolean
      '''
      
      use_ik_limit_x = bool
      '''Limit movement around the X axis
         @returns: boolean
      '''
      
      use_ik_limit_y = bool
      '''Limit movement around the Y axis
         @returns: boolean
      '''
      
      use_ik_limit_z = bool
      '''Limit movement around the Z axis
         @returns: boolean
      '''
      
      use_ik_linear_control = bool
      '''Apply channel size as IK constraint if stretching is enabled
         @returns: boolean
      '''
      
      use_ik_rotation_control = bool
      '''Apply channel rotation as IK constraint
         @returns: boolean
      '''
      
      basename = None # (readonly)
      '''The name of this bone before any '.' character
         
      '''
      
      
      center = None # (readonly)
      '''The midpoint between the head and the tail.
         
      '''
      
      
      children = None # (readonly)
      
      
      
      children_recursive = None # (readonly)
      '''A list of all children from this bone. Warning: takes O(len(bones)**2) time.
         
      '''
      
      
      children_recursive_basename = None # (readonly)
      '''Returns a chain of children with the same base name as this bone.
         Only direct chains are supported, forks caused by multiple children
         with matching base names will terminate the function
         and not be returned. Warning: takes O(len(bones)**2) time.
         
      '''
      
      
      parent_recursive = None # (readonly)
      '''A list of parents, starting with the immediate parent
         
      '''
      
      
      vector = None # (readonly)
      '''The direction this bone is pointing.
         Utility function for (tail - head)
         
      '''
      
      
      x_axis = None # (readonly)
      '''Vector pointing down the x-axis of the bone.
         
      '''
      
      
      y_axis = None # (readonly)
      '''Vector pointing down the y-axis of the bone.
         
      '''
      
      
      z_axis = None # (readonly)
      '''Vector pointing down the z-axis of the bone.
         
      '''
      
      
      def evaluate_envelope(point):
         '''Calculate bone envelope at given point
            Arguments:
            @point (float): Position in 3d space to evaluate
               array of 3 items in [-inf, inf]
      
            @returns (float): Envelope factor
               in [-inf, inf]
         '''
      
         return float

      def bbone_segment_matrix(index, rest=False):
         '''Retrieve the matrix of the joint between B-Bone segments if available
            Arguments:
            @index (int): Index of the segment endpoint
               in [0, inf]
            @rest (bool): Return the rest pose matrix
               (optional)
      
            @returns (float): The resulting matrix in bone local space
               multi-dimensional array of 4 * 4 items in [-inf, inf]
         '''
      
         return float

      def compute_bbone_handles(rest=False, ease=False, offsets=False):
         '''Retrieve the vectors and rolls coming from B-Bone custom handles
            Arguments:
            @rest (bool): Return the rest pose state
               (optional)
            @ease (bool): Apply scale from ease values
               (optional)
            @offsets (bool): Apply roll and curve offsets from bone properties
               (optional)
      
            @returns: 
            (
               handle1(float):The direction vector of the start handle in bone local space
               array of 3 items in [-inf, inf]
               roll1(float):Roll of the start handle
               in [-inf, inf]
               handle2(float):The direction vector of the end handle in bone local space
               array of 3 items in [-inf, inf]
               roll2(float):Roll of the end handle
               in [-inf, inf]
            )
         '''
      
         pass

      def parent_index(self, parent_test):
         '''The same as 'bone in other_bone.parent_recursive'
            but saved generating a list.
            
         '''
      
         pass
      
      def translate(self, vec):
         '''Utility function to add *vec* to the head and tail of this bone
            
         '''
      
         pass
      
   class PoseBoneConstraints(types.bpy_struct):
      '''Collection of pose bone constraints
      '''
   
      active = types.Constraint
      '''Active PoseChannel constraint
         @returns: Constraint
      '''
      
      def new(type):
         '''Add a constraint to this object
            Arguments:
            @type (str): Constraint type to add
               in ['CAMERA_SOLVER', 'FOLLOW_TRACK', 'OBJECT_SOLVER', 'COPY_LOCATION', 'COPY_ROTATION', 'COPY_SCALE', 'COPY_TRANSFORMS', 'LIMIT_DISTANCE', 'LIMIT_LOCATION', 'LIMIT_ROTATION', 'LIMIT_SCALE', 'MAINTAIN_VOLUME', 'TRANSFORM', 'TRANSFORM_CACHE', 'CLAMP_TO', 'DAMPED_TRACK', 'IK', 'LOCKED_TRACK', 'SPLINE_IK', 'STRETCH_TO', 'TRACK_TO', 'ACTION', 'ARMATURE', 'CHILD_OF', 'FLOOR', 'FOLLOW_PATH', 'PIVOT', 'SHRINKWRAP']
      
            @returns (types.Constraint): New constraint
               
         '''
      
         return types.Constraint

      def remove(constraint):
         '''Remove a constraint from this object
            Arguments:
            @constraint (Constraint): Removed constraint
               (never None)
      
         '''
      
         pass

      def move(from_index, to_index):
         '''Move a constraint to a different position
            Arguments:
            @from_index (int): Index to move
               in [-inf, inf]
            @to_index (int): Target index
               in [-inf, inf]
      
         '''
      
         pass

   class Preferences(types.bpy_struct):
      '''Global preferences
      '''
   
      active_section = str
      '''Active section of the preferences shown in the user interface
         @returns: enum in ['INTERFACE', 'THEMES', 'VIEWPORT', 'LIGHTS', 'EDITING', 'ANIMATION', 'ADDONS', 'INPUT', 'NAVIGATION', 'KEYMAP', 'SYSTEM', 'SAVE_LOAD', 'FILE_PATHS', 'EXPERIMENTAL']
      '''
      
      addons = types.Addons # (read only)
      '''
         @returns: Addons Collection of Addon
      '''
      
      app_template = str
      '''
         @returns: string, (never None)
      '''
      
      autoexec_paths = types.PathCompareCollection # (read only)
      '''
         @returns: PathCompareCollection Collection of PathCompare
      '''
      
      edit = types.PreferencesEdit # (read only)
      '''Settings for interacting with Blender data
         @returns: PreferencesEdit, (never None)
      '''
      
      experimental = types.PreferencesExperimental # (read only)
      '''Settings for features that are still early in their development stage
         @returns: PreferencesExperimental, (never None)
      '''
      
      filepaths = types.PreferencesFilePaths # (read only)
      '''Default paths for external files
         @returns: PreferencesFilePaths, (never None)
      '''
      
      inputs = types.PreferencesInput # (read only)
      '''Settings for input devices
         @returns: PreferencesInput, (never None)
      '''
      
      is_dirty = bool
      '''Preferences have changed
         @returns: boolean
      '''
      
      keymap = types.PreferencesKeymap # (read only)
      '''Shortcut setup for keyboards and other input devices
         @returns: PreferencesKeymap, (never None)
      '''
      
      studio_lights = types.StudioLights # (read only)
      '''
         @returns: StudioLights Collection of StudioLight
      '''
      
      system = types.PreferencesSystem # (read only)
      '''Graphics driver and operating system settings
         @returns: PreferencesSystem, (never None)
      '''
      
      themes = types.Theme # (read only)
      '''
         @returns: Collection of Theme
      '''
      
      ui_styles = types.ThemeStyle # (read only)
      '''
         @returns: Collection of ThemeStyle
      '''
      
      use_preferences_save = bool
      '''Save preferences on exit when modified (unless factory settings have been loaded)
         @returns: boolean
      '''
      
      version = int # (read only)
      '''Version of Blender the userpref.blend was saved with
         @returns: int array of 3 items in [0, inf]
      '''
      
      view = types.PreferencesView # (read only)
      '''Preferences related to viewing data
         @returns: PreferencesView, (never None)
      '''
      
   class PreferencesEdit(types.bpy_struct):
      '''Settings for interacting with Blender data
      '''
   
      auto_keying_mode = str
      '''Mode of automatic keyframe insertion for Objects and Bones (default setting used for new Scenes)
         @returns: enum in ['ADD_REPLACE_KEYS', 'REPLACE_KEYS']
      '''
      
      fcurve_new_auto_smoothing = str
      '''Auto Handle Smoothing mode used for newly added F-Curves
         @returns: enum in ['NONE', 'CONT_ACCEL']
      '''
      
      fcurve_unselected_alpha = float
      '''Amount that unselected F-Curves stand out from the background (Graph Editor)
         @returns: float in [0.001, 1]
      '''
      
      grease_pencil_default_color = float
      '''Color of new annotation layers
         @returns: float array of 4 items in [0, inf]
      '''
      
      grease_pencil_eraser_radius = int
      '''Radius of eraser 'brush'
         @returns: int in [1, 500]
      '''
      
      grease_pencil_euclidean_distance = int
      '''Distance moved by mouse when drawing stroke to include
         @returns: int in [0, 100]
      '''
      
      grease_pencil_manhattan_distance = int
      '''Pixels moved by mouse per axis when drawing stroke
         @returns: int in [0, 100]
      '''
      
      keyframe_new_handle_type = str
      '''Handle type for handles of new keyframes
         @returns: enum in ['FREE', 'ALIGNED', 'VECTOR', 'AUTO', 'AUTO_CLAMPED']
      '''
      
      keyframe_new_interpolation_type = str
      '''Interpolation mode used for first keyframe on newly added F-Curves (subsequent keyframes take interpolation from preceding keyframe)
         @returns: enum in ['CONSTANT', 'LINEAR', 'BEZIER', 'SINE', 'QUAD', 'CUBIC', 'QUART', 'QUINT', 'EXPO', 'CIRC', 'BACK', 'BOUNCE', 'ELASTIC']
      '''
      
      material_link = str
      '''Toggle whether the material is linked to object data or the object block
         @returns: enum in ['OBDATA', 'OBJECT']
      '''
      
      node_margin = int
      '''Minimum distance between nodes for Auto-offsetting nodes
         @returns: int in [0, 255]
      '''
      
      object_align = str
      '''When adding objects from a 3D View menu, either align them with that view or with the world
         @returns: enum in ['WORLD', 'VIEW', 'CURSOR']
      '''
      
      sculpt_paint_overlay_color = float
      '''Color of texture overlay
         @returns: float array of 3 items in [0, inf]
      '''
      
      undo_memory_limit = int
      '''Maximum memory usage in megabytes (0 means unlimited)
         @returns: int in [0, inf]
      '''
      
      undo_steps = int
      '''Number of undo steps available (smaller values conserve memory)
         @returns: int in [0, 256]
      '''
      
      use_auto_keying = bool
      '''Automatic keyframe insertion for Objects and Bones (default setting used for new Scenes)
         @returns: boolean
      '''
      
      use_auto_keying_warning = bool
      '''Show warning indicators when transforming objects and bones if auto keying is enabled
         @returns: boolean
      '''
      
      use_cursor_lock_adjust = bool
      '''Place the cursor without 'jumping' to the new location (when lock-to-cursor is used)
         @returns: boolean
      '''
      
      use_duplicate_action = bool
      '''Causes actions to be duplicated with the object
         @returns: boolean
      '''
      
      use_duplicate_armature = bool
      '''Causes armature data to be duplicated with the object
         @returns: boolean
      '''
      
      use_duplicate_curve = bool
      '''Causes curve data to be duplicated with the object
         @returns: boolean
      '''
      
      use_duplicate_grease_pencil = bool
      '''Causes grease pencil data to be duplicated with the object
         @returns: boolean
      '''
      
      use_duplicate_light = bool
      '''Causes light data to be duplicated with the object
         @returns: boolean
      '''
      
      use_duplicate_lightprobe = bool
      '''Causes light probe data to be duplicated with the object
         @returns: boolean
      '''
      
      use_duplicate_material = bool
      '''Causes material data to be duplicated with the object
         @returns: boolean
      '''
      
      use_duplicate_mesh = bool
      '''Causes mesh data to be duplicated with the object
         @returns: boolean
      '''
      
      use_duplicate_metaball = bool
      '''Causes metaball data to be duplicated with the object
         @returns: boolean
      '''
      
      use_duplicate_particle = bool
      '''Causes particle systems to be duplicated with the object
         @returns: boolean
      '''
      
      use_duplicate_surface = bool
      '''Causes surface data to be duplicated with the object
         @returns: boolean
      '''
      
      use_duplicate_text = bool
      '''Causes text data to be duplicated with the object
         @returns: boolean
      '''
      
      use_duplicate_volume = bool
      '''Causes volume data to be duplicated with the object
         @returns: boolean
      '''
      
      use_enter_edit_mode = bool
      '''Enter Edit Mode automatically after adding a new object
         @returns: boolean
      '''
      
      use_global_undo = bool
      '''Global undo works by keeping a full copy of the file itself in memory, so takes extra memory
         @returns: boolean
      '''
      
      use_insertkey_xyz_to_rgb = bool
      '''Color for newly added transformation F-Curves (Location, Rotation, Scale) and also Color is based on the transform axis
         @returns: boolean
      '''
      
      use_keyframe_insert_available = bool
      '''Automatic keyframe insertion in available F-Curves
         @returns: boolean
      '''
      
      use_keyframe_insert_needed = bool
      '''Keyframe insertion only when keyframe needed
         @returns: boolean
      '''
      
      use_mouse_depth_cursor = bool
      '''Use the surface depth for cursor placement
         @returns: boolean
      '''
      
      use_negative_frames = bool
      '''Current frame number can be manually set to a negative value
         @returns: boolean
      '''
      
      use_visual_keying = bool
      '''Use Visual keying automatically for constrained objects
         @returns: boolean
      '''
      
   class PreferencesExperimental(types.bpy_struct):
      '''Experimental features
      '''
   
      use_menu_search = bool
      '''Search actions by menus instead of operators
         @returns: boolean
      '''
      
      use_undo_legacy = bool
      '''Use legacy undo (slower than the new default one, but may be more stable in some cases)
         @returns: boolean
      '''
      
   class PreferencesFilePaths(types.bpy_struct):
      '''Default paths for external files
      '''
   
      animation_player = str
      '''Path to a custom animation/frame sequence player
         @returns: string, (never None)
      '''
      
      animation_player_preset = str
      '''Preset configs for external animation players
         @returns: enum in ['INTERNAL', 'DJV', 'FRAMECYCLER', 'RV', 'MPLAYER', 'CUSTOM']
      '''
      
      auto_save_time = int
      '''The time (in minutes) to wait between automatic temporary saves
         @returns: int in [1, 60]
      '''
      
      font_directory = str
      '''The default directory to search for loading fonts
         @returns: string, (never None)
      '''
      
      hide_recent_locations = bool
      '''Hide recent locations in the file selector
         @returns: boolean
      '''
      
      hide_system_bookmarks = bool
      '''Hide system bookmarks in the file selector
         @returns: boolean
      '''
      
      i18n_branches_directory = str
      '''The path to the '/branches' directory of your local svn-translation copy, to allow translating from the UI
         @returns: string, (never None)
      '''
      
      image_editor = str
      '''Path to an image editor
         @returns: string, (never None)
      '''
      
      recent_files = int
      '''Maximum number of recently opened files to remember
         @returns: int in [0, 30]
      '''
      
      render_cache_directory = str
      '''Where to cache raw render results
         @returns: string, (never None)
      '''
      
      render_output_directory = str
      '''The default directory for rendering output, for new scenes
         @returns: string, (never None)
      '''
      
      save_version = int
      '''The number of old versions to maintain in the current directory, when manually saving
         @returns: int in [0, 32]
      '''
      
      script_directory = str
      '''Alternate script path, matching the default layout with subdirs: startup, add-ons & modules (requires restart)
         @returns: string, (never None)
      '''
      
      show_hidden_files_datablocks = bool
      '''Hide files and data-blocks if their name start with a dot (.*)
         @returns: boolean
      '''
      
      sound_directory = str
      '''The default directory to search for sounds
         @returns: string, (never None)
      '''
      
      temporary_directory = str
      '''The directory for storing temporary save files
         @returns: string, (never None)
      '''
      
      texture_directory = str
      '''The default directory to search for textures
         @returns: string, (never None)
      '''
      
      use_auto_save_temporary_files = bool
      '''Automatic saving of temporary files in temp directory, uses process ID (sculpt & edit-mode data won't be saved!)
         @returns: boolean
      '''
      
      use_file_compression = bool
      '''Enable file compression when saving .blend files
         @returns: boolean
      '''
      
      use_filter_files = bool
      '''Display only files with extensions in the image select window
         @returns: boolean
      '''
      
      use_load_ui = bool
      '''Load user interface setup when loading .blend files
         @returns: boolean
      '''
      
      use_relative_paths = bool
      '''Default relative path option for the file selector
         @returns: boolean
      '''
      
      use_save_preview_images = bool
      '''Enables automatic saving of preview images in the .blend file
         @returns: boolean
      '''
      
      use_scripts_auto_execute = bool
      '''Allow any .blend file to run scripts automatically (unsafe with blend files from an untrusted source)
         @returns: boolean
      '''
      
      use_tabs_as_spaces = bool
      '''Automatically convert all new tabs into spaces for new and loaded text files
         @returns: boolean
      '''
      
   class PreferencesInput(types.bpy_struct):
      '''Settings for input devices
      '''
   
      drag_threshold = int
      '''Number of pixels to drag before a drag event is triggered for keyboard and other non mouse/tablet input (otherwise click events are detected)
         @returns: int in [1, 255]
      '''
      
      drag_threshold_mouse = int
      '''Number of pixels to drag before a tweak/drag event is triggered for mouse/track-pad input (otherwise click events are detected)
         @returns: int in [1, 255]
      '''
      
      drag_threshold_tablet = int
      '''Number of pixels to drag before a tweak/drag event is triggered for tablet input (otherwise click events are detected)
         @returns: int in [1, 255]
      '''
      
      invert_mouse_zoom = bool
      '''Invert the axis of mouse movement for zooming
         @returns: boolean
      '''
      
      invert_zoom_wheel = bool
      '''Swap the Mouse Wheel zoom direction
         @returns: boolean
      '''
      
      mouse_double_click_time = int
      '''Time/delay (in ms) for a double click
         @returns: int in [1, 1000]
      '''
      
      mouse_emulate_3_button_modifier = str
      '''Hold this modifier to emulate the middle mouse button
         @returns: enum in ['ALT', 'OSKEY']
      '''
      
      move_threshold = int
      '''Number of pixels to before the cursor is considered to have moved (used for cycling selected items on successive clicks)
         @returns: int in [0, 255]
      '''
      
      navigation_mode = str
      '''Which method to use for viewport navigation
         @returns: enum in ['WALK', 'FLY']
      '''
      
      ndof_deadzone = float
      '''Threshold of initial movement needed from the device's rest position
         @returns: float in [0, 1]
      '''
      
      ndof_fly_helicopter = bool
      '''Device up/down directly controls your Z position
         @returns: boolean
      '''
      
      ndof_lock_horizon = bool
      '''Keep horizon level while flying with 3D Mouse
         @returns: boolean
      '''
      
      ndof_orbit_sensitivity = float
      '''Overall sensitivity of the 3D Mouse for orbiting
         @returns: float in [0.01, 40]
      '''
      
      ndof_pan_yz_swap_axis = bool
      '''Pan using up/down on the device (otherwise forward/backward)
         @returns: boolean
      '''
      
      ndof_panx_invert_axis = bool
      '''
         @returns: boolean
      '''
      
      ndof_pany_invert_axis = bool
      '''
         @returns: boolean
      '''
      
      ndof_panz_invert_axis = bool
      '''
         @returns: boolean
      '''
      
      ndof_rotx_invert_axis = bool
      '''
         @returns: boolean
      '''
      
      ndof_roty_invert_axis = bool
      '''
         @returns: boolean
      '''
      
      ndof_rotz_invert_axis = bool
      '''
         @returns: boolean
      '''
      
      ndof_sensitivity = float
      '''Overall sensitivity of the 3D Mouse for panning
         @returns: float in [0.01, 40]
      '''
      
      ndof_show_guide = bool
      '''Display the center and axis during rotation
         @returns: boolean
      '''
      
      ndof_view_navigate_method = str
      '''Navigation style in the viewport
         @returns: enum in ['FREE', 'ORBIT']
      '''
      
      ndof_view_rotate_method = str
      '''Rotation style in the viewport
         @returns: enum in ['TURNTABLE', 'TRACKBALL']
      '''
      
      ndof_zoom_invert = bool
      '''Zoom using opposite direction
         @returns: boolean
      '''
      
      pressure_softness = float
      '''Adjusts softness of the low pressure response onset using a gamma curve
         @returns: float in [-inf, inf]
      '''
      
      pressure_threshold_max = float
      '''Raw input pressure value that is interpreted as 100% by Blender
         @returns: float in [0, 1]
      '''
      
      tablet_api = str
      '''Select the tablet API to use for pressure sensitivity
         @returns: enum in ['AUTOMATIC', 'WINDOWS_INK', 'WINTAB']
      '''
      
      use_auto_perspective = bool
      '''Automatically switch between orthographic and perspective when changing from top/front/side views
         @returns: boolean
      '''
      
      use_camera_lock_parent = bool
      '''When the camera is locked to the view and in fly mode, transform the parent rather than the camera
         @returns: boolean
      '''
      
      use_drag_immediately = bool
      '''Moving things with a mouse drag confirms when releasing the button
         @returns: boolean
      '''
      
      use_emulate_numpad = bool
      '''Main 1 to 0 keys act as the numpad ones (useful for laptops)
         @returns: boolean
      '''
      
      use_mouse_continuous = bool
      '''Allow moving the mouse outside the view on some manipulations (transform, ui control drag)
         @returns: boolean
      '''
      
      use_mouse_depth_navigate = bool
      '''Use the depth under the mouse to improve view pan/rotate/zoom functionality
         @returns: boolean
      '''
      
      use_mouse_emulate_3_button = bool
      '''Emulate Middle Mouse with Alt+Left Mouse
         @returns: boolean
      '''
      
      use_ndof = bool # (read only)
      '''
         @returns: boolean
      '''
      
      use_numeric_input_advanced = bool
      '''When entering numbers while transforming, default to advanced mode for full math expression evaluation
         @returns: boolean
      '''
      
      use_rotate_around_active = bool
      '''Use selection as the pivot point
         @returns: boolean
      '''
      
      use_trackpad_natural = bool
      '''If your system uses 'natural' scrolling, this option keeps consistent trackpad usage throughout the UI
         @returns: boolean
      '''
      
      use_zoom_to_mouse = bool
      '''Zoom in towards the mouse pointer's position in the 3D view, rather than the 2D window center
         @returns: boolean
      '''
      
      view_rotate_method = str
      '''Orbit method in the viewport
         @returns: enum in ['TURNTABLE', 'TRACKBALL']
      '''
      
      view_rotate_sensitivity_trackball = float
      '''Scale trackball orbit sensitivity
         @returns: float in [0.1, 10]
      '''
      
      view_rotate_sensitivity_turntable = float
      '''Rotation amount per-pixel to control how fast the viewport orbits
         @returns: float in [1.74533e-05, 0.261799]
      '''
      
      view_zoom_axis = str
      '''Axis of mouse movement to zoom in or out on
         @returns: enum in ['VERTICAL', 'HORIZONTAL']
      '''
      
      view_zoom_method = str
      '''Which style to use for viewport scaling
         @returns: enum in ['CONTINUE', 'DOLLY', 'SCALE']
      '''
      
      walk_navigation = types.WalkNavigation # (read only)
      '''Settings for walk navigation mode
         @returns: WalkNavigation, (never None)
      '''
      
      wheel_scroll_lines = int
      '''Number of lines scrolled at a time with the mouse wheel
         @returns: int in [0, 32]
      '''
      
   class PreferencesKeymap(types.bpy_struct):
      '''Shortcut setup for keyboards and other input devices
      '''
   
      active_keyconfig = str
      '''The name of the active key configuration
         @returns: string, (never None)
      '''
      
      show_ui_keyconfig = bool
      '''
         @returns: boolean
      '''
      
   class PreferencesSystem(types.bpy_struct):
      '''Graphics driver and operating system settings
      '''
   
      anisotropic_filter = str
      '''Quality of the anisotropic filtering (values greater than 1.0 enable anisotropic filtering)
         @returns: enum in ['FILTER_0', 'FILTER_2', 'FILTER_4', 'FILTER_8', 'FILTER_16']
      '''
      
      audio_channels = str
      '''Audio channel count
         @returns: enum in ['MONO', 'STEREO', 'SURROUND4', 'SURROUND51', 'SURROUND71']
      '''
      
      audio_device = str
      '''Audio output device
         @returns: enum in ['Null']
      '''
      
      audio_mixing_buffer = str
      '''Number of samples used by the audio mixing buffer
         @returns: enum in ['SAMPLES_256', 'SAMPLES_512', 'SAMPLES_1024', 'SAMPLES_2048', 'SAMPLES_4096', 'SAMPLES_8192', 'SAMPLES_16384', 'SAMPLES_32768']
      '''
      
      audio_sample_format = str
      '''Audio sample format
         @returns: enum in ['U8', 'S16', 'S24', 'S32', 'FLOAT', 'DOUBLE']
      '''
      
      audio_sample_rate = str
      '''Audio sample rate
         @returns: enum in ['RATE_44100', 'RATE_48000', 'RATE_96000', 'RATE_192000']
      '''
      
      dpi = int # (read only)
      '''
         @returns: int in [-inf, inf]
      '''
      
      gl_clip_alpha = float
      '''Clip alpha below this threshold in the 3D textured view
         @returns: float in [0, 1]
      '''
      
      gl_texture_limit = str
      '''Limit the texture size to save graphics memory
         @returns: enum in ['CLAMP_OFF', 'CLAMP_8192', 'CLAMP_4096', 'CLAMP_2048', 'CLAMP_1024', 'CLAMP_512', 'CLAMP_256', 'CLAMP_128']
      '''
      
      image_draw_method = str
      '''Method used for displaying images on the screen
         @returns: enum in ['AUTO', '2DTEXTURE', 'GLSL']
      '''
      
      legacy_compute_device_type = int # (read only)
      '''For backwards compatibility only
         @returns: int in [-inf, inf]
      '''
      
      light_ambient = float
      '''Color of the ambient light that uniformly lit the scene
         @returns: float array of 3 items in [0, inf]
      '''
      
      memory_cache_limit = int
      '''Memory cache limit (in megabytes)
         @returns: int in [0, inf]
      '''
      
      opensubdiv_compute_type = str
      '''Type of computer back-end used with OpenSubdiv
         @returns: enum in ['NONE', 'CPU']
      '''
      
      pixel_size = float # (read only)
      '''
         @returns: float in [-inf, inf]
      '''
      
      scrollback = int
      '''Maximum number of lines to store for the console buffer
         @returns: int in [32, 32768]
      '''
      
      sequencer_disk_cache_compression = str
      '''Smaller compression will result in larger files, but less decoding overhead
         @returns: enum in ['NONE', 'LOW', 'HIGH']
      '''
      
      sequencer_disk_cache_dir = str
      '''Override default directory
         @returns: string, (never None)
      '''
      
      sequencer_disk_cache_size_limit = int
      '''Disk cache limit (in gigabytes)
         @returns: int in [0, inf]
      '''
      
      solid_lights = types.UserSolidLight # (read only)
      '''Lights user to display objects in solid draw mode
         @returns: Collection of UserSolidLight
      '''
      
      texture_collection_rate = int
      '''Number of seconds between each run of the GL texture garbage collector
         @returns: int in [1, 3600]
      '''
      
      texture_time_out = int
      '''Time since last access of a GL texture in seconds after which it is freed (set to 0 to keep textures allocated)
         @returns: int in [0, 3600]
      '''
      
      ui_line_width = float # (read only)
      '''Suggested line thickness and point size in pixels, for add-ons drawing custom user interface elements, based on operating system settings and Blender UI scale
         @returns: float in [-inf, inf]
      '''
      
      ui_scale = float # (read only)
      '''Size multiplier to use when drawing custom user interface elements, so that they are scaled correctly on screens with different DPI. This value is based on operating system DPI settings and Blender display scale
         @returns: float in [-inf, inf]
      '''
      
      use_edit_mode_smooth_wire = bool
      '''Enable Edit-Mode edge smoothing, reducing aliasing, requires restart
         @returns: boolean
      '''
      
      use_overlay_smooth_wire = bool
      '''Enable overlay smooth wires, reducing aliasing
         @returns: boolean
      '''
      
      use_region_overlap = bool
      '''Draw tool/property regions over the main region
         @returns: boolean
      '''
      
      use_select_pick_depth = bool
      '''Use the depth buffer for picking 3D View selection (without this the front most object may not be selected first)
         @returns: boolean
      '''
      
      use_sequencer_disk_cache = bool
      '''Store cached images to disk
         @returns: boolean
      '''
      
      use_studio_light_edit = bool
      '''View the result of the studio light editor in the viewport
         @returns: boolean
      '''
      
      vbo_collection_rate = int
      '''Number of seconds between each run of the GL Vertex buffer object garbage collector
         @returns: int in [1, 3600]
      '''
      
      vbo_time_out = int
      '''Time since last access of a GL Vertex buffer object in seconds after which it is freed (set to 0 to keep vbo allocated)
         @returns: int in [0, 3600]
      '''
      
      viewport_aa = str
      '''Method of anti-aliasing in 3d viewport
         @returns: enum in ['OFF', 'FXAA', '5', '8', '11', '16', '32']
      '''
      
   class PreferencesView(types.bpy_struct):
      '''Preferences related to viewing data
      '''
   
      color_picker_type = str
      '''Different styles of displaying the color picker widget
         @returns: enum in ['CIRCLE_HSV', 'CIRCLE_HSL', 'SQUARE_SV', 'SQUARE_HS', 'SQUARE_HV']
      '''
      
      factor_display_type = str
      '''How factor values are displayed
         @returns: enum in ['FACTOR', 'PERCENTAGE']
      '''
      
      filebrowser_display_type = str
      '''Default location where the File Editor will be displayed in
         @returns: enum in ['SCREEN', 'WINDOW']
      '''
      
      font_path_ui = str
      '''Path to interface font
         @returns: string, (never None)
      '''
      
      font_path_ui_mono = str
      '''Path to interface mono-space Font
         @returns: string, (never None)
      '''
      
      gizmo_size = int
      '''Diameter of the gizmo
         @returns: int in [10, 200]
      '''
      
      header_align = str
      '''Default header position for new space-types
         @returns: enum in ['NONE', 'TOP', 'BOTTOM']
      '''
      
      language = str
      '''Language used for translation
         @returns: enum in ['DEFAULT']
      '''
      
      lookdev_sphere_size = int
      '''Diameter of the HDRI preview spheres
         @returns: int in [50, 400]
      '''
      
      mini_axis_brightness = int
      '''Brightness of the icon
         @returns: int in [0, 10]
      '''
      
      mini_axis_size = int
      '''The axes icon's size
         @returns: int in [10, 64]
      '''
      
      mini_axis_type = str
      '''Show a small rotating 3D axes in the top right corner of the 3D View
         @returns: enum in ['NONE', 'MINIMAL', 'GIZMO']
      '''
      
      open_sublevel_delay = int
      '''Time delay in 1/10 seconds before automatically opening sub level menus
         @returns: int in [1, 40]
      '''
      
      open_toplevel_delay = int
      '''Time delay in 1/10 seconds before automatically opening top level menus
         @returns: int in [1, 40]
      '''
      
      pie_animation_timeout = int
      '''Time needed to fully animate the pie to unfolded state (in 1/100ths of sec)
         @returns: int in [0, 1000]
      '''
      
      pie_initial_timeout = int
      '''Pie menus will use the initial mouse position as center for this amount of time (in 1/100ths of sec)
         @returns: int in [0, 1000]
      '''
      
      pie_menu_confirm = int
      '''Distance threshold after which selection is made (zero to disable)
         @returns: int in [0, 1000]
      '''
      
      pie_menu_radius = int
      '''Pie menu size in pixels
         @returns: int in [0, 1000]
      '''
      
      pie_menu_threshold = int
      '''Distance from center needed before a selection can be made
         @returns: int in [0, 1000]
      '''
      
      pie_tap_timeout = int
      '''Pie menu button held longer than this will dismiss menu on release.(in 1/100ths of sec)
         @returns: int in [0, 1000]
      '''
      
      render_display_type = str
      '''Default location where rendered images will be displayed in
         @returns: enum in ['NONE', 'SCREEN', 'AREA', 'WINDOW']
      '''
      
      rotation_angle = float
      '''Rotation step for numerical pad keys (2 4 6 8)
         @returns: float in [0, 90]
      '''
      
      show_addons_enabled_only = bool
      '''Only show enabled add-ons. Un-check to see all installed add-ons
         @returns: boolean
      '''
      
      show_column_layout = bool
      '''Use a column layout for toolbox
         @returns: boolean
      '''
      
      show_developer_ui = bool
      '''Show options for developers (edit source in context menu, geometry indices)
         @returns: boolean
      '''
      
      show_gizmo = bool
      '''Use transform gizmos by default
         @returns: boolean
      '''
      
      show_layout_ui = bool
      '''Split and join editors by dragging from corners
         @returns: boolean
      '''
      
      show_navigate_ui = bool
      '''Show navigation controls in 2D & 3D views which do not have scroll bars
         @returns: boolean
      '''
      
      show_object_info = bool
      '''Display objects name and frame number in 3D view
         @returns: boolean
      '''
      
      show_playback_fps = bool
      '''Show the frames per second screen refresh rate, while animation is played back
         @returns: boolean
      '''
      
      show_splash = bool
      '''Display splash screen on startup
         @returns: boolean
      '''
      
      show_tooltips = bool
      '''Display tooltips (when off hold Alt to force display)
         @returns: boolean
      '''
      
      show_tooltips_python = bool
      '''Show Python references in tooltips
         @returns: boolean
      '''
      
      show_view_name = bool
      '''Show the name of the view's direction in each 3D View
         @returns: boolean
      '''
      
      smooth_view = int
      '''Time to animate the view in milliseconds, zero to disable
         @returns: int in [0, 1000]
      '''
      
      text_hinting = str
      '''Method for making user interface text render sharp
         @returns: enum in ['AUTO', 'NONE', 'SLIGHT', 'FULL']
      '''
      
      timecode_style = str
      '''Format of Time Codes displayed when not displaying timing in terms of frames
         @returns: enum in ['MINIMAL', 'SMPTE', 'SMPTE_COMPACT', 'MILLISECONDS', 'SECONDS_ONLY']
      '''
      
      ui_line_width = str
      '''Changes the thickness of widget outlines, lines and points in the interface, for high DPI displays
         @returns: enum in ['THIN', 'AUTO', 'THICK']
      '''
      
      ui_scale = float
      '''Changes the size of the fonts and widgets in the interface
         @returns: float in [0.25, 4]
      '''
      
      use_directional_menus = bool
      '''Otherwise menus, etc will always be top to bottom, left to right, no matter opening direction
         @returns: boolean
      '''
      
      use_mouse_over_open = bool
      '''Open menu buttons and pulldowns automatically when the mouse is hovering
         @returns: boolean
      '''
      
      use_save_prompt = bool
      '''Ask for confirmation when quitting with unsaved changes
         @returns: boolean
      '''
      
      use_text_antialiasing = bool
      '''Draw user interface text anti-aliased
         @returns: boolean
      '''
      
      use_translate_interface = bool
      '''Translate all labels in menus, buttons and panels (note that this might make it hard to follow tutorials or the manual)
         @returns: boolean
      '''
      
      use_translate_new_dataname = bool
      '''Translate the names of new data-blocks (objects, materials...)
         @returns: boolean
      '''
      
      use_translate_tooltips = bool
      '''Translate the descriptions when hovering UI elements (recommended)
         @returns: boolean
      '''
      
      use_weight_color_range = bool
      '''Enable color range used for weight visualization in weight painting mode
         @returns: boolean
      '''
      
      view2d_grid_spacing_min = int
      '''Minimum number of pixels between each gridline in 2D Viewports
         @returns: int in [1, 500]
      '''
      
      view_frame_keyframes = int
      '''Keyframes around cursor that we zoom around
         @returns: int in [1, 500]
      '''
      
      view_frame_seconds = float
      '''Seconds around cursor that we zoom around
         @returns: float in [0, 10000]
      '''
      
      view_frame_type = str
      '''How zooming to frame focuses around current frame
         @returns: enum in ['KEEP_RANGE', 'SECONDS', 'KEYFRAMES']
      '''
      
      weight_color_range = types.ColorRamp # (read only)
      '''Color range used for weight visualization in weight painting mode
         @returns: ColorRamp, (never None)
      '''
      
   class Property(types.bpy_struct):
      '''RNA property definition
      '''
   
      description = str # (read only)
      '''Description of the property for tooltips
         @returns: string, (never None)
      '''
      
      icon = str # (read only)
      '''Icon of the item
         @returns: enum in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_RIGHT', 'DISCLOSURE_TRI_DOWN', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'DUPLICATE', 'TRASH', 'COLLECTION_NEW', 'OPTIONS', 'NODE', 'NODE_SEL', 'WINDOW', 'WORKSPACE', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ADD', 'REMOVE', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'CHECKMARK', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'FCURVE_SNAPSHOT', 'OBJECT_HIDDEN', 'TOPBAR', 'STATUSBAR', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'UNLINKED', 'LINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'DRIVER_DISTANCE', 'DRIVER_ROTATIONAL_DIFFERENCE', 'DRIVER_TRANSFORM', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'FILE_NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'THREE_DOTS', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BRUSHES_ALL', 'LIGHT', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'OUTPUT', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TOOL_SETTINGS', 'SHADERFX', 'MODIFIER', 'BLANK1', 'FAKE_USER_OFF', 'FAKE_USER_ON', 'VIEW3D', 'GRAPH', 'OUTLINER', 'PROPERTIES', 'FILEBROWSER', 'IMAGE', 'INFO', 'SEQUENCE', 'TEXT', 'SOUND', 'ACTION', 'NLA', 'PREFERENCES', 'TIME', 'NODETREE', 'CONSOLE', 'TRACKER', 'ASSET_MANAGER', 'NODE_COMPOSITING', 'NODE_TEXTURE', 'NODE_MATERIAL', 'UV', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'UV_DATA', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'TRACKING', 'TRACKING_BACKWARDS', 'TRACKING_FORWARDS', 'TRACKING_BACKWARDS_SINGLE', 'TRACKING_FORWARDS_SINGLE', 'TRACKING_CLEAR_BACKWARDS', 'TRACKING_CLEAR_FORWARDS', 'TRACKING_REFINE_BACKWARDS', 'TRACKING_REFINE_FORWARDS', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LIGHT_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'COMMUNITY', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'EXPERIMENTAL', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'PRESET', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'LIBRARY_DATA_OVERRIDE', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'FACE_MAPS', 'RNA', 'RNA_ADD', 'MOUSE_LMB', 'MOUSE_MMB', 'MOUSE_RMB', 'MOUSE_MOVE', 'MOUSE_LMB_DRAG', 'MOUSE_MMB_DRAG', 'MOUSE_RMB_DRAG', 'MEMORY', 'PRESET_NEW', 'DECORATE', 'DECORATE_KEYFRAME', 'DECORATE_ANIMATE', 'DECORATE_DRIVER', 'DECORATE_LINKED', 'DECORATE_LIBRARY_OVERRIDE', 'DECORATE_UNLOCKED', 'DECORATE_LOCKED', 'DECORATE_OVERRIDE', 'FUND', 'TRACKER_DATA', 'HEART', 'ORPHAN_DATA', 'USER', 'SYSTEM', 'SETTINGS', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LIGHT', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'OUTLINER_OB_FORCE_FIELD', 'OUTLINER_OB_GROUP_INSTANCE', 'OUTLINER_OB_GREASEPENCIL', 'OUTLINER_OB_LIGHTPROBE', 'OUTLINER_OB_IMAGE', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'HIDE_ON', 'HIDE_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_RENDER_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_INSTANCED_OFF', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LIGHT', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_LIGHTPROBE', 'OUTLINER_DATA_GP_LAYER', 'OUTLINER_DATA_GREASEPENCIL', 'GP_SELECT_POINTS', 'GP_SELECT_STROKES', 'GP_MULTIFRAME_EDITING', 'GP_ONLY_SELECTED', 'GP_SELECT_BETWEEN_STROKES', 'MODIFIER_OFF', 'MODIFIER_ON', 'ONIONSKIN_OFF', 'ONIONSKIN_ON', 'RESTRICT_VIEW_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_INSTANCED_ON', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'EMPTY_SINGLE_ARROW', 'LIGHT_POINT', 'LIGHT_SUN', 'LIGHT_SPOT', 'LIGHT_HEMI', 'LIGHT_AREA', 'CUBE', 'SPHERE', 'CONE', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'EMPTY_AXIS', 'STROKE', 'EMPTY_ARROWS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'LIGHTPROBE_CUBEMAP', 'LIGHTPROBE_PLANAR', 'LIGHTPROBE_GRID', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'RIGID_BODY', 'RIGID_BODY_CONSTRAINT', 'IMAGE_PLANE', 'IMAGE_BACKGROUND', 'IMAGE_REFERENCE', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'NODE_TOP', 'NODE_SIDE', 'NODE_CORNER', 'ANCHOR_TOP', 'ANCHOR_BOTTOM', 'ANCHOR_LEFT', 'ANCHOR_RIGHT', 'ANCHOR_CENTER', 'SELECT_SET', 'SELECT_EXTEND', 'SELECT_SUBTRACT', 'SELECT_INTERSECT', 'SELECT_DIFFERENCE', 'ALIGN_LEFT', 'ALIGN_CENTER', 'ALIGN_RIGHT', 'ALIGN_JUSTIFY', 'ALIGN_FLUSH', 'ALIGN_TOP', 'ALIGN_MIDDLE', 'ALIGN_BOTTOM', 'BOLD', 'ITALIC', 'UNDERLINE', 'SMALL_CAPS', 'CON_ACTION', 'HOLDOUT_OFF', 'HOLDOUT_ON', 'INDIRECT_ONLY_OFF', 'INDIRECT_ONLY_ON', 'CON_CAMERASOLVER', 'CON_FOLLOWTRACK', 'CON_OBJECTSOLVER', 'CON_LOCLIKE', 'CON_ROTLIKE', 'CON_SIZELIKE', 'CON_TRANSLIKE', 'CON_DISTLIMIT', 'CON_LOCLIMIT', 'CON_ROTLIMIT', 'CON_SIZELIMIT', 'CON_SAMEVOL', 'CON_TRANSFORM', 'CON_TRANSFORM_CACHE', 'CON_CLAMPTO', 'CON_KINEMATIC', 'CON_LOCKTRACK', 'CON_SPLINEIK', 'CON_STRETCHTO', 'CON_TRACKTO', 'CON_ARMATURE', 'CON_CHILDOF', 'CON_FLOOR', 'CON_FOLLOWPATH', 'CON_PIVOT', 'CON_SHRINKWRAP', 'MODIFIER_DATA', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'MOD_TINT', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_FLUID', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'MOD_PARTICLE_INSTANCE', 'MOD_HUE_SATURATION', 'MOD_NOISE', 'MOD_OFFSET', 'MOD_SIMPLIFY', 'MOD_THICKNESS', 'MOD_INSTANCE', 'MOD_TIME', 'MOD_OPACITY', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_SOUND', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'KEYFRAME_HLT', 'KEYFRAME', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'CURSOR', 'PIVOT_BOUNDBOX', 'PIVOT_CURSOR', 'PIVOT_INDIVIDUAL', 'PIVOT_MEDIAN', 'PIVOT_ACTIVE', 'CENTER_ONLY', 'ROOTCURVE', 'SMOOTHCURVE', 'SPHERECURVE', 'INVERSESQUARECURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'PROP_PROJECTED', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'SNAP_FACE_CENTER', 'SNAP_PERPENDICULAR', 'SNAP_MIDPOINT', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'OBJECT_ORIGIN', 'ORIENTATION_GLOBAL', 'ORIENTATION_GIMBAL', 'ORIENTATION_LOCAL', 'ORIENTATION_NORMAL', 'ORIENTATION_VIEW', 'COPYDOWN', 'PASTEDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'VIS_SEL_11', 'VIS_SEL_10', 'VIS_SEL_01', 'VIS_SEL_00', 'AUTOMERGE_OFF', 'AUTOMERGE_ON', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'TRANSFORM_ORIGINS', 'GIZMO', 'ORIENTATION_CURSOR', 'NORMALS_VERTEX', 'NORMALS_FACE', 'NORMALS_VERTEX_FACE', 'SHADING_BBOX', 'SHADING_WIRE', 'SHADING_SOLID', 'SHADING_RENDERED', 'SHADING_TEXTURE', 'OVERLAY', 'XRAY', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'LAYER_USED', 'LAYER_ACTIVE', 'OUTLINER_OB_HAIR', 'OUTLINER_DATA_HAIR', 'HAIR_DATA', 'OUTLINER_OB_POINTCLOUD', 'OUTLINER_DATA_POINTCLOUD', 'POINTCLOUD_DATA', 'OUTLINER_OB_VOLUME', 'OUTLINER_DATA_VOLUME', 'VOLUME_DATA', 'HOME', 'DOCUMENTS', 'TEMP', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'SHORTDISPLAY', 'LONGDISPLAY', 'IMGDISPLAY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'FOLDER_REDIRECT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'SORT_DESC', 'SORT_ASC', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_ARCHIVE', 'FILE_CACHE', 'FILE_VOLUME', 'FILE_3D', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'MATSHADERBALL', 'MATCLOTH', 'MATFLUID', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'DISC', 'DESKTOP', 'EXTERNAL_DRIVE', 'NETWORK_DRIVE', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'SEQ_STRIP_META', 'SEQ_STRIP_DUPLICATE', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'HANDLE_AUTOCLAMPED', 'HANDLE_AUTO', 'HANDLE_ALIGNED', 'HANDLE_VECTOR', 'HANDLE_FREE', 'VIEW_PERSPECTIVE', 'VIEW_ORTHO', 'VIEW_CAMERA', 'VIEW_PAN', 'VIEW_ZOOM', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'GPBRUSH_SMOOTH', 'GPBRUSH_THICKNESS', 'GPBRUSH_STRENGTH', 'GPBRUSH_GRAB', 'GPBRUSH_PUSH', 'GPBRUSH_TWIST', 'GPBRUSH_PINCH', 'GPBRUSH_RANDOMIZE', 'GPBRUSH_CLONE', 'GPBRUSH_WEIGHT', 'GPBRUSH_PENCIL', 'GPBRUSH_PEN', 'GPBRUSH_INK', 'GPBRUSH_INKNOISE', 'GPBRUSH_BLOCK', 'GPBRUSH_MARKER', 'GPBRUSH_FILL', 'GPBRUSH_AIRBRUSH', 'GPBRUSH_CHISEL', 'GPBRUSH_ERASE_SOFT', 'GPBRUSH_ERASE_HARD', 'GPBRUSH_ERASE_STROKE', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'HANDLETYPE_FREE_VEC', 'HANDLETYPE_ALIGNED_VEC', 'HANDLETYPE_VECTOR_VEC', 'HANDLETYPE_AUTO_VEC', 'HANDLETYPE_AUTO_CLAMP_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC', 'EVENT_A', 'EVENT_B', 'EVENT_C', 'EVENT_D', 'EVENT_E', 'EVENT_F', 'EVENT_G', 'EVENT_H', 'EVENT_I', 'EVENT_J', 'EVENT_K', 'EVENT_L', 'EVENT_M', 'EVENT_N', 'EVENT_O', 'EVENT_P', 'EVENT_Q', 'EVENT_R', 'EVENT_S', 'EVENT_T', 'EVENT_U', 'EVENT_V', 'EVENT_W', 'EVENT_X', 'EVENT_Y', 'EVENT_Z', 'EVENT_SHIFT', 'EVENT_CTRL', 'EVENT_ALT', 'EVENT_OS', 'EVENT_F1', 'EVENT_F2', 'EVENT_F3', 'EVENT_F4', 'EVENT_F5', 'EVENT_F6', 'EVENT_F7', 'EVENT_F8', 'EVENT_F9', 'EVENT_F10', 'EVENT_F11', 'EVENT_F12', 'EVENT_ESC', 'EVENT_TAB', 'EVENT_PAGEUP', 'EVENT_PAGEDOWN', 'EVENT_RETURN', 'EVENT_SPACEKEY']
      '''
      
      identifier = str # (read only)
      '''Unique name used in the code and scripting
         @returns: string, (never None)
      '''
      
      is_animatable = bool # (read only)
      '''Property is animatable through RNA
         @returns: boolean
      '''
      
      is_argument_optional = bool # (read only)
      '''True when the property is optional in a Python function implementing an RNA function
         @returns: boolean
      '''
      
      is_enum_flag = bool # (read only)
      '''True when multiple enums
         @returns: boolean
      '''
      
      is_hidden = bool # (read only)
      '''True when the property is hidden
         @returns: boolean
      '''
      
      is_library_editable = bool # (read only)
      '''Property is editable from linked instances (changes not saved)
         @returns: boolean
      '''
      
      is_never_none = bool # (read only)
      '''True when this value can't be set to None
         @returns: boolean
      '''
      
      is_output = bool # (read only)
      '''True when this property is an output value from an RNA function
         @returns: boolean
      '''
      
      is_overridable = bool # (read only)
      '''Property is overridable through RNA
         @returns: boolean
      '''
      
      is_readonly = bool # (read only)
      '''Property is editable through RNA
         @returns: boolean
      '''
      
      is_registered = bool # (read only)
      '''Property is registered as part of type registration
         @returns: boolean
      '''
      
      is_registered_optional = bool # (read only)
      '''Property is optionally registered as part of type registration
         @returns: boolean
      '''
      
      is_required = bool # (read only)
      '''False when this property is an optional argument in an RNA function
         @returns: boolean
      '''
      
      is_runtime = bool # (read only)
      '''Property has been dynamically created at runtime
         @returns: boolean
      '''
      
      is_skip_save = bool # (read only)
      '''True when the property is not saved in presets
         @returns: boolean
      '''
      
      name = str # (read only)
      '''Human readable name
         @returns: string, (never None)
      '''
      
      srna = types.Struct # (read only)
      '''Struct definition used for properties assigned to this item
         @returns: Struct
      '''
      
      subtype = str # (read only)
      '''Semantic interpretation of the property
         @returns: enum in ['NONE', 'FILE_PATH', 'DIR_PATH', 'PIXEL', 'UNSIGNED', 'PERCENTAGE', 'FACTOR', 'ANGLE', 'TIME', 'DISTANCE', 'COLOR', 'TRANSLATION', 'DIRECTION', 'MATRIX', 'EULER', 'QUATERNION', 'XYZ', 'COLOR_GAMMA', 'COORDINATES', 'LAYER', 'LAYER_MEMBERSHIP']
      '''
      
      tags = str # (read only)
      '''Subset of tags (defined in parent struct) that are set for this property
         @returns: enum set in {}
      '''
      
      translation_context = str # (read only)
      '''Translation context of the property's name
         @returns: string, (never None)
      '''
      
      type = str # (read only)
      '''Data type of the property
         @returns: enum in ['BOOLEAN', 'INT', 'FLOAT', 'STRING', 'ENUM', 'POINTER', 'COLLECTION']
      '''
      
      unit = str # (read only)
      '''Type of units for this property
         @returns: enum in ['NONE', 'LENGTH', 'AREA', 'VOLUME', 'ROTATION', 'TIME', 'VELOCITY', 'ACCELERATION', 'MASS', 'CAMERA', 'POWER']
      '''
      
   class PropertyGroup(types.bpy_struct):
      '''Group of ID properties
      '''
   
      name = str
      '''Unique name used in the code and scripting
         @returns: string, (never None)
      '''
      
   class PropertyGroupItem(types.bpy_struct):
      '''Property that stores arbitrary, user defined properties
      '''
   
      collection = types.PropertyGroup # (read only)
      '''
         @returns: Collection of PropertyGroup
      '''
      
      double = float
      '''
         @returns: float in [-inf, inf]
      '''
      
      double_array = float
      '''
         @returns: float array of 1 items in [-inf, inf]
      '''
      
      float = float
      '''
         @returns: float in [-inf, inf]
      '''
      
      float_array = float
      '''
         @returns: float array of 1 items in [-inf, inf]
      '''
      
      group = types.PropertyGroup # (read only)
      '''
         @returns: PropertyGroup
      '''
      
      id = types.ID # (read only)
      '''
         @returns: ID
      '''
      
      idp_array = types.PropertyGroup # (read only)
      '''
         @returns: Collection of PropertyGroup
      '''
      
      int = int
      '''
         @returns: int in [-inf, inf]
      '''
      
      int_array = int
      '''
         @returns: int array of 1 items in [-inf, inf]
      '''
      
      string = str
      '''
         @returns: string, (never None)
      '''
      
   class PythonConstraint(types.Constraint):
      '''Use Python script for constraint evaluation
      '''
   
      has_script_error = bool # (read only)
      '''The linked Python script has thrown an error
         @returns: boolean
      '''
      
      target_count = int
      '''Usually only 1-3 are needed
         @returns: int in [-inf, inf]
      '''
      
      targets = types.ConstraintTarget # (read only)
      '''Target Objects
         @returns: Collection of ConstraintTarget
      '''
      
      text = types.Text
      '''The text object that contains the Python script
         @returns: Text
      '''
      
      use_targets = bool
      '''Use the targets indicated in the constraint panel
         @returns: boolean
      '''
      
   class RENDER_UL_renderviews(types.UIList):
      '''
      '''
   
      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, index):
         
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class Region(types.bpy_struct):
      '''Region in a subdivided screen area
      '''
   
      alignment = str # (read only)
      '''Alignment of the region within the area
         @returns: enum in ['NONE', 'TOP', 'BOTTOM', 'LEFT', 'RIGHT', 'HORIZONTAL_SPLIT', 'VERTICAL_SPLIT', 'FLOAT', 'QUAD_SPLIT']
      '''
      
      height = int # (read only)
      '''Region height
         @returns: int in [0, 32767]
      '''
      
      type = str # (read only)
      '''Type of this region
         @returns: enum in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW', 'HUD', 'NAVIGATION_BAR', 'EXECUTE', 'FOOTER', 'TOOL_HEADER']
      '''
      
      view2d = types.View2D # (read only)
      '''2D view of the region
         @returns: View2D, (never None)
      '''
      
      width = int # (read only)
      '''Region width
         @returns: int in [0, 32767]
      '''
      
      x = int # (read only)
      '''The window relative vertical location of the region
         @returns: int in [-inf, inf]
      '''
      
      y = int # (read only)
      '''The window relative horizontal location of the region
         @returns: int in [-inf, inf]
      '''
      
      def tag_redraw():
         '''tag_redraw
         '''
      
         pass

   class RegionView3D(types.bpy_struct):
      '''3D View region data
      '''
   
      clip_planes = float
      '''
         @returns: float multi-dimensional array of 6 * 4 items in [-inf, inf]
      '''
      
      is_orthographic_side_view = bool
      '''Is current view an orthographic side view
         @returns: boolean
      '''
      
      is_perspective = bool
      '''
         @returns: boolean
      '''
      
      lock_rotation = bool
      '''Lock view rotation in side views
         @returns: boolean
      '''
      
      perspective_matrix = float # (read only)
      '''Current perspective matrix (``window_matrix * view_matrix``)
         @returns: float multi-dimensional array of 4 * 4 items in [-inf, inf]
      '''
      
      show_sync_view = bool
      '''Sync view position between side views
         @returns: boolean
      '''
      
      use_box_clip = bool
      '''Clip objects based on what's visible in other side views
         @returns: boolean
      '''
      
      use_clip_planes = bool
      '''
         @returns: boolean
      '''
      
      view_camera_offset = float
      '''View shift in camera view
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      view_camera_zoom = float
      '''Zoom factor in camera view
         @returns: float in [-30, 600]
      '''
      
      view_distance = float
      '''Distance to the view location
         @returns: float in [0, inf]
      '''
      
      view_location = float
      '''View pivot location
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      view_matrix = float
      '''Current view matrix
         @returns: float multi-dimensional array of 4 * 4 items in [-inf, inf]
      '''
      
      view_perspective = str
      '''View Perspective
         @returns: enum in ['PERSP', 'ORTHO', 'CAMERA']
      '''
      
      view_rotation = float
      '''Rotation in quaternions (keep normalized)
         @returns: float array of 4 items in [-inf, inf]
      '''
      
      window_matrix = float # (read only)
      '''Current window matrix
         @returns: float multi-dimensional array of 4 * 4 items in [-inf, inf]
      '''
      
      def update():
         '''Recalculate the view matrices
         '''
      
         pass

   class RemeshModifier(types.Modifier):
      '''Generate a new surface with regular topology that follows the shape of the input mesh
      '''
   
      adaptivity = float
      '''Reduces the final face count by simplifying geometry where detail is not needed, generating triangles. A value greater than 0 disables Fix Poles
         @returns: float in [-inf, inf]
      '''
      
      mode = str
      '''
         @returns: enum in ['BLOCKS', 'SMOOTH', 'SHARP', 'VOXEL']
      '''
      
      octree_depth = int
      '''Resolution of the octree; higher values give finer details
         @returns: int in [1, 12]
      '''
      
      scale = float
      '''The ratio of the largest dimension of the model over the size of the grid
         @returns: float in [0, 0.99]
      '''
      
      sharpness = float
      '''Tolerance for outliers; lower values filter noise while higher values will reproduce edges closer to the input
         @returns: float in [-inf, inf]
      '''
      
      threshold = float
      '''If removing disconnected pieces, minimum size of components to preserve as a ratio of the number of polygons in the largest component
         @returns: float in [0, 1]
      '''
      
      use_remove_disconnected = bool
      '''
         @returns: boolean
      '''
      
      use_smooth_shade = bool
      '''Output faces with smooth shading rather than flat shaded
         @returns: boolean
      '''
      
      voxel_size = float
      '''Size of the voxel in object space used for volume evaluation. Lower values preserve finer details
         @returns: float in [-inf, inf]
      '''
      
   class RenderEngine(types.bpy_struct):
      '''Render engine
      '''
   
      bl_idname = str
      '''
         @returns: string, (never None)
      '''
      
      bl_label = str
      '''
         @returns: string, (never None)
      '''
      
      bl_use_eevee_viewport = bool
      '''Uses Eevee for viewport shading in LookDev shading mode
         @returns: boolean
      '''
      
      bl_use_postprocess = bool
      '''Apply compositing on render results
         @returns: boolean
      '''
      
      bl_use_preview = bool
      '''Render engine supports being used for rendering previews of materials, lights and worlds
         @returns: boolean
      '''
      
      bl_use_save_buffers = bool
      '''Support render to an on disk buffer during rendering
         @returns: boolean
      '''
      
      bl_use_shading_nodes_custom = bool
      '''Don't expose Cycles and Eevee shading nodes in the node editor user interface, so own nodes can be used instead
         @returns: boolean
      '''
      
      bl_use_spherical_stereo = bool
      '''Support spherical stereo camera models
         @returns: boolean
      '''
      
      bl_use_stereo_viewport = bool
      '''Support rendering stereo 3D viewport
         @returns: boolean
      '''
      
      camera_override = types.Object # (read only)
      '''
         @returns: Object
      '''
      
      is_animation = bool
      '''
         @returns: boolean
      '''
      
      is_preview = bool
      '''
         @returns: boolean
      '''
      
      layer_override = bool
      '''
         @returns: boolean array of 20 items
      '''
      
      render = types.RenderSettings # (read only)
      '''
         @returns: RenderSettings
      '''
      
      resolution_x = int # (read only)
      '''
         @returns: int in [-inf, inf]
      '''
      
      resolution_y = int # (read only)
      '''
         @returns: int in [-inf, inf]
      '''
      
      tile_x = int
      '''
         @returns: int in [0, inf]
      '''
      
      tile_y = int
      '''
         @returns: int in [0, inf]
      '''
      
      use_highlight_tiles = bool
      '''
         @returns: boolean
      '''
      
      def update(data=None, depsgraph=None):
         '''Export scene data for render
            Arguments:
            @data (BlendData): (optional)
            @depsgraph (Depsgraph): (optional)
      
         '''
      
         pass

      def render(depsgraph):
         '''Render scene into an image
            Arguments:
            @depsgraph (Depsgraph): 
      
         '''
      
         pass

      def bake(depsgraph, object, pass_type, pass_filter, object_id, pixel_array, num_pixels, depth, result):
         '''Bake passes
            Arguments:
            @depsgraph (Depsgraph): 
            @object (Object): 
            @pass_type (str): Pass to bake
               in ['COMBINED', 'AO', 'SHADOW', 'NORMAL', 'UV', 'ROUGHNESS', 'EMIT', 'ENVIRONMENT', 'DIFFUSE', 'GLOSSY', 'TRANSMISSION']
            @pass_filter (int): Filter to combined, diffuse, glossy and transmission passes
               in [0, inf]
            @object_id (int): Id of the current object being baked in relation to the others
               in [0, inf]
            @pixel_array (BakePixel): 
            @num_pixels (int): Size of the baking batch
               in [0, inf]
            @depth (int): Number of channels
               in [0, inf]
            @result (AnyType): 
      
         '''
      
         pass

      def view_update(context, depsgraph):
         '''Update on data changes for viewport render
            Arguments:
            @context (Context): 
            @depsgraph (Depsgraph): 
      
         '''
      
         pass

      def view_draw(context, depsgraph):
         '''Draw viewport render
            Arguments:
            @context (Context): 
            @depsgraph (Depsgraph): 
      
         '''
      
         pass

      def update_script_node(node=None):
         '''Compile shader script node
            Arguments:
            @node (Node): (optional)
      
         '''
      
         pass

      def update_render_passes(scene=None, renderlayer=None):
         '''Update the render passes that will be generated
            Arguments:
            @scene (Scene): (optional)
            @renderlayer (ViewLayer): (optional)
      
         '''
      
         pass

      def tag_redraw():
         '''Request redraw for viewport rendering
         '''
      
         pass

      def tag_update():
         '''Request update call for viewport rendering
         '''
      
         pass

      def begin_result(x, y, w, h, layer="", view=""):
         '''Create render result to write linear floating point render layers and passes
            Arguments:
            @x (int): in [0, inf]
            @y (int): in [0, inf]
            @w (int): in [0, inf]
            @h (int): in [0, inf]
            @layer (str): Single layer to get render result for
               (optional, never None)
            @view (str): Single view to get render result for
               (optional, never None)
      
            @returns (types.RenderResult): 
         '''
      
         return types.RenderResult

      def update_result(result):
         '''Signal that pixels have been updated and can be redrawn in the user interface
            Arguments:
            @result (RenderResult): 
      
         '''
      
         pass

      def end_result(result, cancel=False, highlight=False, do_merge_results=False):
         '''All pixels in the render result have been set and are final
            Arguments:
            @result (RenderResult): 
            @cancel (bool): Don't mark tile as done, don't merge results unless forced
               (optional)
            @highlight (bool): Don't mark tile as done yet
               (optional)
            @do_merge_results (bool): Merge results even if cancel=true
               (optional)
      
         '''
      
         pass

      def add_pass(name, channels, chan_id, layer=""):
         '''Add a pass to the render layer
            Arguments:
            @name (str): Name of the Pass, without view or channel tag
               (never None)
            @channels (int): in [0, inf]
            @chan_id (str): Channel names, one character per channel
               (never None)
            @layer (str): Single layer to add render pass to
               (optional, never None)
      
         '''
      
         pass

      def get_result():
         '''Get final result for non-pixel operations
            @returns (types.RenderResult): 
         '''
      
         return types.RenderResult

      def test_break():
         '''Test if the render operation should been canceled, this is a fast call that should be used regularly for responsiveness
            @returns (bool): 
         '''
      
         return bool

      def active_view_get():
         '''active_view_get
            @returns (str): Single view active
               (never None)
         '''
      
         return str

      def active_view_set(view):
         '''active_view_set
            Arguments:
            @view (str): Single view to set as active
               (never None)
      
         '''
      
         pass

      def camera_shift_x(camera, use_spherical_stereo=False):
         '''camera_shift_x
            Arguments:
            @camera (Object): 
            @use_spherical_stereo (bool): (optional)
      
            @returns (float): in [0, inf]
         '''
      
         return float

      def camera_model_matrix(camera, use_spherical_stereo=False):
         '''camera_model_matrix
            Arguments:
            @camera (Object): 
            @use_spherical_stereo (bool): (optional)
      
            @returns (float): Normalized camera model matrix
               multi-dimensional array of 4 * 4 items in [-inf, inf]
         '''
      
         return float

      def use_spherical_stereo(camera):
         '''use_spherical_stereo
            Arguments:
            @camera (Object): 
      
            @returns (bool): 
         '''
      
         return bool

      def update_stats(stats, info):
         '''Update and signal to redraw render status text
            Arguments:
            @stats (str): (never None)
            @info (str): (never None)
      
         '''
      
         pass

      def frame_set(frame, subframe):
         '''Evaluate scene at a different frame (for motion blur)
            Arguments:
            @frame (int): in [-inf, inf]
            @subframe (float): in [0, 1]
      
         '''
      
         pass

      def update_progress(progress):
         '''Update progress percentage of render
            Arguments:
            @progress (float): Percentage of render that's done
               in [0, 1]
      
         '''
      
         pass

      def update_memory_stats(memory_used=0.0, memory_peak=0.0):
         '''Update memory usage statistics
            Arguments:
            @memory_used (float): Current memory usage in megabytes
               in [0, inf], (optional)
            @memory_peak (float): Peak memory usage in megabytes
               in [0, inf], (optional)
      
         '''
      
         pass

      def report(type, message):
         '''Report info, warning or error messages
            Arguments:
            @type (str): set in {'DEBUG', 'INFO', 'OPERATOR', 'PROPERTY', 'WARNING', 'ERROR', 'ERROR_INVALID_INPUT', 'ERROR_INVALID_CONTEXT', 'ERROR_OUT_OF_MEMORY'}
            @message (str): (never None)
      
         '''
      
         pass

      def error_set(message):
         '''Set error message displaying after the render is finished
            Arguments:
            @message (str): (never None)
      
         '''
      
         pass

      def bind_display_space_shader(scene):
         '''Bind GLSL fragment shader that converts linear colors to display space colors using scene color management settings
            Arguments:
            @scene (Scene): 
      
         '''
      
         pass

      def unbind_display_space_shader():
         '''Unbind GLSL display space shader, must always be called after binding the shader
         '''
      
         pass

      def support_display_space_shader(scene):
         '''Test if GLSL display space shader is supported for the combination of graphics card and scene settings
            Arguments:
            @scene (Scene): 
      
            @returns (bool): 
         '''
      
         return bool

      def get_preview_pixel_size(scene):
         '''Free Blender side memory of render engine
            Arguments:
            @scene (Scene): 
      
            @returns (int): in [1, 8]
         '''
      
         return int

      def free_blender_memory():
         '''free_blender_memory
         '''
      
         pass

      def register_pass(scene, view_layer, name, channels, chanid, type):
         '''Register a render pass that will be part of the render with the current settings
            Arguments:
            @scene (Scene): 
            @view_layer (ViewLayer): 
            @name (str): (never None)
            @channels (int): in [1, 8]
            @chanid (str): (never None)
            @type (str): in ['VALUE', 'VECTOR', 'COLOR']
      
         '''
      
         pass

   class RenderLayer(types.bpy_struct):
      '''
      '''
   
      invert_zmask = bool # (read only)
      '''For Zmask, only render what is behind solid z values instead of in front
         @returns: boolean
      '''
      
      name = str # (read only)
      '''View layer name
         @returns: string, (never None)
      '''
      
      passes = types.RenderPasses # (read only)
      '''
         @returns: RenderPasses Collection of RenderPass
      '''
      
      use_all_z = bool # (read only)
      '''Fill in Z values for solid faces in invisible layers, for masking
         @returns: boolean
      '''
      
      use_ao = bool # (read only)
      '''Render Ambient Occlusion in this Layer
         @returns: boolean
      '''
      
      use_edge_enhance = bool # (read only)
      '''Render Edge-enhance in this Layer (only works for Solid faces)
         @returns: boolean
      '''
      
      use_halo = bool # (read only)
      '''Render Halos in this Layer (on top of Solid)
         @returns: boolean
      '''
      
      use_pass_ambient_occlusion = bool # (read only)
      '''Deliver Ambient Occlusion pass
         @returns: boolean
      '''
      
      use_pass_combined = bool # (read only)
      '''Deliver full combined RGBA buffer
         @returns: boolean
      '''
      
      use_pass_diffuse_color = bool # (read only)
      '''Deliver diffuse color pass
         @returns: boolean
      '''
      
      use_pass_diffuse_direct = bool # (read only)
      '''Deliver diffuse direct pass
         @returns: boolean
      '''
      
      use_pass_diffuse_indirect = bool # (read only)
      '''Deliver diffuse indirect pass
         @returns: boolean
      '''
      
      use_pass_emit = bool # (read only)
      '''Deliver emission pass
         @returns: boolean
      '''
      
      use_pass_environment = bool # (read only)
      '''Deliver environment lighting pass
         @returns: boolean
      '''
      
      use_pass_glossy_color = bool # (read only)
      '''Deliver glossy color pass
         @returns: boolean
      '''
      
      use_pass_glossy_direct = bool # (read only)
      '''Deliver glossy direct pass
         @returns: boolean
      '''
      
      use_pass_glossy_indirect = bool # (read only)
      '''Deliver glossy indirect pass
         @returns: boolean
      '''
      
      use_pass_material_index = bool # (read only)
      '''Deliver material index pass
         @returns: boolean
      '''
      
      use_pass_mist = bool # (read only)
      '''Deliver mist factor pass (0.0-1.0)
         @returns: boolean
      '''
      
      use_pass_normal = bool # (read only)
      '''Deliver normal pass
         @returns: boolean
      '''
      
      use_pass_object_index = bool # (read only)
      '''Deliver object index pass
         @returns: boolean
      '''
      
      use_pass_shadow = bool # (read only)
      '''Deliver shadow pass
         @returns: boolean
      '''
      
      use_pass_subsurface_color = bool # (read only)
      '''Deliver subsurface color pass
         @returns: boolean
      '''
      
      use_pass_subsurface_direct = bool # (read only)
      '''Deliver subsurface direct pass
         @returns: boolean
      '''
      
      use_pass_subsurface_indirect = bool # (read only)
      '''Deliver subsurface indirect pass
         @returns: boolean
      '''
      
      use_pass_transmission_color = bool # (read only)
      '''Deliver transmission color pass
         @returns: boolean
      '''
      
      use_pass_transmission_direct = bool # (read only)
      '''Deliver transmission direct pass
         @returns: boolean
      '''
      
      use_pass_transmission_indirect = bool # (read only)
      '''Deliver transmission indirect pass
         @returns: boolean
      '''
      
      use_pass_uv = bool # (read only)
      '''Deliver texture UV pass
         @returns: boolean
      '''
      
      use_pass_vector = bool # (read only)
      '''Deliver speed vector pass
         @returns: boolean
      '''
      
      use_pass_z = bool # (read only)
      '''Deliver Z values pass
         @returns: boolean
      '''
      
      use_sky = bool # (read only)
      '''Render Sky in this Layer
         @returns: boolean
      '''
      
      use_solid = bool # (read only)
      '''Render Solid faces in this Layer
         @returns: boolean
      '''
      
      use_strand = bool # (read only)
      '''Render Strands in this Layer
         @returns: boolean
      '''
      
      use_volumes = bool # (read only)
      '''Render volumes in this Layer
         @returns: boolean
      '''
      
      use_zmask = bool # (read only)
      '''Only render what's in front of the solid z values
         @returns: boolean
      '''
      
      use_ztransp = bool # (read only)
      '''Render Z-Transparent faces in this Layer (on top of Solid and Halos)
         @returns: boolean
      '''
      
      def load_from_file(filename, x=0, y=0):
         '''Copies the pixels of this renderlayer from an image file
            Arguments:
            @filename (str): Filename to load into this render tile, must be no smaller than the renderlayer
               (never None)
            @x (int): Offset the position to copy from if the image is larger than the render layer
               in [0, inf], (optional)
            @y (int): Offset the position to copy from if the image is larger than the render layer
               in [0, inf], (optional)
      
         '''
      
         pass

   class RenderPass(types.bpy_struct):
      '''
      '''
   
      channel_id = str # (read only)
      '''
         @returns: string, (never None)
      '''
      
      channels = int # (read only)
      '''
         @returns: int in [-inf, inf]
      '''
      
      fullname = str # (read only)
      '''
         @returns: string, (never None)
      '''
      
      name = str # (read only)
      '''
         @returns: string, (never None)
      '''
      
      rect = float
      '''
         @returns: float in [-inf, inf]
      '''
      
      view_id = int # (read only)
      '''
         @returns: int in [-inf, inf]
      '''
      
   class RenderPasses(types.bpy_struct):
      '''Collection of render passes
      '''
   
      def find_by_type(pass_type, view):
         '''Get the render pass for a given type and view
            Arguments:
            @pass_type (str): in ['COMBINED', 'Z', 'SHADOW', 'AO', 'NORMAL', 'VECTOR', 'OBJECT_INDEX', 'UV', 'MIST', 'EMIT', 'ENVIRONMENT', 'MATERIAL_INDEX', 'DIFFUSE_DIRECT', 'DIFFUSE_INDIRECT', 'DIFFUSE_COLOR', 'GLOSSY_DIRECT', 'GLOSSY_INDIRECT', 'GLOSSY_COLOR', 'TRANSMISSION_DIRECT', 'TRANSMISSION_INDIRECT', 'TRANSMISSION_COLOR', 'SUBSURFACE_DIRECT', 'SUBSURFACE_INDIRECT', 'SUBSURFACE_COLOR']
            @view (str): Render view to get pass from
               (never None)
      
            @returns (types.RenderPass): The matching render pass
               
         '''
      
         return types.RenderPass

      def find_by_name(name, view):
         '''Get the render pass for a given name and view
            Arguments:
            @name (str): (never None)
            @view (str): Render view to get pass from
               (never None)
      
            @returns (types.RenderPass): The matching render pass
               
         '''
      
         return types.RenderPass

   class RenderResult(types.bpy_struct):
      '''Result of rendering, including all layers and passes
      '''
   
      layers = types.RenderLayer # (read only)
      '''
         @returns: Collection of RenderLayer
      '''
      
      resolution_x = int # (read only)
      '''
         @returns: int in [-inf, inf]
      '''
      
      resolution_y = int # (read only)
      '''
         @returns: int in [-inf, inf]
      '''
      
      views = types.RenderView # (read only)
      '''
         @returns: Collection of RenderView
      '''
      
      def load_from_file(filename):
         '''Copies the pixels of this render result from an image file
            Arguments:
            @filename (str): Filename to load into this render tile, must be no smaller than the render result
               (never None)
      
         '''
      
         pass

      def stamp_data_add_field(field, value):
         '''Add engine-specific stamp data to the result
            Arguments:
            @field (str): Name of the stamp field to add
               (never None)
            @value (str): Value of the stamp data
               (never None)
      
         '''
      
         pass

   class RenderSettings(types.bpy_struct):
      '''Rendering settings for a Scene data-block
      '''
   
      bake = types.BakeSettings # (read only)
      '''
         @returns: BakeSettings, (never None)
      '''
      
      bake_bias = float
      '''Bias towards faces further away from the object (in blender units)
         @returns: float in [0, 1000]
      '''
      
      bake_margin = int
      '''Extends the baked result as a post process filter
         @returns: int in [0, 64]
      '''
      
      bake_samples = int
      '''Number of samples used for ambient occlusion baking from multires
         @returns: int in [64, 1024]
      '''
      
      bake_type = str
      '''Choose shading information to bake into the image
         @returns: enum in ['NORMALS', 'DISPLACEMENT']
      '''
      
      bake_user_scale = float
      '''Instead of automatically normalizing to 0..1, apply a user scale to the derivative map
         @returns: float in [0, 1000]
      '''
      
      border_max_x = float
      '''Maximum X value for the render region
         @returns: float in [0, 1]
      '''
      
      border_max_y = float
      '''Maximum Y value for the render region
         @returns: float in [0, 1]
      '''
      
      border_min_x = float
      '''Minimum X value for the render region
         @returns: float in [0, 1]
      '''
      
      border_min_y = float
      '''Minimum Y value for the render region
         @returns: float in [0, 1]
      '''
      
      dither_intensity = float
      '''Amount of dithering noise added to the rendered image to break up banding
         @returns: float in [0, inf]
      '''
      
      engine = str
      '''Engine to use for rendering
         @returns: enum in ['BLENDER_EEVEE']
      '''
      
      ffmpeg = types.FFmpegSettings # (read only)
      '''FFmpeg related settings for the scene
         @returns: FFmpegSettings
      '''
      
      file_extension = str # (read only)
      '''The file extension used for saving renders
         @returns: string, (never None)
      '''
      
      filepath = str
      '''Directory/name to save animations, # characters defines the position and length of frame numbers
         @returns: string, (never None)
      '''
      
      film_transparent = bool
      '''World background is transparent, for compositing the render over another background
         @returns: boolean
      '''
      
      filter_size = float
      '''Width over which the reconstruction filter combines samples
         @returns: float in [0, 500]
      '''
      
      fps = int
      '''Framerate, expressed in frames per second
         @returns: int in [1, 32767]
      '''
      
      fps_base = float
      '''Framerate base
         @returns: float in [1e-05, 1e+06]
      '''
      
      frame_map_new = int
      '''How many frames the Map Old will last
         @returns: int in [1, 900]
      '''
      
      frame_map_old = int
      '''Old mapping value in frames
         @returns: int in [1, 900]
      '''
      
      hair_subdiv = int
      '''Additional subdivision along the hair
         @returns: int in [0, 3]
      '''
      
      hair_type = str
      '''Hair shape type
         @returns: enum in ['STRAND', 'STRIP']
      '''
      
      has_multiple_engines = bool # (read only)
      '''More than one rendering engine is available
         @returns: boolean
      '''
      
      image_settings = types.ImageFormatSettings # (read only)
      '''
         @returns: ImageFormatSettings, (never None)
      '''
      
      is_movie_format = bool # (read only)
      '''When true the format is a movie
         @returns: boolean
      '''
      
      line_thickness = float
      '''Line thickness in pixels
         @returns: float in [0, 10000]
      '''
      
      line_thickness_mode = str
      '''Line thickness mode for Freestyle line drawing
         @returns: enum in ['ABSOLUTE', 'RELATIVE']
      '''
      
      motion_blur_shutter = float
      '''Time taken in frames between shutter open and close
         @returns: float in [0, inf]
      '''
      
      motion_blur_shutter_curve = types.CurveMapping # (read only)
      '''Curve defining the shutter's openness over time
         @returns: CurveMapping
      '''
      
      pixel_aspect_x = float
      '''Horizontal aspect ratio - for anamorphic or non-square pixel output
         @returns: float in [1, 200]
      '''
      
      pixel_aspect_y = float
      '''Vertical aspect ratio - for anamorphic or non-square pixel output
         @returns: float in [1, 200]
      '''
      
      preview_pixel_size = str
      '''Pixel size for viewport rendering
         @returns: enum in ['AUTO', '1', '2', '4', '8']
      '''
      
      preview_start_resolution = int
      '''Resolution to start rendering preview at, progressively increasing it to the full viewport size
         @returns: int in [8, 16384]
      '''
      
      resolution_percentage = int
      '''Percentage scale for render resolution
         @returns: int in [1, 32767]
      '''
      
      resolution_x = int
      '''Number of horizontal pixels in the rendered image
         @returns: int in [4, 65536]
      '''
      
      resolution_y = int
      '''Number of vertical pixels in the rendered image
         @returns: int in [4, 65536]
      '''
      
      sequencer_gl_preview = str
      '''Method to draw in the sequencer view
         @returns: enum in ['WIREFRAME', 'SOLID', 'MATERIAL', 'RENDERED']
      '''
      
      simplify_child_particles = float
      '''Global child particles percentage
         @returns: float in [0, 1]
      '''
      
      simplify_child_particles_render = float
      '''Global child particles percentage during rendering
         @returns: float in [0, 1]
      '''
      
      simplify_gpencil = bool
      '''Simplify Grease Pencil drawing
         @returns: boolean
      '''
      
      simplify_gpencil_antialiasing = bool
      '''Use Antialiasing to smooth stroke edges
         @returns: boolean
      '''
      
      simplify_gpencil_modifier = bool
      '''Display modifiers
         @returns: boolean
      '''
      
      simplify_gpencil_onplay = bool
      '''Simplify Grease Pencil only during animation playback
         @returns: boolean
      '''
      
      simplify_gpencil_shader_fx = bool
      '''Display Shader FX
         @returns: boolean
      '''
      
      simplify_gpencil_tint = bool
      '''Display layer tint
         @returns: boolean
      '''
      
      simplify_gpencil_view_fill = bool
      '''Display fill strokes in the viewport
         @returns: boolean
      '''
      
      simplify_subdivision = int
      '''Global maximum subdivision level
         @returns: int in [0, 32767]
      '''
      
      simplify_subdivision_render = int
      '''Global maximum subdivision level during rendering
         @returns: int in [0, 32767]
      '''
      
      stamp_background = float
      '''Color to use behind stamp text
         @returns: float array of 4 items in [0, 1]
      '''
      
      stamp_font_size = int
      '''Size of the font used when rendering stamp text
         @returns: int in [8, 64]
      '''
      
      stamp_foreground = float
      '''Color to use for stamp text
         @returns: float array of 4 items in [0, 1]
      '''
      
      stamp_note_text = str
      '''Custom text to appear in the stamp note
         @returns: string, (never None)
      '''
      
      stereo_views = types.SceneRenderView # (read only)
      '''
         @returns: Collection of SceneRenderView
      '''
      
      threads = int
      '''Number of CPU threads to use simultaneously while rendering (for multi-core/CPU systems)
         @returns: int in [1, 1024]
      '''
      
      threads_mode = str
      '''Determine the amount of render threads used
         @returns: enum in ['AUTO', 'FIXED']
      '''
      
      tile_x = int
      '''Horizontal tile size to use while rendering
         @returns: int in [8, 65536]
      '''
      
      tile_y = int
      '''Vertical tile size to use while rendering
         @returns: int in [8, 65536]
      '''
      
      use_bake_clear = bool
      '''Clear Images before baking
         @returns: boolean
      '''
      
      use_bake_lores_mesh = bool
      '''Calculate heights against unsubdivided low resolution mesh
         @returns: boolean
      '''
      
      use_bake_multires = bool
      '''Bake directly from multires object
         @returns: boolean
      '''
      
      use_bake_selected_to_active = bool
      '''Bake shading on the surface of selected objects to the active object
         @returns: boolean
      '''
      
      use_bake_user_scale = bool
      '''Use a user scale for the derivative map
         @returns: boolean
      '''
      
      use_border = bool
      '''Render a user-defined render region, within the frame size
         @returns: boolean
      '''
      
      use_compositing = bool
      '''Process the render result through the compositing pipeline, if compositing nodes are enabled
         @returns: boolean
      '''
      
      use_crop_to_border = bool
      '''Crop the rendered frame to the defined render region size
         @returns: boolean
      '''
      
      use_file_extension = bool
      '''Add the file format extensions to the rendered file name (eg: filename + .jpg)
         @returns: boolean
      '''
      
      use_freestyle = bool
      '''Draw stylized strokes using Freestyle
         @returns: boolean
      '''
      
      use_full_sample = bool
      '''Save for every anti-aliasing sample the entire RenderLayer results (this solves anti-aliasing issues with compositing)
         @returns: boolean
      '''
      
      use_high_quality_normals = bool
      '''Use high quality tangent space at the cost of lower performance
         @returns: boolean
      '''
      
      use_lock_interface = bool
      '''Lock interface during rendering in favor of giving more memory to the renderer
         @returns: boolean
      '''
      
      use_motion_blur = bool
      '''Use multi-sampled 3D scene motion blur
         @returns: boolean
      '''
      
      use_multiview = bool
      '''Use multiple views in the scene
         @returns: boolean
      '''
      
      use_overwrite = bool
      '''Overwrite existing files while rendering
         @returns: boolean
      '''
      
      use_persistent_data = bool
      '''Keep render data around for faster re-renders
         @returns: boolean
      '''
      
      use_placeholder = bool
      '''Create empty placeholder files while rendering frames (similar to Unix 'touch')
         @returns: boolean
      '''
      
      use_render_cache = bool
      '''Save render cache to EXR files (useful for heavy compositing, Note: affects indirectly rendered scenes)
         @returns: boolean
      '''
      
      use_save_buffers = bool
      '''Save tiles for all RenderLayers and SceneNodes to files in the temp directory (saves memory, required for Full Sample)
         @returns: boolean
      '''
      
      use_sequencer = bool
      '''Process the render (and composited) result through the video sequence editor pipeline, if sequencer strips exist
         @returns: boolean
      '''
      
      use_sequencer_override_scene_strip = bool
      '''Use workbench render settings from the sequencer scene, instead of each individual scene used in the strip
         @returns: boolean
      '''
      
      use_simplify = bool
      '''Enable simplification of scene for quicker preview renders
         @returns: boolean
      '''
      
      use_single_layer = bool
      '''Only render the active layer. Only affects rendering from the interface, ignored for rendering from command line
         @returns: boolean
      '''
      
      use_spherical_stereo = bool # (read only)
      '''Active render engine supports spherical stereo rendering
         @returns: boolean
      '''
      
      use_stamp = bool
      '''Render the stamp info text in the rendered image
         @returns: boolean
      '''
      
      use_stamp_camera = bool
      '''Include the name of the active camera in image metadata
         @returns: boolean
      '''
      
      use_stamp_date = bool
      '''Include the current date in image/video metadata
         @returns: boolean
      '''
      
      use_stamp_filename = bool
      '''Include the .blend filename in image/video metadata
         @returns: boolean
      '''
      
      use_stamp_frame = bool
      '''Include the frame number in image metadata
         @returns: boolean
      '''
      
      use_stamp_frame_range = bool
      '''Include the rendered frame range in image/video metadata
         @returns: boolean
      '''
      
      use_stamp_hostname = bool
      '''Include the hostname of the machine that rendered the frame
         @returns: boolean
      '''
      
      use_stamp_labels = bool
      '''Display stamp labels ("Camera" in front of camera name, etc.)
         @returns: boolean
      '''
      
      use_stamp_lens = bool
      '''Include the active camera's lens in image metadata
         @returns: boolean
      '''
      
      use_stamp_marker = bool
      '''Include the name of the last marker in image metadata
         @returns: boolean
      '''
      
      use_stamp_memory = bool
      '''Include the peak memory usage in image metadata
         @returns: boolean
      '''
      
      use_stamp_note = bool
      '''Include a custom note in image/video metadata
         @returns: boolean
      '''
      
      use_stamp_render_time = bool
      '''Include the render time in image metadata
         @returns: boolean
      '''
      
      use_stamp_scene = bool
      '''Include the name of the active scene in image/video metadata
         @returns: boolean
      '''
      
      use_stamp_sequencer_strip = bool
      '''Include the name of the foreground sequence strip in image metadata
         @returns: boolean
      '''
      
      use_stamp_strip_meta = bool
      '''Use metadata from the strips in the sequencer
         @returns: boolean
      '''
      
      use_stamp_time = bool
      '''Include the rendered frame timecode as HH:MM:SS.FF in image metadata
         @returns: boolean
      '''
      
      views = types.RenderViews # (read only)
      '''
         @returns: RenderViews Collection of SceneRenderView
      '''
      
      views_format = str
      '''
         @returns: enum in ['STEREO_3D', 'MULTIVIEW']
      '''
      
      def frame_path(frame=-2147483648, preview=False, view=""):
         '''Return the absolute path to the filename to be written for a given frame
            Arguments:
            @frame (int): Frame number to use, if unset the current frame will be used
               in [-inf, inf], (optional)
            @preview (bool): Use preview range
               (optional)
            @view (str): The name of the view to use to replace the "%" chars
               (optional, never None)
      
            @returns (str): The resulting filepath from the scenes render settings
               (never None)
         '''
      
         return str

   class RenderSlot(types.bpy_struct):
      '''Parameters defining the render slot
      '''
   
      name = str
      '''Render slot name
         @returns: string, (never None)
      '''
      
      def clear(iuser):
         '''Clear the render slot
            Arguments:
            @iuser (ImageUser): 
      
         '''
      
         pass

   class RenderSlots(types.bpy_struct):
      '''Collection of render layers
      '''
   
      active = types.RenderSlot
      '''Active render slot of the image
         @returns: RenderSlot
      '''
      
      active_index = int
      '''Active render slot of the image
         @returns: int in [0, 32767]
      '''
      
      def new(name=""):
         '''Add a render slot to the image
            Arguments:
            @name (str): New name for the render slot
               (optional, never None)
      
            @returns (types.RenderSlot): Newly created render layer
               
         '''
      
         return types.RenderSlot

   class RenderView(types.bpy_struct):
      '''
      '''
   
      name = str # (read only)
      '''
         @returns: string, (never None)
      '''
      
   class RenderViews(types.bpy_struct):
      '''Collection of render views
      '''
   
      active = types.SceneRenderView
      '''Active Render View
         @returns: SceneRenderView, (never None)
      '''
      
      active_index = int
      '''Active index in render view array
         @returns: int in [0, 32767]
      '''
      
      def new(name):
         '''Add a render view to scene
            Arguments:
            @name (str): New name for the marker (not unique)
               (never None)
      
            @returns (types.SceneRenderView): Newly created render view
               
         '''
      
         return types.SceneRenderView

      def remove(view):
         '''Remove a render view
            Arguments:
            @view (SceneRenderView): Render view to remove
               (never None)
      
         '''
      
         pass

   class RigidBodyConstraint(types.bpy_struct):
      '''Constraint influencing Objects inside Rigid Body Simulation
      '''
   
      breaking_threshold = float
      '''Impulse threshold that must be reached for the constraint to break
         @returns: float in [0, inf]
      '''
      
      disable_collisions = bool
      '''Disable collisions between constrained rigid bodies
         @returns: boolean
      '''
      
      enabled = bool
      '''Enable this constraint
         @returns: boolean
      '''
      
      limit_ang_x_lower = float
      '''Lower limit of X axis rotation
         @returns: float in [-6.28319, 6.28319]
      '''
      
      limit_ang_x_upper = float
      '''Upper limit of X axis rotation
         @returns: float in [-6.28319, 6.28319]
      '''
      
      limit_ang_y_lower = float
      '''Lower limit of Y axis rotation
         @returns: float in [-6.28319, 6.28319]
      '''
      
      limit_ang_y_upper = float
      '''Upper limit of Y axis rotation
         @returns: float in [-6.28319, 6.28319]
      '''
      
      limit_ang_z_lower = float
      '''Lower limit of Z axis rotation
         @returns: float in [-6.28319, 6.28319]
      '''
      
      limit_ang_z_upper = float
      '''Upper limit of Z axis rotation
         @returns: float in [-6.28319, 6.28319]
      '''
      
      limit_lin_x_lower = float
      '''Lower limit of X axis translation
         @returns: float in [-inf, inf]
      '''
      
      limit_lin_x_upper = float
      '''Upper limit of X axis translation
         @returns: float in [-inf, inf]
      '''
      
      limit_lin_y_lower = float
      '''Lower limit of Y axis translation
         @returns: float in [-inf, inf]
      '''
      
      limit_lin_y_upper = float
      '''Upper limit of Y axis translation
         @returns: float in [-inf, inf]
      '''
      
      limit_lin_z_lower = float
      '''Lower limit of Z axis translation
         @returns: float in [-inf, inf]
      '''
      
      limit_lin_z_upper = float
      '''Upper limit of Z axis translation
         @returns: float in [-inf, inf]
      '''
      
      motor_ang_max_impulse = float
      '''Maximum angular motor impulse
         @returns: float in [0, inf]
      '''
      
      motor_ang_target_velocity = float
      '''Target angular motor velocity
         @returns: float in [-inf, inf]
      '''
      
      motor_lin_max_impulse = float
      '''Maximum linear motor impulse
         @returns: float in [0, inf]
      '''
      
      motor_lin_target_velocity = float
      '''Target linear motor velocity
         @returns: float in [-inf, inf]
      '''
      
      object1 = types.Object
      '''First Rigid Body Object to be constrained
         @returns: Object
      '''
      
      object2 = types.Object
      '''Second Rigid Body Object to be constrained
         @returns: Object
      '''
      
      solver_iterations = int
      '''Number of constraint solver iterations made per simulation step (higher values are more accurate but slower)
         @returns: int in [1, 1000]
      '''
      
      spring_damping_ang_x = float
      '''Damping on the X rotational axis
         @returns: float in [0, inf]
      '''
      
      spring_damping_ang_y = float
      '''Damping on the Y rotational axis
         @returns: float in [0, inf]
      '''
      
      spring_damping_ang_z = float
      '''Damping on the Z rotational axis
         @returns: float in [0, inf]
      '''
      
      spring_damping_x = float
      '''Damping on the X axis
         @returns: float in [0, inf]
      '''
      
      spring_damping_y = float
      '''Damping on the Y axis
         @returns: float in [0, inf]
      '''
      
      spring_damping_z = float
      '''Damping on the Z axis
         @returns: float in [0, inf]
      '''
      
      spring_stiffness_ang_x = float
      '''Stiffness on the X rotational axis
         @returns: float in [0, inf]
      '''
      
      spring_stiffness_ang_y = float
      '''Stiffness on the Y rotational axis
         @returns: float in [0, inf]
      '''
      
      spring_stiffness_ang_z = float
      '''Stiffness on the Z rotational axis
         @returns: float in [0, inf]
      '''
      
      spring_stiffness_x = float
      '''Stiffness on the X axis
         @returns: float in [0, inf]
      '''
      
      spring_stiffness_y = float
      '''Stiffness on the Y axis
         @returns: float in [0, inf]
      '''
      
      spring_stiffness_z = float
      '''Stiffness on the Z axis
         @returns: float in [0, inf]
      '''
      
      spring_type = str
      '''Which implementation of spring to use
         @returns: enum in ['SPRING1', 'SPRING2']
      '''
      
      type = str
      '''Type of Rigid Body Constraint
         @returns: enum in ['FIXED', 'POINT', 'HINGE', 'SLIDER', 'PISTON', 'GENERIC', 'GENERIC_SPRING', 'MOTOR']
      '''
      
      use_breaking = bool
      '''Constraint can be broken if it receives an impulse above the threshold
         @returns: boolean
      '''
      
      use_limit_ang_x = bool
      '''Limit rotation around X axis
         @returns: boolean
      '''
      
      use_limit_ang_y = bool
      '''Limit rotation around Y axis
         @returns: boolean
      '''
      
      use_limit_ang_z = bool
      '''Limit rotation around Z axis
         @returns: boolean
      '''
      
      use_limit_lin_x = bool
      '''Limit translation on X axis
         @returns: boolean
      '''
      
      use_limit_lin_y = bool
      '''Limit translation on Y axis
         @returns: boolean
      '''
      
      use_limit_lin_z = bool
      '''Limit translation on Z axis
         @returns: boolean
      '''
      
      use_motor_ang = bool
      '''Enable angular motor
         @returns: boolean
      '''
      
      use_motor_lin = bool
      '''Enable linear motor
         @returns: boolean
      '''
      
      use_override_solver_iterations = bool
      '''Override the number of solver iterations for this constraint
         @returns: boolean
      '''
      
      use_spring_ang_x = bool
      '''Enable spring on X rotational axis
         @returns: boolean
      '''
      
      use_spring_ang_y = bool
      '''Enable spring on Y rotational axis
         @returns: boolean
      '''
      
      use_spring_ang_z = bool
      '''Enable spring on Z rotational axis
         @returns: boolean
      '''
      
      use_spring_x = bool
      '''Enable spring on X axis
         @returns: boolean
      '''
      
      use_spring_y = bool
      '''Enable spring on Y axis
         @returns: boolean
      '''
      
      use_spring_z = bool
      '''Enable spring on Z axis
         @returns: boolean
      '''
      
   class RigidBodyObject(types.bpy_struct):
      '''Settings for object participating in Rigid Body Simulation
      '''
   
      angular_damping = float
      '''Amount of angular velocity that is lost over time
         @returns: float in [0, 1]
      '''
      
      collision_collections = bool
      '''Collision collections rigid body belongs to
         @returns: boolean array of 20 items
      '''
      
      collision_margin = float
      '''Threshold of distance near surface where collisions are still considered (best results when non-zero)
         @returns: float in [0, 1]
      '''
      
      collision_shape = str
      '''Collision Shape of object in Rigid Body Simulations
         @returns: enum in ['BOX', 'SPHERE', 'CAPSULE', 'CYLINDER', 'CONE', 'CONVEX_HULL', 'MESH']
      '''
      
      deactivate_angular_velocity = float
      '''Angular Velocity below which simulation stops simulating object
         @returns: float in [0, inf]
      '''
      
      deactivate_linear_velocity = float
      '''Linear Velocity below which simulation stops simulating object
         @returns: float in [0, inf]
      '''
      
      enabled = bool
      '''Rigid Body actively participates to the simulation
         @returns: boolean
      '''
      
      friction = float
      '''Resistance of object to movement
         @returns: float in [0, inf]
      '''
      
      kinematic = bool
      '''Allow rigid body to be controlled by the animation system
         @returns: boolean
      '''
      
      linear_damping = float
      '''Amount of linear velocity that is lost over time
         @returns: float in [0, 1]
      '''
      
      mass = float
      '''How much the object 'weighs' irrespective of gravity
         @returns: float in [0.001, inf]
      '''
      
      mesh_source = str
      '''Source of the mesh used to create collision shape
         @returns: enum in ['BASE', 'DEFORM', 'FINAL']
      '''
      
      restitution = float
      '''Tendency of object to bounce after colliding with another (0 = stays still, 1 = perfectly elastic)
         @returns: float in [0, inf]
      '''
      
      type = str
      '''Role of object in Rigid Body Simulations
         @returns: enum in ['ACTIVE', 'PASSIVE']
      '''
      
      use_deactivation = bool
      '''Enable deactivation of resting rigid bodies (increases performance and stability but can cause glitches)
         @returns: boolean
      '''
      
      use_deform = bool
      '''Rigid body deforms during simulation
         @returns: boolean
      '''
      
      use_margin = bool
      '''Use custom collision margin (some shapes will have a visible gap around them)
         @returns: boolean
      '''
      
      use_start_deactivated = bool
      '''Deactivate rigid body at the start of the simulation
         @returns: boolean
      '''
      
   class RigidBodyWorld(types.bpy_struct):
      '''Self-contained rigid body simulation environment and settings
      '''
   
      collection = types.Collection
      '''Collection containing objects participating in this simulation
         @returns: Collection
      '''
      
      constraints = types.Collection
      '''Collection containing rigid body constraint objects
         @returns: Collection
      '''
      
      effector_weights = types.EffectorWeights # (read only)
      '''
         @returns: EffectorWeights
      '''
      
      enabled = bool
      '''Simulation will be evaluated
         @returns: boolean
      '''
      
      point_cache = types.PointCache # (read only)
      '''
         @returns: PointCache, (never None)
      '''
      
      solver_iterations = int
      '''Number of constraint solver iterations made per simulation step (higher values are more accurate but slower)
         @returns: int in [1, 1000]
      '''
      
      steps_per_second = int
      '''Number of simulation steps taken per second (higher values are more accurate but slower)
         @returns: int in [1, 32767]
      '''
      
      time_scale = float
      '''Change the speed of the simulation
         @returns: float in [0, 100]
      '''
      
      use_split_impulse = bool
      '''Reduce extra velocity that can build up when objects collide (lowers simulation stability a little so use only when necessary)
         @returns: boolean
      '''
      
      def convex_sweep_test(object, start, end):
         '''Sweep test convex rigidbody against the current rigidbody world
            Arguments:
            @object (Object): Rigidbody object with a convex collision shape
               (never None)
            @start (float): array of 3 items in [-inf, inf]
            @end (float): array of 3 items in [-inf, inf]
      
            @returns: 
            (
               object_location(float):The hit location of this sweep test
               array of 3 items in [-inf, inf]
               hitpoint(float):The hit location of this sweep test
               array of 3 items in [-inf, inf]
               normal(float):The face normal at the sweep test hit location
               array of 3 items in [-inf, inf]
               has_hit(int):If the function has found collision point, value is 1, otherwise 0
               in [-inf, inf]
            )
         '''
      
         pass

   class Rotation(types.KeyingSetInfo):
      '''
      '''
   
      def generate(_ksi, _context, ks, data):
         
      
         pass
      
      def iterator(ksi, context, ks):
         
      
         pass
      
      def poll(ksi, context):
         
      
         pass
      
   class SCENE_UL_keying_set_paths(types.UIList):
      '''
      '''
   
      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
         
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class SPHFluidSettings(types.bpy_struct):
      '''Settings for particle fluids physics
      '''
   
      buoyancy = float
      '''Artificial buoyancy force in negative gravity direction based on pressure differences inside the fluid
         @returns: float in [0, 10]
      '''
      
      fluid_radius = float
      '''Fluid interaction radius
         @returns: float in [0, 20]
      '''
      
      linear_viscosity = float
      '''Linear viscosity
         @returns: float in [0, 100]
      '''
      
      plasticity = float
      '''How much the spring rest length can change after the elastic limit is crossed
         @returns: float in [0, 100]
      '''
      
      repulsion = float
      '''How strongly the fluid tries to keep from clustering (factor of stiffness)
         @returns: float in [0, 100]
      '''
      
      rest_density = float
      '''Fluid rest density
         @returns: float in [0, 10000]
      '''
      
      rest_length = float
      '''Spring rest length (factor of particle radius)
         @returns: float in [0, 2]
      '''
      
      solver = str
      '''The code used to calculate internal forces on particles
         @returns: enum in ['DDR', 'CLASSICAL']
      '''
      
      spring_force = float
      '''Spring force
         @returns: float in [0, 100]
      '''
      
      spring_frames = int
      '''Create springs for this number of frames since particles birth (0 is always)
         @returns: int in [0, 100]
      '''
      
      stiff_viscosity = float
      '''Creates viscosity for expanding fluid
         @returns: float in [0, 100]
      '''
      
      stiffness = float
      '''How incompressible the fluid is (speed of sound)
         @returns: float in [0, 1000]
      '''
      
      use_factor_density = bool
      '''Density is calculated as a factor of default density (depends on particle size)
         @returns: boolean
      '''
      
      use_factor_radius = bool
      '''Interaction radius is a factor of 4 * particle size
         @returns: boolean
      '''
      
      use_factor_repulsion = bool
      '''Repulsion is a factor of stiffness
         @returns: boolean
      '''
      
      use_factor_rest_length = bool
      '''Spring rest length is a factor of 2 * particle size
         @returns: boolean
      '''
      
      use_factor_stiff_viscosity = bool
      '''Stiff viscosity is a factor of normal viscosity
         @returns: boolean
      '''
      
      use_initial_rest_length = bool
      '''Use the initial length as spring rest length instead of 2 * particle size
         @returns: boolean
      '''
      
      use_viscoelastic_springs = bool
      '''Use viscoelastic springs instead of Hooke's springs
         @returns: boolean
      '''
      
      yield_ratio = float
      '''How much the spring has to be stretched/compressed in order to change it's rest length
         @returns: float in [0, 1]
      '''
      
   class Scaling(types.KeyingSetInfo):
      '''
      '''
   
      def generate(_ksi, _context, ks, data):
         
      
         pass
      
      def iterator(ksi, context, ks):
         
      
         pass
      
      def poll(ksi, context):
         
      
         pass
      
   class Scene(types.ID):
      '''Scene data-block, consisting in objects and defining time and render related settings
      '''
   
      active_clip = types.MovieClip
      '''Active movie clip used for constraints and viewport drawing
         @returns: MovieClip
      '''
      
      animation_data = types.AnimData # (read only)
      '''Animation data for this data-block
         @returns: AnimData
      '''
      
      audio_distance_model = str
      '''Distance model for distance attenuation calculation
         @returns: enum in ['NONE', 'INVERSE', 'INVERSE_CLAMPED', 'LINEAR', 'LINEAR_CLAMPED', 'EXPONENT', 'EXPONENT_CLAMPED']
      '''
      
      audio_doppler_factor = float
      '''Pitch factor for Doppler effect calculation
         @returns: float in [0, inf]
      '''
      
      audio_doppler_speed = float
      '''Speed of sound for Doppler effect calculation
         @returns: float in [0.01, inf]
      '''
      
      audio_volume = float
      '''Audio volume
         @returns: float in [0, 100]
      '''
      
      background_set = types.Scene
      '''Background set scene
         @returns: Scene
      '''
      
      camera = types.Object
      '''Active camera, used for rendering the scene
         @returns: Object
      '''
      
      collection = types.Collection # (read only)
      '''Scene master collection that objects and other collections in the scene
         @returns: Collection, (never None)
      '''
      
      cursor = types.View3DCursor # (read only)
      '''
         @returns: View3DCursor, (never None)
      '''
      
      cycles = types.CyclesRenderSettings # (read only)
      '''Cycles render settings
         @returns: CyclesRenderSettings
      '''
      
      cycles_curves = types.CyclesCurveRenderSettings # (read only)
      '''Cycles hair rendering settings
         @returns: CyclesCurveRenderSettings
      '''
      
      display = types.SceneDisplay # (read only)
      '''Scene display settings for 3d viewport
         @returns: SceneDisplay
      '''
      
      display_settings = types.ColorManagedDisplaySettings # (read only)
      '''Settings of device saved image would be displayed on
         @returns: ColorManagedDisplaySettings
      '''
      
      eevee = types.SceneEEVEE # (read only)
      '''EEVEE settings for the scene
         @returns: SceneEEVEE
      '''
      
      frame_current = int
      '''Current Frame, to update animation data from python frame_set() instead
         @returns: int in [-1048574, 1048574]
      '''
      
      frame_current_final = float # (read only)
      '''Current frame with subframe and time remapping applied
         @returns: float in [-1.04857e+06, 1.04857e+06]
      '''
      
      frame_end = int
      '''Final frame of the playback/rendering range
         @returns: int in [0, 1048574]
      '''
      
      frame_float = float
      '''
         @returns: float in [-1.04857e+06, 1.04857e+06]
      '''
      
      frame_preview_end = int
      '''Alternative end frame for UI playback
         @returns: int in [-inf, inf]
      '''
      
      frame_preview_start = int
      '''Alternative start frame for UI playback
         @returns: int in [-inf, inf]
      '''
      
      frame_start = int
      '''First frame of the playback/rendering range
         @returns: int in [0, 1048574]
      '''
      
      frame_step = int
      '''Number of frames to skip forward while rendering/playing back each frame
         @returns: int in [0, 1048574]
      '''
      
      frame_subframe = float
      '''
         @returns: float in [0, 1]
      '''
      
      gravity = float
      '''Constant acceleration in a given direction
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      grease_pencil = types.GreasePencil
      '''Grease Pencil data-block used for annotations in the 3D view
         @returns: GreasePencil
      '''
      
      grease_pencil_settings = types.SceneGpencil # (read only)
      '''Grease Pencil settings for the scene
         @returns: SceneGpencil
      '''
      
      is_nla_tweakmode = bool # (read only)
      '''Whether there is any action referenced by NLA being edited (strictly read-only)
         @returns: boolean
      '''
      
      keying_sets = types.KeyingSets # (read only)
      '''Absolute Keying Sets for this Scene
         @returns: KeyingSets Collection of KeyingSet
      '''
      
      keying_sets_all = types.KeyingSetsAll # (read only)
      '''All Keying Sets available for use (Builtins and Absolute Keying Sets for this Scene)
         @returns: KeyingSetsAll Collection of KeyingSet
      '''
      
      lock_frame_selection_to_range = bool
      '''Don't allow frame to be selected with mouse outside of frame range
         @returns: boolean
      '''
      
      mbcrea_after_edition_tools = str
      '''
         @returns: enum in ['None', 'Rigify', 'Blenrig']
      '''
      
      mbcrea_agemasstone_name = str
      '''The name for the file.
         Beginning and ending are automatic
         @returns: string, (never None)
      '''
      
      mbcrea_allow_other_modes = bool
      '''Allow other modes like edit, weight paint...
         @returns: boolean
      '''
      
      mbcrea_base_description = str
      '''The description for this base model.
         Example : Generate the anime female template
         @returns: string, (never None)
      '''
      
      mbcrea_base_expression_filter = str
      '''Filter the base expressions available.
         Case sensitive !
         @returns: string, (never None)
      '''
      
      mbcrea_base_label = str
      '''The label for this base model.
         Example : Human Female
         @returns: string, (never None)
      '''
      
      mbcrea_base_muscle_vgroups = str
      '''
         @returns: enum in ['BASE', 'MUSCLES']
      '''
      
      mbcrea_bboxes_file = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_before_edition_tools = str
      '''
         @returns: enum in ['None', 'Morphcreator', 'Comb_morphcreator', 'cmd_utilities', 'agemasstone_creator', 'fast_creators', 'morphs_for_expressions', 'combine_expressions']
      '''
      
      mbcrea_body_height_Z = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_body_part_expr = str
      '''
         @returns: enum in ['AB', 'BR', 'BS', 'CH', 'CE', 'DE', 'EY', 'ES', 'JA', 'MO', 'NO', 'PU', 'TO', 'OT']
      '''
      
      mbcrea_body_type_files_in = str
      '''
         @returns: enum in ['f_af01_morphs.json', 'f_an01_morphs.json', 'f_an02_morphs.json', 'f_an03_morphs.json', 'f_an03_morphs_extra.json', 'f_as01_morphs.json', 'f_ca01_morphs.json', 'f_ft01_morphs.json', 'f_ft01_morphs_extra.json', 'f_la01_morphs.json', 'm_af01_morphs.json', 'm_an01_morphs.json', 'm_an02_morphs.json', 'm_an03_morphs.json', 'm_an03_morphs_extra.json', 'm_as01_morphs.json', 'm_ca01_morphs.json', 'm_ft01_morphs.json', 'm_ft02_morphs.json', 'm_ft02_morphs_extra.json', 'm_la01_morphs.json']
      '''
      
      mbcrea_body_type_files_out = str
      '''
         @returns: enum in ['f_af01_morphs.json', 'f_an01_morphs.json', 'f_an02_morphs.json', 'f_an03_morphs.json', 'f_an03_morphs_extra.json', 'f_as01_morphs.json', 'f_ca01_morphs.json', 'f_ft01_morphs.json', 'f_ft01_morphs_extra.json', 'f_la01_morphs.json', 'm_af01_morphs.json', 'm_an01_morphs.json', 'm_an02_morphs.json', 'm_an03_morphs.json', 'm_an03_morphs_extra.json', 'm_as01_morphs.json', 'm_ca01_morphs.json', 'm_ft01_morphs.json', 'm_ft02_morphs.json', 'm_ft02_morphs_extra.json', 'm_la01_morphs.json', 'NEW']
      '''
      
      mbcrea_buttock_depth_Y = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_buttock_girth = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_buttock_height_Z = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_buttock_width_X = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_chara_description = str
      '''The description for this character.
         Example : Generate a realistic Caucasian male character
         @returns: string, (never None)
      '''
      
      mbcrea_chara_label = str
      '''The label for this character.
         Example : Human Female
         @returns: string, (never None)
      '''
      
      mbcrea_chara_license = str
      '''
         @returns: enum in ['CC0', 'CC-BY', 'AGPL3', 'AFPL9']
      '''
      
      mbcrea_character_list = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_character_list_without = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_character_new_name = str
      '''The name for the character
         without the gender
         @returns: string, (never None)
      '''
      
      mbcrea_check_element = str
      '''
         @returns: enum in ['vert', 'edge', 'face']
      '''
      
      mbcrea_chest_depth_Y = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_chest_girth = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_chest_width_X = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_cmd_spectrum = str
      '''
         @returns: enum in ['GE', 'ET']
      '''
      
      mbcrea_comb_expression_filter = str
      '''Name the new face expression
         @returns: string, (never None)
      '''
      
      mbcrea_creation_tools = str
      '''
         @returns: enum in ['None', 'Base_model_creation', 'Body_type_creation', 'Body_type_registration', 'Measures_creation', 'Template_morph_creation', 'Joints_creation', 'Vertices_groups', 'Utilities']
      '''
      
      mbcrea_elbow_girth = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_enum_expressions_items = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_expr_name = str
      '''New name for the expression,
         like Downward
         @returns: string, (never None)
      '''
      
      mbcrea_expr_pseudo = str
      '''To avoid overwriting existing files
         Basically it's the name of the author
         @returns: string, (never None)
      '''
      
      mbcrea_feet_heel_width = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_feet_height_Z = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_feet_length = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_feet_width = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_file_categories_content = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_forearm_length = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_gender_files_in = str
      '''
         @returns: enum in ['anime_female_morphs.json', 'anime_male_morphs.json', 'human_female_morphs.json', 'human_female_morphs_extra.json', 'human_male_morphs.json', 'human_male_morphs_extra.json']
      '''
      
      mbcrea_gender_files_out = str
      '''
         @returns: enum in ['anime_female_morphs.json', 'anime_male_morphs.json', 'human_female_morphs.json', 'human_female_morphs_extra.json', 'human_male_morphs.json', 'human_male_morphs_extra.json']
      '''
      
      mbcrea_gender_list = str
      '''
         @returns: enum in ['male', 'female', 'undefined']
      '''
      
      mbcrea_hands_length = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_hands_width = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_head_height_Z = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_head_length = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_head_width_X = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_incremental_saves_expr = bool
      '''Does an incremental save each time
           the final save button is pressed.
         From 001 to 999
         Caution : returns to 001 between sessions
         @returns: boolean
      '''
      
      mbcrea_indices_to_check = str
      '''All indices to select.
         Many indices at once allowed.
         Space, comma are permitted to seperate indices
         @returns: string, (never None)
      '''
      
      mbcrea_integrate_material = bool
      '''You can integrate the material or not.
         @returns: boolean
      '''
      
      mbcrea_joints_base_file = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_joints_base_file_name = str
      '''Another name if you want to create a new joints base file template.
         @returns: string, (never None)
      '''
      
      mbcrea_joints_filter = str
      '''Other filters (more than one is possible)
         @returns: string, (never None)
      '''
      
      mbcrea_joints_filter_h = bool
      '''If selected, shows all _H_ in name
         @returns: boolean
      '''
      
      mbcrea_joints_filter_head = bool
      '''Show only head joints when on
         @returns: boolean
      '''
      
      mbcrea_joints_filter_ik = bool
      '''Show only joints for Inverted Kinematics when on
         @returns: boolean
      '''
      
      mbcrea_joints_filter_l = bool
      '''If selected, shows all _L_ (Left) in name
         @returns: boolean
      '''
      
      mbcrea_joints_filter_r = bool
      '''If selected, shows all _R_ (Right) in name
         @returns: boolean
      '''
      
      mbcrea_joints_filter_t = bool
      '''If selected, shows all _T_ in name
         @returns: boolean
      '''
      
      mbcrea_joints_filter_tail = bool
      '''Show only tail joints when on
         @returns: boolean
      '''
      
      mbcrea_joints_offset_file = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_joints_offset_file_name = str
      '''Another name if you want to create a new joints offset file template.
         @returns: string, (never None)
      '''
      
      mbcrea_lowerleg_bottom_girth = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_lowerleg_calf_girth = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_lowerleg_length = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_measures_file = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_measures_file_name = str
      '''Another name if you want to create a new measures file
         @returns: string, (never None)
      '''
      
      mbcrea_measures_select = bool
      '''Show points when on
         @returns: boolean
      '''
      
      mbcrea_measures_type = str
      '''
         @returns: enum in ['POINTS', 'GIRTH', 'WEIGHTS']
      '''
      
      mbcrea_meshes_list = str
      '''The name used for the template
         @returns: enum in []
      '''
      
      mbcrea_min_max_expr = str
      '''
         @returns: enum in ['MI', 'MA']
      '''
      
      mbcrea_mixing_morphs_number = str
      '''
         @returns: enum in ['2', '3', '4']
      '''
      
      mbcrea_morphing_rename = str
      '''New name for the morph without category.
         Example : NewMorph01
         @returns: string, (never None)
      '''
      
      mbcrea_morphs_file_name = str
      '''Another name if you want to create a new morphs file template.
         @returns: string, (never None)
      '''
      
      mbcrea_morphs_items_1 = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_morphs_items_2 = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_morphs_items_3 = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_morphs_items_4 = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_morphs_minmax_1 = str
      '''
         @returns: enum in ['MI', 'MA']
      '''
      
      mbcrea_morphs_minmax_2 = str
      '''
         @returns: enum in ['MI', 'MA']
      '''
      
      mbcrea_morphs_minmax_3 = str
      '''
         @returns: enum in ['MI', 'MA']
      '''
      
      mbcrea_morphs_minmax_4 = str
      '''
         @returns: enum in ['MI', 'MA']
      '''
      
      mbcrea_neck_girth = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_neck_height_Z = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_new_base_expr_name = str
      '''New body part for expression,
         like ears
         @returns: string, (never None)
      '''
      
      mbcrea_offset_select = bool
      '''Show offset when on
         It's an icosphere
         The offset must exist in the file.
         @returns: boolean
      '''
      
      mbcrea_other_ID_expr = str
      '''Another model for the base expression
         @returns: string, (never None)
      '''
      
      mbcrea_phenotype_name_filter = str
      '''The name for the file.
         @returns: string, (never None)
      '''
      
      mbcrea_preset_name_filter = str
      '''The name for the file.
         Starting with type_ is automatic
         @returns: string, (never None)
      '''
      
      mbcrea_presets_folder = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_project_name = str
      '''Like myproject
         @returns: string, (never None)
      '''
      
      mbcrea_recover_measures_weights = bool
      '''
         @returns: boolean
      '''
      
      mbcrea_root_data = str
      '''
         @returns: enum in ['mb-lab-1_7_8_updater', 'data']
      '''
      
      mbcrea_shared_morphs_extra_file = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_shared_morphs_file = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_shoulders_width = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_special_preset = bool
      '''If the preset is special or common
         @returns: boolean
      '''
      
      mbcrea_standard_ID_expr = str
      '''
         @returns: enum in ['HU', 'AN', 'OT']
      '''
      
      mbcrea_standard_base_expr = str
      '''
         @returns: enum in ['AA', 'AB', 'AC', 'AD', 'AE', 'AF', 'AG', 'AH', 'AI', 'AJ', 'AK', 'AL', 'AM', 'AN', 'AO', 'AP', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AV', 'AW', 'AX', 'AY', 'AY', 'AZ', 'BA', 'BB', 'BC', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BQ', 'BR', 'BS', 'BT', 'BU', 'BV', 'BW', 'BX', 'BY', 'BZ', 'CA', 'CB', 'CC', 'CD', 'CE', 'CF', 'CG', 'CH', 'CI', 'CJ', 'CK', 'CL', 'CM', 'CN', 'CO', 'CP', 'CQ', 'CR', 'CS', 'CT', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ', 'DA', 'DB', 'DC', 'OT']
      '''
      
      mbcrea_template_list = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_template_new_name = str
      '''The name for the template
         @returns: string, (never None)
      '''
      
      mbcrea_texture_albedo = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_texture_blush = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_texture_bump = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_texture_displacement = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_texture_eyelash_albedo = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_texture_eyes = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_texture_frecklemask = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_texture_iris_bump = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_texture_iris_color = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_texture_lipmap = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_texture_nails_albedo = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_texture_sclera_color = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_texture_sclera_mask = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_texture_sebum = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_texture_subdermal = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_texture_teeth_albedo = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_texture_thickness = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_texture_tongue_albedo = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_texture_translucent_mask = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_toggle_edit_object = str
      '''
         @returns: enum in ['OBJECT', 'EDIT', 'WEIGHT_PAINT']
      '''
      
      mbcrea_torso_height_Z = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_transfor_category = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_transfor_file = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_transfor_minmax = str
      '''
         @returns: enum in ['MI', 'MA']
      '''
      
      mbcrea_unselect_before = bool
      '''Unselect all before select
         new vertices/edges/faces
         @returns: boolean
      '''
      
      mbcrea_upperarm_axillary_girth = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_upperarm_length = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_upperleg_bottom_girth = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_upperleg_length = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_upperleg_top_girth = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_vgroups_base_file = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_vgroups_base_file_name = str
      '''Another name if you want to create a new vgroups base file template.
         @returns: string, (never None)
      '''
      
      mbcrea_vgroups_muscles_file = str
      '''
         @returns: enum in []
      '''
      
      mbcrea_vgroups_muscles_file_name = str
      '''Another name if you want to create a new vgroups muscle file template.
         @returns: string, (never None)
      '''
      
      mbcrea_waist_girth = float
      '''
         @returns: float in [0, 3]
      '''
      
      mbcrea_wrist_girth = float
      '''
         @returns: float in [0, 3]
      '''
      
      mblab_add_mask_group = bool
      '''Create a new vertgroup and use it as mask the body under proxy.
         @returns: boolean
      '''
      
      mblab_assets_models = str
      '''
         @returns: enum in []
      '''
      
      mblab_body_mass = float
      '''Preserve the current character body mass
         @returns: float in [0, 1]
      '''
      
      mblab_body_part_name = str
      '''
         @returns: enum in ['AB', 'AR', 'AM', 'BO', 'CH', 'CE', 'CI', 'EA', 'EL', 'EX', 'EY', 'EL', 'EE', 'FA', 'FT', 'FE', 'FO', 'HA', 'HE', 'JA', 'LE', 'MO', 'NE', 'NO', 'PE', 'SH', 'ST', 'TO', 'WA', 'WR']
      '''
      
      mblab_body_tone = float
      '''Preserve the current character body mass
         @returns: float in [0, 1]
      '''
      
      mblab_character_name = str
      '''
         @returns: enum in []
      '''
      
      mblab_export_materials = bool
      '''Include materials in the exported character file
         @returns: boolean
      '''
      
      mblab_export_proportions = bool
      '''Include proportions in the exported character file
         @returns: boolean
      '''
      
      mblab_expression_filter = str
      '''Filter the expressions to show
         @returns: string, (never None)
      '''
      
      mblab_facs_rig = bool
      '''
         @returns: boolean
      '''
      
      mblab_final_prefix = str
      '''The prefix of names for finalized model, skeleton and materials. If none, it will be generated automatically
         @returns: string, (never None)
      '''
      
      mblab_fitref_name = str
      '''
         @returns: enum in []
      '''
      
      mblab_hair_color = str
      '''
         @returns: enum in []
      '''
      
      mblab_incremental_saves = bool
      '''Does an incremental save each time
           the final save button is pressed.
         From 001 to 999
         Caution : returns to 001 between sessions
         @returns: boolean
      '''
      
      mblab_measure_filter = str
      '''Filter the measures to show
         @returns: string, (never None)
      '''
      
      mblab_mix_characters = bool
      '''Mix templates
         @returns: boolean
      '''
      
      mblab_morph_min_max = str
      '''
         @returns: enum in ['MI', 'MA']
      '''
      
      mblab_morph_name = str
      '''Format : ExplicitPartMorphed
         (Without body part category)
         @returns: string, (never None)
      '''
      
      mblab_morphing_body_type = str
      '''Overide the ethnic group.
         4 letters, without f_ or m_.
         Example : af01
         Let empty to not overide
         @returns: string, (never None)
      '''
      
      mblab_morphing_file_extra_name = str
      '''Typically it's the name of the author
         @returns: string, (never None)
      '''
      
      mblab_morphing_spectrum = str
      '''
         @returns: enum in ['GE', 'ET']
      '''
      
      mblab_new_hair_color = str
      '''Enter name for new hair color
         @returns: string, (never None)
      '''
      
      mblab_preserve_body = bool
      '''Preserve the body features
         @returns: boolean
      '''
      
      mblab_preserve_face = bool
      '''Preserve the face features, but not the head shape
         @returns: boolean
      '''
      
      mblab_preserve_fantasy = bool
      '''Preserve the current amount of fantasy morphs
         @returns: boolean
      '''
      
      mblab_preserve_height = bool
      '''Preserve the current character height
         @returns: boolean
      '''
      
      mblab_preserve_mass = bool
      '''Preserve the current relative mass percentage
         @returns: boolean
      '''
      
      mblab_preserve_phenotype = bool
      '''Preserve characteristic traits, like people that are members of the same family
         @returns: boolean
      '''
      
      mblab_preserve_tone = bool
      '''Preserve the current relative tone percentage
         @returns: boolean
      '''
      
      mblab_proxy_library = str
      '''Folder with assets blend files
         @returns: string, (never None)
      '''
      
      mblab_proxy_name = str
      '''
         @returns: enum in []
      '''
      
      mblab_proxy_no_smoothing = bool
      '''Disable additional smoothing applied to the fitting results
         @returns: boolean
      '''
      
      mblab_proxy_offset = float
      '''
         @returns: float in [0, 100]
      '''
      
      mblab_proxy_reverse_fit = bool
      '''Refit the mesh from the character to the base mesh, as a step in converting a character-specific item to a generic proxy
         @returns: boolean
      '''
      
      mblab_proxy_threshold = float
      '''Maximum distance threshold for proxy vertices to closely follow the body surface
         @returns: float in [0, 1000]
      '''
      
      mblab_proxy_use_advanced = bool
      '''Use advanced options
         @returns: boolean
      '''
      
      mblab_proxy_use_all_faces = bool
      '''Use all base mesh faces for close fitting, including insides of the mouth etc
         @returns: boolean
      '''
      
      mblab_random_engine = str
      '''
         @returns: enum in ['LI', 'RE', 'NO', 'CA', 'EX']
      '''
      
      mblab_remove_all_modifiers = bool
      '''If checked, all the modifiers will be removed, except the armature (displacement, subdivision, corrective smooth, etc)
         @returns: boolean
      '''
      
      mblab_rot_offset_0 = float
      '''
         @returns: float in [-1, 1]
      '''
      
      mblab_rot_offset_1 = float
      '''
         @returns: float in [-1, 1]
      '''
      
      mblab_rot_offset_2 = float
      '''
         @returns: float in [-1, 1]
      '''
      
      mblab_save_images_and_backup = bool
      '''Save all images from the skin shader and backup the character in json format
         @returns: boolean
      '''
      
      mblab_set_tone_and_mass = bool
      '''Enable the setting of fixed values for mass and tone using a slider UI
         @returns: boolean
      '''
      
      mblab_show_measures = bool
      '''Show measures controls
         @returns: boolean
      '''
      
      mblab_show_texture_load_save = bool
      '''Show controls to import and export texture images
         @returns: boolean
      '''
      
      mblab_template_name = str
      '''
         @returns: enum in ['human_female_base', 'human_male_base', 'anime_female_base', 'anime_male_base']
      '''
      
      mblab_transfer_proxy_weights = bool
      '''If the proxy has already rigging weights, they will be replaced with the weights projected from the character body
         @returns: boolean
      '''
      
      mblab_use_cycles = bool
      '''This is needed in order to use the skin editor and shaders (highly recommended)
         @returns: boolean
      '''
      
      mblab_use_eevee = bool
      '''This is needed in order to use the skin editor and shaders
         @returns: boolean
      '''
      
      mblab_use_ik = bool
      '''Use inverse kinematic armature
         @returns: boolean
      '''
      
      mblab_use_lamps = bool
      '''Add a set of lights optimized for portrait. Useful during the design of skin (recommended)
         @returns: boolean
      '''
      
      mblab_use_muscle = bool
      '''Use basic muscle armature
         @returns: boolean
      '''
      
      node_tree = types.NodeTree # (read only)
      '''Compositing node tree
         @returns: NodeTree
      '''
      
      objects = types.SceneObjects # (read only)
      '''
         @returns: SceneObjects Collection of Object
      '''
      
      render = types.RenderSettings # (read only)
      '''
         @returns: RenderSettings, (never None)
      '''
      
      rigidbody_world = types.RigidBodyWorld # (read only)
      '''
         @returns: RigidBodyWorld
      '''
      
      safe_areas = types.DisplaySafeAreas # (read only)
      '''
         @returns: DisplaySafeAreas, (never None)
      '''
      
      sequence_editor = types.SequenceEditor # (read only)
      '''
         @returns: SequenceEditor
      '''
      
      sequencer_colorspace_settings = types.ColorManagedSequencerColorspaceSettings # (read only)
      '''Settings of color space sequencer is working in
         @returns: ColorManagedSequencerColorspaceSettings
      '''
      
      show_keys_from_selected_only = bool
      '''Consider keyframes for active Object and/or its selected bones only (in timeline and when jumping between keyframes)
         @returns: boolean
      '''
      
      show_subframe = bool
      '''Show current scene subframe and allow set it using interface tools
         @returns: boolean
      '''
      
      sync_mode = str
      '''How to sync playback
         @returns: enum in ['NONE', 'FRAME_DROP', 'AUDIO_SYNC']
      '''
      
      timeline_markers = types.TimelineMarkers # (read only)
      '''Markers used in all timelines for the current scene
         @returns: TimelineMarkers Collection of TimelineMarker
      '''
      
      tool_settings = types.ToolSettings # (read only)
      '''
         @returns: ToolSettings, (never None)
      '''
      
      transform_orientation_slots = types.TransformOrientationSlot # (read only)
      '''
         @returns: Collection of TransformOrientationSlot
      '''
      
      unit_settings = types.UnitSettings # (read only)
      '''Unit editing settings
         @returns: UnitSettings, (never None)
      '''
      
      use_audio = bool
      '''Play back of audio from Sequence Editor will be muted
         @returns: boolean
      '''
      
      use_audio_scrub = bool
      '''Play audio from Sequence Editor while scrubbing
         @returns: boolean
      '''
      
      use_gravity = bool
      '''Use global gravity for all dynamics
         @returns: boolean
      '''
      
      use_nodes = bool
      '''Enable the compositing node tree
         @returns: boolean
      '''
      
      use_preview_range = bool
      '''Use an alternative start/end frame range for animation playback and view renders
         @returns: boolean
      '''
      
      use_stamp_note = str
      '''User defined note for the render stamping
         @returns: string, (never None)
      '''
      
      view_layers = types.ViewLayers # (read only)
      '''
         @returns: ViewLayers Collection of ViewLayer
      '''
      
      view_settings = types.ColorManagedViewSettings # (read only)
      '''Color management settings applied on image before saving
         @returns: ColorManagedViewSettings
      '''
      
      world = types.World
      '''World used for rendering the scene
         @returns: World
      '''
      
      def statistics(view_layer):
         '''statistics
            Arguments:
            @view_layer (ViewLayer): Active layer
               (never None)
      
            @returns (str): (never None)
         '''
      
         return str

      def frame_set(frame, subframe=0.0):
         '''Set scene frame updating all objects immediately
            Arguments:
            @frame (int): Frame number to set
               in [-1048574, 1048574]
            @subframe (float): Sub-frame time, between 0.0 and 1.0
               in [0, 1], (optional)
      
         '''
      
         pass

      def uvedit_aspect(object):
         '''Get uv aspect for current object
            Arguments:
            @object (Object): Object
               (never None)
      
            @returns (float): aspect
               array of 2 items in [0, inf]
         '''
      
         return float

      def ray_cast(view_layer, origin, direction, distance=1.70141e+38):
         '''Cast a ray onto in object space
            Arguments:
            @view_layer (ViewLayer): Scene Layer
               (never None)
            @origin (float): array of 3 items in [-inf, inf]
            @direction (float): array of 3 items in [-inf, inf]
            @distance (float): Maximum distance
               in [0, inf], (optional)
      
            @returns: 
            (
               result(bool):
               location(float):The hit location of this ray cast
               array of 3 items in [-inf, inf]
               normal(float):The face normal at the ray cast hit location
               array of 3 items in [-inf, inf]
               index(int):The face index, -1 when original data isn't available
               in [-inf, inf]
               object(types.Object):Ray cast object
               
               matrix(float):Matrix
               multi-dimensional array of 4 * 4 items in [-inf, inf]
            )
         '''
      
         pass

      def sequence_editor_create():
         '''Ensure sequence editor is valid in this scene
            @returns (types.SequenceEditor): New sequence editor data or NULL
               
         '''
      
         return types.SequenceEditor

      def sequence_editor_clear():
         '''Clear sequence editor in this scene
         '''
      
         pass

      def alembic_export(filepath, frame_start=1, frame_end=1, xform_samples=1, geom_samples=1, shutter_open=0.0, shutter_close=1.0, selected_only=False, uvs=True, normals=True, vcolors=False, apply_subdiv=True, flatten=False, visible_objects_only=False, renderable_only=False, face_sets=False, subdiv_schema=False, export_hair=True, export_particles=True, compression_type='OGAWA', packuv=False, scale=1.0, triangulate=False, quad_method='BEAUTY', ngon_method='BEAUTY'):
         '''Export to Alembic file (deprecated, use the Alembic export operator)
            Arguments:
            @filepath (str): File path to write Alembic file
               (never None)
            @frame_start (int): Start Frame
               in [-inf, inf], (optional)
            @frame_end (int): End Frame
               in [-inf, inf], (optional)
            @xform_samples (int): Transform samples per frame
               in [1, 128], (optional)
            @geom_samples (int): Geometry samples per frame
               in [1, 128], (optional)
            @shutter_open (float): in [-1, 1], (optional)
            @shutter_close (float): in [-1, 1], (optional)
            @selected_only (bool): Export only selected objects
               (optional)
            @uvs (bool): Export UVs
               (optional)
            @normals (bool): Export normals
               (optional)
            @vcolors (bool): Export vertex colors
               (optional)
            @apply_subdiv (bool): Export subdivision surfaces as meshes
               (optional)
            @flatten (bool): Flatten hierarchy
               (optional)
            @visible_objects_only (bool): Export only objects in visible layers
               (optional)
            @renderable_only (bool): Export only objects marked renderable in the outliner
               (optional)
            @face_sets (bool): Export face sets
               (optional)
            @subdiv_schema (bool): Use Alembic subdivision Schema
               (optional)
            @export_hair (bool): Exports hair particle systems as animated curves
               (optional)
            @export_particles (bool): Exports non-hair particle systems
               (optional)
            @compression_type (str): in ['OGAWA', 'HDF5'], (optional)
            @packuv (bool): Export with packed UV islands
               (optional)
            @scale (float): Value by which to enlarge or shrink the objects with respect to the world's origin
               in [0.0001, 1000], (optional)
            @triangulate (bool): Export Polygons (Quads & NGons) as Triangles
               (optional)
            @quad_method (str): Method for splitting the quads into triangles
               in ['BEAUTY', 'FIXED', 'FIXED_ALTERNATE', 'SHORTEST_DIAGONAL'], (optional)
            @ngon_method (str): Method for splitting the polygons into triangles
               in ['BEAUTY', 'FIXED', 'FIXED_ALTERNATE', 'SHORTEST_DIAGONAL'], (optional)
      
         '''
      
         pass

   class SceneDisplay(types.bpy_struct):
      '''Scene display settings for 3d viewport
      '''
   
      light_direction = float
      '''Direction of the light for shadows and highlights
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      matcap_ssao_attenuation = float
      '''Attenuation constant
         @returns: float in [1, 100000]
      '''
      
      matcap_ssao_distance = float
      '''Distance of object that contribute to the Cavity/Edge effect
         @returns: float in [0, 100000]
      '''
      
      matcap_ssao_samples = int
      '''Number of samples
         @returns: int in [1, 500]
      '''
      
      render_aa = str
      '''Method of anti-aliasing when rendering final image
         @returns: enum in ['OFF', 'FXAA', '5', '8', '11', '16', '32']
      '''
      
      shading = types.View3DShading # (read only)
      '''Shading settings for OpenGL render engine
         @returns: View3DShading
      '''
      
      shadow_focus = float
      '''Shadow factor hardness
         @returns: float in [0, 1]
      '''
      
      shadow_shift = float
      '''Shadow termination angle
         @returns: float in [0, 1]
      '''
      
      viewport_aa = str
      '''Method of anti-aliasing when rendering 3d viewport
         @returns: enum in ['OFF', 'FXAA', '5', '8', '11', '16', '32']
      '''
      
   class SceneEEVEE(types.bpy_struct):
      '''Scene display settings for 3d viewport
      '''
   
      bloom_clamp = float
      '''Maximum intensity a bloom pixel can have (0 to disabled)
         @returns: float in [0, 100000]
      '''
      
      bloom_color = float
      '''Color applied to the bloom effect
         @returns: float array of 3 items in [0, inf]
      '''
      
      bloom_intensity = float
      '''Blend factor
         @returns: float in [0, 10000]
      '''
      
      bloom_knee = float
      '''Makes transition between under/over-threshold gradual
         @returns: float in [0, 1]
      '''
      
      bloom_radius = float
      '''Bloom spread distance
         @returns: float in [0, 100]
      '''
      
      bloom_threshold = float
      '''Filters out pixels under this level of brightness
         @returns: float in [0, 100000]
      '''
      
      bokeh_max_size = float
      '''Max size of the bokeh shape for the depth of field (lower is faster)
         @returns: float in [0, 2000]
      '''
      
      bokeh_threshold = float
      '''Brightness threshold for using sprite base depth of field
         @returns: float in [0, 100000]
      '''
      
      gi_auto_bake = bool
      '''Auto bake indirect lighting when editing probes
         @returns: boolean
      '''
      
      gi_cache_info = str # (read only)
      '''Info on current cache status
         @returns: string, (never None)
      '''
      
      gi_cubemap_display_size = float
      '''Size of the cubemap spheres to debug captured light
         @returns: float in [0.05, 10]
      '''
      
      gi_cubemap_resolution = str
      '''Size of every cubemaps
         @returns: enum in ['64', '128', '256', '512', '1024', '2048', '4096']
      '''
      
      gi_diffuse_bounces = int
      '''Number of time the light is reinjected inside light grids, 0 disable indirect diffuse light
         @returns: int in [0, inf]
      '''
      
      gi_filter_quality = float
      '''Take more samples during cubemap filtering to remove artifacts
         @returns: float in [1, 8]
      '''
      
      gi_glossy_clamp = float
      '''Clamp pixel intensity to reduce noise inside glossy reflections from reflection cubemaps (0 to disabled)
         @returns: float in [0, inf]
      '''
      
      gi_irradiance_display_size = float
      '''Size of the irradiance sample spheres to debug captured light
         @returns: float in [0.05, 10]
      '''
      
      gi_irradiance_smoothing = float
      '''Smoother irradiance interpolation but introduce light bleeding
         @returns: float in [0, inf]
      '''
      
      gi_show_cubemaps = bool
      '''Display captured cubemaps in the viewport
         @returns: boolean
      '''
      
      gi_show_irradiance = bool
      '''Display irradiance samples in the viewport
         @returns: boolean
      '''
      
      gi_visibility_resolution = str
      '''Size of the shadow map applied to each irradiance sample
         @returns: enum in ['8', '16', '32', '64']
      '''
      
      gtao_distance = float
      '''Distance of object that contribute to the ambient occlusion effect
         @returns: float in [0, 100000]
      '''
      
      gtao_factor = float
      '''Factor for ambient occlusion blending
         @returns: float in [0, inf]
      '''
      
      gtao_quality = float
      '''Precision of the horizon search
         @returns: float in [0, 1]
      '''
      
      light_threshold = float
      '''Minimum light intensity for a light to contribute to the lighting
         @returns: float in [0, inf]
      '''
      
      motion_blur_samples = int
      '''Number of samples to take with motion blur
         @returns: int in [1, 64]
      '''
      
      motion_blur_shutter = float
      '''Time taken in frames between shutter open and close
         @returns: float in [0, inf]
      '''
      
      overscan_size = float
      '''Percentage of render size to add as overscan to the internal render buffers
         @returns: float in [0, 50]
      '''
      
      shadow_cascade_size = str
      '''Size of sun light shadow maps
         @returns: enum in ['64', '128', '256', '512', '1024', '2048', '4096']
      '''
      
      shadow_cube_size = str
      '''Size of point and area light shadow maps
         @returns: enum in ['64', '128', '256', '512', '1024', '2048', '4096']
      '''
      
      ssr_border_fade = float
      '''Screen percentage used to fade the SSR
         @returns: float in [0, 0.5]
      '''
      
      ssr_firefly_fac = float
      '''Clamp pixel intensity to remove noise (0 to disabled)
         @returns: float in [0, inf]
      '''
      
      ssr_max_roughness = float
      '''Do not raytrace reflections for roughness above this value
         @returns: float in [0, 1]
      '''
      
      ssr_quality = float
      '''Precision of the screen space raytracing
         @returns: float in [0, 1]
      '''
      
      ssr_thickness = float
      '''Pixel thickness used to detect intersection
         @returns: float in [1e-06, inf]
      '''
      
      sss_jitter_threshold = float
      '''Rotate samples that are below this threshold
         @returns: float in [0, 1]
      '''
      
      sss_samples = int
      '''Number of samples to compute the scattering effect
         @returns: int in [1, 32]
      '''
      
      taa_render_samples = int
      '''Number of samples per pixels for rendering
         @returns: int in [1, inf]
      '''
      
      taa_samples = int
      '''Number of samples, unlimited if 0
         @returns: int in [0, inf]
      '''
      
      use_bloom = bool
      '''High brightness pixels generate a glowing effect
         @returns: boolean
      '''
      
      use_gtao = bool
      '''Enable ambient occlusion to simulate medium scale indirect shadowing
         @returns: boolean
      '''
      
      use_gtao_bent_normals = bool
      '''Compute main non occluded direction to sample the environment
         @returns: boolean
      '''
      
      use_gtao_bounce = bool
      '''An approximation to simulate light bounces giving less occlusion on brighter objects
         @returns: boolean
      '''
      
      use_motion_blur = bool
      '''Enable motion blur effect (only in camera view)
         @returns: boolean
      '''
      
      use_overscan = bool
      '''Internally render past the image border to avoid screen-space effects disappearing
         @returns: boolean
      '''
      
      use_shadow_high_bitdepth = bool
      '''Use 32bit shadows
         @returns: boolean
      '''
      
      use_soft_shadows = bool
      '''Randomize shadowmaps origin to create soft shadows
         @returns: boolean
      '''
      
      use_ssr = bool
      '''Enable screen space reflection
         @returns: boolean
      '''
      
      use_ssr_halfres = bool
      '''Raytrace at a lower resolution
         @returns: boolean
      '''
      
      use_ssr_refraction = bool
      '''Enable screen space Refractions
         @returns: boolean
      '''
      
      use_taa_reprojection = bool
      '''Denoise image using temporal reprojection (can leave some ghosting)
         @returns: boolean
      '''
      
      use_volumetric_lights = bool
      '''Enable scene light interactions with volumetrics
         @returns: boolean
      '''
      
      use_volumetric_shadows = bool
      '''Generate shadows from volumetric material (Very expensive)
         @returns: boolean
      '''
      
      volumetric_end = float
      '''End distance of the volumetric effect
         @returns: float in [1e-06, inf]
      '''
      
      volumetric_light_clamp = float
      '''Maximum light contribution, reducing noise
         @returns: float in [0, inf]
      '''
      
      volumetric_sample_distribution = float
      '''Distribute more samples closer to the camera
         @returns: float in [0, 1]
      '''
      
      volumetric_samples = int
      '''Number of samples to compute volumetric effects
         @returns: int in [1, 256]
      '''
      
      volumetric_shadow_samples = int
      '''Number of samples to compute volumetric shadowing
         @returns: int in [1, 128]
      '''
      
      volumetric_start = float
      '''Start distance of the volumetric effect
         @returns: float in [1e-06, inf]
      '''
      
      volumetric_tile_size = str
      '''Control the quality of the volumetric effects (lower size increase vram usage and quality)
         @returns: enum in ['2', '4', '8', '16']
      '''
      
   class SceneGpencil(types.bpy_struct):
      '''Render settings
      '''
   
      antialias_threshold = float
      '''Threshold for edge detection algorithm (higher values might overblur some part of the image)
         @returns: float in [0, inf]
      '''
      
   class SceneObjects(types.bpy_struct):
      '''All of the scene objects
      '''
   
   class SceneRenderView(types.bpy_struct):
      '''Render viewpoint for 3D stereo and multiview rendering
      '''
   
      camera_suffix = str
      '''Suffix to identify the cameras to use, and added to the render images for this view
         @returns: string, (never None)
      '''
      
      file_suffix = str
      '''Suffix added to the render images for this view
         @returns: string, (never None)
      '''
      
      name = str
      '''Render view name
         @returns: string, (never None)
      '''
      
      use = bool
      '''Disable or enable the render view
         @returns: boolean
      '''
      
   class SceneSequence(types.Sequence):
      '''Sequence strip to used the rendered image of a scene
      '''
   
      alpha_mode = str
      '''Representation of alpha information in the RGBA pixels
         @returns: enum in ['STRAIGHT', 'PREMUL']
      '''
      
      animation_offset_end = int
      '''Animation end offset (trim end)
         @returns: int in [0, inf]
      '''
      
      animation_offset_start = int
      '''Animation start offset (trim start)
         @returns: int in [0, inf]
      '''
      
      color_multiply = float
      '''
         @returns: float in [0, 20]
      '''
      
      color_saturation = float
      '''Adjust the intensity of the input's color
         @returns: float in [0, 20]
      '''
      
      crop = types.SequenceCrop # (read only)
      '''
         @returns: SequenceCrop
      '''
      
      fps = float # (read only)
      '''Frames per second
         @returns: float in [-inf, inf]
      '''
      
      proxy = types.SequenceProxy # (read only)
      '''
         @returns: SequenceProxy
      '''
      
      scene = types.Scene
      '''Scene that this sequence uses
         @returns: Scene
      '''
      
      scene_camera = types.Object
      '''Override the scenes active camera
         @returns: Object
      '''
      
      scene_input = str
      '''Input type to use for the Scene strip
         @returns: enum in ['CAMERA', 'SEQUENCER']
      '''
      
      strobe = float
      '''Only display every nth frame
         @returns: float in [1, 30]
      '''
      
      transform = types.SequenceTransform # (read only)
      '''
         @returns: SequenceTransform
      '''
      
      use_crop = bool
      '''Crop image before processing
         @returns: boolean
      '''
      
      use_deinterlace = bool
      '''Remove fields from video movies
         @returns: boolean
      '''
      
      use_flip_x = bool
      '''Flip on the X axis
         @returns: boolean
      '''
      
      use_flip_y = bool
      '''Flip on the Y axis
         @returns: boolean
      '''
      
      use_float = bool
      '''Convert input to float data
         @returns: boolean
      '''
      
      use_grease_pencil = bool
      '''Show Grease Pencil strokes in OpenGL previews
         @returns: boolean
      '''
      
      use_proxy = bool
      '''Use a preview proxy and/or timecode index for this strip
         @returns: boolean
      '''
      
      use_reverse_frames = bool
      '''Reverse frame order
         @returns: boolean
      '''
      
      use_translation = bool
      '''Translate image before processing
         @returns: boolean
      '''
      
   class Scopes(types.bpy_struct):
      '''Scopes for statistical view of an image
      '''
   
      accuracy = float
      '''Proportion of original image source pixel lines to sample
         @returns: float in [0, 100]
      '''
      
      histogram = types.Histogram # (read only)
      '''Histogram for viewing image statistics
         @returns: Histogram
      '''
      
      use_full_resolution = bool
      '''Sample every pixel of the image
         @returns: boolean
      '''
      
      vectorscope_alpha = float
      '''Opacity of the points
         @returns: float in [0, 1]
      '''
      
      waveform_alpha = float
      '''Opacity of the points
         @returns: float in [0, 1]
      '''
      
      waveform_mode = str
      '''
         @returns: enum in ['LUMA', 'PARADE', 'YCBCR601', 'YCBCR709', 'YCBCRJPG', 'RGB']
      '''
      
   class Screen(types.ID):
      '''Screen data-block, defining the layout of areas in a window
      '''
   
      areas = types.Area # (read only)
      '''Areas the screen is subdivided into
         @returns: Collection of Area
      '''
      
      is_animation_playing = bool # (read only)
      '''Animation playback is active
         @returns: boolean
      '''
      
      is_temporary = bool # (read only)
      '''
         @returns: boolean
      '''
      
      show_fullscreen = bool # (read only)
      '''An area is maximized, filling this screen
         @returns: boolean
      '''
      
      show_statusbar = bool
      '''Show status bar
         @returns: boolean
      '''
      
      use_follow = bool
      '''Follow current frame in editors
         @returns: boolean
      '''
      
      use_play_3d_editors = bool
      '''
         @returns: boolean
      '''
      
      use_play_animation_editors = bool
      '''
         @returns: boolean
      '''
      
      use_play_clip_editors = bool
      '''
         @returns: boolean
      '''
      
      use_play_image_editors = bool
      '''
         @returns: boolean
      '''
      
      use_play_node_editors = bool
      '''
         @returns: boolean
      '''
      
      use_play_properties_editors = bool
      '''
         @returns: boolean
      '''
      
      use_play_sequence_editors = bool
      '''
         @returns: boolean
      '''
      
      use_play_top_left_3d_editor = bool
      '''
         @returns: boolean
      '''
      
   class ScrewModifier(types.Modifier):
      '''Revolve edges
      '''
   
      angle = float
      '''Angle of revolution
         @returns: float in [-inf, inf]
      '''
      
      axis = str
      '''Screw axis
         @returns: enum in ['X', 'Y', 'Z']
      '''
      
      iterations = int
      '''Number of times to apply the screw operation
         @returns: int in [1, 10000]
      '''
      
      merge_threshold = float
      '''Limit below which to merge vertices
         @returns: float in [0, inf]
      '''
      
      object = types.Object
      '''Object to define the screw axis
         @returns: Object
      '''
      
      render_steps = int
      '''Number of steps in the revolution
         @returns: int in [1, 10000]
      '''
      
      screw_offset = float
      '''Offset the revolution along its axis
         @returns: float in [-inf, inf]
      '''
      
      steps = int
      '''Number of steps in the revolution
         @returns: int in [1, 10000]
      '''
      
      use_merge_vertices = bool
      '''Merge adjacent vertices (screw offset must be zero)
         @returns: boolean
      '''
      
      use_normal_calculate = bool
      '''Calculate the order of edges (needed for meshes, but not curves)
         @returns: boolean
      '''
      
      use_normal_flip = bool
      '''Flip normals of lathed faces
         @returns: boolean
      '''
      
      use_object_screw_offset = bool
      '''Use the distance between the objects to make a screw
         @returns: boolean
      '''
      
      use_smooth_shade = bool
      '''Output faces with smooth shading rather than flat shaded
         @returns: boolean
      '''
      
      use_stretch_u = bool
      '''Stretch the U coordinates between 0-1 when UV's are present
         @returns: boolean
      '''
      
      use_stretch_v = bool
      '''Stretch the V coordinates between 0-1 when UV's are present
         @returns: boolean
      '''
      
   class Sculpt(types.Paint):
      '''
      '''
   
      constant_detail_resolution = float
      '''Maximum edge length for dynamic topology sculpting (as divisor of blender unit - higher value means smaller edge length)
         @returns: float in [0.0001, inf]
      '''
      
      detail_percent = float
      '''Maximum edge length for dynamic topology sculpting (in brush percenage)
         @returns: float in [-inf, inf]
      '''
      
      detail_refine_method = str
      '''In dynamic-topology mode, how to add or remove mesh detail
         @returns: enum in ['SUBDIVIDE', 'COLLAPSE', 'SUBDIVIDE_COLLAPSE']
      '''
      
      detail_size = float
      '''Maximum edge length for dynamic topology sculpting (in pixels)
         @returns: float in [-inf, inf]
      '''
      
      detail_type_method = str
      '''In dynamic-topology mode, how mesh detail size is calculated
         @returns: enum in ['RELATIVE', 'CONSTANT', 'BRUSH', 'MANUAL']
      '''
      
      gravity = float
      '''Amount of gravity after each dab
         @returns: float in [0, 1]
      '''
      
      gravity_object = types.Object
      '''Object whose Z axis defines orientation of gravity
         @returns: Object
      '''
      
      lock_x = bool
      '''Disallow changes to the X axis of vertices
         @returns: boolean
      '''
      
      lock_y = bool
      '''Disallow changes to the Y axis of vertices
         @returns: boolean
      '''
      
      lock_z = bool
      '''Disallow changes to the Z axis of vertices
         @returns: boolean
      '''
      
      radial_symmetry = int
      '''Number of times to copy strokes across the surface
         @returns: int array of 3 items in [1, 64]
      '''
      
      show_face_sets = bool
      '''Show Face Sets as overlay on object
         @returns: boolean
      '''
      
      show_mask = bool
      '''Show mask as overlay on object
         @returns: boolean
      '''
      
      symmetrize_direction = str
      '''Source and destination for symmetrize operator
         @returns: enum in ['NEGATIVE_X', 'POSITIVE_X', 'NEGATIVE_Y', 'POSITIVE_Y', 'NEGATIVE_Z', 'POSITIVE_Z']
      '''
      
      use_automasking_boundary_edges = bool
      '''Do not affect non manifold boundary edges
         @returns: boolean
      '''
      
      use_automasking_boundary_face_sets = bool
      '''Do not affect vertices that belong to a Face Set boundary
         @returns: boolean
      '''
      
      use_automasking_face_sets = bool
      '''Affect only vertices that share Face Sets with the active vertex
         @returns: boolean
      '''
      
      use_automasking_topology = bool
      '''Affect only vertices connected to the active vertex under the brush
         @returns: boolean
      '''
      
      use_deform_only = bool
      '''Use only deformation modifiers (temporary disable all constructive modifiers except multi-resolution)
         @returns: boolean
      '''
      
      use_smooth_shading = bool
      '''Show faces in dynamic-topology mode with smooth shading rather than flat shaded
         @returns: boolean
      '''
      
      use_threaded = bool
      '''Take advantage of multiple CPU cores to improve sculpting performance
         @returns: boolean
      '''
      
   class SelectedUvElement(types.PropertyGroup):
      '''
      '''
   
      element_index = int
      '''
         @returns: int in [0, inf]
      '''
      
      face_index = int
      '''
         @returns: int in [0, inf]
      '''
      
   class Sequence(types.bpy_struct):
      '''Sequence strip in the sequence editor
      '''
   
      blend_alpha = float
      '''Percentage of how much the strip's colors affect other strips
         @returns: float in [0, 1]
      '''
      
      blend_type = str
      '''Method for controlling how the strip combines with other strips
         @returns: enum in ['REPLACE', 'CROSS', 'DARKEN', 'MULTIPLY', 'BURN', 'LINEAR_BURN', 'LIGHTEN', 'SCREEN', 'DODGE', 'ADD', 'OVERLAY', 'SOFT_LIGHT', 'HARD_LIGHT', 'VIVID_LIGHT', 'LINEAR_LIGHT', 'PIN_LIGHT', 'DIFFERENCE', 'EXCLUSION', 'SUBTRACT', 'HUE', 'SATURATION', 'COLOR', 'VALUE', 'ALPHA_OVER', 'ALPHA_UNDER', 'GAMMA_CROSS', 'OVER_DROP']
      '''
      
      channel = int
      '''Y position of the sequence strip
         @returns: int in [1, 32]
      '''
      
      effect_fader = float
      '''Custom fade value
         @returns: float in [0, 1]
      '''
      
      frame_duration = int # (read only)
      '''The length of the contents of this strip before the handles are applied
         @returns: int in [1, 1048574]
      '''
      
      frame_final_duration = int
      '''The length of the contents of this strip after the handles are applied
         @returns: int in [1, 1048574]
      '''
      
      frame_final_end = int
      '''End frame displayed in the sequence editor after offsets are applied
         @returns: int in [-inf, inf]
      '''
      
      frame_final_start = int
      '''Start frame displayed in the sequence editor after offsets are applied, setting this is equivalent to moving the handle, not the actual start frame
         @returns: int in [-inf, inf]
      '''
      
      frame_offset_end = int
      '''
         @returns: int in [-inf, inf]
      '''
      
      frame_offset_start = int
      '''
         @returns: int in [-inf, inf]
      '''
      
      frame_start = int
      '''X position where the strip begins
         @returns: int in [-inf, inf]
      '''
      
      frame_still_end = int
      '''
         @returns: int in [0, 1048574]
      '''
      
      frame_still_start = int
      '''
         @returns: int in [0, 1048574]
      '''
      
      lock = bool
      '''Lock strip so that it cannot be transformed
         @returns: boolean
      '''
      
      modifiers = types.SequenceModifiers # (read only)
      '''Modifiers affecting this strip
         @returns: SequenceModifiers Collection of SequenceModifier
      '''
      
      mute = bool
      '''Disable strip so that it cannot be viewed in the output
         @returns: boolean
      '''
      
      name = str
      '''
         @returns: string, (never None)
      '''
      
      override_cache_settings = bool
      '''Override global cache settings
         @returns: boolean
      '''
      
      select = bool
      '''
         @returns: boolean
      '''
      
      select_left_handle = bool
      '''
         @returns: boolean
      '''
      
      select_right_handle = bool
      '''
         @returns: boolean
      '''
      
      speed_factor = float
      '''Multiply the current speed of the sequence with this number or remap current frame to this frame
         @returns: float in [-inf, inf]
      '''
      
      type = str # (read only)
      '''
         @returns: enum in ['IMAGE', 'META', 'SCENE', 'MOVIE', 'MOVIECLIP', 'MASK', 'SOUND', 'CROSS', 'ADD', 'SUBTRACT', 'ALPHA_OVER', 'ALPHA_UNDER', 'GAMMA_CROSS', 'MULTIPLY', 'OVER_DROP', 'WIPE', 'GLOW', 'TRANSFORM', 'COLOR', 'SPEED', 'MULTICAM', 'ADJUSTMENT', 'GAUSSIAN_BLUR', 'TEXT', 'COLORMIX']
      '''
      
      use_cache_composite = bool
      '''Cache intermediate composited images, for faster tweaking of stacked strips at the cost of memory usage
         @returns: boolean
      '''
      
      use_cache_preprocessed = bool
      '''Cache pre-processed images, for faster tweaking of effects at the cost of memory usage
         @returns: boolean
      '''
      
      use_cache_raw = bool
      '''Cache raw images read from disk, for faster tweaking of strip parameters at the cost of memory usage
         @returns: boolean
      '''
      
      use_default_fade = bool
      '''Fade effect using the built-in default (usually make transition as long as effect strip)
         @returns: boolean
      '''
      
      use_linear_modifiers = bool
      '''Calculate modifiers in linear space instead of sequencer's space
         @returns: boolean
      '''
      
      def update(data=False):
         '''Update the strip dimensions
            Arguments:
            @data (bool): Update strip data
               (optional)
      
         '''
      
         pass

      def strip_elem_from_frame(frame):
         '''Return the strip element from a given frame or None
            Arguments:
            @frame (int): The frame to get the strip element from
               in [-1048574, 1048574]
      
            @returns (types.SequenceElement): strip element of the current frame
               
         '''
      
         return types.SequenceElement

      def swap(other):
         '''swap
            Arguments:
            @other (Sequence): (never None)
      
         '''
      
         pass

   class SequenceColorBalance(types.SequenceColorBalanceData):
      '''Color balance parameters for a sequence strip
      '''
   
   class SequenceColorBalanceData(types.bpy_struct):
      '''Color balance parameters for a sequence strip and it's modifiers
      '''
   
      gain = float
      '''Color balance gain (highlights)
         @returns: float array of 3 items in [0, inf]
      '''
      
      gamma = float
      '''Color balance gamma (midtones)
         @returns: float array of 3 items in [0, inf]
      '''
      
      invert_gain = bool
      '''Invert the gain color`
         @returns: boolean
      '''
      
      invert_gamma = bool
      '''Invert the gamma color
         @returns: boolean
      '''
      
      invert_lift = bool
      '''Invert the lift color
         @returns: boolean
      '''
      
      lift = float
      '''Color balance lift (shadows)
         @returns: float array of 3 items in [0, inf]
      '''
      
   class SequenceCrop(types.bpy_struct):
      '''Cropping parameters for a sequence strip
      '''
   
      max_x = int
      '''Number of pixels to crop from the right side
         @returns: int in [-inf, inf]
      '''
      
      max_y = int
      '''Number of pixels to crop from the top
         @returns: int in [-inf, inf]
      '''
      
      min_x = int
      '''Number of pixels to crop from the left side
         @returns: int in [-inf, inf]
      '''
      
      min_y = int
      '''Number of pixels to crop from the bottom
         @returns: int in [-inf, inf]
      '''
      
   class SequenceEditor(types.bpy_struct):
      '''Sequence editing data for a Scene data-block
      '''
   
      active_strip = types.Sequence
      '''Sequencer's active strip
         @returns: Sequence
      '''
      
      meta_stack = types.Sequence # (read only)
      '''Meta strip stack, last is currently edited meta strip
         @returns: Collection of Sequence
      '''
      
      overlay_frame = int
      '''Number of frames to offset
         @returns: int in [-inf, inf]
      '''
      
      proxy_dir = str
      '''
         @returns: string, (never None)
      '''
      
      proxy_storage = str
      '''How to store proxies for this project
         @returns: enum in ['PER_STRIP', 'PROJECT']
      '''
      
      recycle_max_cost = float
      '''Only frames with cost lower than this value will be recycled
         @returns: float in [0, 10]
      '''
      
      sequences = types.Sequences # (read only)
      '''Top-level strips only
         @returns: Sequences Collection of Sequence
      '''
      
      sequences_all = types.Sequence # (read only)
      '''All strips, recursively including those inside metastrips
         @returns: Collection of Sequence
      '''
      
      show_cache = bool
      '''Visualize cached images on the timeline
         @returns: boolean
      '''
      
      show_cache_composite = bool
      '''Visualize cached composite images
         @returns: boolean
      '''
      
      show_cache_final_out = bool
      '''Visualize cached complete frames
         @returns: boolean
      '''
      
      show_cache_preprocessed = bool
      '''Visualize cached pre-processed images
         @returns: boolean
      '''
      
      show_cache_raw = bool
      '''Visualize cached raw images
         @returns: boolean
      '''
      
      show_overlay = bool
      '''Partial overlay on top of the sequencer with a frame offset
         @returns: boolean
      '''
      
      use_cache_composite = bool
      '''Cache intermediate composited images, for faster tweaking of stacked strips at the cost of memory usage
         @returns: boolean
      '''
      
      use_cache_final = bool
      '''Cache final image for each frame
         @returns: boolean
      '''
      
      use_cache_preprocessed = bool
      '''Cache pre-processed images, for faster tweaking of effects at the cost of memory usage
         @returns: boolean
      '''
      
      use_cache_raw = bool
      '''Cache raw images read from disk, for faster tweaking of strip parameters at the cost of memory usage
         @returns: boolean
      '''
      
      use_overlay_lock = bool
      '''
         @returns: boolean
      '''
      
      use_prefetch = bool
      '''Render frames ahead of playhead in background for faster playback
         @returns: boolean
      '''
      
   class SequenceElement(types.bpy_struct):
      '''Sequence strip data for a single frame
      '''
   
      filename = str
      '''Name of the source file
         @returns: string, (never None)
      '''
      
      orig_height = int # (read only)
      '''Original image height
         @returns: int in [-inf, inf]
      '''
      
      orig_width = int # (read only)
      '''Original image width
         @returns: int in [-inf, inf]
      '''
      
   class SequenceElements(types.bpy_struct):
      '''Collection of SequenceElement
      '''
   
      def append(filename):
         '''Push an image from ImageSequence.directory
            Arguments:
            @filename (str): Filepath to image
               (never None)
      
            @returns (types.SequenceElement): New SequenceElement
               
         '''
      
         return types.SequenceElement

      def pop(index):
         '''Pop an image off the collection
            Arguments:
            @index (int): Index of image to remove
               in [-inf, inf]
      
         '''
      
         pass

   class SequenceModifier(types.bpy_struct):
      '''Modifier for sequence strip
      '''
   
      input_mask_id = types.Mask
      '''Mask ID used as mask input for the modifier
         @returns: Mask
      '''
      
      input_mask_strip = types.Sequence
      '''Strip used as mask input for the modifier
         @returns: Sequence
      '''
      
      input_mask_type = str
      '''Type of input data used for mask
         @returns: enum in ['STRIP', 'ID']
      '''
      
      mask_time = str
      '''Time to use for the Mask animation
         @returns: enum in ['RELATIVE', 'ABSOLUTE']
      '''
      
      mute = bool
      '''Mute this modifier
         @returns: boolean
      '''
      
      name = str
      '''
         @returns: string, (never None)
      '''
      
      show_expanded = bool
      '''Mute expanded settings for the modifier
         @returns: boolean
      '''
      
      type = str # (read only)
      '''
         @returns: enum in ['COLOR_BALANCE', 'CURVES', 'HUE_CORRECT', 'BRIGHT_CONTRAST', 'MASK', 'WHITE_BALANCE', 'TONEMAP']
      '''
      
   class SequenceModifiers(types.bpy_struct):
      '''Collection of strip modifiers
      '''
   
      def new(name, type):
         '''Add a new modifier
            Arguments:
            @name (str): New name for the modifier
               (never None)
            @type (str): Modifier type to add
               in ['COLOR_BALANCE', 'CURVES', 'HUE_CORRECT', 'BRIGHT_CONTRAST', 'MASK', 'WHITE_BALANCE', 'TONEMAP']
      
            @returns (types.SequenceModifier): Newly created modifier
               
         '''
      
         return types.SequenceModifier

      def remove(modifier):
         '''Remove an existing modifier from the sequence
            Arguments:
            @modifier (SequenceModifier): Modifier to remove
               (never None)
      
         '''
      
         pass

      def clear():
         '''Remove all modifiers from the sequence
         '''
      
         pass

   class SequenceProxy(types.bpy_struct):
      '''Proxy parameters for a sequence strip
      '''
   
      build_100 = bool
      '''Build 100% proxy resolution
         @returns: boolean
      '''
      
      build_25 = bool
      '''Build 25% proxy resolution
         @returns: boolean
      '''
      
      build_50 = bool
      '''Build 50% proxy resolution
         @returns: boolean
      '''
      
      build_75 = bool
      '''Build 75% proxy resolution
         @returns: boolean
      '''
      
      build_free_run = bool
      '''Build free run time code index
         @returns: boolean
      '''
      
      build_free_run_rec_date = bool
      '''Build free run time code index using Record Date/Time
         @returns: boolean
      '''
      
      build_record_run = bool
      '''Build record run time code index
         @returns: boolean
      '''
      
      directory = str
      '''Location to store the proxy files
         @returns: string, (never None)
      '''
      
      filepath = str
      '''Location of custom proxy file
         @returns: string, (never None)
      '''
      
      quality = int
      '''JPEG Quality of proxies to build
         @returns: int in [0, 32767]
      '''
      
      timecode = str
      '''Method for reading the inputs timecode
         @returns: enum in ['NONE', 'RECORD_RUN', 'FREE_RUN', 'FREE_RUN_REC_DATE', 'RECORD_RUN_NO_GAPS']
      '''
      
      use_overwrite = bool
      '''Overwrite existing proxy files when building
         @returns: boolean
      '''
      
      use_proxy_custom_directory = bool
      '''Use a custom directory to store data
         @returns: boolean
      '''
      
      use_proxy_custom_file = bool
      '''Use a custom file to read proxy data from
         @returns: boolean
      '''
      
   class SequenceTransform(types.bpy_struct):
      '''Transform parameters for a sequence strip
      '''
   
      offset_x = int
      '''Amount to move the input on the X axis within its boundaries
         @returns: int in [-inf, inf]
      '''
      
      offset_y = int
      '''Amount to move the input on the Y axis within its boundaries
         @returns: int in [-inf, inf]
      '''
      
   class SequencerTonemapModifierData(types.SequenceModifier):
      '''Tone mapping modifier
      '''
   
      adaptation = float
      '''If 0, global; if 1, based on pixel intensity
         @returns: float in [0, 1]
      '''
      
      contrast = float
      '''Set to 0 to use estimate from input image
         @returns: float in [0, 1]
      '''
      
      correction = float
      '''If 0, same for all channels; if 1, each independent
         @returns: float in [0, 1]
      '''
      
      gamma = float
      '''If not used, set to 1
         @returns: float in [0.001, 3]
      '''
      
      intensity = float
      '''If less than zero, darkens image; otherwise, makes it brighter
         @returns: float in [-8, 8]
      '''
      
      key = float
      '''The value the average luminance is mapped to
         @returns: float in [0, 1]
      '''
      
      offset = float
      '''Normally always 1, but can be used as an extra control to alter the brightness curve
         @returns: float in [0.001, 10]
      '''
      
      tonemap_type = str
      '''Tone mapping algorithm
         @returns: enum in ['RD_PHOTORECEPTOR', 'RH_SIMPLE']
      '''
      
   class Sequences(types.bpy_struct):
      '''Collection of Sequences
      '''
   
      def new_clip(name, clip, channel, frame_start):
         '''Add a new movie clip sequence
            Arguments:
            @name (str): Name for the new sequence
               (never None)
            @clip (MovieClip): Movie clip to add
               (never None)
            @channel (int): The channel for the new sequence
               in [1, 32]
            @frame_start (int): The start frame for the new sequence
               in [-1048574, 1048574]
      
            @returns (types.Sequence): New Sequence
               
         '''
      
         return types.Sequence

      def new_mask(name, mask, channel, frame_start):
         '''Add a new mask sequence
            Arguments:
            @name (str): Name for the new sequence
               (never None)
            @mask (Mask): Mask to add
               (never None)
            @channel (int): The channel for the new sequence
               in [1, 32]
            @frame_start (int): The start frame for the new sequence
               in [-1048574, 1048574]
      
            @returns (types.Sequence): New Sequence
               
         '''
      
         return types.Sequence

      def new_scene(name, scene, channel, frame_start):
         '''Add a new scene sequence
            Arguments:
            @name (str): Name for the new sequence
               (never None)
            @scene (Scene): Scene to add
               (never None)
            @channel (int): The channel for the new sequence
               in [1, 32]
            @frame_start (int): The start frame for the new sequence
               in [-1048574, 1048574]
      
            @returns (types.Sequence): New Sequence
               
         '''
      
         return types.Sequence

      def new_image(name, filepath, channel, frame_start):
         '''Add a new image sequence
            Arguments:
            @name (str): Name for the new sequence
               (never None)
            @filepath (str): Filepath to image
               (never None)
            @channel (int): The channel for the new sequence
               in [1, 32]
            @frame_start (int): The start frame for the new sequence
               in [-1048574, 1048574]
      
            @returns (types.Sequence): New Sequence
               
         '''
      
         return types.Sequence

      def new_movie(name, filepath, channel, frame_start):
         '''Add a new movie sequence
            Arguments:
            @name (str): Name for the new sequence
               (never None)
            @filepath (str): Filepath to movie
               (never None)
            @channel (int): The channel for the new sequence
               in [1, 32]
            @frame_start (int): The start frame for the new sequence
               in [-1048574, 1048574]
      
            @returns (types.Sequence): New Sequence
               
         '''
      
         return types.Sequence

      def new_sound(name, filepath, channel, frame_start):
         '''Add a new sound sequence
            Arguments:
            @name (str): Name for the new sequence
               (never None)
            @filepath (str): Filepath to movie
               (never None)
            @channel (int): The channel for the new sequence
               in [1, 32]
            @frame_start (int): The start frame for the new sequence
               in [-1048574, 1048574]
      
            @returns (types.Sequence): New Sequence
               
         '''
      
         return types.Sequence

      def new_effect(name, type, channel, frame_start, frame_end=0, seq1=None, seq2=None, seq3=None):
         '''Add a new effect sequence
            Arguments:
            @name (str): Name for the new sequence
               (never None)
            @type (str): type for the new sequence
               in ['CROSS', 'ADD', 'SUBTRACT', 'ALPHA_OVER', 'ALPHA_UNDER', 'GAMMA_CROSS', 'MULTIPLY', 'OVER_DROP', 'WIPE', 'GLOW', 'TRANSFORM', 'COLOR', 'SPEED', 'MULTICAM', 'ADJUSTMENT', 'GAUSSIAN_BLUR', 'TEXT', 'COLORMIX']
            @channel (int): The channel for the new sequence
               in [1, 32]
            @frame_start (int): The start frame for the new sequence
               in [-inf, inf]
            @frame_end (int): The end frame for the new sequence
               in [-inf, inf], (optional)
            @seq1 (Sequence): Sequence 1 for effect
               (optional)
            @seq2 (Sequence): Sequence 2 for effect
               (optional)
            @seq3 (Sequence): Sequence 3 for effect
               (optional)
      
            @returns (types.Sequence): New Sequence
               
         '''
      
         return types.Sequence

      def remove(sequence):
         '''Remove a Sequence
            Arguments:
            @sequence (Sequence): Sequence to remove
               (never None)
      
         '''
      
         pass

   class ShaderFx(types.bpy_struct):
      '''Effect affecting the grease pencil object
      '''
   
      name = str
      '''Effect name
         @returns: string, (never None)
      '''
      
      show_expanded = bool
      '''Set effect expanded in the user interface
         @returns: boolean
      '''
      
      show_in_editmode = bool
      '''Display effect in Edit mode
         @returns: boolean
      '''
      
      show_render = bool
      '''Use effect during render
         @returns: boolean
      '''
      
      show_viewport = bool
      '''Display effect in viewport
         @returns: boolean
      '''
      
      type = str # (read only)
      '''
         @returns: enum in ['FX_BLUR', 'FX_COLORIZE', 'FX_FLIP', 'FX_GLOW', 'FX_PIXEL', 'FX_RIM', 'FX_SHADOW', 'FX_SWIRL', 'FX_WAVE']
      '''
      
   class ShaderFxBlur(types.ShaderFx):
      '''Gaussian Blur effect
      '''
   
      rotation = float
      '''Rotation of the effect
         @returns: float in [-inf, inf]
      '''
      
      samples = int
      '''Number of Blur Samples (zero, disable blur)
         @returns: int in [0, 32]
      '''
      
      size = float
      '''Factor of Blur
         @returns: float array of 2 items in [0, inf]
      '''
      
      use_dof_mode = bool
      '''Blur using camera depth of field
         @returns: boolean
      '''
      
   class ShaderFxColorize(types.ShaderFx):
      '''Colorize effect
      '''
   
      factor = float
      '''Mix factor
         @returns: float in [0, 1]
      '''
      
      high_color = float
      '''Second color used for effect
         @returns: float array of 4 items in [0, 1]
      '''
      
      low_color = float
      '''First color used for effect
         @returns: float array of 4 items in [0, 1]
      '''
      
      mode = str
      '''Effect mode
         @returns: enum in ['GRAYSCALE', 'SEPIA', 'DUOTONE', 'TRANSPARENT', 'CUSTOM']
      '''
      
   class ShaderFxFlip(types.ShaderFx):
      '''Flip effect
      '''
   
      flip_horizontal = bool
      '''Flip image horizontally
         @returns: boolean
      '''
      
      flip_vertical = bool
      '''Flip image vertically
         @returns: boolean
      '''
      
   class ShaderFxGlow(types.ShaderFx):
      '''Glow effect
      '''
   
      blend_mode = str
      '''Blend mode
         @returns: enum in ['REGULAR', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE']
      '''
      
      glow_color = float
      '''Color used for generated glow
         @returns: float array of 3 items in [0, 1]
      '''
      
      mode = str
      '''Glow mode
         @returns: enum in ['LUMINANCE', 'COLOR']
      '''
      
      opacity = float
      '''Effect Opacity
         @returns: float in [0, 1]
      '''
      
      rotation = float
      '''Rotation of the effect
         @returns: float in [-inf, inf]
      '''
      
      samples = int
      '''Number of Blur Samples
         @returns: int in [1, 32]
      '''
      
      select_color = float
      '''Color selected to apply glow
         @returns: float array of 3 items in [0, 1]
      '''
      
      size = float
      '''Size of the effect
         @returns: float array of 2 items in [0, inf]
      '''
      
      threshold = float
      '''Limit to select color for glow effect
         @returns: float in [0, 1]
      '''
      
      use_glow_under = bool
      '''Glow only areas with alpha (not supported with Regular blend mode)
         @returns: boolean
      '''
      
   class ShaderFxPixel(types.ShaderFx):
      '''Pixelate effect
      '''
   
      color = float
      '''Color used for lines
         @returns: float array of 4 items in [0, 1]
      '''
      
      size = int
      '''Pixel size
         @returns: int array of 2 items in [1, 32767]
      '''
      
   class ShaderFxRim(types.ShaderFx):
      '''Rim effect
      '''
   
      blur = int
      '''Number of pixels for blurring rim (set to 0 to disable)
         @returns: int array of 2 items in [0, 32767]
      '''
      
      mask_color = float
      '''Color that must be kept
         @returns: float array of 3 items in [0, 1]
      '''
      
      mode = str
      '''Blend mode
         @returns: enum in ['NORMAL', 'OVERLAY', 'ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE']
      '''
      
      offset = int
      '''Offset of the rim
         @returns: int array of 2 items in [-32768, 32767]
      '''
      
      rim_color = float
      '''Color used for Rim
         @returns: float array of 3 items in [0, 1]
      '''
      
      samples = int
      '''Number of Blur Samples (zero, disable blur)
         @returns: int in [0, 32]
      '''
      
   class ShaderFxShadow(types.ShaderFx):
      '''Shadow effect
      '''
   
      amplitude = float
      '''Amplitude of Wave
         @returns: float in [0, inf]
      '''
      
      blur = int
      '''Number of pixels for blurring shadow (set to 0 to disable)
         @returns: int array of 2 items in [0, 32767]
      '''
      
      object = types.Object
      '''Object to determine center of rotation
         @returns: Object
      '''
      
      offset = int
      '''Offset of the shadow
         @returns: int array of 2 items in [-32768, 32767]
      '''
      
      orientation = str
      '''Direction of the wave
         @returns: enum in ['HORIZONTAL', 'VERTICAL']
      '''
      
      period = float
      '''Period of Wave
         @returns: float in [0, inf]
      '''
      
      phase = float
      '''Phase Shift of Wave
         @returns: float in [-inf, inf]
      '''
      
      rotation = float
      '''Rotation around center or object
         @returns: float in [-6.28319, 6.28319]
      '''
      
      samples = int
      '''Number of Blur Samples (zero, disable blur)
         @returns: int in [0, 32]
      '''
      
      scale = float
      '''Offset of the shadow
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      shadow_color = float
      '''Color used for Shadow
         @returns: float array of 4 items in [0, 1]
      '''
      
      use_object = bool
      '''Use object as center of rotation
         @returns: boolean
      '''
      
      use_wave = bool
      '''Use wave effect
         @returns: boolean
      '''
      
   class ShaderFxSwirl(types.ShaderFx):
      '''Swirl effect
      '''
   
      angle = float
      '''Angle of rotation
         @returns: float in [-31.4159, 31.4159]
      '''
      
      object = types.Object
      '''Object to determine center location
         @returns: Object
      '''
      
      radius = int
      '''Radius to apply
         @returns: int in [0, 32767]
      '''
      
      use_transparent = bool
      '''Make image transparent outside of radius
         @returns: boolean
      '''
      
   class ShaderFxWave(types.ShaderFx):
      '''Wave Deformation effect
      '''
   
      amplitude = float
      '''Amplitude of Wave
         @returns: float in [0, inf]
      '''
      
      orientation = str
      '''Direction of the wave
         @returns: enum in ['HORIZONTAL', 'VERTICAL']
      '''
      
      period = float
      '''Period of Wave
         @returns: float in [0, inf]
      '''
      
      phase = float
      '''Phase Shift of Wave
         @returns: float in [-inf, inf]
      '''
      
   class ShaderNode(types.NodeInternal):
      '''Material shader node
      '''
   
      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeAddShader(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeAmbientOcclusion(types.ShaderNode):
      '''
      '''
   
      inside = bool
      '''Trace rays towards the inside of the object
         @returns: boolean
      '''
      
      only_local = bool
      '''Only consider the object itself when computing AO
         @returns: boolean
      '''
      
      samples = int
      '''Number of rays to trace per shader evaluation
         @returns: int in [1, 128]
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeAttribute(types.ShaderNode):
      '''
      '''
   
      attribute_name = str
      '''
         @returns: string, (never None)
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeBackground(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeBevel(types.ShaderNode):
      '''
      '''
   
      samples = int
      '''Number of rays to trace per shader evaluation
         @returns: int in [2, 128]
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeBlackbody(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeBrightContrast(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeBsdfAnisotropic(types.ShaderNode):
      '''
      '''
   
      distribution = str
      '''
         @returns: enum in ['BECKMANN', 'GGX', 'MULTI_GGX', 'ASHIKHMIN_SHIRLEY']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeBsdfDiffuse(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeBsdfGlass(types.ShaderNode):
      '''
      '''
   
      distribution = str
      '''
         @returns: enum in ['SHARP', 'BECKMANN', 'GGX', 'MULTI_GGX']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeBsdfGlossy(types.ShaderNode):
      '''
      '''
   
      distribution = str
      '''
         @returns: enum in ['SHARP', 'BECKMANN', 'GGX', 'ASHIKHMIN_SHIRLEY', 'MULTI_GGX']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeBsdfHair(types.ShaderNode):
      '''
      '''
   
      component = str
      '''
         @returns: enum in ['Reflection', 'Transmission']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeBsdfHairPrincipled(types.ShaderNode):
      '''
      '''
   
      parametrization = str
      '''Select the shader's color parametrization
         @returns: enum in ['ABSORPTION', 'MELANIN', 'COLOR']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeBsdfPrincipled(types.ShaderNode):
      '''
      '''
   
      distribution = str
      '''
         @returns: enum in ['GGX', 'MULTI_GGX']
      '''
      
      subsurface_method = str
      '''Method for rendering subsurface scattering
         @returns: enum in ['BURLEY', 'RANDOM_WALK']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeBsdfRefraction(types.ShaderNode):
      '''
      '''
   
      distribution = str
      '''
         @returns: enum in ['SHARP', 'BECKMANN', 'GGX']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeBsdfToon(types.ShaderNode):
      '''
      '''
   
      component = str
      '''
         @returns: enum in ['DIFFUSE', 'GLOSSY']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeBsdfTranslucent(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeBsdfTransparent(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeBsdfVelvet(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeBump(types.ShaderNode):
      '''
      '''
   
      invert = bool
      '''Invert the bump mapping direction to push into the surface instead of out
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeCameraData(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeClamp(types.ShaderNode):
      '''
      '''
   
      clamp_type = str
      '''
         @returns: enum in ['MINMAX', 'RANGE']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeCombineHSV(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeCombineRGB(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeCombineXYZ(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeCustomGroup(types.ShaderNode):
      '''Custom Shader Group Node for Python nodes
      '''
   
      interface = types.PropertyGroup # (read only)
      '''Interface socket data
         @returns: PropertyGroup
      '''
      
      node_tree = types.NodeTree
      '''
         @returns: NodeTree
      '''
      
      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeDisplacement(types.ShaderNode):
      '''
      '''
   
      space = str
      '''Space of the input height
         @returns: enum in ['OBJECT', 'WORLD']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeEeveeSpecular(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeEmission(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeFresnel(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeGamma(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeGroup(types.ShaderNode):
      '''
      '''
   
      interface = types.PropertyGroup # (read only)
      '''Interface socket data
         @returns: PropertyGroup
      '''
      
      node_tree = types.NodeTree
      '''
         @returns: NodeTree
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeHairInfo(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeHoldout(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeHueSaturation(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeInvert(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeLayerWeight(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeLightFalloff(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeLightPath(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeMapRange(types.ShaderNode):
      '''
      '''
   
      clamp = bool
      '''Clamp the result to the target range [To Min, To Max]
         @returns: boolean
      '''
      
      interpolation_type = str
      '''
         @returns: enum in ['LINEAR', 'STEPPED', 'SMOOTHSTEP', 'SMOOTHERSTEP']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeMapping(types.ShaderNode):
      '''
      '''
   
      vector_type = str
      '''Type of vector that the mapping transforms
         @returns: enum in ['POINT', 'TEXTURE', 'VECTOR', 'NORMAL']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeMath(types.ShaderNode):
      '''
      '''
   
      operation = str
      '''
         @returns: enum in ['ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'MULTIPLY_ADD', 'POWER', 'LOGARITHM', 'SQRT', 'INVERSE_SQRT', 'ABSOLUTE', 'EXPONENT', 'MINIMUM', 'MAXIMUM', 'LESS_THAN', 'GREATER_THAN', 'SIGN', 'COMPARE', 'SMOOTH_MIN', 'SMOOTH_MAX', 'ROUND', 'FLOOR', 'CEIL', 'TRUNC', 'FRACT', 'MODULO', 'WRAP', 'SNAP', 'PINGPONG', 'SINE', 'COSINE', 'TANGENT', 'ARCSINE', 'ARCCOSINE', 'ARCTANGENT', 'ARCTAN2', 'SINH', 'COSH', 'TANH', 'RADIANS', 'DEGREES']
      '''
      
      use_clamp = bool
      '''Clamp result of the node to 0..1 range
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeMixRGB(types.ShaderNode):
      '''
      '''
   
      blend_type = str
      '''
         @returns: enum in ['MIX', 'DARKEN', 'MULTIPLY', 'BURN', 'LIGHTEN', 'SCREEN', 'DODGE', 'ADD', 'OVERLAY', 'SOFT_LIGHT', 'LINEAR_LIGHT', 'DIFFERENCE', 'SUBTRACT', 'DIVIDE', 'HUE', 'SATURATION', 'COLOR', 'VALUE']
      '''
      
      use_alpha = bool
      '''Include alpha of second input in this operation
         @returns: boolean
      '''
      
      use_clamp = bool
      '''Clamp result of the node to 0..1 range
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeMixShader(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeNewGeometry(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeNormal(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeNormalMap(types.ShaderNode):
      '''
      '''
   
      space = str
      '''Space of the input normal
         @returns: enum in ['TANGENT', 'OBJECT', 'WORLD', 'BLENDER_OBJECT', 'BLENDER_WORLD']
      '''
      
      uv_map = str
      '''UV Map for tangent space maps
         @returns: string, (never None)
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeObjectInfo(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeOutputAOV(types.ShaderNode):
      '''
      '''
   
      name = str
      '''Name of the AOV that this output writes to
         @returns: string, (never None)
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeOutputLight(types.ShaderNode):
      '''
      '''
   
      is_active_output = bool
      '''True if this node is used as the active output
         @returns: boolean
      '''
      
      target = str
      '''Which renderer and viewport shading types to use the shaders for
         @returns: enum in ['ALL', 'EEVEE', 'CYCLES']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeOutputLineStyle(types.ShaderNode):
      '''
      '''
   
      blend_type = str
      '''
         @returns: enum in ['MIX', 'DARKEN', 'MULTIPLY', 'BURN', 'LIGHTEN', 'SCREEN', 'DODGE', 'ADD', 'OVERLAY', 'SOFT_LIGHT', 'LINEAR_LIGHT', 'DIFFERENCE', 'SUBTRACT', 'DIVIDE', 'HUE', 'SATURATION', 'COLOR', 'VALUE']
      '''
      
      is_active_output = bool
      '''True if this node is used as the active output
         @returns: boolean
      '''
      
      target = str
      '''Which renderer and viewport shading types to use the shaders for
         @returns: enum in ['ALL', 'EEVEE', 'CYCLES']
      '''
      
      use_alpha = bool
      '''Include alpha of second input in this operation
         @returns: boolean
      '''
      
      use_clamp = bool
      '''Clamp result of the node to 0..1 range
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeOutputMaterial(types.ShaderNode):
      '''
      '''
   
      is_active_output = bool
      '''True if this node is used as the active output
         @returns: boolean
      '''
      
      target = str
      '''Which renderer and viewport shading types to use the shaders for
         @returns: enum in ['ALL', 'EEVEE', 'CYCLES']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeOutputWorld(types.ShaderNode):
      '''
      '''
   
      is_active_output = bool
      '''True if this node is used as the active output
         @returns: boolean
      '''
      
      target = str
      '''Which renderer and viewport shading types to use the shaders for
         @returns: enum in ['ALL', 'EEVEE', 'CYCLES']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeParticleInfo(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeRGB(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeRGBCurve(types.ShaderNode):
      '''
      '''
   
      mapping = types.CurveMapping # (read only)
      '''
         @returns: CurveMapping
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeRGBToBW(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeScript(types.ShaderNode):
      '''
      '''
   
      bytecode = str
      '''Compile bytecode for shader script node
         @returns: string, (never None)
      '''
      
      bytecode_hash = str
      '''Hash of compile bytecode, for quick equality checking
         @returns: string, (never None)
      '''
      
      filepath = str
      '''Shader script path
         @returns: string, (never None)
      '''
      
      mode = str
      '''
         @returns: enum in ['INTERNAL', 'EXTERNAL']
      '''
      
      script = types.Text
      '''Internal shader script to define the shader
         @returns: Text
      '''
      
      use_auto_update = bool
      '''Automatically update the shader when the .osl file changes (external scripts only)
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeSeparateHSV(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeSeparateRGB(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeSeparateXYZ(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeShaderToRGB(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeSqueeze(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeSubsurfaceScattering(types.ShaderNode):
      '''
      '''
   
      falloff = str
      '''Function to determine how much light nearby points contribute based on their distance to the shading point
         @returns: enum in ['CUBIC', 'GAUSSIAN', 'BURLEY', 'RANDOM_WALK']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeTangent(types.ShaderNode):
      '''
      '''
   
      axis = str
      '''Axis for radial tangents
         @returns: enum in ['X', 'Y', 'Z']
      '''
      
      direction_type = str
      '''Method to use for the tangent
         @returns: enum in ['RADIAL', 'UV_MAP']
      '''
      
      uv_map = str
      '''UV Map for tangent generated from UV
         @returns: string, (never None)
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeTexBrick(types.ShaderNode):
      '''
      '''
   
      color_mapping = types.ColorMapping # (read only)
      '''Color mapping settings
         @returns: ColorMapping, (never None)
      '''
      
      offset = float
      '''
         @returns: float in [0, 1]
      '''
      
      offset_frequency = int
      '''
         @returns: int in [1, 99]
      '''
      
      squash = float
      '''
         @returns: float in [0, 99]
      '''
      
      squash_frequency = int
      '''
         @returns: int in [1, 99]
      '''
      
      texture_mapping = types.TexMapping # (read only)
      '''Texture coordinate mapping settings
         @returns: TexMapping, (never None)
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeTexChecker(types.ShaderNode):
      '''
      '''
   
      color_mapping = types.ColorMapping # (read only)
      '''Color mapping settings
         @returns: ColorMapping, (never None)
      '''
      
      texture_mapping = types.TexMapping # (read only)
      '''Texture coordinate mapping settings
         @returns: TexMapping, (never None)
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeTexCoord(types.ShaderNode):
      '''
      '''
   
      from_instancer = bool
      '''Use the parent of the dupli object if possible
         @returns: boolean
      '''
      
      object = types.Object
      '''Use coordinates from this object (for object texture coordinates output)
         @returns: Object
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeTexEnvironment(types.ShaderNode):
      '''
      '''
   
      color_mapping = types.ColorMapping # (read only)
      '''Color mapping settings
         @returns: ColorMapping, (never None)
      '''
      
      image = types.Image
      '''
         @returns: Image
      '''
      
      image_user = types.ImageUser # (read only)
      '''Parameters defining which layer, pass and frame of the image is displayed
         @returns: ImageUser, (never None)
      '''
      
      interpolation = str
      '''Texture interpolation
         @returns: enum in ['Linear', 'Closest', 'Cubic', 'Smart']
      '''
      
      projection = str
      '''Projection of the input image
         @returns: enum in ['EQUIRECTANGULAR', 'MIRROR_BALL']
      '''
      
      texture_mapping = types.TexMapping # (read only)
      '''Texture coordinate mapping settings
         @returns: TexMapping, (never None)
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeTexGradient(types.ShaderNode):
      '''
      '''
   
      color_mapping = types.ColorMapping # (read only)
      '''Color mapping settings
         @returns: ColorMapping, (never None)
      '''
      
      gradient_type = str
      '''Style of the color blending
         @returns: enum in ['LINEAR', 'QUADRATIC', 'EASING', 'DIAGONAL', 'SPHERICAL', 'QUADRATIC_SPHERE', 'RADIAL']
      '''
      
      texture_mapping = types.TexMapping # (read only)
      '''Texture coordinate mapping settings
         @returns: TexMapping, (never None)
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeTexIES(types.ShaderNode):
      '''
      '''
   
      filepath = str
      '''IES light path
         @returns: string, (never None)
      '''
      
      ies = types.Text
      '''Internal IES file
         @returns: Text
      '''
      
      mode = str
      '''Whether the IES file is loaded from disk or from a Text datablock
         @returns: enum in ['INTERNAL', 'EXTERNAL']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeTexImage(types.ShaderNode):
      '''
      '''
   
      color_mapping = types.ColorMapping # (read only)
      '''Color mapping settings
         @returns: ColorMapping, (never None)
      '''
      
      extension = str
      '''How the image is extrapolated past its original bounds
         @returns: enum in ['REPEAT', 'EXTEND', 'CLIP']
      '''
      
      image = types.Image
      '''
         @returns: Image
      '''
      
      image_user = types.ImageUser # (read only)
      '''Parameters defining which layer, pass and frame of the image is displayed
         @returns: ImageUser, (never None)
      '''
      
      interpolation = str
      '''Texture interpolation
         @returns: enum in ['Linear', 'Closest', 'Cubic', 'Smart']
      '''
      
      projection = str
      '''Method to project 2D image on object with a 3D texture vector
         @returns: enum in ['FLAT', 'BOX', 'SPHERE', 'TUBE']
      '''
      
      projection_blend = float
      '''For box projection, amount of blend to use between sides
         @returns: float in [0, 1]
      '''
      
      texture_mapping = types.TexMapping # (read only)
      '''Texture coordinate mapping settings
         @returns: TexMapping, (never None)
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeTexMagic(types.ShaderNode):
      '''
      '''
   
      color_mapping = types.ColorMapping # (read only)
      '''Color mapping settings
         @returns: ColorMapping, (never None)
      '''
      
      texture_mapping = types.TexMapping # (read only)
      '''Texture coordinate mapping settings
         @returns: TexMapping, (never None)
      '''
      
      turbulence_depth = int
      '''Level of detail in the added turbulent noise
         @returns: int in [0, 10]
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeTexMusgrave(types.ShaderNode):
      '''
      '''
   
      color_mapping = types.ColorMapping # (read only)
      '''Color mapping settings
         @returns: ColorMapping, (never None)
      '''
      
      musgrave_dimensions = str
      '''
         @returns: enum in ['1D', '2D', '3D', '4D']
      '''
      
      musgrave_type = str
      '''
         @returns: enum in ['MULTIFRACTAL', 'RIDGED_MULTIFRACTAL', 'HYBRID_MULTIFRACTAL', 'FBM', 'HETERO_TERRAIN']
      '''
      
      texture_mapping = types.TexMapping # (read only)
      '''Texture coordinate mapping settings
         @returns: TexMapping, (never None)
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeTexNoise(types.ShaderNode):
      '''
      '''
   
      color_mapping = types.ColorMapping # (read only)
      '''Color mapping settings
         @returns: ColorMapping, (never None)
      '''
      
      noise_dimensions = str
      '''The dimensions of the space to evaluate the noise in
         @returns: enum in ['1D', '2D', '3D', '4D']
      '''
      
      texture_mapping = types.TexMapping # (read only)
      '''Texture coordinate mapping settings
         @returns: TexMapping, (never None)
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeTexPointDensity(types.ShaderNode):
      '''
      '''
   
      interpolation = str
      '''Texture interpolation
         @returns: enum in ['Closest', 'Linear', 'Cubic']
      '''
      
      object = types.Object
      '''Object to take point data from
         @returns: Object
      '''
      
      particle_color_source = str
      '''Data to derive color results from
         @returns: enum in ['PARTICLE_AGE', 'PARTICLE_SPEED', 'PARTICLE_VELOCITY']
      '''
      
      particle_system = types.ParticleSystem
      '''Particle System to render as points
         @returns: ParticleSystem
      '''
      
      point_source = str
      '''Point data to use as renderable point density
         @returns: enum in ['PARTICLE_SYSTEM', 'OBJECT']
      '''
      
      radius = float
      '''Radius from the shaded sample to look for points within
         @returns: float in [0.001, inf]
      '''
      
      resolution = int
      '''Resolution used by the texture holding the point density
         @returns: int in [1, 32768]
      '''
      
      space = str
      '''Coordinate system to calculate voxels in
         @returns: enum in ['OBJECT', 'WORLD']
      '''
      
      vertex_attribute_name = str
      '''Vertex attribute to use for color
         @returns: string, (never None)
      '''
      
      vertex_color_source = str
      '''Data to derive color results from
         @returns: enum in ['VERTEX_COLOR', 'VERTEX_WEIGHT', 'VERTEX_NORMAL']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      def cache_point_density(depsgraph=None):
         '''Cache point density data for later calculation
            Arguments:
            @depsgraph (Depsgraph): (optional)
      
         '''
      
         pass

      def calc_point_density(depsgraph=None):
         '''Calculate point density
            Arguments:
            @depsgraph (Depsgraph): (optional)
      
            @returns (float): RGBA Values
               array of 1 items in [-inf, inf]
         '''
      
         return float

      def calc_point_density_minmax(depsgraph=None):
         '''Calculate point density
            Arguments:
            @depsgraph (Depsgraph): (optional)
      
            @returns: 
            (
               min(float):array of 3 items in [-inf, inf]
               max(float):array of 3 items in [-inf, inf]
            )
         '''
      
         pass

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeTexSky(types.ShaderNode):
      '''
      '''
   
      color_mapping = types.ColorMapping # (read only)
      '''Color mapping settings
         @returns: ColorMapping, (never None)
      '''
      
      ground_albedo = float
      '''Ground color that is subtly reflected in the sky
         @returns: float in [0, 1]
      '''
      
      sky_type = str
      '''
         @returns: enum in ['PREETHAM', 'HOSEK_WILKIE']
      '''
      
      sun_direction = float
      '''Direction from where the sun is shining
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      texture_mapping = types.TexMapping # (read only)
      '''Texture coordinate mapping settings
         @returns: TexMapping, (never None)
      '''
      
      turbidity = float
      '''Atmospheric turbidity
         @returns: float in [1, 10]
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeTexVoronoi(types.ShaderNode):
      '''
      '''
   
      color_mapping = types.ColorMapping # (read only)
      '''Color mapping settings
         @returns: ColorMapping, (never None)
      '''
      
      distance = str
      '''
         @returns: enum in ['EUCLIDEAN', 'MANHATTAN', 'CHEBYCHEV', 'MINKOWSKI']
      '''
      
      feature = str
      '''
         @returns: enum in ['F1', 'F2', 'SMOOTH_F1', 'DISTANCE_TO_EDGE', 'N_SPHERE_RADIUS']
      '''
      
      texture_mapping = types.TexMapping # (read only)
      '''Texture coordinate mapping settings
         @returns: TexMapping, (never None)
      '''
      
      voronoi_dimensions = str
      '''
         @returns: enum in ['1D', '2D', '3D', '4D']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeTexWave(types.ShaderNode):
      '''
      '''
   
      bands_direction = str
      '''
         @returns: enum in ['X', 'Y', 'Z', 'DIAGONAL']
      '''
      
      color_mapping = types.ColorMapping # (read only)
      '''Color mapping settings
         @returns: ColorMapping, (never None)
      '''
      
      rings_direction = str
      '''
         @returns: enum in ['X', 'Y', 'Z', 'SPHERICAL']
      '''
      
      texture_mapping = types.TexMapping # (read only)
      '''Texture coordinate mapping settings
         @returns: TexMapping, (never None)
      '''
      
      wave_profile = str
      '''
         @returns: enum in ['SIN', 'SAW', 'TRI']
      '''
      
      wave_type = str
      '''
         @returns: enum in ['BANDS', 'RINGS']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeTexWhiteNoise(types.ShaderNode):
      '''
      '''
   
      noise_dimensions = str
      '''The dimensions of the space to evaluate the noise in
         @returns: enum in ['1D', '2D', '3D', '4D']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeTree(types.NodeTree):
      '''Node tree consisting of linked nodes used for materials (and other shading data-blocks)
      '''
   
      def get_output_node(target):
         '''Return active shader output node for the specified target
            Arguments:
            @target (str): in ['ALL', 'EEVEE', 'CYCLES']
      
            @returns (types.ShaderNode): 
         '''
      
         return types.ShaderNode

   class ShaderNodeUVAlongStroke(types.ShaderNode):
      '''
      '''
   
      use_tips = bool
      '''Lower half of the texture is for tips of the stroke
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeUVMap(types.ShaderNode):
      '''
      '''
   
      from_instancer = bool
      '''Use the parent of the dupli object if possible
         @returns: boolean
      '''
      
      uv_map = str
      '''UV coordinates to be used for mapping
         @returns: string, (never None)
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeValToRGB(types.ShaderNode):
      '''
      '''
   
      color_ramp = types.ColorRamp # (read only)
      '''
         @returns: ColorRamp
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeValue(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeVectorCurve(types.ShaderNode):
      '''
      '''
   
      mapping = types.CurveMapping # (read only)
      '''
         @returns: CurveMapping
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeVectorDisplacement(types.ShaderNode):
      '''
      '''
   
      space = str
      '''Space of the input height
         @returns: enum in ['TANGENT', 'OBJECT', 'WORLD']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeVectorMath(types.ShaderNode):
      '''
      '''
   
      operation = str
      '''
         @returns: enum in ['ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'CROSS_PRODUCT', 'PROJECT', 'REFLECT', 'DOT_PRODUCT', 'DISTANCE', 'LENGTH', 'SCALE', 'NORMALIZE', 'ABSOLUTE', 'MINIMUM', 'MAXIMUM', 'FLOOR', 'CEIL', 'FRACTION', 'MODULO', 'WRAP', 'SNAP', 'SINE', 'COSINE', 'TANGENT']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeVectorRotate(types.ShaderNode):
      '''
      '''
   
      invert = bool
      '''Invert angle
         @returns: boolean
      '''
      
      rotation_type = str
      '''Type of rotation
         @returns: enum in ['AXIS_ANGLE', 'X_AXIS', 'Y_AXIS', 'Z_AXIS', 'EULER_XYZ']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeVectorTransform(types.ShaderNode):
      '''
      '''
   
      convert_from = str
      '''Space to convert from
         @returns: enum in ['WORLD', 'OBJECT', 'CAMERA']
      '''
      
      convert_to = str
      '''Space to convert to
         @returns: enum in ['WORLD', 'OBJECT', 'CAMERA']
      '''
      
      vector_type = str
      '''
         @returns: enum in ['POINT', 'VECTOR', 'NORMAL']
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeVertexColor(types.ShaderNode):
      '''
      '''
   
      layer_name = str
      '''Vertex Color
         @returns: string, (never None)
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeVolumeAbsorption(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeVolumeInfo(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeVolumePrincipled(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeVolumeScatter(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeWavelength(types.ShaderNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShaderNodeWireframe(types.ShaderNode):
      '''
      '''
   
      use_pixel_size = bool
      '''Use screen pixel size instead of world units
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class ShapeKey(types.bpy_struct):
      '''Shape key in a shape keys data-block
      '''
   
      data = types.UnknownType # (read only)
      '''
         @returns: Collection of UnknownType
      '''
      
      frame = float # (read only)
      '''Frame for absolute keys
         @returns: float in [-inf, inf]
      '''
      
      interpolation = str
      '''Interpolation type for absolute shape keys
         @returns: enum in ['KEY_LINEAR', 'KEY_CARDINAL', 'KEY_CATMULL_ROM', 'KEY_BSPLINE']
      '''
      
      mute = bool
      '''Toggle this shape key
         @returns: boolean
      '''
      
      name = str
      '''Name of Shape Key
         @returns: string, (never None)
      '''
      
      relative_key = types.ShapeKey
      '''Shape used as a relative key
         @returns: ShapeKey, (never None)
      '''
      
      slider_max = float
      '''Maximum for slider
         @returns: float in [-10, 10]
      '''
      
      slider_min = float
      '''Minimum for slider
         @returns: float in [-10, 10]
      '''
      
      value = float
      '''Value of shape key at the current frame
         @returns: float in [0, 1]
      '''
      
      vertex_group = str
      '''Vertex weight group, to blend with basis shape
         @returns: string, (never None)
      '''
      
      def normals_vertex_get():
         '''Compute local space vertices' normals for this shape key
            @returns (float): in [-1, 1]
         '''
      
         return float

      def normals_polygon_get():
         '''Compute local space faces' normals for this shape key
            @returns (float): in [-1, 1]
         '''
      
         return float

      def normals_split_get():
         '''Compute local space face corners' normals for this shape key
            @returns (float): in [-1, 1]
         '''
      
         return float

   class ShapeKeyBezierPoint(types.bpy_struct):
      '''Point in a shape key for Bezier curves
      '''
   
      co = float
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      handle_left = float
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      handle_right = float
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      radius = float
      '''Radius for beveling
         @returns: float in [0, inf]
      '''
      
      tilt = float
      '''Tilt in 3D View
         @returns: float in [-376.991, 376.991]
      '''
      
   class ShapeKeyCurvePoint(types.bpy_struct):
      '''Point in a shape key for curves
      '''
   
      co = float
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      radius = float
      '''Radius for beveling
         @returns: float in [0, inf]
      '''
      
      tilt = float
      '''Tilt in 3D View
         @returns: float in [-376.991, 376.991]
      '''
      
   class ShapeKeyPoint(types.bpy_struct):
      '''Point in a shape key
      '''
   
      co = float
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
   class ShrinkwrapConstraint(types.Constraint):
      '''Create constraint-based shrinkwrap relationship
      '''
   
      cull_face = str
      '''Stop vertices from projecting to a face on the target when facing towards/away
         @returns: enum in ['OFF', 'FRONT', 'BACK']
      '''
      
      distance = float
      '''Distance to Target
         @returns: float in [0, inf]
      '''
      
      project_axis = str
      '''Axis constrain to
         @returns: enum in ['POS_X', 'POS_Y', 'POS_Z', 'NEG_X', 'NEG_Y', 'NEG_Z']
      '''
      
      project_axis_space = str
      '''Space for the projection axis
         @returns: enum in ['WORLD', 'POSE', 'LOCAL_WITH_PARENT', 'LOCAL']
      '''
      
      project_limit = float
      '''Limit the distance used for projection (zero disables)
         @returns: float in [0, inf]
      '''
      
      shrinkwrap_type = str
      '''Select type of shrinkwrap algorithm for target position
         @returns: enum in ['NEAREST_SURFACE', 'PROJECT', 'NEAREST_VERTEX', 'TARGET_PROJECT']
      '''
      
      target = types.Object
      '''Target Mesh object
         @returns: Object
      '''
      
      track_axis = str
      '''Axis that is aligned to the normal
         @returns: enum in ['TRACK_X', 'TRACK_Y', 'TRACK_Z', 'TRACK_NEGATIVE_X', 'TRACK_NEGATIVE_Y', 'TRACK_NEGATIVE_Z']
      '''
      
      use_invert_cull = bool
      '''When projecting in the opposite direction invert the face cull mode
         @returns: boolean
      '''
      
      use_project_opposite = bool
      '''Project in both specified and opposite directions
         @returns: boolean
      '''
      
      use_track_normal = bool
      '''Align the specified axis to the surface normal
         @returns: boolean
      '''
      
      wrap_mode = str
      '''Select how to constrain the object to the target surface
         @returns: enum in ['ON_SURFACE', 'INSIDE', 'OUTSIDE', 'OUTSIDE_SURFACE', 'ABOVE_SURFACE']
      '''
      
   class ShrinkwrapModifier(types.Modifier):
      '''Shrink wrapping modifier to shrink wrap and object to a target
      '''
   
      auxiliary_target = types.Object
      '''Additional mesh target to shrink to
         @returns: Object
      '''
      
      cull_face = str
      '''Stop vertices from projecting to a face on the target when facing towards/away
         @returns: enum in ['OFF', 'FRONT', 'BACK']
      '''
      
      invert_vertex_group = bool
      '''Invert vertex group influence
         @returns: boolean
      '''
      
      offset = float
      '''Distance to keep from the target
         @returns: float in [-inf, inf]
      '''
      
      project_limit = float
      '''Limit the distance used for projection (zero disables)
         @returns: float in [0, inf]
      '''
      
      subsurf_levels = int
      '''Number of subdivisions that must be performed before extracting vertices' positions and normals
         @returns: int in [0, 6]
      '''
      
      target = types.Object
      '''Mesh target to shrink to
         @returns: Object
      '''
      
      use_invert_cull = bool
      '''When projecting in the negative direction invert the face cull mode
         @returns: boolean
      '''
      
      use_negative_direction = bool
      '''Allow vertices to move in the negative direction of axis
         @returns: boolean
      '''
      
      use_positive_direction = bool
      '''Allow vertices to move in the positive direction of axis
         @returns: boolean
      '''
      
      use_project_x = bool
      '''
         @returns: boolean
      '''
      
      use_project_y = bool
      '''
         @returns: boolean
      '''
      
      use_project_z = bool
      '''
         @returns: boolean
      '''
      
      vertex_group = str
      '''Vertex group name
         @returns: string, (never None)
      '''
      
      wrap_method = str
      '''
         @returns: enum in ['NEAREST_SURFACEPOINT', 'PROJECT', 'NEAREST_VERTEX', 'TARGET_PROJECT']
      '''
      
      wrap_mode = str
      '''Select how vertices are constrained to the target surface
         @returns: enum in ['ON_SURFACE', 'INSIDE', 'OUTSIDE', 'OUTSIDE_SURFACE', 'ABOVE_SURFACE']
      '''
      
   class SimpleDeformModifier(types.Modifier):
      '''Simple deformation modifier to apply effects such as twisting and bending
      '''
   
      angle = float
      '''Angle of deformation
         @returns: float in [-inf, inf]
      '''
      
      deform_axis = str
      '''Deform around local axis
         @returns: enum in ['X', 'Y', 'Z']
      '''
      
      deform_method = str
      '''
         @returns: enum in ['TWIST', 'BEND', 'TAPER', 'STRETCH']
      '''
      
      factor = float
      '''Amount to deform object
         @returns: float in [-inf, inf]
      '''
      
      invert_vertex_group = bool
      '''Invert vertex group influence
         @returns: boolean
      '''
      
      limits = float
      '''Lower/Upper limits for deform
         @returns: float array of 2 items in [0, 1]
      '''
      
      lock_x = bool
      '''Do not allow deformation along the X axis
         @returns: boolean
      '''
      
      lock_y = bool
      '''Do not allow deformation along the Y axis
         @returns: boolean
      '''
      
      lock_z = bool
      '''Do not allow deformation along the Z axis
         @returns: boolean
      '''
      
      origin = types.Object
      '''Offset the origin and orientation of the deformation
         @returns: Object
      '''
      
      vertex_group = str
      '''Vertex group name
         @returns: string, (never None)
      '''
      
   class SimplifyGpencilModifier(types.GpencilModifier):
      '''Simplify Stroke modifier
      '''
   
      distance = float
      '''Distance between points
         @returns: float in [0, inf]
      '''
      
      factor = float
      '''Factor of Simplify
         @returns: float in [0, 100]
      '''
      
      invert_layer_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_layers = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_material_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_materials = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      layer = str
      '''Layer name
         @returns: string, (never None)
      '''
      
      layer_pass = int
      '''Layer pass index
         @returns: int in [0, 100]
      '''
      
      length = float
      '''Length of each segment
         @returns: float in [0, inf]
      '''
      
      material = str
      '''Material name
         @returns: string, (never None)
      '''
      
      mode = str
      '''How to simplify the stroke
         @returns: enum in ['FIXED', 'ADAPTIVE', 'SAMPLE', 'MERGE']
      '''
      
      pass_index = int
      '''Pass index
         @returns: int in [0, 100]
      '''
      
      step = int
      '''Number of times to apply simplify
         @returns: int in [1, 50]
      '''
      
   class SkinModifier(types.Modifier):
      '''Generate Skin
      '''
   
      branch_smoothing = float
      '''Smooth complex geometry around branches
         @returns: float in [0, 1]
      '''
      
      use_smooth_shade = bool
      '''Output faces with smooth shading rather than flat shaded
         @returns: boolean
      '''
      
      use_x_symmetry = bool
      '''Avoid making unsymmetrical quads across the X axis
         @returns: boolean
      '''
      
      use_y_symmetry = bool
      '''Avoid making unsymmetrical quads across the Y axis
         @returns: boolean
      '''
      
      use_z_symmetry = bool
      '''Avoid making unsymmetrical quads across the Z axis
         @returns: boolean
      '''
      
   class SmoothGpencilModifier(types.GpencilModifier):
      '''Smooth effect modifier
      '''
   
      curve = types.CurveMapping # (read only)
      '''Custom curve to apply effect
         @returns: CurveMapping
      '''
      
      factor = float
      '''Amount of smooth to apply
         @returns: float in [0, 1]
      '''
      
      invert_layer_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_layers = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_material_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_materials = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_vertex = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      layer = str
      '''Layer name
         @returns: string, (never None)
      '''
      
      layer_pass = int
      '''Layer pass index
         @returns: int in [0, 100]
      '''
      
      material = str
      '''Material name
         @returns: string, (never None)
      '''
      
      pass_index = int
      '''Pass index
         @returns: int in [0, 100]
      '''
      
      step = int
      '''Number of times to apply smooth (high numbers can reduce fps)
         @returns: int in [1, 10]
      '''
      
      use_custom_curve = bool
      '''Use a custom curve to define smooth effect along the strokes
         @returns: boolean
      '''
      
      use_edit_position = bool
      '''The modifier affects the position of the point
         @returns: boolean
      '''
      
      use_edit_strength = bool
      '''The modifier affects the color strength of the point
         @returns: boolean
      '''
      
      use_edit_thickness = bool
      '''The modifier affects the thickness of the point
         @returns: boolean
      '''
      
      use_edit_uv = bool
      '''The modifier affects the UV rotation factor of the point
         @returns: boolean
      '''
      
      vertex_group = str
      '''Vertex group name for modulating the deform
         @returns: string, (never None)
      '''
      
   class SmoothModifier(types.Modifier):
      '''Smoothing effect modifier
      '''
   
      factor = float
      '''Strength of modifier effect
         @returns: float in [-inf, inf]
      '''
      
      invert_vertex_group = bool
      '''Invert vertex group influence
         @returns: boolean
      '''
      
      iterations = int
      '''
         @returns: int in [-32768, 32767]
      '''
      
      use_x = bool
      '''Smooth object along X axis
         @returns: boolean
      '''
      
      use_y = bool
      '''Smooth object along Y axis
         @returns: boolean
      '''
      
      use_z = bool
      '''Smooth object along Z axis
         @returns: boolean
      '''
      
      vertex_group = str
      '''Name of Vertex Group which determines influence of modifier per point
         @returns: string, (never None)
      '''
      
   class SoftBodyModifier(types.Modifier):
      '''Soft body simulation modifier
      '''
   
      point_cache = types.PointCache # (read only)
      '''
         @returns: PointCache, (never None)
      '''
      
      settings = types.SoftBodySettings # (read only)
      '''
         @returns: SoftBodySettings, (never None)
      '''
      
   class SoftBodySettings(types.bpy_struct):
      '''Soft body simulation settings for an object
      '''
   
      aero = int
      '''Make edges 'sail'
         @returns: int in [0, 30000]
      '''
      
      aerodynamics_type = str
      '''Method of calculating aerodynamic interaction
         @returns: enum in ['SIMPLE', 'LIFT_FORCE']
      '''
      
      ball_damp = float
      '''Blending to inelastic collision
         @returns: float in [0.001, 1]
      '''
      
      ball_size = float
      '''Absolute ball size or factor if not manually adjusted
         @returns: float in [-10, 10]
      '''
      
      ball_stiff = float
      '''Ball inflating pressure
         @returns: float in [0.001, 100]
      '''
      
      bend = float
      '''Bending Stiffness
         @returns: float in [0, 10]
      '''
      
      choke = int
      ''''Viscosity' inside collision target
         @returns: int in [0, 100]
      '''
      
      collision_collection = types.Collection
      '''Limit colliders to this collection
         @returns: Collection
      '''
      
      collision_type = str
      '''Choose Collision Type
         @returns: enum in ['MANUAL', 'AVERAGE', 'MINIMAL', 'MAXIMAL', 'MINMAX']
      '''
      
      damping = float
      '''Edge spring friction
         @returns: float in [0, 50]
      '''
      
      effector_weights = types.EffectorWeights # (read only)
      '''
         @returns: EffectorWeights
      '''
      
      error_threshold = float
      '''The Runge-Kutta ODE solver error limit, low value gives more precision, high values speed
         @returns: float in [0.001, 10]
      '''
      
      friction = float
      '''General media friction for point movements
         @returns: float in [0, 50]
      '''
      
      fuzzy = int
      '''Fuzziness while on collision, high values make collision handling faster but less stable
         @returns: int in [1, 100]
      '''
      
      goal_default = float
      '''Default Goal (vertex target position) value
         @returns: float in [0, 1]
      '''
      
      goal_friction = float
      '''Goal (vertex target position) friction
         @returns: float in [0, 50]
      '''
      
      goal_max = float
      '''Goal maximum, vertex weights are scaled to match this range
         @returns: float in [0, 1]
      '''
      
      goal_min = float
      '''Goal minimum, vertex weights are scaled to match this range
         @returns: float in [0, 1]
      '''
      
      goal_spring = float
      '''Goal (vertex target position) spring stiffness
         @returns: float in [0, 0.999]
      '''
      
      gravity = float
      '''Apply gravitation to point movement
         @returns: float in [-10, 10]
      '''
      
      location_mass_center = float
      '''Location of center of mass
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      mass = float
      '''General Mass value
         @returns: float in [0, 50000]
      '''
      
      plastic = int
      '''Permanent deform
         @returns: int in [0, 100]
      '''
      
      pull = float
      '''Edge spring stiffness when longer than rest length
         @returns: float in [0, 0.999]
      '''
      
      push = float
      '''Edge spring stiffness when shorter than rest length
         @returns: float in [0, 0.999]
      '''
      
      rotation_estimate = float
      '''Estimated rotation matrix
         @returns: float multi-dimensional array of 3 * 3 items in [-inf, inf]
      '''
      
      scale_estimate = float
      '''Estimated scale matrix
         @returns: float multi-dimensional array of 3 * 3 items in [-inf, inf]
      '''
      
      shear = float
      '''Shear Stiffness
         @returns: float in [0, 1]
      '''
      
      speed = float
      '''Tweak timing for physics to control frequency and speed
         @returns: float in [0.01, 100]
      '''
      
      spring_length = int
      '''Alter spring length to shrink/blow up (unit %) 0 to disable
         @returns: int in [0, 200]
      '''
      
      step_max = int
      '''Maximal # solver steps/frame
         @returns: int in [0, 30000]
      '''
      
      step_min = int
      '''Minimal # solver steps/frame
         @returns: int in [0, 30000]
      '''
      
      use_auto_step = bool
      '''Use velocities for automagic step sizes
         @returns: boolean
      '''
      
      use_diagnose = bool
      '''Turn on SB diagnose console prints
         @returns: boolean
      '''
      
      use_edge_collision = bool
      '''Edges collide too
         @returns: boolean
      '''
      
      use_edges = bool
      '''Use Edges as springs
         @returns: boolean
      '''
      
      use_estimate_matrix = bool
      '''Estimate matrix... split to COM, ROT, SCALE
         @returns: boolean
      '''
      
      use_face_collision = bool
      '''Faces collide too, can be very slow
         @returns: boolean
      '''
      
      use_goal = bool
      '''Define forces for vertices to stick to animated position
         @returns: boolean
      '''
      
      use_self_collision = bool
      '''Enable naive vertex ball self collision
         @returns: boolean
      '''
      
      use_stiff_quads = bool
      '''Add diagonal springs on 4-gons
         @returns: boolean
      '''
      
      vertex_group_goal = str
      '''Control point weight values
         @returns: string, (never None)
      '''
      
      vertex_group_mass = str
      '''Control point mass values
         @returns: string, (never None)
      '''
      
      vertex_group_spring = str
      '''Control point spring strength values
         @returns: string, (never None)
      '''
      
   class SolidifyModifier(types.Modifier):
      '''Create a solid skin, compensating for sharp angles
      '''
   
      bevel_convex = float
      '''Edge bevel weight to be added to outside edges
         @returns: float in [-1, 1]
      '''
      
      edge_crease_inner = float
      '''Assign a crease to inner edges
         @returns: float in [0, 1]
      '''
      
      edge_crease_outer = float
      '''Assign a crease to outer edges
         @returns: float in [0, 1]
      '''
      
      edge_crease_rim = float
      '''Assign a crease to the edges making up the rim
         @returns: float in [0, 1]
      '''
      
      invert_vertex_group = bool
      '''Invert the vertex group influence
         @returns: boolean
      '''
      
      material_offset = int
      '''Offset material index of generated faces
         @returns: int in [-32768, 32767]
      '''
      
      material_offset_rim = int
      '''Offset material index of generated rim faces
         @returns: int in [-32768, 32767]
      '''
      
      nonmanifold_boundary_mode = str
      '''Selects the boundary adjustment algorithm
         @returns: enum in ['NONE', 'ROUND', 'FLAT']
      '''
      
      nonmanifold_merge_threshold = float
      '''Distance within which degenerated geometry is merged
         @returns: float in [0, 1]
      '''
      
      nonmanifold_thickness_mode = str
      '''Selects the used thickness algorithm
         @returns: enum in ['FIXED', 'EVEN', 'CONSTRAINTS']
      '''
      
      offset = float
      '''Offset the thickness from the center
         @returns: float in [-inf, inf]
      '''
      
      rim_vertex_group = str
      '''Vertex group that the generated rim geometry will be weighted to
         @returns: string, (never None)
      '''
      
      shell_vertex_group = str
      '''Vertex group that the generated shell geometry will be weighted to
         @returns: string, (never None)
      '''
      
      solidify_mode = str
      '''Selects the used algorithm
         @returns: enum in ['EXTRUDE', 'NON_MANIFOLD']
      '''
      
      thickness = float
      '''Thickness of the shell
         @returns: float in [-inf, inf]
      '''
      
      thickness_clamp = float
      '''Offset clamp based on geometry scale
         @returns: float in [0, 100]
      '''
      
      thickness_vertex_group = float
      '''Thickness factor to use for zero vertex group influence
         @returns: float in [0, 1]
      '''
      
      use_even_offset = bool
      '''Maintain thickness by adjusting for sharp corners (slow, disable when not needed)
         @returns: boolean
      '''
      
      use_flat_faces = bool
      '''Make faces use the minimal vertex weight assigned to their vertices(ensures new faces remain parallel to their original ones, slow, disable when not needed)
         @returns: boolean
      '''
      
      use_flip_normals = bool
      '''Invert the face direction
         @returns: boolean
      '''
      
      use_quality_normals = bool
      '''Calculate normals which result in more even thickness (slow, disable when not needed)
         @returns: boolean
      '''
      
      use_rim = bool
      '''Create edge loops between the inner and outer surfaces on face edges (slow, disable when not needed)
         @returns: boolean
      '''
      
      use_rim_only = bool
      '''Only add the rim to the original data
         @returns: boolean
      '''
      
      use_thickness_angle_clamp = bool
      '''Clamp thickness based on angles
         @returns: boolean
      '''
      
      vertex_group = str
      '''Vertex group name
         @returns: string, (never None)
      '''
      
   class Sound(types.ID):
      '''Sound data-block referencing an external or packed sound file
      '''
   
      filepath = str
      '''Sound sample file used by this Sound data-block
         @returns: string, (never None)
      '''
      
      packed_file = types.PackedFile # (read only)
      '''
         @returns: PackedFile
      '''
      
      use_memory_cache = bool
      '''The sound file is decoded and loaded into RAM
         @returns: boolean
      '''
      
      use_mono = bool
      '''If the file contains multiple audio channels they are rendered to a single one
         @returns: boolean
      '''
      
      factory = None # (readonly)
      '''The aud.Factory object of the sound.
         
      '''
      
      
      def pack():
         '''Pack the sound into the current blend file
         '''
      
         pass

      def unpack(method='USE_LOCAL'):
         '''Unpack the sound to the samples filename
            Arguments:
            @method (str): How to unpack
               in ['REMOVE', 'USE_LOCAL', 'WRITE_LOCAL', 'USE_ORIGINAL', 'WRITE_ORIGINAL'], (optional)
      
         '''
      
         pass

   class SoundSequence(types.Sequence):
      '''Sequence strip defining a sound to be played over a period of time
      '''
   
      animation_offset_end = int
      '''Animation end offset (trim end)
         @returns: int in [0, inf]
      '''
      
      animation_offset_start = int
      '''Animation start offset (trim start)
         @returns: int in [0, inf]
      '''
      
      pan = float
      '''Playback panning of the sound (only for Mono sources)
         @returns: float in [-2, 2]
      '''
      
      pitch = float
      '''Playback pitch of the sound
         @returns: float in [0.1, 10]
      '''
      
      show_waveform = bool
      '''Display the audio waveform inside the strip
         @returns: boolean
      '''
      
      sound = types.Sound
      '''Sound data-block used by this sequence
         @returns: Sound
      '''
      
      volume = float
      '''Playback volume of the sound
         @returns: float in [0, 100]
      '''
      
   class Space(types.bpy_struct):
      '''Space data for a screen area
      '''
   
      show_locked_time = bool
      '''Synchronize the visible timeline range with other time-based editors
         @returns: boolean
      '''
      
      show_region_header = bool
      '''
         @returns: boolean
      '''
      
      type = str # (read only)
      '''Space data type
         @returns: enum in ['EMPTY', 'VIEW_3D', 'IMAGE_EDITOR', 'NODE_EDITOR', 'SEQUENCE_EDITOR', 'CLIP_EDITOR', 'DOPESHEET_EDITOR', 'GRAPH_EDITOR', 'NLA_EDITOR', 'TEXT_EDITOR', 'CONSOLE', 'INFO', 'TOPBAR', 'STATUSBAR', 'OUTLINER', 'PROPERTIES', 'FILE_BROWSER', 'PREFERENCES']
      '''
      
   class SpaceClipEditor(types.Space):
      '''Clip editor space data
      '''
   
      annotation_source = str
      '''Where the annotation comes from
         @returns: enum in ['CLIP', 'TRACK']
      '''
      
      clip = types.MovieClip
      '''Movie clip displayed and edited in this space
         @returns: MovieClip
      '''
      
      clip_user = types.MovieClipUser # (read only)
      '''Parameters defining which frame of the movie clip is displayed
         @returns: MovieClipUser, (never None)
      '''
      
      lock_selection = bool
      '''Lock viewport to selected markers during playback
         @returns: boolean
      '''
      
      lock_time_cursor = bool
      '''Lock curves view to time cursor during playback and tracking
         @returns: boolean
      '''
      
      mask = types.Mask
      '''Mask displayed and edited in this space
         @returns: Mask
      '''
      
      mask_display_type = str
      '''Display type for mask splines
         @returns: enum in ['OUTLINE', 'DASH', 'BLACK', 'WHITE']
      '''
      
      mask_overlay_mode = str
      '''Overlay mode of rasterized mask
         @returns: enum in ['ALPHACHANNEL', 'COMBINED']
      '''
      
      mode = str
      '''Editing context being displayed
         @returns: enum in ['TRACKING', 'MASK']
      '''
      
      path_length = int
      '''Length of displaying path, in frames
         @returns: int in [0, inf]
      '''
      
      pivot_point = str
      '''Pivot center for rotation/scaling
         @returns: enum in ['BOUNDING_BOX_CENTER', 'CURSOR', 'INDIVIDUAL_ORIGINS', 'MEDIAN_POINT']
      '''
      
      scopes = types.MovieClipScopes # (read only)
      '''Scopes to visualize movie clip statistics
         @returns: MovieClipScopes
      '''
      
      show_annotation = bool
      '''Show annotations for this view
         @returns: boolean
      '''
      
      show_blue_channel = bool
      '''Show blue channel in the frame
         @returns: boolean
      '''
      
      show_bundles = bool
      '''Show projection of 3D markers into footage
         @returns: boolean
      '''
      
      show_disabled = bool
      '''Show disabled tracks from the footage
         @returns: boolean
      '''
      
      show_filters = bool
      '''Show filters for graph editor
         @returns: boolean
      '''
      
      show_graph_frames = bool
      '''Show curve for per-frame average error (camera motion should be solved first)
         @returns: boolean
      '''
      
      show_graph_hidden = bool
      '''Include channels from objects/bone that aren't visible
         @returns: boolean
      '''
      
      show_graph_only_selected = bool
      '''Only include channels relating to selected objects and data
         @returns: boolean
      '''
      
      show_graph_tracks_error = bool
      '''Display the reprojection error curve for selected tracks
         @returns: boolean
      '''
      
      show_graph_tracks_motion = bool
      '''Display the speed curves (in "x" direction red, in "y" direction green) for the selected tracks
         @returns: boolean
      '''
      
      show_green_channel = bool
      '''Show green channel in the frame
         @returns: boolean
      '''
      
      show_grid = bool
      '''Show grid showing lens distortion
         @returns: boolean
      '''
      
      show_marker_pattern = bool
      '''Show pattern boundbox for markers
         @returns: boolean
      '''
      
      show_marker_search = bool
      '''Show search boundbox for markers
         @returns: boolean
      '''
      
      show_mask_overlay = bool
      '''
         @returns: boolean
      '''
      
      show_mask_smooth = bool
      '''
         @returns: boolean
      '''
      
      show_metadata = bool
      '''Show metadata of clip
         @returns: boolean
      '''
      
      show_names = bool
      '''Show track names and status
         @returns: boolean
      '''
      
      show_red_channel = bool
      '''Show red channel in the frame
         @returns: boolean
      '''
      
      show_region_hud = bool
      '''
         @returns: boolean
      '''
      
      show_region_toolbar = bool
      '''
         @returns: boolean
      '''
      
      show_region_ui = bool
      '''
         @returns: boolean
      '''
      
      show_seconds = bool
      '''Show timing in seconds not frames
         @returns: boolean
      '''
      
      show_stable = bool
      '''Show stable footage in editor (if stabilization is enabled)
         @returns: boolean
      '''
      
      show_tiny_markers = bool
      '''Show markers in a more compact manner
         @returns: boolean
      '''
      
      show_track_path = bool
      '''Show path of how track moves
         @returns: boolean
      '''
      
      use_grayscale_preview = bool
      '''Display frame in grayscale mode
         @returns: boolean
      '''
      
      use_manual_calibration = bool
      '''Use manual calibration helpers
         @returns: boolean
      '''
      
      use_mute_footage = bool
      '''Mute footage and show black background instead
         @returns: boolean
      '''
      
      view = str
      '''Type of the clip editor view
         @returns: enum in ['CLIP', 'GRAPH', 'DOPESHEET']
      '''
      
   class SpaceConsole(types.Space):
      '''Interactive python console
      '''
   
      font_size = int
      '''Font size to use for displaying the text
         @returns: int in [8, 32]
      '''
      
      history = types.ConsoleLine # (read only)
      '''Command history
         @returns: Collection of ConsoleLine
      '''
      
      language = str
      '''Command line prompt language
         @returns: string, (never None)
      '''
      
      prompt = str
      '''Command line prompt
         @returns: string, (never None)
      '''
      
      scrollback = types.ConsoleLine # (read only)
      '''Command output
         @returns: Collection of ConsoleLine
      '''
      
      select_end = int
      '''
         @returns: int in [0, inf]
      '''
      
      select_start = int
      '''
         @returns: int in [0, inf]
      '''
      
   class SpaceDopeSheetEditor(types.Space):
      '''Dope Sheet space data
      '''
   
      action = types.Action
      '''Action displayed and edited in this space
         @returns: Action
      '''
      
      auto_snap = str
      '''Automatic time snapping settings for transformations
         @returns: enum in ['NONE', 'STEP', 'TIME_STEP', 'FRAME', 'SECOND', 'MARKER']
      '''
      
      cache_cloth = bool
      '''Show the active object's cloth point cache
         @returns: boolean
      '''
      
      cache_dynamicpaint = bool
      '''Show the active object's Dynamic Paint cache
         @returns: boolean
      '''
      
      cache_particles = bool
      '''Show the active object's particle point cache
         @returns: boolean
      '''
      
      cache_rigidbody = bool
      '''Show the active object's Rigid Body cache
         @returns: boolean
      '''
      
      cache_smoke = bool
      '''Show the active object's smoke cache
         @returns: boolean
      '''
      
      cache_softbody = bool
      '''Show the active object's softbody point cache
         @returns: boolean
      '''
      
      dopesheet = types.DopeSheet # (read only)
      '''Settings for filtering animation data
         @returns: DopeSheet
      '''
      
      mode = str
      '''Editing context being displayed
         @returns: enum in ['DOPESHEET', 'TIMELINE', 'ACTION', 'SHAPEKEY', 'GPENCIL', 'MASK', 'CACHEFILE']
      '''
      
      show_cache = bool
      '''Show the status of cached frames in the timeline
         @returns: boolean
      '''
      
      show_extremes = bool
      '''Mark keyframes where the key value flow changes direction, based on comparison with adjacent keys
         @returns: boolean
      '''
      
      show_group_colors = bool
      '''Display groups and channels with colors matching their corresponding groups (pose bones only currently)
         @returns: boolean
      '''
      
      show_interpolation = bool
      '''Display keyframe handle types and non-bezier interpolation modes
         @returns: boolean
      '''
      
      show_markers = bool
      '''If any exists, show markers in a separate row at the bottom of the editor
         @returns: boolean
      '''
      
      show_pose_markers = bool
      '''Show markers belonging to the active action instead of Scene markers (Action and Shape Key Editors only)
         @returns: boolean
      '''
      
      show_region_ui = bool
      '''
         @returns: boolean
      '''
      
      show_seconds = bool
      '''Show timing in seconds not frames
         @returns: boolean
      '''
      
      show_sliders = bool
      '''Show sliders beside F-Curve channels
         @returns: boolean
      '''
      
      ui_mode = str
      '''Editing context being displayed
         @returns: enum in ['DOPESHEET', 'ACTION', 'SHAPEKEY', 'GPENCIL', 'MASK', 'CACHEFILE']
      '''
      
      use_auto_merge_keyframes = bool
      '''Automatically merge nearby keyframes
         @returns: boolean
      '''
      
      use_marker_sync = bool
      '''Sync Markers with keyframe edits
         @returns: boolean
      '''
      
      use_realtime_update = bool
      '''When transforming keyframes, changes to the animation data are flushed to other views
         @returns: boolean
      '''
      
   class SpaceFileBrowser(types.Space):
      '''File browser space data
      '''
   
      active_operator = types.Operator # (read only)
      '''
         @returns: Operator
      '''
      
      bookmarks = types.FileBrowserFSMenuEntry # (read only)
      '''User's bookmarks
         @returns: Collection of FileBrowserFSMenuEntry
      '''
      
      bookmarks_active = int
      '''Index of active bookmark (-1 if none)
         @returns: int in [-32768, 32767]
      '''
      
      operator = types.Operator # (read only)
      '''
         @returns: Operator
      '''
      
      params = types.FileSelectParams # (read only)
      '''Parameters and Settings for the Filebrowser
         @returns: FileSelectParams
      '''
      
      recent_folders = types.FileBrowserFSMenuEntry # (read only)
      '''
         @returns: Collection of FileBrowserFSMenuEntry
      '''
      
      recent_folders_active = int
      '''Index of active recent folder (-1 if none)
         @returns: int in [-32768, 32767]
      '''
      
      show_region_toolbar = bool
      '''
         @returns: boolean
      '''
      
      show_region_ui = bool
      '''
         @returns: boolean
      '''
      
      system_bookmarks = types.FileBrowserFSMenuEntry # (read only)
      '''System's bookmarks
         @returns: Collection of FileBrowserFSMenuEntry
      '''
      
      system_bookmarks_active = int
      '''Index of active system bookmark (-1 if none)
         @returns: int in [-32768, 32767]
      '''
      
      system_folders = types.FileBrowserFSMenuEntry # (read only)
      '''System's folders (usually root, available hard drives, etc)
         @returns: Collection of FileBrowserFSMenuEntry
      '''
      
      system_folders_active = int
      '''Index of active system folder (-1 if none)
         @returns: int in [-32768, 32767]
      '''
      
   class SpaceGraphEditor(types.Space):
      '''Graph Editor space data
      '''
   
      auto_snap = str
      '''Automatic time snapping settings for transformations
         @returns: enum in ['NONE', 'STEP', 'TIME_STEP', 'FRAME', 'SECOND', 'MARKER']
      '''
      
      cursor_position_x = float
      '''Graph Editor 2D-Value cursor - X-Value component
         @returns: float in [-inf, inf]
      '''
      
      cursor_position_y = float
      '''Graph Editor 2D-Value cursor - Y-Value component
         @returns: float in [-inf, inf]
      '''
      
      dopesheet = types.DopeSheet # (read only)
      '''Settings for filtering animation data
         @returns: DopeSheet
      '''
      
      has_ghost_curves = bool # (read only)
      '''Graph Editor instance has some ghost curves stored
         @returns: boolean
      '''
      
      mode = str
      '''Editing context being displayed
         @returns: enum in ['FCURVES', 'DRIVERS']
      '''
      
      pivot_point = str
      '''Pivot center for rotation/scaling
         @returns: enum in ['BOUNDING_BOX_CENTER', 'CURSOR', 'INDIVIDUAL_ORIGINS']
      '''
      
      show_cursor = bool
      '''Show 2D cursor
         @returns: boolean
      '''
      
      show_group_colors = bool
      '''Display groups and channels with colors matching their corresponding groups
         @returns: boolean
      '''
      
      show_handles = bool
      '''Show handles of Bezier control points
         @returns: boolean
      '''
      
      show_markers = bool
      '''If any exists, show markers in a separate row at the bottom of the editor
         @returns: boolean
      '''
      
      show_region_hud = bool
      '''
         @returns: boolean
      '''
      
      show_region_ui = bool
      '''
         @returns: boolean
      '''
      
      show_seconds = bool
      '''Show timing in seconds not frames
         @returns: boolean
      '''
      
      show_sliders = bool
      '''Show sliders beside F-Curve channels
         @returns: boolean
      '''
      
      use_auto_merge_keyframes = bool
      '''Automatically merge nearby keyframes
         @returns: boolean
      '''
      
      use_auto_normalization = bool
      '''Automatically recalculate curve normalization on every curve edit
         @returns: boolean
      '''
      
      use_beauty_drawing = bool
      '''Display F-Curves using Anti-Aliasing and other fancy effects (disable for better performance)
         @returns: boolean
      '''
      
      use_normalization = bool
      '''Display curves in normalized to -1..1 range, for easier editing of multiple curves with different ranges
         @returns: boolean
      '''
      
      use_only_selected_curves_handles = bool
      '''Only keyframes of selected F-Curves are visible and editable
         @returns: boolean
      '''
      
      use_only_selected_keyframe_handles = bool
      '''Only show and edit handles of selected keyframes
         @returns: boolean
      '''
      
      use_realtime_update = bool
      '''When transforming keyframes, changes to the animation data are flushed to other views
         @returns: boolean
      '''
      
   class SpaceImageEditor(types.Space):
      '''Image and UV editor space data
      '''
   
      cursor_location = float
      '''2D cursor location for this view
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      display_channels = str
      '''Channels of the image to draw
         @returns: enum in ['COLOR_ALPHA', 'COLOR', 'ALPHA', 'Z_BUFFER', 'RED', 'GREEN', 'BLUE']
      '''
      
      grease_pencil = types.GreasePencil
      '''Grease pencil data for this space
         @returns: GreasePencil
      '''
      
      image = types.Image
      '''Image displayed and edited in this space
         @returns: Image
      '''
      
      image_user = types.ImageUser # (read only)
      '''Parameters defining which layer, pass and frame of the image is displayed
         @returns: ImageUser, (never None)
      '''
      
      mask = types.Mask
      '''Mask displayed and edited in this space
         @returns: Mask
      '''
      
      mask_display_type = str
      '''Display type for mask splines
         @returns: enum in ['OUTLINE', 'DASH', 'BLACK', 'WHITE']
      '''
      
      mask_overlay_mode = str
      '''Overlay mode of rasterized mask
         @returns: enum in ['ALPHACHANNEL', 'COMBINED']
      '''
      
      mode = str
      '''Editing context being displayed
         @returns: enum in ['VIEW', 'UV', 'PAINT', 'MASK']
      '''
      
      pivot_point = str
      '''Rotation/Scaling Pivot
         @returns: enum in ['BOUNDING_BOX_CENTER', 'CURSOR', 'INDIVIDUAL_ORIGINS', 'MEDIAN_POINT', 'ACTIVE_ELEMENT']
      '''
      
      sample_histogram = types.Histogram # (read only)
      '''Sampled colors along line
         @returns: Histogram
      '''
      
      scopes = types.Scopes # (read only)
      '''Scopes to visualize image statistics
         @returns: Scopes
      '''
      
      show_annotation = bool
      '''Show annotations for this view
         @returns: boolean
      '''
      
      show_mask_overlay = bool
      '''
         @returns: boolean
      '''
      
      show_mask_smooth = bool
      '''
         @returns: boolean
      '''
      
      show_maskedit = bool # (read only)
      '''Show Mask editing related properties
         @returns: boolean
      '''
      
      show_paint = bool # (read only)
      '''Show paint related properties
         @returns: boolean
      '''
      
      show_region_hud = bool
      '''
         @returns: boolean
      '''
      
      show_region_tool_header = bool
      '''
         @returns: boolean
      '''
      
      show_region_toolbar = bool
      '''
         @returns: boolean
      '''
      
      show_region_ui = bool
      '''
         @returns: boolean
      '''
      
      show_render = bool # (read only)
      '''Show render related properties
         @returns: boolean
      '''
      
      show_repeat = bool
      '''Display the image repeated outside of the main view
         @returns: boolean
      '''
      
      show_stereo_3d = bool
      '''Display the image in Stereo 3D
         @returns: boolean
      '''
      
      show_uvedit = bool # (read only)
      '''Show UV editing related properties
         @returns: boolean
      '''
      
      ui_mode = str
      '''Editing context being displayed
         @returns: enum in ['VIEW', 'PAINT', 'MASK']
      '''
      
      use_image_pin = bool
      '''Display current image regardless of object selection
         @returns: boolean
      '''
      
      use_realtime_update = bool
      '''Update other affected window spaces automatically to reflect changes during interactive operations such as transform
         @returns: boolean
      '''
      
      uv_editor = types.SpaceUVEditor # (read only)
      '''UV editor settings
         @returns: SpaceUVEditor, (never None)
      '''
      
      zoom = float # (read only)
      '''Zoom factor
         @returns: float array of 2 items in [-inf, inf]
      '''
      
   class SpaceInfo(types.Space):
      '''Info space data
      '''
   
      show_report_debug = bool
      '''Display debug reporting info
         @returns: boolean
      '''
      
      show_report_error = bool
      '''Display error text
         @returns: boolean
      '''
      
      show_report_info = bool
      '''Display general information
         @returns: boolean
      '''
      
      show_report_operator = bool
      '''Display the operator log
         @returns: boolean
      '''
      
      show_report_warning = bool
      '''Display warnings
         @returns: boolean
      '''
      
   class SpaceNLA(types.Space):
      '''NLA editor space data
      '''
   
      auto_snap = str
      '''Automatic time snapping settings for transformations
         @returns: enum in ['NONE', 'STEP', 'TIME_STEP', 'FRAME', 'SECOND', 'MARKER']
      '''
      
      dopesheet = types.DopeSheet # (read only)
      '''Settings for filtering animation data
         @returns: DopeSheet
      '''
      
      show_local_markers = bool
      '''Show action-local markers on the strips, useful when synchronizing timing across strips
         @returns: boolean
      '''
      
      show_markers = bool
      '''If any exists, show markers in a separate row at the bottom of the editor
         @returns: boolean
      '''
      
      show_region_ui = bool
      '''
         @returns: boolean
      '''
      
      show_seconds = bool
      '''Show timing in seconds not frames
         @returns: boolean
      '''
      
      show_strip_curves = bool
      '''Show influence F-Curves on strips
         @returns: boolean
      '''
      
      use_realtime_update = bool
      '''When transforming strips, changes to the animation data are flushed to other views
         @returns: boolean
      '''
      
   class SpaceNodeEditor(types.Space):
      '''Node editor space data
      '''
   
      backdrop_channels = str
      '''Channels of the image to draw
         @returns: enum in ['COLOR_ALPHA', 'COLOR', 'ALPHA', 'RED', 'GREEN', 'BLUE']
      '''
      
      backdrop_offset = float
      '''Backdrop offset
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      backdrop_zoom = float
      '''Backdrop zoom factor
         @returns: float in [0.01, inf]
      '''
      
      cursor_location = float
      '''Location for adding new nodes
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      edit_tree = types.NodeTree # (read only)
      '''Node tree being displayed and edited
         @returns: NodeTree
      '''
      
      id = types.ID # (read only)
      '''Data-block whose nodes are being edited
         @returns: ID
      '''
      
      id_from = types.ID # (read only)
      '''Data-block from which the edited data-block is linked
         @returns: ID
      '''
      
      insert_offset_direction = str
      '''Direction to offset nodes on insertion
         @returns: enum in ['RIGHT', 'LEFT']
      '''
      
      node_tree = types.NodeTree
      '''Base node tree from context
         @returns: NodeTree
      '''
      
      path = types.SpaceNodeEditorPath # (read only)
      '''Path from the data-block to the currently edited node tree
         @returns: SpaceNodeEditorPath Collection of NodeTreePath
      '''
      
      pin = bool
      '''Use the pinned node tree
         @returns: boolean
      '''
      
      shader_type = str
      '''Type of data to take shader from
         @returns: enum in ['OBJECT', 'WORLD', 'LINESTYLE']
      '''
      
      show_annotation = bool
      '''Show annotations for this view
         @returns: boolean
      '''
      
      show_backdrop = bool
      '''Use active Viewer Node output as backdrop for compositing nodes
         @returns: boolean
      '''
      
      show_region_toolbar = bool
      '''
         @returns: boolean
      '''
      
      show_region_ui = bool
      '''
         @returns: boolean
      '''
      
      texture_type = str
      '''Type of data to take texture from
         @returns: enum in ['WORLD', 'BRUSH', 'LINESTYLE']
      '''
      
      tree_type = str
      '''Node tree type to display and edit
         @returns: enum in ['DUMMY']
      '''
      
      use_auto_render = bool
      '''Re-render and composite changed layers on 3D edits
         @returns: boolean
      '''
      
      use_insert_offset = bool
      '''Automatically offset the following or previous nodes in a chain when inserting a new node
         @returns: boolean
      '''
      
      def cursor_location_from_region(x, y):
         '''Set the cursor location using region coordinates
            Arguments:
            @x (int): Region x coordinate
               in [-inf, inf]
            @y (int): Region y coordinate
               in [-inf, inf]
      
         '''
      
         pass

   class SpaceNodeEditorPath(types.bpy_struct):
      '''Get the node tree path as a string
      '''
   
      to_string = str # (read only)
      '''
         @returns: string, (never None)
      '''
      
      def clear():
         '''Reset the node tree path
         '''
      
         pass

      def start(node_tree):
         '''Set the root node tree
            Arguments:
            @node_tree (NodeTree): 
      
         '''
      
         pass

      def append(node_tree, node=None):
         '''Append a node group tree to the path
            Arguments:
            @node_tree (NodeTree): Node tree to append to the node editor path
               
            @node (Node): Group node linking to this node tree
               (optional)
      
         '''
      
         pass

      def pop():
         '''Remove the last node tree from the path
         '''
      
         pass

   class SpaceOutliner(types.Space):
      '''Outliner space data
      '''
   
      display_mode = str
      '''Type of information to display
         @returns: enum in ['SCENES', 'VIEW_LAYER', 'SEQUENCE', 'LIBRARIES', 'DATA_API', 'ORPHAN_DATA']
      '''
      
      filter_id_type = str
      '''Data-block type to show
         @returns: enum in ['ACTION', 'ARMATURE', 'BRUSH', 'CAMERA', 'CACHEFILE', 'CURVE', 'FONT', 'GREASEPENCIL', 'COLLECTION', 'IMAGE', 'KEY', 'LIGHT', 'LIBRARY', 'LINESTYLE', 'LATTICE', 'MASK', 'MATERIAL', 'META', 'MESH', 'MOVIECLIP', 'NODETREE', 'OBJECT', 'PAINTCURVE', 'PALETTE', 'PARTICLE', 'LIGHT_PROBE', 'SCENE', 'SOUND', 'SPEAKER', 'TEXT', 'TEXTURE', 'VOLUME', 'WINDOWMANAGER', 'WORLD', 'WORKSPACE']
      '''
      
      filter_state = str
      '''
         @returns: enum in ['ALL', 'VISIBLE', 'HIDDEN', 'SELECTED', 'ACTIVE']
      '''
      
      filter_text = str
      '''Live search filtering string
         @returns: string, (never None)
      '''
      
      show_restrict_column_enable = bool
      '''Exclude from view layer
         @returns: boolean
      '''
      
      show_restrict_column_hide = bool
      '''Temporarily hide in viewport
         @returns: boolean
      '''
      
      show_restrict_column_holdout = bool
      '''Holdout
         @returns: boolean
      '''
      
      show_restrict_column_indirect_only = bool
      '''Indirect only
         @returns: boolean
      '''
      
      show_restrict_column_render = bool
      '''Globally disable in renders
         @returns: boolean
      '''
      
      show_restrict_column_select = bool
      '''Selectable
         @returns: boolean
      '''
      
      show_restrict_column_viewport = bool
      '''Globally disable in viewports
         @returns: boolean
      '''
      
      use_filter_case_sensitive = bool
      '''Only use case sensitive matches of search string
         @returns: boolean
      '''
      
      use_filter_children = bool
      '''Show children
         @returns: boolean
      '''
      
      use_filter_collection = bool
      '''Show collections
         @returns: boolean
      '''
      
      use_filter_complete = bool
      '''Only use complete matches of search string
         @returns: boolean
      '''
      
      use_filter_id_type = bool
      '''Show only data-blocks of one type
         @returns: boolean
      '''
      
      use_filter_object = bool
      '''Show objects
         @returns: boolean
      '''
      
      use_filter_object_armature = bool
      '''Show armature objects
         @returns: boolean
      '''
      
      use_filter_object_camera = bool
      '''Show camera objects
         @returns: boolean
      '''
      
      use_filter_object_content = bool
      '''Show what is inside the objects elements
         @returns: boolean
      '''
      
      use_filter_object_empty = bool
      '''Show empty objects
         @returns: boolean
      '''
      
      use_filter_object_light = bool
      '''Show light objects
         @returns: boolean
      '''
      
      use_filter_object_mesh = bool
      '''Show mesh objects
         @returns: boolean
      '''
      
      use_filter_object_others = bool
      '''Show curves, lattices, light probes, fonts, ...
         @returns: boolean
      '''
      
      use_sort_alpha = bool
      '''
         @returns: boolean
      '''
      
      use_sync_select = bool
      '''Sync outliner selection with other editors
         @returns: boolean
      '''
      
   class SpacePreferences(types.Space):
      '''Blender preferences space data
      '''
   
      filter_text = str
      '''Search term for filtering in the UI
         @returns: string, (never None)
      '''
      
      filter_type = str
      '''Filter method
         @returns: enum in ['NAME', 'KEY']
      '''
      
   class SpaceProperties(types.Space):
      '''Properties space data
      '''
   
      context = str
      '''
         @returns: enum in ['TOOL', 'SCENE', 'RENDER', 'OUTPUT', 'VIEW_LAYER', 'WORLD', 'OBJECT', 'CONSTRAINT', 'MODIFIER', 'DATA', 'BONE', 'BONE_CONSTRAINT', 'MATERIAL', 'TEXTURE', 'PARTICLES', 'PHYSICS', 'SHADERFX']
      '''
      
      pin_id = types.ID
      '''
         @returns: ID
      '''
      
      use_pin_id = bool
      '''Use the pinned context
         @returns: boolean
      '''
      
   class SpaceSequenceEditor(types.Space):
      '''Sequence editor space data
      '''
   
      display_channel = int
      '''The channel number shown in the image preview. 0 is the result of all strips combined
         @returns: int in [-5, 32]
      '''
      
      display_mode = str
      '''View mode to use for displaying sequencer output
         @returns: enum in ['IMAGE', 'WAVEFORM', 'VECTOR_SCOPE', 'HISTOGRAM']
      '''
      
      grease_pencil = types.GreasePencil
      '''Grease Pencil data for this Preview region
         @returns: GreasePencil
      '''
      
      overlay_type = str
      '''Overlay draw type
         @returns: enum in ['RECTANGLE', 'REFERENCE', 'CURRENT']
      '''
      
      preview_channels = str
      '''Channels of the preview to draw
         @returns: enum in ['COLOR_ALPHA', 'COLOR']
      '''
      
      proxy_render_size = str
      '''Display preview using full resolution or different proxy resolutions
         @returns: enum in ['NONE', 'SCENE', 'PROXY_25', 'PROXY_50', 'PROXY_75', 'PROXY_100', 'FULL']
      '''
      
      show_annotation = bool
      '''Show annotations for this view
         @returns: boolean
      '''
      
      show_backdrop = bool
      '''Display result under strips
         @returns: boolean
      '''
      
      show_fcurves = bool
      '''Display strip opacity/volume curve
         @returns: boolean
      '''
      
      show_frames = bool
      '''Display frames rather than seconds
         @returns: boolean
      '''
      
      show_markers = bool
      '''If any exists, show markers in a separate row at the bottom of the editor
         @returns: boolean
      '''
      
      show_metadata = bool
      '''Show metadata of first visible strip
         @returns: boolean
      '''
      
      show_overexposed = int
      '''Show overexposed areas with zebra stripes
         @returns: int in [0, 110]
      '''
      
      show_region_hud = bool
      '''
         @returns: boolean
      '''
      
      show_region_tool_header = bool
      '''
         @returns: boolean
      '''
      
      show_region_toolbar = bool
      '''
         @returns: boolean
      '''
      
      show_region_ui = bool
      '''
         @returns: boolean
      '''
      
      show_safe_areas = bool
      '''Show TV title safe and action safe areas in preview
         @returns: boolean
      '''
      
      show_safe_center = bool
      '''Show safe areas to fit content in a different aspect ratio
         @returns: boolean
      '''
      
      show_seconds = bool
      '''Show timing in seconds not frames
         @returns: boolean
      '''
      
      show_separate_color = bool
      '''Separate color channels in preview
         @returns: boolean
      '''
      
      show_strip_offset = bool
      '''Display strip in/out offsets
         @returns: boolean
      '''
      
      use_marker_sync = bool
      '''Transform markers as well as strips
         @returns: boolean
      '''
      
      view_type = str
      '''Type of the Sequencer view (sequencer, preview or both)
         @returns: enum in ['SEQUENCER', 'PREVIEW', 'SEQUENCER_PREVIEW']
      '''
      
      waveform_display_type = str
      '''How Waveforms are drawn
         @returns: enum in ['NO_WAVEFORMS', 'ALL_WAVEFORMS', 'DEFAULT_WAVEFORMS']
      '''
      
   class SpaceTextEditor(types.Space):
      '''Text editor space data
      '''
   
      find_text = str
      '''Text to search for with the find tool
         @returns: string, (never None)
      '''
      
      font_size = int
      '''Font size to use for displaying the text
         @returns: int in [8, 32]
      '''
      
      margin_column = int
      '''Column number to show right margin at
         @returns: int in [0, 1024]
      '''
      
      replace_text = str
      '''Text to replace selected text with using the replace tool
         @returns: string, (never None)
      '''
      
      show_line_highlight = bool
      '''Highlight the current line
         @returns: boolean
      '''
      
      show_line_numbers = bool
      '''Show line numbers next to the text
         @returns: boolean
      '''
      
      show_margin = bool
      '''Show right margin
         @returns: boolean
      '''
      
      show_region_footer = bool
      '''
         @returns: boolean
      '''
      
      show_region_ui = bool
      '''
         @returns: boolean
      '''
      
      show_syntax_highlight = bool
      '''Syntax highlight for scripting
         @returns: boolean
      '''
      
      show_word_wrap = bool
      '''Wrap words if there is not enough horizontal space
         @returns: boolean
      '''
      
      tab_width = int
      '''Number of spaces to display tabs with
         @returns: int in [2, 8]
      '''
      
      text = types.Text
      '''Text displayed and edited in this space
         @returns: Text
      '''
      
      top = int
      '''Top line visible
         @returns: int in [0, inf]
      '''
      
      use_find_all = bool
      '''Search in all text data-blocks, instead of only the active one
         @returns: boolean
      '''
      
      use_find_wrap = bool
      '''Search again from the start of the file when reaching the end
         @returns: boolean
      '''
      
      use_live_edit = bool
      '''Run python while editing
         @returns: boolean
      '''
      
      use_match_case = bool
      '''Search string is sensitive to uppercase and lowercase letters
         @returns: boolean
      '''
      
      use_overwrite = bool
      '''Overwrite characters when typing rather than inserting them
         @returns: boolean
      '''
      
      visible_lines = int # (read only)
      '''Amount of lines that can be visible in current editor
         @returns: int in [-inf, inf]
      '''
      
      def is_syntax_highlight_supported():
         '''Returns True if the editor supports syntax highlighting for the current text datablock
            @returns (bool): 
         '''
      
         return bool

      def region_location_from_cursor(line, column):
         '''Retrieve the region position from the given line and character position
            Arguments:
            @line (int): Line index
               in [-inf, inf]
            @column (int): Column index
               in [-inf, inf]
      
            @returns (int): Region coordinates
               array of 2 items in [-1, inf]
         '''
      
         return int

   class SpaceUVEditor(types.bpy_struct):
      '''UV editor data for the image editor space
      '''
   
      display_stretch_type = str
      '''Type of stretch to draw
         @returns: enum in ['ANGLE', 'AREA']
      '''
      
      edge_display_type = str
      '''Display style for UV edges
         @returns: enum in ['OUTLINE', 'DASH', 'BLACK', 'WHITE']
      '''
      
      lock_bounds = bool
      '''Constraint to stay within the image bounds while editing
         @returns: boolean
      '''
      
      pixel_snap_mode = str
      '''Snap UVs to pixels while editing
         @returns: enum in ['DISABLED', 'CORNER', 'CENTER']
      '''
      
      show_faces = bool
      '''Display faces over the image
         @returns: boolean
      '''
      
      show_metadata = bool
      '''Display metadata properties of the image
         @returns: boolean
      '''
      
      show_modified_edges = bool
      '''Display edges after modifiers are applied
         @returns: boolean
      '''
      
      show_pixel_coords = bool
      '''Display UV coordinates in pixels rather than from 0.0 to 1.0
         @returns: boolean
      '''
      
      show_smooth_edges = bool
      '''Display UV edges anti-aliased
         @returns: boolean
      '''
      
      show_stretch = bool
      '''Display faces colored according to the difference in shape between UVs and their 3D coordinates (blue for low distortion, red for high distortion)
         @returns: boolean
      '''
      
      show_texpaint = bool
      '''Display overlay of texture paint uv layer
         @returns: boolean
      '''
      
      sticky_select_mode = str
      '''Automatically select also UVs sharing the same vertex as the ones being selected
         @returns: enum in ['DISABLED', 'SHARED_LOCATION', 'SHARED_VERTEX']
      '''
      
      tile_grid_shape = int
      '''How many tiles will be shown in the background
         @returns: int array of 2 items in [1, 10]
      '''
      
      use_live_unwrap = bool
      '''Continuously unwrap the selected UV island while transforming pinned vertices
         @returns: boolean
      '''
      
   class SpaceView3D(types.Space):
      '''3D View space data
      '''
   
      camera = types.Object
      '''Active camera used in this view (when unlocked from the scene's active camera)
         @returns: Object
      '''
      
      clip_end = float
      '''3D View far clipping distance
         @returns: float in [1e-06, inf]
      '''
      
      clip_start = float
      '''3D View near clipping distance (perspective view only)
         @returns: float in [1e-06, inf]
      '''
      
      icon_from_show_object_viewport = int # (read only)
      '''
         @returns: int in [-inf, inf]
      '''
      
      lens = float
      '''Viewport lens angle
         @returns: float in [1, 250]
      '''
      
      local_view = types.SpaceView3D # (read only)
      '''Display an isolated sub-set of objects, apart from the scene visibility
         @returns: SpaceView3D
      '''
      
      lock_bone = str
      '''3D View center is locked to this bone's position
         @returns: string, (never None)
      '''
      
      lock_camera = bool
      '''Enable view navigation within the camera view
         @returns: boolean
      '''
      
      lock_cursor = bool
      '''3D View center is locked to the cursor's position
         @returns: boolean
      '''
      
      lock_object = types.Object
      '''3D View center is locked to this object's position
         @returns: Object
      '''
      
      mirror_xr_session = bool
      '''Synchronize the viewer perspective of virtual reality sessions with this 3D viewport
         @returns: boolean
      '''
      
      overlay = types.View3DOverlay # (read only)
      '''Settings for display of overlays in the 3D viewport
         @returns: View3DOverlay, (never None)
      '''
      
      region_3d = types.RegionView3D # (read only)
      '''3D region in this space, in case of quad view the camera region
         @returns: RegionView3D
      '''
      
      region_quadviews = types.RegionView3D # (read only)
      '''3D regions (the third one defines quad view settings, the fourth one is same as 'region_3d')
         @returns: Collection of RegionView3D
      '''
      
      render_border_max_x = float
      '''Maximum X value for the render region
         @returns: float in [0, 1]
      '''
      
      render_border_max_y = float
      '''Maximum Y value for the render region
         @returns: float in [0, 1]
      '''
      
      render_border_min_x = float
      '''Minimum X value for the render region
         @returns: float in [0, 1]
      '''
      
      render_border_min_y = float
      '''Minimum Y value for the render region
         @returns: float in [0, 1]
      '''
      
      shading = types.View3DShading # (read only)
      '''Settings for shading in the 3D viewport
         @returns: View3DShading, (never None)
      '''
      
      show_bundle_names = bool
      '''Show names for reconstructed tracks objects
         @returns: boolean
      '''
      
      show_camera_path = bool
      '''Show reconstructed camera path
         @returns: boolean
      '''
      
      show_gizmo = bool
      '''Show gizmos of all types
         @returns: boolean
      '''
      
      show_gizmo_camera_dof_distance = bool
      '''Gizmo to adjust camera focus distance (depends on limits display)
         @returns: boolean
      '''
      
      show_gizmo_camera_lens = bool
      '''Gizmo to adjust camera lens & ortho size
         @returns: boolean
      '''
      
      show_gizmo_context = bool
      '''Context sensitive gizmos for the active item
         @returns: boolean
      '''
      
      show_gizmo_empty_force_field = bool
      '''Gizmo to adjust the force field
         @returns: boolean
      '''
      
      show_gizmo_empty_image = bool
      '''Gizmo to adjust image size and position
         @returns: boolean
      '''
      
      show_gizmo_light_look_at = bool
      '''Gizmo to adjust the direction of the light
         @returns: boolean
      '''
      
      show_gizmo_light_size = bool
      '''Gizmo to adjust spot and area size
         @returns: boolean
      '''
      
      show_gizmo_navigate = bool
      '''Viewport navigation gizmo
         @returns: boolean
      '''
      
      show_gizmo_object_rotate = bool
      '''Gizmo to adjust rotation
         @returns: boolean
      '''
      
      show_gizmo_object_scale = bool
      '''Gizmo to adjust scale
         @returns: boolean
      '''
      
      show_gizmo_object_translate = bool
      '''Gizmo to adjust location
         @returns: boolean
      '''
      
      show_gizmo_tool = bool
      '''Active tool gizmo
         @returns: boolean
      '''
      
      show_object_select_armature = bool
      '''
         @returns: boolean
      '''
      
      show_object_select_camera = bool
      '''
         @returns: boolean
      '''
      
      show_object_select_curve = bool
      '''
         @returns: boolean
      '''
      
      show_object_select_empty = bool
      '''
         @returns: boolean
      '''
      
      show_object_select_font = bool
      '''
         @returns: boolean
      '''
      
      show_object_select_grease_pencil = bool
      '''
         @returns: boolean
      '''
      
      show_object_select_lattice = bool
      '''
         @returns: boolean
      '''
      
      show_object_select_light = bool
      '''
         @returns: boolean
      '''
      
      show_object_select_light_probe = bool
      '''
         @returns: boolean
      '''
      
      show_object_select_mesh = bool
      '''
         @returns: boolean
      '''
      
      show_object_select_meta = bool
      '''
         @returns: boolean
      '''
      
      show_object_select_speaker = bool
      '''
         @returns: boolean
      '''
      
      show_object_select_surf = bool
      '''
         @returns: boolean
      '''
      
      show_object_select_volume = bool
      '''
         @returns: boolean
      '''
      
      show_object_viewport_armature = bool
      '''
         @returns: boolean
      '''
      
      show_object_viewport_camera = bool
      '''
         @returns: boolean
      '''
      
      show_object_viewport_curve = bool
      '''
         @returns: boolean
      '''
      
      show_object_viewport_empty = bool
      '''
         @returns: boolean
      '''
      
      show_object_viewport_font = bool
      '''
         @returns: boolean
      '''
      
      show_object_viewport_grease_pencil = bool
      '''
         @returns: boolean
      '''
      
      show_object_viewport_lattice = bool
      '''
         @returns: boolean
      '''
      
      show_object_viewport_light = bool
      '''
         @returns: boolean
      '''
      
      show_object_viewport_light_probe = bool
      '''
         @returns: boolean
      '''
      
      show_object_viewport_mesh = bool
      '''
         @returns: boolean
      '''
      
      show_object_viewport_meta = bool
      '''
         @returns: boolean
      '''
      
      show_object_viewport_speaker = bool
      '''
         @returns: boolean
      '''
      
      show_object_viewport_surf = bool
      '''
         @returns: boolean
      '''
      
      show_object_viewport_volume = bool
      '''
         @returns: boolean
      '''
      
      show_reconstruction = bool
      '''Display reconstruction data from active movie clip
         @returns: boolean
      '''
      
      show_region_hud = bool
      '''
         @returns: boolean
      '''
      
      show_region_tool_header = bool
      '''
         @returns: boolean
      '''
      
      show_region_toolbar = bool
      '''
         @returns: boolean
      '''
      
      show_region_ui = bool
      '''
         @returns: boolean
      '''
      
      show_stereo_3d_cameras = bool
      '''Show the left and right cameras
         @returns: boolean
      '''
      
      show_stereo_3d_convergence_plane = bool
      '''Show the stereo 3d convergence plane
         @returns: boolean
      '''
      
      show_stereo_3d_volume = bool
      '''Show the stereo 3d frustum volume
         @returns: boolean
      '''
      
      stereo_3d_camera = str
      '''
         @returns: enum in ['LEFT', 'RIGHT', 'S3D']
      '''
      
      stereo_3d_convergence_plane_alpha = float
      '''Opacity (alpha) of the convergence plane
         @returns: float in [0, 1]
      '''
      
      stereo_3d_eye = str # (read only)
      '''Current stereo eye being drawn
         @returns: enum in ['LEFT_EYE', 'RIGHT_EYE']
      '''
      
      stereo_3d_volume_alpha = float
      '''Opacity (alpha) of the cameras' frustum volume
         @returns: float in [0, 1]
      '''
      
      tracks_display_size = float
      '''Display size of tracks from reconstructed data
         @returns: float in [0, inf]
      '''
      
      tracks_display_type = str
      '''Viewport display style for tracks
         @returns: enum in ['PLAIN_AXES', 'ARROWS', 'SINGLE_ARROW', 'CIRCLE', 'CUBE', 'SPHERE', 'CONE']
      '''
      
      use_local_camera = bool
      '''Use a local camera in this view, rather than scene's active camera
         @returns: boolean
      '''
      
      use_local_collections = bool
      '''Display a different set of collections in this viewport
         @returns: boolean
      '''
      
      use_render_border = bool
      '''Use a region within the frame size for rendered viewport(when not viewing through the camera)
         @returns: boolean
      '''
      
   class Speaker(types.ID):
      '''Speaker data-block for 3D audio speaker objects
      '''
   
      animation_data = types.AnimData # (read only)
      '''Animation data for this data-block
         @returns: AnimData
      '''
      
      attenuation = float
      '''How strong the distance affects volume, depending on distance model
         @returns: float in [0, inf]
      '''
      
      cone_angle_inner = float
      '''Angle of the inner cone, in degrees, inside the cone the volume is 100 %
         @returns: float in [0, 360]
      '''
      
      cone_angle_outer = float
      '''Angle of the outer cone, in degrees, outside this cone the volume is the outer cone volume, between inner and outer cone the volume is interpolated
         @returns: float in [0, 360]
      '''
      
      cone_volume_outer = float
      '''Volume outside the outer cone
         @returns: float in [0, 1]
      '''
      
      distance_max = float
      '''Maximum distance for volume calculation, no matter how far away the object is
         @returns: float in [0, inf]
      '''
      
      distance_reference = float
      '''Reference distance at which volume is 100 %
         @returns: float in [0, inf]
      '''
      
      muted = bool
      '''Mute the speaker
         @returns: boolean
      '''
      
      pitch = float
      '''Playback pitch of the sound
         @returns: float in [0.1, 10]
      '''
      
      sound = types.Sound
      '''Sound data-block used by this speaker
         @returns: Sound
      '''
      
      volume = float
      '''How loud the sound is
         @returns: float in [0, 1]
      '''
      
      volume_max = float
      '''Maximum volume, no matter how near the object is
         @returns: float in [0, 1]
      '''
      
      volume_min = float
      '''Minimum volume, no matter how far away the object is
         @returns: float in [0, 1]
      '''
      
   class SpeedControlSequence(types.EffectSequence):
      '''Sequence strip to control the speed of other strips
      '''
   
      input_1 = types.Sequence
      '''First input for the effect strip
         @returns: Sequence, (never None)
      '''
      
      input_count = int # (read only)
      '''
         @returns: int in [0, inf]
      '''
      
      multiply_speed = float
      '''Multiply the resulting speed after the speed factor
         @returns: float in [0, inf]
      '''
      
      use_as_speed = bool
      '''Interpret the value as speed instead of a frame number
         @returns: boolean
      '''
      
      use_scale_to_length = bool
      '''Scale values from 0.0 to 1.0 to target sequence length
         @returns: boolean
      '''
      
   class Spline(types.bpy_struct):
      '''Element of a curve, either NURBS, Bezier or Polyline or a character with text objects
      '''
   
      bezier_points = types.SplineBezierPoints # (read only)
      '''Collection of points for Bezier curves only
         @returns: SplineBezierPoints Collection of BezierSplinePoint
      '''
      
      character_index = int # (read only)
      '''Location of this character in the text data (only for text curves)
         @returns: int in [0, inf]
      '''
      
      hide = bool
      '''Hide this curve in Edit mode
         @returns: boolean
      '''
      
      material_index = int
      '''
         @returns: int in [0, 32767]
      '''
      
      order_u = int
      '''NURBS order in the U direction (for splines and surfaces, higher values let points influence a greater area)
         @returns: int in [2, 6]
      '''
      
      order_v = int
      '''NURBS order in the V direction (for surfaces only, higher values let points influence a greater area)
         @returns: int in [2, 6]
      '''
      
      point_count_u = int # (read only)
      '''Total number points for the curve or surface in the U direction
         @returns: int in [0, inf]
      '''
      
      point_count_v = int # (read only)
      '''Total number points for the surface on the V direction
         @returns: int in [0, inf]
      '''
      
      points = types.SplinePoints # (read only)
      '''Collection of points that make up this poly or nurbs spline
         @returns: SplinePoints Collection of SplinePoint
      '''
      
      radius_interpolation = str
      '''The type of radius interpolation for Bezier curves
         @returns: enum in ['LINEAR', 'CARDINAL', 'BSPLINE', 'EASE']
      '''
      
      resolution_u = int
      '''Curve or Surface subdivisions per segment
         @returns: int in [1, 1024]
      '''
      
      resolution_v = int
      '''Surface subdivisions per segment
         @returns: int in [1, 1024]
      '''
      
      tilt_interpolation = str
      '''The type of tilt interpolation for 3D, Bezier curves
         @returns: enum in ['LINEAR', 'CARDINAL', 'BSPLINE', 'EASE']
      '''
      
      type = str
      '''The interpolation type for this curve element
         @returns: enum in ['POLY', 'BEZIER', 'BSPLINE', 'CARDINAL', 'NURBS']
      '''
      
      use_bezier_u = bool
      '''Make this nurbs curve or surface act like a Bezier spline in the U direction (Order U must be 3 or 4, Cyclic U must be disabled)
         @returns: boolean
      '''
      
      use_bezier_v = bool
      '''Make this nurbs surface act like a Bezier spline in the V direction (Order V must be 3 or 4, Cyclic V must be disabled)
         @returns: boolean
      '''
      
      use_cyclic_u = bool
      '''Make this curve or surface a closed loop in the U direction
         @returns: boolean
      '''
      
      use_cyclic_v = bool
      '''Make this surface a closed loop in the V direction
         @returns: boolean
      '''
      
      use_endpoint_u = bool
      '''Make this nurbs curve or surface meet the endpoints in the U direction (Cyclic U must be disabled)
         @returns: boolean
      '''
      
      use_endpoint_v = bool
      '''Make this nurbs surface meet the endpoints in the V direction (Cyclic V must be disabled)
         @returns: boolean
      '''
      
      use_smooth = bool
      '''Smooth the normals of the surface or beveled curve
         @returns: boolean
      '''
      
      def calc_length(resolution=0):
         '''Calculate spline length
            Arguments:
            @resolution (int): Spline resolution to be used, 0 defaults to the resolution_u
               in [0, 1024], (optional)
      
            @returns (float): Length of the polygonaly approximated spline
               in [0, inf]
         '''
      
         return float

   class SplineBezierPoints(types.bpy_struct):
      '''Collection of spline Bezier points
      '''
   
      def add(count):
         '''Add a number of points to this spline
            Arguments:
            @count (int): Number of points to add to the spline
               in [0, inf]
      
         '''
      
         pass

   class SplineIKConstraint(types.Constraint):
      '''Align 'n' bones along a curve
      '''
   
      bulge = float
      '''Factor between volume variation and stretching
         @returns: float in [0, 100]
      '''
      
      bulge_max = float
      '''Maximum volume stretching factor
         @returns: float in [1, 100]
      '''
      
      bulge_min = float
      '''Minimum volume stretching factor
         @returns: float in [0, 1]
      '''
      
      bulge_smooth = float
      '''Strength of volume stretching clamping
         @returns: float in [0, 1]
      '''
      
      chain_count = int
      '''How many bones are included in the chain
         @returns: int in [1, 255]
      '''
      
      joint_bindings = float
      '''(EXPERIENCED USERS ONLY) The relative positions of the joints along the chain, as percentages
         @returns: float array of 32 items in [0, 1]
      '''
      
      target = types.Object
      '''Curve that controls this relationship
         @returns: Object
      '''
      
      use_bulge_max = bool
      '''Use upper limit for volume variation
         @returns: boolean
      '''
      
      use_bulge_min = bool
      '''Use lower limit for volume variation
         @returns: boolean
      '''
      
      use_chain_offset = bool
      '''Offset the entire chain relative to the root joint
         @returns: boolean
      '''
      
      use_curve_radius = bool
      '''Average radius of the endpoints is used to tweak the X and Z Scaling of the bones, on top of XZ Scale mode
         @returns: boolean
      '''
      
      use_even_divisions = bool
      '''Ignore the relative lengths of the bones when fitting to the curve
         @returns: boolean
      '''
      
      use_original_scale = bool
      '''Apply volume preservation over the original scaling
         @returns: boolean
      '''
      
      xz_scale_mode = str
      '''Method used for determining the scaling of the X and Z axes of the bones
         @returns: enum in ['NONE', 'BONE_ORIGINAL', 'INVERSE_PRESERVE', 'VOLUME_PRESERVE']
      '''
      
      y_scale_mode = str
      '''Method used for determining the scaling of the Y axis of the bones, on top of the shape and scaling of the curve itself
         @returns: enum in ['NONE', 'FIT_CURVE', 'BONE_ORIGINAL']
      '''
      
   class SplinePoint(types.bpy_struct):
      '''Spline point without handles
      '''
   
      co = float
      '''Point coordinates
         @returns: float array of 4 items in [-inf, inf]
      '''
      
      hide = bool
      '''Visibility status
         @returns: boolean
      '''
      
      radius = float
      '''Radius for beveling
         @returns: float in [0, inf]
      '''
      
      select = bool
      '''Selection status
         @returns: boolean
      '''
      
      tilt = float
      '''Tilt in 3D View
         @returns: float in [-376.991, 376.991]
      '''
      
      weight = float
      '''NURBS weight
         @returns: float in [-inf, inf]
      '''
      
      weight_softbody = float
      '''Softbody goal weight
         @returns: float in [0.01, 100]
      '''
      
   class SplinePoints(types.bpy_struct):
      '''Collection of spline points
      '''
   
      def add(count):
         '''Add a number of points to this spline
            Arguments:
            @count (int): Number of points to add to the spline
               in [0, inf]
      
         '''
      
         pass

   class SpotLight(types.Light):
      '''Directional cone Light
      '''
   
      constant_coefficient = float
      '''Constant distance attenuation coefficient
         @returns: float in [0, inf]
      '''
      
      contact_shadow_bias = float
      '''Bias to avoid self shadowing
         @returns: float in [0.001, 9999]
      '''
      
      contact_shadow_distance = float
      '''World space distance in which to search for screen space occluder
         @returns: float in [0, 9999]
      '''
      
      contact_shadow_thickness = float
      '''Pixel thickness used to detect occlusion
         @returns: float in [0, 9999]
      '''
      
      energy = float
      '''Amount of light emitted
         @returns: float in [-inf, inf]
      '''
      
      falloff_curve = types.CurveMapping # (read only)
      '''Custom light falloff curve
         @returns: CurveMapping
      '''
      
      falloff_type = str
      '''Intensity Decay with distance
         @returns: enum in ['CONSTANT', 'INVERSE_LINEAR', 'INVERSE_SQUARE', 'INVERSE_COEFFICIENTS', 'CUSTOM_CURVE', 'LINEAR_QUADRATIC_WEIGHTED']
      '''
      
      linear_attenuation = float
      '''Linear distance attenuation
         @returns: float in [0, 1]
      '''
      
      linear_coefficient = float
      '''Linear distance attenuation coefficient
         @returns: float in [0, inf]
      '''
      
      quadratic_attenuation = float
      '''Quadratic distance attenuation
         @returns: float in [0, 1]
      '''
      
      quadratic_coefficient = float
      '''Quadratic distance attenuation coefficient
         @returns: float in [0, inf]
      '''
      
      shadow_buffer_bias = float
      '''Bias for reducing self shadowing
         @returns: float in [0, inf]
      '''
      
      shadow_buffer_clip_start = float
      '''Shadow map clip start, below which objects will not generate shadows
         @returns: float in [1e-06, inf]
      '''
      
      shadow_buffer_samples = int
      '''Number of shadow buffer samples
         @returns: int in [1, 16]
      '''
      
      shadow_buffer_size = int
      '''Resolution of the shadow buffer, higher values give crisper shadows but use more memory
         @returns: int in [128, 10240]
      '''
      
      shadow_color = float
      '''Color of shadows cast by the light
         @returns: float array of 3 items in [0, inf]
      '''
      
      shadow_soft_size = float
      '''Light size for ray shadow sampling (Raytraced shadows)
         @returns: float in [0, inf]
      '''
      
      show_cone = bool
      '''Draw transparent cone in 3D view to visualize which objects are contained in it
         @returns: boolean
      '''
      
      spot_blend = float
      '''The softness of the spotlight edge
         @returns: float in [0, 1]
      '''
      
      spot_size = float
      '''Angle of the spotlight beam
         @returns: float in [0.0174533, 3.14159]
      '''
      
      use_contact_shadow = bool
      '''Use screen space raytracing to have correct shadowing near occluder, or for small features that does not appear in shadow maps
         @returns: boolean
      '''
      
      use_shadow = bool
      '''
         @returns: boolean
      '''
      
      use_square = bool
      '''Cast a square spot light shape
         @returns: boolean
      '''
      
   class Stereo3dDisplay(types.bpy_struct):
      '''Settings for stereo 3D display
      '''
   
      anaglyph_type = str
      '''
         @returns: enum in ['RED_CYAN', 'GREEN_MAGENTA', 'YELLOW_BLUE']
      '''
      
      display_mode = str
      '''
         @returns: enum in ['ANAGLYPH', 'INTERLACE', 'TIMESEQUENTIAL', 'SIDEBYSIDE', 'TOPBOTTOM']
      '''
      
      interlace_type = str
      '''
         @returns: enum in ['ROW_INTERLEAVED', 'COLUMN_INTERLEAVED', 'CHECKERBOARD_INTERLEAVED']
      '''
      
      use_interlace_swap = bool
      '''Swap left and right stereo channels
         @returns: boolean
      '''
      
      use_sidebyside_crosseyed = bool
      '''Right eye should see left image and vice-versa
         @returns: boolean
      '''
      
   class Stereo3dFormat(types.bpy_struct):
      '''Settings for stereo output
      '''
   
      anaglyph_type = str
      '''
         @returns: enum in ['RED_CYAN', 'GREEN_MAGENTA', 'YELLOW_BLUE']
      '''
      
      display_mode = str
      '''
         @returns: enum in ['ANAGLYPH', 'INTERLACE', 'SIDEBYSIDE', 'TOPBOTTOM']
      '''
      
      interlace_type = str
      '''
         @returns: enum in ['ROW_INTERLEAVED', 'COLUMN_INTERLEAVED', 'CHECKERBOARD_INTERLEAVED']
      '''
      
      use_interlace_swap = bool
      '''Swap left and right stereo channels
         @returns: boolean
      '''
      
      use_sidebyside_crosseyed = bool
      '''Right eye should see left image and vice-versa
         @returns: boolean
      '''
      
      use_squeezed_frame = bool
      '''Combine both views in a squeezed image
         @returns: boolean
      '''
      
   class StretchToConstraint(types.Constraint):
      '''Stretch to meet the target object
      '''
   
      bulge = float
      '''Factor between volume variation and stretching
         @returns: float in [0, 100]
      '''
      
      bulge_max = float
      '''Maximum volume stretching factor
         @returns: float in [1, 100]
      '''
      
      bulge_min = float
      '''Minimum volume stretching factor
         @returns: float in [0, 1]
      '''
      
      bulge_smooth = float
      '''Strength of volume stretching clamping
         @returns: float in [0, 1]
      '''
      
      head_tail = float
      '''Target along length of bone: Head=0, Tail=1
         @returns: float in [0, 1]
      '''
      
      keep_axis = str
      '''The rotation type and axis order to use
         @returns: enum in ['PLANE_X', 'PLANE_Z', 'SWING_Y']
      '''
      
      rest_length = float
      '''Length at rest position
         @returns: float in [0, 1000]
      '''
      
      subtarget = str
      '''Armature bone, mesh or lattice vertex group, ...
         @returns: string, (never None)
      '''
      
      target = types.Object
      '''Target object
         @returns: Object
      '''
      
      use_bbone_shape = bool
      '''Follow shape of B-Bone segments when calculating Head/Tail position
         @returns: boolean
      '''
      
      use_bulge_max = bool
      '''Use upper limit for volume variation
         @returns: boolean
      '''
      
      use_bulge_min = bool
      '''Use lower limit for volume variation
         @returns: boolean
      '''
      
      volume = str
      '''Maintain the object's volume as it stretches
         @returns: enum in ['VOLUME_XZX', 'VOLUME_X', 'VOLUME_Z', 'NO_VOLUME']
      '''
      
   class StringProperty(types.Property):
      '''RNA text string property definition
      '''
   
      default = str # (read only)
      '''string default value
         @returns: string, (never None)
      '''
      
      length_max = int # (read only)
      '''Maximum length of the string, 0 means unlimited
         @returns: int in [0, inf]
      '''
      
   class Struct(types.bpy_struct):
      '''RNA structure definition
      '''
   
      base = types.Struct # (read only)
      '''Struct definition this is derived from
         @returns: Struct
      '''
      
      description = str # (read only)
      '''Description of the Struct's purpose
         @returns: string, (never None)
      '''
      
      functions = types.Function # (read only)
      '''
         @returns: Collection of Function
      '''
      
      identifier = str # (read only)
      '''Unique name used in the code and scripting
         @returns: string, (never None)
      '''
      
      name = str # (read only)
      '''Human readable name
         @returns: string, (never None)
      '''
      
      name_property = types.StringProperty # (read only)
      '''Property that gives the name of the struct
         @returns: StringProperty
      '''
      
      nested = types.Struct # (read only)
      '''Struct in which this struct is always nested, and to which it logically belongs
         @returns: Struct
      '''
      
      properties = types.Property # (read only)
      '''Properties in the struct
         @returns: Collection of Property
      '''
      
      property_tags = types.EnumPropertyItem # (read only)
      '''Tags that properties can use to influence behavior
         @returns: Collection of EnumPropertyItem
      '''
      
      translation_context = str # (read only)
      '''Translation context of the struct's name
         @returns: string, (never None)
      '''
      
   class StucciTexture(types.Texture):
      '''Procedural noise texture
      '''
   
      noise_basis = str
      '''Noise basis used for turbulence
         @returns: enum in ['BLENDER_ORIGINAL', 'ORIGINAL_PERLIN', 'IMPROVED_PERLIN', 'VORONOI_F1', 'VORONOI_F2', 'VORONOI_F3', 'VORONOI_F4', 'VORONOI_F2_F1', 'VORONOI_CRACKLE', 'CELL_NOISE']
      '''
      
      noise_scale = float
      '''Scaling for noise input
         @returns: float in [0.0001, inf]
      '''
      
      noise_type = str
      '''
         @returns: enum in ['SOFT_NOISE', 'HARD_NOISE']
      '''
      
      stucci_type = str
      '''
         @returns: enum in ['PLASTIC', 'WALL_IN', 'WALL_OUT']
      '''
      
      turbulence = float
      '''Turbulence of the noise
         @returns: float in [0.0001, inf]
      '''
      
      users_material = None # (readonly)
      '''Materials that use this texture
         
      '''
      
      
      users_object_modifier = None # (readonly)
      '''Object modifiers that use this texture
         
      '''
      
      
   class StudioLight(types.bpy_struct):
      '''Studio light
      '''
   
      has_specular_highlight_pass = bool # (read only)
      '''Studio light image file has separate "diffuse" and "specular" passes
         @returns: boolean
      '''
      
      index = int # (read only)
      '''
         @returns: int in [-inf, inf]
      '''
      
      is_user_defined = bool # (read only)
      '''
         @returns: boolean
      '''
      
      light_ambient = float # (read only)
      '''Color of the ambient light that uniformly lit the scene
         @returns: float array of 3 items in [0, inf]
      '''
      
      name = str # (read only)
      '''
         @returns: string, (never None)
      '''
      
      path = str # (read only)
      '''
         @returns: string, (never None)
      '''
      
      path_irr_cache = str # (read only)
      '''Path where the irradiance cache is stored
         @returns: string, (never None)
      '''
      
      path_sh_cache = str # (read only)
      '''Path where the spherical harmonics cache is stored
         @returns: string, (never None)
      '''
      
      solid_lights = types.UserSolidLight # (read only)
      '''Lights user to display objects in solid draw mode
         @returns: Collection of UserSolidLight
      '''
      
      spherical_harmonics_coefficients = float # (read only)
      '''
         @returns: float multi-dimensional array of 4 * 3 items in [0, inf]
      '''
      
      type = str # (read only)
      '''
         @returns: enum in ['STUDIO', 'WORLD', 'MATCAP']
      '''
      
   class StudioLights(types.bpy_struct):
      '''Collection of studio lights
      '''
   
      def load(path, type):
         '''Load studiolight from file
            Arguments:
            @path (str): File path where the studio light file can be found
               (never None)
            @type (str): The type for the new studio light
               in ['STUDIO', 'WORLD', 'MATCAP']
      
            @returns (types.StudioLight): Newly created StudioLight
               
         '''
      
         return types.StudioLight

      def new(path):
         '''Create studiolight from default lighting
            Arguments:
            @path (str): Path to the file that will contain the lighing info (without extension)
               (never None)
      
            @returns (types.StudioLight): Newly created StudioLight
               
         '''
      
         return types.StudioLight

      def remove(studio_light):
         '''Remove a studio light
            Arguments:
            @studio_light (StudioLight): The studio light to remove
               (never None)
      
         '''
      
         pass

      def refresh():
         '''Refresh Studio Lights from disk
         '''
      
         pass

   class SubdivGpencilModifier(types.GpencilModifier):
      '''Subdivide Stroke modifier
      '''
   
      invert_layer_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_layers = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_material_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_materials = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      layer = str
      '''Layer name
         @returns: string, (never None)
      '''
      
      layer_pass = int
      '''Layer pass index
         @returns: int in [0, 100]
      '''
      
      level = int
      '''Number of subdivisions
         @returns: int in [0, 5]
      '''
      
      material = str
      '''Material name
         @returns: string, (never None)
      '''
      
      pass_index = int
      '''Pass index
         @returns: int in [0, 100]
      '''
      
      subdivision_type = str
      '''Select type of subdivision algorithm
         @returns: enum in ['CATMULL_CLARK', 'SIMPLE']
      '''
      
   class SubsurfModifier(types.Modifier):
      '''Subdivision surface modifier
      '''
   
      levels = int
      '''Number of subdivisions to perform
         @returns: int in [0, 11]
      '''
      
      quality = int
      '''Accuracy of vertex positions, lower value is faster but less precise
         @returns: int in [1, 10]
      '''
      
      render_levels = int
      '''Number of subdivisions to perform when rendering
         @returns: int in [0, 11]
      '''
      
      show_only_control_edges = bool
      '''Skip drawing/rendering of interior subdivided edges
         @returns: boolean
      '''
      
      subdivision_type = str
      '''Select type of subdivision algorithm
         @returns: enum in ['CATMULL_CLARK', 'SIMPLE']
      '''
      
      use_creases = bool
      '''Use mesh edge crease information to sharpen edges
         @returns: boolean
      '''
      
      uv_smooth = str
      '''Controls how smoothing is applied to UVs
         @returns: enum in ['NONE', 'PRESERVE_CORNERS']
      '''
      
   class SubtractSequence(types.EffectSequence):
      '''Subtract Sequence
      '''
   
      input_1 = types.Sequence
      '''First input for the effect strip
         @returns: Sequence, (never None)
      '''
      
      input_2 = types.Sequence
      '''Second input for the effect strip
         @returns: Sequence, (never None)
      '''
      
      input_count = int # (read only)
      '''
         @returns: int in [0, inf]
      '''
      
   class SunLight(types.Light):
      '''Constant direction parallel ray Light
      '''
   
      angle = float
      '''Angular diameter of the Sun as seen from the Earth
         @returns: float in [0, 3.14159]
      '''
      
      contact_shadow_bias = float
      '''Bias to avoid self shadowing
         @returns: float in [0.001, 9999]
      '''
      
      contact_shadow_distance = float
      '''World space distance in which to search for screen space occluder
         @returns: float in [0, 9999]
      '''
      
      contact_shadow_thickness = float
      '''Pixel thickness used to detect occlusion
         @returns: float in [0, 9999]
      '''
      
      energy = float
      '''Amount of light emitted
         @returns: float in [-inf, inf]
      '''
      
      shadow_buffer_bias = float
      '''Bias for reducing self shadowing
         @returns: float in [0, inf]
      '''
      
      shadow_buffer_clip_start = float
      '''Shadow map clip start, below which objects will not generate shadows
         @returns: float in [1e-06, inf]
      '''
      
      shadow_buffer_samples = int
      '''Number of shadow buffer samples
         @returns: int in [1, 16]
      '''
      
      shadow_buffer_size = int
      '''Resolution of the shadow buffer, higher values give crisper shadows but use more memory
         @returns: int in [128, 10240]
      '''
      
      shadow_cascade_count = int
      '''Number of texture used by the cascaded shadow map
         @returns: int in [1, 4]
      '''
      
      shadow_cascade_exponent = float
      '''Higher value increase resolution towards the viewpoint
         @returns: float in [0, 1]
      '''
      
      shadow_cascade_fade = float
      '''How smooth is the transition between each cascade
         @returns: float in [0, 1]
      '''
      
      shadow_cascade_max_distance = float
      '''End distance of the cascaded shadow map (only in perspective view)
         @returns: float in [0, inf]
      '''
      
      shadow_color = float
      '''Color of shadows cast by the light
         @returns: float array of 3 items in [0, inf]
      '''
      
      shadow_soft_size = float
      '''Light size for ray shadow sampling (Raytraced shadows)
         @returns: float in [0, inf]
      '''
      
      use_contact_shadow = bool
      '''Use screen space raytracing to have correct shadowing near occluder, or for small features that does not appear in shadow maps
         @returns: boolean
      '''
      
      use_shadow = bool
      '''
         @returns: boolean
      '''
      
   class SurfaceCurve(types.Curve):
      '''Curve data-block used for storing surfaces
      '''
   
   class SurfaceDeformModifier(types.Modifier):
      '''
      '''
   
      falloff = float
      '''Controls how much nearby polygons influence deformation
         @returns: float in [2, 16]
      '''
      
      invert_vertex_group = bool
      '''Invert vertex group influence
         @returns: boolean
      '''
      
      is_bound = bool # (read only)
      '''Whether geometry has been bound to target mesh
         @returns: boolean
      '''
      
      strength = float
      '''Strength of modifier deformations
         @returns: float in [-100, 100]
      '''
      
      target = types.Object
      '''Mesh object to deform with
         @returns: Object
      '''
      
      vertex_group = str
      '''Vertex group name for selecting/weighting the affected areas
         @returns: string, (never None)
      '''
      
   class SurfaceModifier(types.Modifier):
      '''Surface modifier defining modifier stack position used for surface fields
      '''
   
   class TEXTURE_UL_texpaintslots(types.UIList):
      '''
      '''
   
      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
         
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class TEXTURE_UL_texslots(types.UIList):
      '''
      '''
   
      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
         
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class TexMapping(types.bpy_struct):
      '''Texture coordinate mapping settings
      '''
   
      mapping = str
      '''
         @returns: enum in ['FLAT', 'CUBE', 'TUBE', 'SPHERE']
      '''
      
      mapping_x = str
      '''
         @returns: enum in ['NONE', 'X', 'Y', 'Z']
      '''
      
      mapping_y = str
      '''
         @returns: enum in ['NONE', 'X', 'Y', 'Z']
      '''
      
      mapping_z = str
      '''
         @returns: enum in ['NONE', 'X', 'Y', 'Z']
      '''
      
      max = float
      '''Maximum value for clipping
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      min = float
      '''Minimum value for clipping
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      rotation = float
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      scale = float
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      translation = float
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      use_max = bool
      '''Whether to use maximum clipping value
         @returns: boolean
      '''
      
      use_min = bool
      '''Whether to use minimum clipping value
         @returns: boolean
      '''
      
      vector_type = str
      '''Type of vector that the mapping transforms
         @returns: enum in ['POINT', 'TEXTURE', 'VECTOR', 'NORMAL']
      '''
      
   class TexPaintSlot(types.bpy_struct):
      '''Slot that contains information about texture painting
      '''
   
      is_valid = bool # (read only)
      '''Slot has a valid image and UV map
         @returns: boolean
      '''
      
      uv_layer = str
      '''Name of UV map
         @returns: string, (never None)
      '''
      
   class Text(types.ID):
      '''Text data-block referencing an external or packed text file
      '''
   
      current_character = int
      '''Index of current character in current line, and also start index of character in selection if one exists
         @returns: int in [0, inf]
      '''
      
      current_line = types.TextLine # (read only)
      '''Current line, and start line of selection if one exists
         @returns: TextLine, (never None)
      '''
      
      current_line_index = int
      '''Index of current TextLine in TextLine collection
         @returns: int in [-inf, inf]
      '''
      
      filepath = str
      '''Filename of the text file
         @returns: string, (never None)
      '''
      
      indentation = str
      '''Use tabs or spaces for indentation
         @returns: enum in ['TABS', 'SPACES']
      '''
      
      is_dirty = bool # (read only)
      '''Text file has been edited since last save
         @returns: boolean
      '''
      
      is_in_memory = bool # (read only)
      '''Text file is in memory, without a corresponding file on disk
         @returns: boolean
      '''
      
      is_modified = bool # (read only)
      '''Text file on disk is different than the one in memory
         @returns: boolean
      '''
      
      lines = types.TextLine # (read only)
      '''Lines of text
         @returns: Collection of TextLine
      '''
      
      select_end_character = int
      '''Index of character after end of selection in the selection end line
         @returns: int in [0, inf]
      '''
      
      select_end_line = types.TextLine # (read only)
      '''End line of selection
         @returns: TextLine, (never None)
      '''
      
      select_end_line_index = int
      '''Index of last TextLine in selection
         @returns: int in [-inf, inf]
      '''
      
      use_module = bool
      '''Run this text as a script on loading, Text name must end with ".py"
         @returns: boolean
      '''
      
      def clear():
         '''clear the text block
         '''
      
         pass

      def write(text):
         '''write text at the cursor location and advance to the end of the text block
            Arguments:
            @text (str): New text for this data-block
               (never None)
      
         '''
      
         pass

      def is_syntax_highlight_supported():
         '''Returns True if the editor supports syntax highlighting for the current text datablock
            @returns (bool): 
         '''
      
         return bool

      def select_set(line_start, char_start, line_end, char_end):
         '''Set selection range by line and character index
            Arguments:
            @line_start (int): in [-inf, inf]
            @char_start (int): in [-inf, inf]
            @line_end (int): in [-inf, inf]
            @char_end (int): in [-inf, inf]
      
         '''
      
         pass

      def cursor_set(line, character=0, select=False):
         '''Set cursor by line and (optionally) character index
            Arguments:
            @line (int): in [0, inf]
            @character (int): in [0, inf], (optional)
            @select (bool): Select when moving the cursor
               (optional)
      
         '''
      
         pass

      def as_module(self):
         
      
         pass
      
      def as_string(self):
         '''Return the text as a string.
            
         '''
      
         pass
      
      def from_string(self, string):
         '''Replace text with this string.
            
         '''
      
         pass
      
   class TextBox(types.bpy_struct):
      '''Text bounding box for layout
      '''
   
      height = float
      '''
         @returns: float in [0, inf]
      '''
      
      width = float
      '''
         @returns: float in [0, inf]
      '''
      
      x = float
      '''
         @returns: float in [-inf, inf]
      '''
      
      y = float
      '''
         @returns: float in [-inf, inf]
      '''
      
   class TextCharacterFormat(types.bpy_struct):
      '''Text character formatting settings
      '''
   
      kerning = int
      '''Spacing between characters
         @returns: int in [0, 32767]
      '''
      
      material_index = int
      '''
         @returns: int in [0, inf]
      '''
      
      use_bold = bool
      '''
         @returns: boolean
      '''
      
      use_italic = bool
      '''
         @returns: boolean
      '''
      
      use_small_caps = bool
      '''
         @returns: boolean
      '''
      
      use_underline = bool
      '''
         @returns: boolean
      '''
      
   class TextCurve(types.Curve):
      '''Curve data-block used for storing text
      '''
   
      active_textbox = int
      '''
         @returns: int in [-inf, inf]
      '''
      
      align_x = str
      '''Text horizontal align from the object center
         @returns: enum in ['LEFT', 'CENTER', 'RIGHT', 'JUSTIFY', 'FLUSH']
      '''
      
      align_y = str
      '''Text vertical align from the object center
         @returns: enum in ['TOP_BASELINE', 'TOP', 'CENTER', 'BOTTOM', 'BOTTOM_BASELINE']
      '''
      
      body = str
      '''Content of this text object
         @returns: string, (never None)
      '''
      
      body_format = types.TextCharacterFormat # (read only)
      '''Stores the style of each character
         @returns: Collection of TextCharacterFormat
      '''
      
      edit_format = types.TextCharacterFormat # (read only)
      '''Editing settings character formatting
         @returns: TextCharacterFormat
      '''
      
      family = str
      '''Use Objects as font characters (give font objects a common name followed by the character they represent, eg. 'family-a', 'family-b', etc, set this setting to 'family-', and turn on Vertex Duplication)
         @returns: string, (never None)
      '''
      
      follow_curve = types.Object
      '''Curve deforming text object
         @returns: Object
      '''
      
      font = types.VectorFont
      '''
         @returns: VectorFont
      '''
      
      font_bold = types.VectorFont
      '''
         @returns: VectorFont
      '''
      
      font_bold_italic = types.VectorFont
      '''
         @returns: VectorFont
      '''
      
      font_italic = types.VectorFont
      '''
         @returns: VectorFont
      '''
      
      offset_x = float
      '''Horizontal offset from the object origin
         @returns: float in [-inf, inf]
      '''
      
      offset_y = float
      '''Vertical offset from the object origin
         @returns: float in [-inf, inf]
      '''
      
      overflow = str
      '''Handle the text behavior when it doesn't fit in the text boxes
         @returns: enum in ['NONE', 'SCALE', 'TRUNCATE']
      '''
      
      shear = float
      '''Italic angle of the characters
         @returns: float in [-1, 1]
      '''
      
      size = float
      '''
         @returns: float in [0.0001, 10000]
      '''
      
      small_caps_scale = float
      '''Scale of small capitals
         @returns: float in [-inf, inf]
      '''
      
      space_character = float
      '''
         @returns: float in [0, 10]
      '''
      
      space_line = float
      '''
         @returns: float in [0, 10]
      '''
      
      space_word = float
      '''
         @returns: float in [0, 10]
      '''
      
      text_boxes = types.TextBox # (read only)
      '''
         @returns: Collection of TextBox
      '''
      
      underline_height = float
      '''
         @returns: float in [0, 0.8]
      '''
      
      underline_position = float
      '''Vertical position of underline
         @returns: float in [-0.2, 0.8]
      '''
      
      use_fast_edit = bool
      '''Don't fill polygons while editing
         @returns: boolean
      '''
      
   class TextLine(types.bpy_struct):
      '''Line of text in a Text data-block
      '''
   
      body = str
      '''Text in the line
         @returns: string, (never None)
      '''
      
   class TextSequence(types.EffectSequence):
      '''Sequence strip creating text
      '''
   
      align_x = str
      '''Align the text along the X axis, relative to the text bounds
         @returns: enum in ['LEFT', 'CENTER', 'RIGHT']
      '''
      
      align_y = str
      '''Align the text along the Y axis, relative to the text bounds
         @returns: enum in ['TOP', 'CENTER', 'BOTTOM']
      '''
      
      color = float
      '''Text color
         @returns: float array of 4 items in [0, inf]
      '''
      
      font = types.VectorFont
      '''Font of the text. Falls back to the UI font by default
         @returns: VectorFont
      '''
      
      font_size = int
      '''Size of the text
         @returns: int in [0, 2000]
      '''
      
      input_count = int # (read only)
      '''
         @returns: int in [0, inf]
      '''
      
      location = float
      '''Location of the text
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      shadow_color = float
      '''
         @returns: float array of 4 items in [0, inf]
      '''
      
      text = str
      '''Text that will be displayed
         @returns: string, (never None)
      '''
      
      use_shadow = bool
      '''Display shadow behind text
         @returns: boolean
      '''
      
      wrap_width = float
      '''Word wrap width as factor, zero disables
         @returns: float in [0, inf]
      '''
      
   class Texture(types.ID):
      '''Texture data-block used by materials, lights, worlds and brushes
      '''
   
      animation_data = types.AnimData # (read only)
      '''Animation data for this data-block
         @returns: AnimData
      '''
      
      color_ramp = types.ColorRamp # (read only)
      '''
         @returns: ColorRamp
      '''
      
      contrast = float
      '''Adjust the contrast of the texture
         @returns: float in [0, 5]
      '''
      
      factor_blue = float
      '''
         @returns: float in [0, 2]
      '''
      
      factor_green = float
      '''
         @returns: float in [0, 2]
      '''
      
      factor_red = float
      '''
         @returns: float in [0, 2]
      '''
      
      intensity = float
      '''Adjust the brightness of the texture
         @returns: float in [0, 2]
      '''
      
      node_tree = types.NodeTree # (read only)
      '''Node tree for node-based textures
         @returns: NodeTree
      '''
      
      saturation = float
      '''Adjust the saturation of colors in the texture
         @returns: float in [0, 2]
      '''
      
      type = str
      '''
         @returns: enum in ['NONE', 'BLEND', 'CLOUDS', 'DISTORTED_NOISE', 'IMAGE', 'MAGIC', 'MARBLE', 'MUSGRAVE', 'NOISE', 'STUCCI', 'VORONOI', 'WOOD']
      '''
      
      use_clamp = bool
      '''Set negative texture RGB and intensity values to zero, for some uses like displacement this option can be disabled to get the full range
         @returns: boolean
      '''
      
      use_color_ramp = bool
      '''Map the texture intensity to the color ramp. Note that the alpha value is used for image textures, enable "Calculate Alpha" for images without an alpha channel
         @returns: boolean
      '''
      
      use_nodes = bool
      '''Make this a node-based texture
         @returns: boolean
      '''
      
      use_preview_alpha = bool
      '''Show Alpha in Preview Render
         @returns: boolean
      '''
      
      users_material = None # (readonly)
      '''Materials that use this texture
         
      '''
      
      
      users_object_modifier = None # (readonly)
      '''Object modifiers that use this texture
         
      '''
      
      
      def evaluate(value):
         '''Evaluate the texture at the coordinates given
            Arguments:
            @value (float): array of 3 items in [-inf, inf]
      
            @returns (float): array of 4 items in [-inf, inf]
         '''
      
         return float

   class TextureNode(types.NodeInternal):
      '''
      '''
   
      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeAt(types.TextureNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeBricks(types.TextureNode):
      '''
      '''
   
      offset = float
      '''
         @returns: float in [0, 1]
      '''
      
      offset_frequency = int
      '''Offset every N rows
         @returns: int in [2, 99]
      '''
      
      squash = float
      '''
         @returns: float in [0, 99]
      '''
      
      squash_frequency = int
      '''Squash every N rows
         @returns: int in [2, 99]
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeChecker(types.TextureNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeCompose(types.TextureNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeCoordinates(types.TextureNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeCurveRGB(types.TextureNode):
      '''
      '''
   
      mapping = types.CurveMapping # (read only)
      '''
         @returns: CurveMapping
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeCurveTime(types.TextureNode):
      '''
      '''
   
      curve = types.CurveMapping # (read only)
      '''
         @returns: CurveMapping
      '''
      
      frame_end = int
      '''
         @returns: int in [-32768, 32767]
      '''
      
      frame_start = int
      '''
         @returns: int in [-32768, 32767]
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeDecompose(types.TextureNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeDistance(types.TextureNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeGroup(types.TextureNode):
      '''
      '''
   
      interface = types.PropertyGroup # (read only)
      '''Interface socket data
         @returns: PropertyGroup
      '''
      
      node_tree = types.NodeTree
      '''
         @returns: NodeTree
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeHueSaturation(types.TextureNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeImage(types.TextureNode):
      '''
      '''
   
      image = types.Image
      '''
         @returns: Image
      '''
      
      image_user = types.ImageUser # (read only)
      '''Parameters defining the image duration, offset and related settings
         @returns: ImageUser
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeInvert(types.TextureNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeMath(types.TextureNode):
      '''
      '''
   
      operation = str
      '''
         @returns: enum in ['ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'MULTIPLY_ADD', 'POWER', 'LOGARITHM', 'SQRT', 'INVERSE_SQRT', 'ABSOLUTE', 'EXPONENT', 'MINIMUM', 'MAXIMUM', 'LESS_THAN', 'GREATER_THAN', 'SIGN', 'COMPARE', 'SMOOTH_MIN', 'SMOOTH_MAX', 'ROUND', 'FLOOR', 'CEIL', 'TRUNC', 'FRACT', 'MODULO', 'WRAP', 'SNAP', 'PINGPONG', 'SINE', 'COSINE', 'TANGENT', 'ARCSINE', 'ARCCOSINE', 'ARCTANGENT', 'ARCTAN2', 'SINH', 'COSH', 'TANH', 'RADIANS', 'DEGREES']
      '''
      
      use_clamp = bool
      '''Clamp result of the node to 0..1 range
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeMixRGB(types.TextureNode):
      '''
      '''
   
      blend_type = str
      '''
         @returns: enum in ['MIX', 'DARKEN', 'MULTIPLY', 'BURN', 'LIGHTEN', 'SCREEN', 'DODGE', 'ADD', 'OVERLAY', 'SOFT_LIGHT', 'LINEAR_LIGHT', 'DIFFERENCE', 'SUBTRACT', 'DIVIDE', 'HUE', 'SATURATION', 'COLOR', 'VALUE']
      '''
      
      use_alpha = bool
      '''Include alpha of second input in this operation
         @returns: boolean
      '''
      
      use_clamp = bool
      '''Clamp result of the node to 0..1 range
         @returns: boolean
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeOutput(types.TextureNode):
      '''
      '''
   
      filepath = str
      '''
         @returns: string, (never None)
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeRGBToBW(types.TextureNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeRotate(types.TextureNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeScale(types.TextureNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeTexBlend(types.TextureNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeTexClouds(types.TextureNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeTexDistNoise(types.TextureNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeTexMagic(types.TextureNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeTexMarble(types.TextureNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeTexMusgrave(types.TextureNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeTexNoise(types.TextureNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeTexStucci(types.TextureNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeTexVoronoi(types.TextureNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeTexWood(types.TextureNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeTexture(types.TextureNode):
      '''
      '''
   
      node_output = int
      '''For node-based textures, which output node to use
         @returns: int in [-32768, 32767]
      '''
      
      texture = types.Texture
      '''
         @returns: Texture
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeTranslate(types.TextureNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeTree(types.NodeTree):
      '''Node tree consisting of linked nodes used for textures
      '''
   
   class TextureNodeValToNor(types.TextureNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeValToRGB(types.TextureNode):
      '''
      '''
   
      color_ramp = types.ColorRamp # (read only)
      '''
         @returns: ColorRamp
      '''
      
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureNodeViewer(types.TextureNode):
      '''
      '''
   
      @classmethod
      def is_registered_node_type():
         '''True if a registered node type
            @returns (bool): 
         '''
      
         return bool

      @classmethod
      def input_template(index):
         '''Input socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def output_template(index):
         '''Output socket template
            Arguments:
            @index (int): in [0, inf]
      
            @returns (types.NodeInternalSocketTemplate): 
         '''
      
         return types.NodeInternalSocketTemplate

      @classmethod
      def poll(cls, ntree):
         
      
         pass
      
   class TextureSlot(types.bpy_struct):
      '''Texture slot defining the mapping and influence of a texture
      '''
   
      blend_type = str
      '''Mode used to apply the texture
         @returns: enum in ['MIX', 'DARKEN', 'MULTIPLY', 'LIGHTEN', 'SCREEN', 'ADD', 'OVERLAY', 'SOFT_LIGHT', 'LINEAR_LIGHT', 'DIFFERENCE', 'SUBTRACT', 'DIVIDE', 'HUE', 'SATURATION', 'COLOR', 'VALUE']
      '''
      
      color = float
      '''Default color for textures that don't return RGB or when RGB to intensity is enabled
         @returns: float array of 3 items in [0, inf]
      '''
      
      default_value = float
      '''Value to use for Ref, Spec, Amb, Emit, Alpha, RayMir, TransLu and Hard
         @returns: float in [-inf, inf]
      '''
      
      name = str # (read only)
      '''Texture slot name
         @returns: string, (never None)
      '''
      
      offset = float
      '''Fine tune of the texture mapping X, Y and Z locations
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      output_node = str
      '''Which output node to use, for node-based textures
         @returns: enum in ['DUMMY']
      '''
      
      scale = float
      '''Set scaling for the texture's X, Y and Z sizes
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      texture = types.Texture
      '''Texture data-block used by this texture slot
         @returns: Texture
      '''
      
   class Theme(types.bpy_struct):
      '''Theme settings defining draw style and colors in the user interface
      '''
   
      bone_color_sets = types.ThemeBoneColorSet # (read only)
      '''
         @returns: Collection of ThemeBoneColorSet, (never None)
      '''
      
      clip_editor = types.ThemeClipEditor # (read only)
      '''
         @returns: ThemeClipEditor, (never None)
      '''
      
      console = types.ThemeConsole # (read only)
      '''
         @returns: ThemeConsole, (never None)
      '''
      
      dopesheet_editor = types.ThemeDopeSheet # (read only)
      '''
         @returns: ThemeDopeSheet, (never None)
      '''
      
      file_browser = types.ThemeFileBrowser # (read only)
      '''
         @returns: ThemeFileBrowser, (never None)
      '''
      
      graph_editor = types.ThemeGraphEditor # (read only)
      '''
         @returns: ThemeGraphEditor, (never None)
      '''
      
      image_editor = types.ThemeImageEditor # (read only)
      '''
         @returns: ThemeImageEditor, (never None)
      '''
      
      info = types.ThemeInfo # (read only)
      '''
         @returns: ThemeInfo, (never None)
      '''
      
      name = str
      '''Name of the theme
         @returns: string, (never None)
      '''
      
      nla_editor = types.ThemeNLAEditor # (read only)
      '''
         @returns: ThemeNLAEditor, (never None)
      '''
      
      node_editor = types.ThemeNodeEditor # (read only)
      '''
         @returns: ThemeNodeEditor, (never None)
      '''
      
      outliner = types.ThemeOutliner # (read only)
      '''
         @returns: ThemeOutliner, (never None)
      '''
      
      preferences = types.ThemePreferences # (read only)
      '''
         @returns: ThemePreferences, (never None)
      '''
      
      properties = types.ThemeProperties # (read only)
      '''
         @returns: ThemeProperties, (never None)
      '''
      
      sequence_editor = types.ThemeSequenceEditor # (read only)
      '''
         @returns: ThemeSequenceEditor, (never None)
      '''
      
      statusbar = types.ThemeStatusBar # (read only)
      '''
         @returns: ThemeStatusBar, (never None)
      '''
      
      text_editor = types.ThemeTextEditor # (read only)
      '''
         @returns: ThemeTextEditor, (never None)
      '''
      
      theme_area = str
      '''
         @returns: enum in ['USER_INTERFACE', 'STYLE', 'BONE_COLOR_SETS', 'VIEW_3D', 'GRAPH_EDITOR', 'DOPESHEET_EDITOR', 'NLA_EDITOR', 'IMAGE_EDITOR', 'SEQUENCE_EDITOR', 'TEXT_EDITOR', 'NODE_EDITOR', 'PROPERTIES', 'OUTLINER', 'PREFERENCES', 'INFO', 'FILE_BROWSER', 'CONSOLE', 'CLIP_EDITOR', 'TOPBAR', 'STATUSBAR']
      '''
      
      topbar = types.ThemeTopBar # (read only)
      '''
         @returns: ThemeTopBar, (never None)
      '''
      
      user_interface = types.ThemeUserInterface # (read only)
      '''
         @returns: ThemeUserInterface, (never None)
      '''
      
      view_3d = types.ThemeView3D # (read only)
      '''
         @returns: ThemeView3D, (never None)
      '''
      
   class ThemeBoneColorSet(types.bpy_struct):
      '''Theme settings for bone color sets
      '''
   
      active = float
      '''Color used for active bones
         @returns: float array of 3 items in [0, 1]
      '''
      
      normal = float
      '''Color used for the surface of bones
         @returns: float array of 3 items in [0, 1]
      '''
      
      select = float
      '''Color used for selected bones
         @returns: float array of 3 items in [0, 1]
      '''
      
      show_colored_constraints = bool
      '''Allow the use of colors indicating constraints/keyed status
         @returns: boolean
      '''
      
   class ThemeClipEditor(types.bpy_struct):
      '''Theme settings for the Movie Clip Editor
      '''
   
      active_marker = float
      '''Color of active marker
         @returns: float array of 3 items in [0, 1]
      '''
      
      disabled_marker = float
      '''Color of disabled marker
         @returns: float array of 3 items in [0, 1]
      '''
      
      frame_current = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      grid = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_align = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_auto = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_auto_clamped = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_free = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_sel_align = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_sel_auto = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_sel_auto_clamped = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_sel_free = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_vertex = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_vertex_select = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_vertex_size = int
      '''
         @returns: int in [1, 100]
      '''
      
      locked_marker = float
      '''Color of locked marker
         @returns: float array of 3 items in [0, 1]
      '''
      
      marker = float
      '''Color of marker
         @returns: float array of 3 items in [0, 1]
      '''
      
      marker_outline = float
      '''Color of marker's outline
         @returns: float array of 3 items in [0, 1]
      '''
      
      metadatabg = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      metadatatext = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      path_after = float
      '''Color of path after current frame
         @returns: float array of 3 items in [0, 1]
      '''
      
      path_before = float
      '''Color of path before current frame
         @returns: float array of 3 items in [0, 1]
      '''
      
      path_keyframe_after = float
      '''Color of path after current frame
         @returns: float array of 3 items in [0, 1]
      '''
      
      path_keyframe_before = float
      '''Color of path before current frame
         @returns: float array of 3 items in [0, 1]
      '''
      
      selected_marker = float
      '''Color of selected marker
         @returns: float array of 3 items in [0, 1]
      '''
      
      space = types.ThemeSpaceGeneric # (read only)
      '''Settings for space
         @returns: ThemeSpaceGeneric, (never None)
      '''
      
      space_list = types.ThemeSpaceListGeneric # (read only)
      '''Settings for space list
         @returns: ThemeSpaceListGeneric, (never None)
      '''
      
      strips = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      strips_selected = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      time_marker_line = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      time_marker_line_selected = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      time_scrub_background = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
   class ThemeConsole(types.bpy_struct):
      '''Theme settings for the Console
      '''
   
      cursor = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      line_error = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      line_info = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      line_input = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      line_output = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      select = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      space = types.ThemeSpaceGeneric # (read only)
      '''Settings for space
         @returns: ThemeSpaceGeneric, (never None)
      '''
      
   class ThemeDopeSheet(types.bpy_struct):
      '''Theme settings for the Dope Sheet
      '''
   
      active_channels_group = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      channel_group = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      channels = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      channels_selected = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      dopesheet_channel = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      dopesheet_subchannel = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      frame_current = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      grid = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      interpolation_line = float
      '''Color of lines showing non-bezier interpolation modes
         @returns: float array of 4 items in [0, 1]
      '''
      
      keyframe = float
      '''Color of Keyframe
         @returns: float array of 3 items in [0, 1]
      '''
      
      keyframe_border = float
      '''Color of keyframe border
         @returns: float array of 4 items in [0, 1]
      '''
      
      keyframe_border_selected = float
      '''Color of selected keyframe border
         @returns: float array of 4 items in [0, 1]
      '''
      
      keyframe_breakdown = float
      '''Color of breakdown keyframe
         @returns: float array of 3 items in [0, 1]
      '''
      
      keyframe_breakdown_selected = float
      '''Color of selected breakdown keyframe
         @returns: float array of 3 items in [0, 1]
      '''
      
      keyframe_extreme = float
      '''Color of extreme keyframe
         @returns: float array of 3 items in [0, 1]
      '''
      
      keyframe_extreme_selected = float
      '''Color of selected extreme keyframe
         @returns: float array of 3 items in [0, 1]
      '''
      
      keyframe_jitter = float
      '''Color of jitter keyframe
         @returns: float array of 3 items in [0, 1]
      '''
      
      keyframe_jitter_selected = float
      '''Color of selected jitter keyframe
         @returns: float array of 3 items in [0, 1]
      '''
      
      keyframe_movehold = float
      '''Color of moving hold keyframe
         @returns: float array of 3 items in [0, 1]
      '''
      
      keyframe_movehold_selected = float
      '''Color of selected moving hold keyframe
         @returns: float array of 3 items in [0, 1]
      '''
      
      keyframe_scale_factor = float
      '''Scale factor for adjusting the height of keyframes
         @returns: float in [0.8, 5]
      '''
      
      keyframe_selected = float
      '''Color of selected keyframe
         @returns: float array of 3 items in [0, 1]
      '''
      
      long_key = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      long_key_selected = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      preview_range = float
      '''Color of preview range overlay
         @returns: float array of 4 items in [0, 1]
      '''
      
      space = types.ThemeSpaceGeneric # (read only)
      '''Settings for space
         @returns: ThemeSpaceGeneric, (never None)
      '''
      
      space_list = types.ThemeSpaceListGeneric # (read only)
      '''Settings for space list
         @returns: ThemeSpaceListGeneric, (never None)
      '''
      
      summary = float
      '''Color of summary channel
         @returns: float array of 4 items in [0, 1]
      '''
      
      time_marker_line = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      time_marker_line_selected = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      time_scrub_background = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      value_sliders = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      view_sliders = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
   class ThemeFileBrowser(types.bpy_struct):
      '''Theme settings for the File Browser
      '''
   
      selected_file = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      space = types.ThemeSpaceGeneric # (read only)
      '''Settings for space
         @returns: ThemeSpaceGeneric, (never None)
      '''
      
   class ThemeFontStyle(types.bpy_struct):
      '''Theme settings for Font
      '''
   
      font_kerning_style = str
      '''Which style to use for font kerning
         @returns: enum in ['UNFITTED', 'FITTED']
      '''
      
      points = int
      '''
         @returns: int in [6, 48]
      '''
      
      shadow = int
      '''Shadow size (0, 3 and 5 supported)
         @returns: int in [0, 5]
      '''
      
      shadow_alpha = float
      '''
         @returns: float in [0, 1]
      '''
      
      shadow_offset_x = int
      '''Shadow offset in pixels
         @returns: int in [-10, 10]
      '''
      
      shadow_offset_y = int
      '''Shadow offset in pixels
         @returns: int in [-10, 10]
      '''
      
      shadow_value = float
      '''Shadow color in gray value
         @returns: float in [0, 1]
      '''
      
   class ThemeGradientColors(types.bpy_struct):
      '''Theme settings for background colors and gradient
      '''
   
      background_type = str
      '''Type of background in the 3D viewport
         @returns: enum in ['SINGLE_COLOR', 'LINEAR', 'RADIAL']
      '''
      
      gradient = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      high_gradient = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
   class ThemeGraphEditor(types.bpy_struct):
      '''Theme settings for the graph editor
      '''
   
      active_channels_group = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      channel_group = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      channels_region = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      dopesheet_channel = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      dopesheet_subchannel = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      frame_current = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      grid = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_align = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_auto = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_auto_clamped = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_free = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_sel_align = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_sel_auto = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_sel_auto_clamped = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_sel_free = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_sel_vect = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_vect = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_vertex = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_vertex_select = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_vertex_size = int
      '''
         @returns: int in [1, 100]
      '''
      
      lastsel_point = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      preview_range = float
      '''Color of preview range overlay
         @returns: float array of 4 items in [0, 1]
      '''
      
      space = types.ThemeSpaceGeneric # (read only)
      '''Settings for space
         @returns: ThemeSpaceGeneric, (never None)
      '''
      
      space_list = types.ThemeSpaceListGeneric # (read only)
      '''Settings for space list
         @returns: ThemeSpaceListGeneric, (never None)
      '''
      
      time_marker_line = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      time_marker_line_selected = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      time_scrub_background = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      vertex = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      vertex_bevel = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      vertex_select = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      vertex_size = int
      '''
         @returns: int in [1, 32]
      '''
      
      vertex_unreferenced = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      window_sliders = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
   class ThemeImageEditor(types.bpy_struct):
      '''Theme settings for the Image Editor
      '''
   
      edge_select = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      editmesh_active = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      face = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      face_back = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      face_dot = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      face_front = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      face_select = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      facedot_size = int
      '''
         @returns: int in [1, 10]
      '''
      
      frame_current = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      freestyle_face_mark = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      handle_align = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_auto = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_auto_clamped = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_free = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_sel_align = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_sel_auto = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_sel_auto_clamped = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_sel_free = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_vertex = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_vertex_select = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_vertex_size = int
      '''
         @returns: int in [1, 100]
      '''
      
      metadatabg = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      metadatatext = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      paint_curve_handle = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      paint_curve_pivot = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      preview_stitch_active = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      preview_stitch_edge = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      preview_stitch_face = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      preview_stitch_stitchable = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      preview_stitch_unstitchable = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      preview_stitch_vert = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      scope_back = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      space = types.ThemeSpaceGeneric # (read only)
      '''Settings for space
         @returns: ThemeSpaceGeneric, (never None)
      '''
      
      uv_others = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      uv_shadow = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      vertex = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      vertex_bevel = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      vertex_select = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      vertex_size = int
      '''
         @returns: int in [1, 32]
      '''
      
      vertex_unreferenced = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      wire_edit = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
   class ThemeInfo(types.bpy_struct):
      '''Theme settings for Info
      '''
   
      info_debug = float
      '''Background color of Debug icon
         @returns: float array of 4 items in [0, 1]
      '''
      
      info_debug_text = float
      '''Foreground color of Debug icon
         @returns: float array of 3 items in [0, 1]
      '''
      
      info_error = float
      '''Background color of Error icon
         @returns: float array of 4 items in [0, 1]
      '''
      
      info_error_text = float
      '''Foreground color of Error icon
         @returns: float array of 3 items in [0, 1]
      '''
      
      info_info = float
      '''Background color of Info icon
         @returns: float array of 4 items in [0, 1]
      '''
      
      info_info_text = float
      '''Foreground color of Info icon
         @returns: float array of 3 items in [0, 1]
      '''
      
      info_operator = float
      '''Background color of Operator icon
         @returns: float array of 4 items in [0, 1]
      '''
      
      info_operator_text = float
      '''Foreground color of Operator icon
         @returns: float array of 3 items in [0, 1]
      '''
      
      info_property = float
      '''Background color of Property icon
         @returns: float array of 4 items in [0, 1]
      '''
      
      info_property_text = float
      '''Foreground color of Property icon
         @returns: float array of 3 items in [0, 1]
      '''
      
      info_report_error = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      info_report_info = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      info_report_warning = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      info_selected = float
      '''Background color of selected line
         @returns: float array of 3 items in [0, 1]
      '''
      
      info_selected_text = float
      '''Text color of selected line
         @returns: float array of 3 items in [0, 1]
      '''
      
      info_warning = float
      '''Background color of Warning icon
         @returns: float array of 4 items in [0, 1]
      '''
      
      info_warning_text = float
      '''Foreground color of Warning icon
         @returns: float array of 3 items in [0, 1]
      '''
      
      space = types.ThemeSpaceGeneric # (read only)
      '''Settings for space
         @returns: ThemeSpaceGeneric, (never None)
      '''
      
   class ThemeNLAEditor(types.bpy_struct):
      '''Theme settings for the NLA Editor
      '''
   
      active_action = float
      '''Animation data-block has active action
         @returns: float array of 4 items in [0, 1]
      '''
      
      active_action_unset = float
      '''Animation data-block doesn't have active action
         @returns: float array of 4 items in [0, 1]
      '''
      
      dopesheet_channel = float
      '''Nonlinear Animation Channel
         @returns: float array of 3 items in [0, 1]
      '''
      
      frame_current = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      grid = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      keyframe_border = float
      '''Color of keyframe border
         @returns: float array of 4 items in [0, 1]
      '''
      
      keyframe_border_selected = float
      '''Color of selected keyframe border
         @returns: float array of 4 items in [0, 1]
      '''
      
      meta_strips = float
      '''Meta Strip - Unselected (for grouping related strips)
         @returns: float array of 3 items in [0, 1]
      '''
      
      meta_strips_selected = float
      '''Meta Strip - Selected (for grouping related strips)
         @returns: float array of 3 items in [0, 1]
      '''
      
      nla_track = float
      '''Nonlinear Animation Track
         @returns: float array of 3 items in [0, 1]
      '''
      
      preview_range = float
      '''Color of preview range overlay
         @returns: float array of 4 items in [0, 1]
      '''
      
      sound_strips = float
      '''Sound Strip - Unselected (for timing speaker sounds)
         @returns: float array of 3 items in [0, 1]
      '''
      
      sound_strips_selected = float
      '''Sound Strip - Selected (for timing speaker sounds)
         @returns: float array of 3 items in [0, 1]
      '''
      
      space = types.ThemeSpaceGeneric # (read only)
      '''Settings for space
         @returns: ThemeSpaceGeneric, (never None)
      '''
      
      space_list = types.ThemeSpaceListGeneric # (read only)
      '''Settings for space list
         @returns: ThemeSpaceListGeneric, (never None)
      '''
      
      strips = float
      '''Action-Clip Strip - Unselected
         @returns: float array of 3 items in [0, 1]
      '''
      
      strips_selected = float
      '''Action-Clip Strip - Selected
         @returns: float array of 3 items in [0, 1]
      '''
      
      time_marker_line = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      time_marker_line_selected = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      time_scrub_background = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      transition_strips = float
      '''Transition Strip - Unselected
         @returns: float array of 3 items in [0, 1]
      '''
      
      transition_strips_selected = float
      '''Transition Strip - Selected
         @returns: float array of 3 items in [0, 1]
      '''
      
      tweak = float
      '''Color for strip/action being 'tweaked' or edited
         @returns: float array of 3 items in [0, 1]
      '''
      
      tweak_duplicate = float
      '''Warning/error indicator color for strips referencing the strip being tweaked
         @returns: float array of 3 items in [0, 1]
      '''
      
      view_sliders = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
   class ThemeNodeEditor(types.bpy_struct):
      '''Theme settings for the Node Editor
      '''
   
      color_node = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      converter_node = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      distor_node = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      filter_node = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      frame_node = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      grid_levels = int
      '''Amount of grid lines displayed in the background
         @returns: int in [0, 2]
      '''
      
      group_node = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      group_socket_node = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      input_node = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      layout_node = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      matte_node = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      node_active = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      node_backdrop = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      node_selected = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      noodle_curving = int
      '''Curving of the noodle
         @returns: int in [0, 10]
      '''
      
      output_node = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      pattern_node = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      script_node = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      selected_text = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      shader_node = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      space = types.ThemeSpaceGeneric # (read only)
      '''Settings for space
         @returns: ThemeSpaceGeneric, (never None)
      '''
      
      space_list = types.ThemeSpaceListGeneric # (read only)
      '''Settings for space list
         @returns: ThemeSpaceListGeneric, (never None)
      '''
      
      texture_node = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      vector_node = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      wire = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      wire_inner = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      wire_select = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
   class ThemeOutliner(types.bpy_struct):
      '''Theme settings for the Outliner
      '''
   
      active = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      active_object = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      edited_object = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      match = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      row_alternate = float
      '''Overlay color on every other row
         @returns: float array of 4 items in [0, 1]
      '''
      
      selected_highlight = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      selected_object = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      space = types.ThemeSpaceGeneric # (read only)
      '''Settings for space
         @returns: ThemeSpaceGeneric, (never None)
      '''
      
   class ThemePanelColors(types.bpy_struct):
      '''Theme settings for panel colors
      '''
   
      back = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      header = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      sub_back = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
   class ThemePreferences(types.bpy_struct):
      '''Theme settings for the Blender Preferences
      '''
   
      space = types.ThemeSpaceGeneric # (read only)
      '''Settings for space
         @returns: ThemeSpaceGeneric, (never None)
      '''
      
   class ThemeProperties(types.bpy_struct):
      '''Theme settings for the Properties
      '''
   
      space = types.ThemeSpaceGeneric # (read only)
      '''Settings for space
         @returns: ThemeSpaceGeneric, (never None)
      '''
      
   class ThemeSequenceEditor(types.bpy_struct):
      '''Theme settings for the Sequence Editor
      '''
   
      active_strip = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      audio_strip = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      color_strip = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      draw_action = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      effect_strip = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      frame_current = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      grid = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      image_strip = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      keyframe = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      mask_strip = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      meta_strip = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      metadatabg = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      metadatatext = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      movie_strip = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      movieclip_strip = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      preview_back = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      preview_range = float
      '''Color of preview range overlay
         @returns: float array of 4 items in [0, 1]
      '''
      
      scene_strip = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      selected_strip = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      space = types.ThemeSpaceGeneric # (read only)
      '''Settings for space
         @returns: ThemeSpaceGeneric, (never None)
      '''
      
      text_strip = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      time_marker_line = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      time_marker_line_selected = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      time_scrub_background = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      window_sliders = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
   class ThemeSpaceGeneric(types.bpy_struct):
      '''
      '''
   
      back = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      button = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      button_text = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      button_text_hi = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      button_title = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      execution_buts = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      header = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      header_text = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      header_text_hi = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      navigation_bar = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      panelcolors = types.ThemePanelColors # (read only)
      '''
         @returns: ThemePanelColors, (never None)
      '''
      
      tab_active = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      tab_back = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      tab_inactive = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      tab_outline = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      text = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      text_hi = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      title = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
   class ThemeSpaceGradient(types.bpy_struct):
      '''
      '''
   
      button = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      button_text = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      button_text_hi = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      button_title = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      execution_buts = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      gradients = types.ThemeGradientColors # (read only)
      '''
         @returns: ThemeGradientColors, (never None)
      '''
      
      header = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      header_text = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      header_text_hi = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      navigation_bar = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      panelcolors = types.ThemePanelColors # (read only)
      '''
         @returns: ThemePanelColors, (never None)
      '''
      
      tab_active = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      tab_back = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      tab_inactive = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      tab_outline = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      text = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      text_hi = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      title = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
   class ThemeSpaceListGeneric(types.bpy_struct):
      '''
      '''
   
      list = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      list_text = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      list_text_hi = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      list_title = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
   class ThemeStatusBar(types.bpy_struct):
      '''Theme settings for the Status Bar
      '''
   
      space = types.ThemeSpaceGeneric # (read only)
      '''Settings for space
         @returns: ThemeSpaceGeneric, (never None)
      '''
      
   class ThemeStyle(types.bpy_struct):
      '''Theme settings for style sets
      '''
   
      panel_title = types.ThemeFontStyle # (read only)
      '''
         @returns: ThemeFontStyle, (never None)
      '''
      
      widget = types.ThemeFontStyle # (read only)
      '''
         @returns: ThemeFontStyle, (never None)
      '''
      
      widget_label = types.ThemeFontStyle # (read only)
      '''
         @returns: ThemeFontStyle, (never None)
      '''
      
   class ThemeTextEditor(types.bpy_struct):
      '''Theme settings for the Text Editor
      '''
   
      cursor = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      line_numbers = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      line_numbers_background = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      selected_text = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      space = types.ThemeSpaceGeneric # (read only)
      '''Settings for space
         @returns: ThemeSpaceGeneric, (never None)
      '''
      
      syntax_builtin = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      syntax_comment = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      syntax_numbers = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      syntax_preprocessor = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      syntax_reserved = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      syntax_special = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      syntax_string = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      syntax_symbols = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
   class ThemeTopBar(types.bpy_struct):
      '''Theme settings for the Top Bar
      '''
   
      space = types.ThemeSpaceGeneric # (read only)
      '''Settings for space
         @returns: ThemeSpaceGeneric, (never None)
      '''
      
   class ThemeUserInterface(types.bpy_struct):
      '''Theme settings for user interface elements
      '''
   
      axis_x = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      axis_y = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      axis_z = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      editor_outline = float
      '''Color of the outline of the editors and their round corners
         @returns: float array of 3 items in [0, 1]
      '''
      
      gizmo_a = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      gizmo_b = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      gizmo_hi = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      gizmo_primary = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      gizmo_secondary = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      gizmo_view_align = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      icon_alpha = float
      '''Transparency of icons in the interface, to reduce contrast
         @returns: float in [0, 1]
      '''
      
      icon_border_intensity = float
      '''Control the intensity of the border around themes icons
         @returns: float in [0, 1]
      '''
      
      icon_collection = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      icon_folder = float
      '''Color of folders in the file browser
         @returns: float array of 4 items in [0, 1]
      '''
      
      icon_modifier = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      icon_object = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      icon_object_data = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      icon_saturation = float
      '''Saturation of icons in the interface
         @returns: float in [0, 1]
      '''
      
      icon_scene = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      icon_shading = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      menu_shadow_fac = float
      '''Blending factor for menu shadows
         @returns: float in [0.01, 1]
      '''
      
      menu_shadow_width = int
      '''Width of menu shadows, set to zero to disable
         @returns: int in [0, 24]
      '''
      
      transparent_checker_primary = float
      '''Primary color of checkerboard pattern indicating transparent areas
         @returns: float array of 3 items in [0, 1]
      '''
      
      transparent_checker_secondary = float
      '''Secondary color of checkerboard pattern indicating transparent areas
         @returns: float array of 3 items in [0, 1]
      '''
      
      transparent_checker_size = int
      '''Size of checkerboard pattern indicating transparent areas
         @returns: int in [2, 48]
      '''
      
      wcol_box = types.ThemeWidgetColors # (read only)
      '''
         @returns: ThemeWidgetColors, (never None)
      '''
      
      wcol_list_item = types.ThemeWidgetColors # (read only)
      '''
         @returns: ThemeWidgetColors, (never None)
      '''
      
      wcol_menu = types.ThemeWidgetColors # (read only)
      '''
         @returns: ThemeWidgetColors, (never None)
      '''
      
      wcol_menu_back = types.ThemeWidgetColors # (read only)
      '''
         @returns: ThemeWidgetColors, (never None)
      '''
      
      wcol_menu_item = types.ThemeWidgetColors # (read only)
      '''
         @returns: ThemeWidgetColors, (never None)
      '''
      
      wcol_num = types.ThemeWidgetColors # (read only)
      '''
         @returns: ThemeWidgetColors, (never None)
      '''
      
      wcol_numslider = types.ThemeWidgetColors # (read only)
      '''
         @returns: ThemeWidgetColors, (never None)
      '''
      
      wcol_option = types.ThemeWidgetColors # (read only)
      '''
         @returns: ThemeWidgetColors, (never None)
      '''
      
      wcol_pie_menu = types.ThemeWidgetColors # (read only)
      '''
         @returns: ThemeWidgetColors, (never None)
      '''
      
      wcol_progress = types.ThemeWidgetColors # (read only)
      '''
         @returns: ThemeWidgetColors, (never None)
      '''
      
      wcol_pulldown = types.ThemeWidgetColors # (read only)
      '''
         @returns: ThemeWidgetColors, (never None)
      '''
      
      wcol_radio = types.ThemeWidgetColors # (read only)
      '''
         @returns: ThemeWidgetColors, (never None)
      '''
      
      wcol_regular = types.ThemeWidgetColors # (read only)
      '''
         @returns: ThemeWidgetColors, (never None)
      '''
      
      wcol_scroll = types.ThemeWidgetColors # (read only)
      '''
         @returns: ThemeWidgetColors, (never None)
      '''
      
      wcol_state = types.ThemeWidgetStateColors # (read only)
      '''
         @returns: ThemeWidgetStateColors, (never None)
      '''
      
      wcol_tab = types.ThemeWidgetColors # (read only)
      '''
         @returns: ThemeWidgetColors, (never None)
      '''
      
      wcol_text = types.ThemeWidgetColors # (read only)
      '''
         @returns: ThemeWidgetColors, (never None)
      '''
      
      wcol_toggle = types.ThemeWidgetColors # (read only)
      '''
         @returns: ThemeWidgetColors, (never None)
      '''
      
      wcol_tool = types.ThemeWidgetColors # (read only)
      '''
         @returns: ThemeWidgetColors, (never None)
      '''
      
      wcol_toolbar_item = types.ThemeWidgetColors # (read only)
      '''
         @returns: ThemeWidgetColors, (never None)
      '''
      
      wcol_tooltip = types.ThemeWidgetColors # (read only)
      '''
         @returns: ThemeWidgetColors, (never None)
      '''
      
      widget_emboss = float
      '''Color of the 1px shadow line underlying widgets
         @returns: float array of 4 items in [0, 1]
      '''
      
      widget_text_cursor = float
      '''Color of the interface widgets text insertion cursor (caret)
         @returns: float array of 3 items in [0, 1]
      '''
      
   class ThemeView3D(types.bpy_struct):
      '''Theme settings for the 3D View
      '''
   
      act_spline = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      bone_locked_weight = float
      '''Shade for bones corresponding to a locked weight group during painting
         @returns: float array of 4 items in [0, 1]
      '''
      
      bone_pose = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      bone_pose_active = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      bone_solid = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      bundle_solid = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      camera = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      camera_path = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      clipping_border_3d = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      edge_bevel = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      edge_crease = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      edge_facesel = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      edge_seam = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      edge_select = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      edge_sharp = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      editmesh_active = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      empty = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      extra_edge_angle = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      extra_edge_len = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      extra_face_angle = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      extra_face_area = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      face = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      face_back = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      face_dot = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      face_front = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      face_select = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      facedot_size = int
      '''
         @returns: int in [1, 10]
      '''
      
      frame_current = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      freestyle_edge_mark = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      freestyle_face_mark = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      gp_vertex = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      gp_vertex_select = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      gp_vertex_size = int
      '''
         @returns: int in [1, 10]
      '''
      
      grid = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      handle_align = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_auto = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_free = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_sel_align = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_sel_auto = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_sel_free = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_sel_vect = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      handle_vect = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      lastsel_point = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      light = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      normal = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      nurb_sel_uline = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      nurb_sel_vline = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      nurb_uline = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      nurb_vline = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      object_active = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      object_origin_size = int
      '''Diameter in Pixels for Object/Light origin display
         @returns: int in [4, 10]
      '''
      
      object_selected = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      outline_width = int
      '''
         @returns: int in [1, 5]
      '''
      
      paint_curve_handle = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      paint_curve_pivot = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      skin_root = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      space = types.ThemeSpaceGradient # (read only)
      '''Settings for space
         @returns: ThemeSpaceGradient, (never None)
      '''
      
      speaker = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      split_normal = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      text_grease_pencil = float
      '''Color for indicating Grease Pencil keyframes
         @returns: float array of 3 items in [0, 1]
      '''
      
      text_keyframe = float
      '''Color for indicating Object keyframes
         @returns: float array of 3 items in [0, 1]
      '''
      
      transform = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      vertex = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      vertex_bevel = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      vertex_normal = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      vertex_select = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      vertex_size = int
      '''
         @returns: int in [1, 32]
      '''
      
      vertex_unreferenced = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      view_overlay = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      wire = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      wire_edit = float
      '''Color for wireframe when in edit mode, but edge selection is active
         @returns: float array of 3 items in [0, 1]
      '''
      
   class ThemeWidgetColors(types.bpy_struct):
      '''Theme settings for widget color sets
      '''
   
      inner = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      inner_sel = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      item = float
      '''
         @returns: float array of 4 items in [0, 1]
      '''
      
      outline = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      roundness = float
      '''Amount of edge rounding
         @returns: float in [0, 1]
      '''
      
      shadedown = int
      '''
         @returns: int in [-100, 100]
      '''
      
      shadetop = int
      '''
         @returns: int in [-100, 100]
      '''
      
      show_shaded = bool
      '''
         @returns: boolean
      '''
      
      text = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      text_sel = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
   class ThemeWidgetStateColors(types.bpy_struct):
      '''Theme settings for widget state colors
      '''
   
      blend = float
      '''
         @returns: float in [0, 1]
      '''
      
      inner_anim = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      inner_anim_sel = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      inner_changed = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      inner_changed_sel = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      inner_driven = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      inner_driven_sel = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      inner_key = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      inner_key_sel = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      inner_overridden = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      inner_overridden_sel = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
   class ThickGpencilModifier(types.GpencilModifier):
      '''Subdivide and Smooth Stroke modifier
      '''
   
      curve = types.CurveMapping # (read only)
      '''Custom curve to apply effect
         @returns: CurveMapping
      '''
      
      invert_layer_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_layers = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_material_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_materials = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_vertex = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      layer = str
      '''Layer name
         @returns: string, (never None)
      '''
      
      layer_pass = int
      '''Layer pass index
         @returns: int in [0, 100]
      '''
      
      material = str
      '''Material name
         @returns: string, (never None)
      '''
      
      normalize_thickness = bool
      '''Replace the stroke thickness
         @returns: boolean
      '''
      
      pass_index = int
      '''Pass index
         @returns: int in [0, 100]
      '''
      
      thickness = int
      '''Absolute thickness to apply everywhere
         @returns: int in [-100, 500]
      '''
      
      thickness_factor = float
      '''Factor to multiply the thickness with
         @returns: float in [0, inf]
      '''
      
      use_custom_curve = bool
      '''Use a custom curve to define thickness change along the strokes
         @returns: boolean
      '''
      
      vertex_group = str
      '''Vertex group name for modulating the deform
         @returns: string, (never None)
      '''
      
   class TimeGpencilModifier(types.GpencilModifier):
      '''Time offset modifier
      '''
   
      frame_end = int
      '''Final frame of the range
         @returns: int in [0, 1048574]
      '''
      
      frame_scale = float
      '''Evaluation time in seconds
         @returns: float in [0.001, 100]
      '''
      
      frame_start = int
      '''First frame of the range
         @returns: int in [0, 1048574]
      '''
      
      invert_layer_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_layers = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      layer = str
      '''Layer name
         @returns: string, (never None)
      '''
      
      layer_pass = int
      '''Layer pass index
         @returns: int in [0, 100]
      '''
      
      mode = str
      '''
         @returns: enum in ['NORMAL', 'REVERSE', 'FIX']
      '''
      
      offset = int
      '''Number of frames to offset original keyframe number or frame to fix
         @returns: int in [-32768, 32767]
      '''
      
      use_custom_frame_range = bool
      '''Define a custom range of frames to use in modifier
         @returns: boolean
      '''
      
      use_keep_loop = bool
      '''Retiming end frames and move to start of animation to keep loop
         @returns: boolean
      '''
      
   class TimelineMarker(types.bpy_struct):
      '''Marker for noting points in the timeline
      '''
   
      camera = types.Object
      '''Camera that becomes active on this frame
         @returns: Object
      '''
      
      frame = int
      '''The frame on which the timeline marker appears
         @returns: int in [-inf, inf]
      '''
      
      name = str
      '''
         @returns: string, (never None)
      '''
      
      select = bool
      '''Marker selection state
         @returns: boolean
      '''
      
   class TimelineMarkers(types.bpy_struct):
      '''Collection of timeline markers
      '''
   
      def new(name, frame=1):
         '''Add a keyframe to the curve
            Arguments:
            @name (str): New name for the marker (not unique)
               (never None)
            @frame (int): The frame for the new marker
               in [-1048574, 1048574], (optional)
      
            @returns (types.TimelineMarker): Newly created timeline marker
               
         '''
      
         return types.TimelineMarker

      def remove(marker):
         '''Remove a timeline marker
            Arguments:
            @marker (TimelineMarker): Timeline marker to remove
               (never None)
      
         '''
      
         pass

      def clear():
         '''Remove all timeline markers
         '''
      
         pass

   class Timer(types.bpy_struct):
      '''Window event timer
      '''
   
      time_delta = float # (read only)
      '''Time since last step in seconds
         @returns: float in [-inf, inf]
      '''
      
      time_duration = float # (read only)
      '''Time since last step in seconds
         @returns: float in [-inf, inf]
      '''
      
      time_step = float # (read only)
      '''
         @returns: float in [-inf, inf]
      '''
      
   class TintGpencilModifier(types.GpencilModifier):
      '''Tint modifier
      '''
   
      color = float
      '''Color used for tinting
         @returns: float array of 3 items in [0, 1]
      '''
      
      colors = types.ColorRamp # (read only)
      '''Color ramp used to define tinting colors
         @returns: ColorRamp
      '''
      
      curve = types.CurveMapping # (read only)
      '''Custom curve to apply effect
         @returns: CurveMapping
      '''
      
      factor = float
      '''Factor for tinting
         @returns: float in [0, 2]
      '''
      
      invert_layer_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_layers = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_material_pass = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_materials = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      invert_vertex = bool
      '''Inverse filter
         @returns: boolean
      '''
      
      layer = str
      '''Layer name
         @returns: string, (never None)
      '''
      
      layer_pass = int
      '''Layer pass index
         @returns: int in [0, 100]
      '''
      
      material = str
      '''Material name
         @returns: string, (never None)
      '''
      
      object = types.Object
      '''Parent object to define the center of the effect
         @returns: Object
      '''
      
      pass_index = int
      '''Pass index
         @returns: int in [0, 100]
      '''
      
      radius = float
      '''Defines the maximum distance of the effect
         @returns: float in [1e-06, inf]
      '''
      
      tint_type = str
      '''Select type of tinting algorithm
         @returns: enum in ['UNIFORM', 'GRADIENT']
      '''
      
      use_custom_curve = bool
      '''Use a custom curve to define vertex color effect along the strokes
         @returns: boolean
      '''
      
      vertex_group = str
      '''Vertex group name for modulating the deform
         @returns: string, (never None)
      '''
      
      vertex_mode = str
      '''Defines how vertex color affect to the strokes
         @returns: enum in ['STROKE', 'FILL', 'BOTH']
      '''
      
   class ToolSettings(types.bpy_struct):
      '''
      '''
   
      annotation_stroke_placement_image_editor = str
      '''
         @returns: enum in ['CURSOR', 'VIEW', 'SURFACE']
      '''
      
      annotation_stroke_placement_sequencer_preview = str
      '''
         @returns: enum in ['CURSOR', 'VIEW', 'SURFACE']
      '''
      
      annotation_stroke_placement_view2d = str
      '''
         @returns: enum in ['CURSOR', 'VIEW', 'SURFACE']
      '''
      
      annotation_stroke_placement_view3d = str
      '''How annotation strokes are orientated in 3D space
         @returns: enum in ['CURSOR', 'VIEW', 'SURFACE']
      '''
      
      annotation_thickness = int
      '''Thickness of annotation strokes
         @returns: int in [1, 10]
      '''
      
      auto_keying_mode = str
      '''Mode of automatic keyframe insertion for Objects, Bones and Masks
         @returns: enum in ['ADD_REPLACE_KEYS', 'REPLACE_KEYS']
      '''
      
      curve_paint_settings = types.CurvePaintSettings # (read only)
      '''
         @returns: CurvePaintSettings, (never None)
      '''
      
      custom_bevel_profile_preset = types.CurveProfile # (read only)
      '''Used for defining a profile's path
         @returns: CurveProfile
      '''
      
      double_threshold = float
      '''Threshold distance for Auto Merge
         @returns: float in [0, 1]
      '''
      
      gpencil_interpolate = types.GPencilInterpolateSettings # (read only)
      '''Settings for Grease Pencil Interpolation tools
         @returns: GPencilInterpolateSettings
      '''
      
      gpencil_paint = types.GpPaint # (read only)
      '''
         @returns: GpPaint
      '''
      
      gpencil_sculpt = types.GPencilSculptSettings # (read only)
      '''Settings for stroke sculpting tools and brushes
         @returns: GPencilSculptSettings
      '''
      
      gpencil_sculpt_paint = types.GpSculptPaint # (read only)
      '''
         @returns: GpSculptPaint
      '''
      
      gpencil_selectmode_edit = str
      '''
         @returns: enum in ['POINT', 'STROKE', 'SEGMENT']
      '''
      
      gpencil_stroke_placement_view3d = str
      '''
         @returns: enum in ['ORIGIN', 'CURSOR', 'SURFACE', 'STROKE']
      '''
      
      gpencil_stroke_snap_mode = str
      '''
         @returns: enum in ['NONE', 'ENDS', 'FIRST']
      '''
      
      gpencil_vertex_paint = types.GpVertexPaint # (read only)
      '''
         @returns: GpVertexPaint
      '''
      
      gpencil_weight_paint = types.GpWeightPaint # (read only)
      '''
         @returns: GpWeightPaint
      '''
      
      image_paint = types.ImagePaint # (read only)
      '''
         @returns: ImagePaint
      '''
      
      keyframe_type = str
      '''Type of keyframes to create when inserting keyframes
         @returns: enum in ['KEYFRAME', 'BREAKDOWN', 'MOVING_HOLD', 'EXTREME', 'JITTER']
      '''
      
      lock_markers = bool
      '''Prevent marker editing
         @returns: boolean
      '''
      
      lock_object_mode = bool
      '''Restrict select to the current mode
         @returns: boolean
      '''
      
      mesh_select_mode = bool
      '''Which mesh elements selection works on
         @returns: boolean array of 3 items
      '''
      
      normal_vector = float
      '''Normal Vector used to copy, add or multiply
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      particle_edit = types.ParticleEdit # (read only)
      '''
         @returns: ParticleEdit
      '''
      
      proportional_edit_falloff = str
      '''Falloff type for proportional editing mode
         @returns: enum in ['SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR', 'CONSTANT', 'RANDOM']
      '''
      
      proportional_size = float
      '''Display size for proportional editing circle
         @returns: float in [1e-05, 5000]
      '''
      
      sculpt = types.Sculpt # (read only)
      '''
         @returns: Sculpt
      '''
      
      show_uv_local_view = bool
      '''Display only faces with the currently displayed image assigned
         @returns: boolean
      '''
      
      snap_elements = str
      '''Type of element to snap to
         @returns: enum set in {'INCREMENT', 'VERTEX', 'EDGE', 'FACE', 'VOLUME', 'EDGE_MIDPOINT', 'EDGE_PERPENDICULAR'}
      '''
      
      snap_node_element = str
      '''Type of element to snap to
         @returns: enum in ['GRID', 'NODE_X', 'NODE_Y', 'NODE_XY']
      '''
      
      snap_target = str
      '''Which part to snap onto the target
         @returns: enum in ['CLOSEST', 'CENTER', 'MEDIAN', 'ACTIVE']
      '''
      
      snap_uv_element = str
      '''Type of element to snap to
         @returns: enum in ['INCREMENT', 'VERTEX']
      '''
      
      statvis = types.MeshStatVis # (read only)
      '''
         @returns: MeshStatVis, (never None)
      '''
      
      transform_pivot_point = str
      '''Pivot center for rotation/scaling
         @returns: enum in ['BOUNDING_BOX_CENTER', 'CURSOR', 'INDIVIDUAL_ORIGINS', 'MEDIAN_POINT', 'ACTIVE_ELEMENT']
      '''
      
      unified_paint_settings = types.UnifiedPaintSettings # (read only)
      '''
         @returns: UnifiedPaintSettings, (never None)
      '''
      
      use_auto_normalize = bool
      '''Ensure all bone-deforming vertex groups add up to 1.0 while weight painting
         @returns: boolean
      '''
      
      use_edge_path_live_unwrap = bool
      '''Changing edges seam re-calculates UV unwrap
         @returns: boolean
      '''
      
      use_gpencil_draw_additive = bool
      '''When creating new frames, the strokes from the previous/active frame are included as the basis for the new one
         @returns: boolean
      '''
      
      use_gpencil_draw_onback = bool
      '''When draw new strokes, the new stroke is drawn below of all strokes in the layer
         @returns: boolean
      '''
      
      use_gpencil_select_mask_point = bool
      '''Only sculpt selected stroke points
         @returns: boolean
      '''
      
      use_gpencil_select_mask_segment = bool
      '''Only sculpt selected stroke points between other strokes
         @returns: boolean
      '''
      
      use_gpencil_select_mask_stroke = bool
      '''Only sculpt selected stroke
         @returns: boolean
      '''
      
      use_gpencil_stroke_endpoints = bool
      '''Only use the first and last parts of the stroke for snapping
         @returns: boolean
      '''
      
      use_gpencil_thumbnail_list = bool
      '''Show compact list of color instead of thumbnails
         @returns: boolean
      '''
      
      use_gpencil_vertex_select_mask_point = bool
      '''Only paint selected stroke points
         @returns: boolean
      '''
      
      use_gpencil_vertex_select_mask_segment = bool
      '''Only paint selected stroke points between other strokes
         @returns: boolean
      '''
      
      use_gpencil_vertex_select_mask_stroke = bool
      '''Only paint selected stroke
         @returns: boolean
      '''
      
      use_gpencil_weight_data_add = bool
      '''When creating new strokes, the weight data is added according to the current vertex group and weight, if no vertex group selected, weight is not added
         @returns: boolean
      '''
      
      use_keyframe_cycle_aware = bool
      '''For channels with cyclic extrapolation, keyframe insertion is automatically remapped inside the cycle time range, and keeps ends in sync
         @returns: boolean
      '''
      
      use_keyframe_insert_auto = bool
      '''Automatic keyframe insertion for Objects, Bones and Masks
         @returns: boolean
      '''
      
      use_keyframe_insert_keyingset = bool
      '''Automatic keyframe insertion using active Keying Set only
         @returns: boolean
      '''
      
      use_lock_relative = bool
      '''Display bone-deforming groups as if all locked deform groups were deleted, and the remaining ones were re-normalized
         @returns: boolean
      '''
      
      use_mesh_automerge = bool
      '''Automatically merge vertices moved to the same location
         @returns: boolean
      '''
      
      use_mesh_automerge_and_split = bool
      '''Automatically split edges and faces
         @returns: boolean
      '''
      
      use_multipaint = bool
      '''Paint across the weights of all selected bones, maintaining their relative influence
         @returns: boolean
      '''
      
      use_proportional_action = bool
      '''Proportional editing in action editor
         @returns: boolean
      '''
      
      use_proportional_connected = bool
      '''Proportional Editing using connected geometry only
         @returns: boolean
      '''
      
      use_proportional_edit = bool
      '''Proportional edit mode
         @returns: boolean
      '''
      
      use_proportional_edit_mask = bool
      '''Proportional editing mask mode
         @returns: boolean
      '''
      
      use_proportional_edit_objects = bool
      '''Proportional editing object mode
         @returns: boolean
      '''
      
      use_proportional_fcurve = bool
      '''Proportional editing in FCurve editor
         @returns: boolean
      '''
      
      use_proportional_projected = bool
      '''Proportional Editing using screen space locations
         @returns: boolean
      '''
      
      use_record_with_nla = bool
      '''Add a new NLA Track + Strip for every loop/pass made over the animation to allow non-destructive tweaking
         @returns: boolean
      '''
      
      use_snap = bool
      '''Snap during transform
         @returns: boolean
      '''
      
      use_snap_align_rotation = bool
      '''Align rotation with the snapping target
         @returns: boolean
      '''
      
      use_snap_backface_culling = bool
      '''Exclude back facing geometry from snapping
         @returns: boolean
      '''
      
      use_snap_grid_absolute = bool
      '''Absolute grid alignment while translating (based on the pivot center)
         @returns: boolean
      '''
      
      use_snap_peel_object = bool
      '''Consider objects as whole when finding volume center
         @returns: boolean
      '''
      
      use_snap_project = bool
      '''Project individual elements on the surface of other objects
         @returns: boolean
      '''
      
      use_snap_rotate = bool
      '''Rotate is affected by the snapping settings
         @returns: boolean
      '''
      
      use_snap_scale = bool
      '''Scale is affected by snapping settings
         @returns: boolean
      '''
      
      use_snap_self = bool
      '''Snap onto itself (Edit Mode Only)
         @returns: boolean
      '''
      
      use_snap_translate = bool
      '''Move is affected by snapping settings
         @returns: boolean
      '''
      
      use_transform_data_origin = bool
      '''Transform object origins, while leaving the shape in place
         @returns: boolean
      '''
      
      use_transform_pivot_point_align = bool
      '''Only transform object locations, without affecting rotation or scaling
         @returns: boolean
      '''
      
      use_transform_skip_children = bool
      '''Transform the parents, leaving the children in place
         @returns: boolean
      '''
      
      use_uv_select_sync = bool
      '''Keep UV and edit mode mesh selection in sync
         @returns: boolean
      '''
      
      uv_relax_method = str
      '''Algorithm used for UV relaxation
         @returns: enum in ['LAPLACIAN', 'HC']
      '''
      
      uv_sculpt = types.UvSculpt # (read only)
      '''
         @returns: UvSculpt
      '''
      
      uv_sculpt_all_islands = bool
      '''Brush operates on all islands
         @returns: boolean
      '''
      
      uv_sculpt_lock_borders = bool
      '''Disable editing of boundary edges
         @returns: boolean
      '''
      
      uv_select_mode = str
      '''UV selection and display mode
         @returns: enum in ['VERTEX', 'EDGE', 'FACE', 'ISLAND']
      '''
      
      vertex_group_subset = str
      '''Filter Vertex groups for Display
         @returns: enum in ['ALL', 'BONE_DEFORM', 'OTHER_DEFORM']
      '''
      
      vertex_group_user = str
      '''Display unweighted vertices
         @returns: enum in ['NONE', 'ACTIVE', 'ALL']
      '''
      
      vertex_group_weight = float
      '''Weight to assign in vertex groups
         @returns: float in [0, 1]
      '''
      
      vertex_paint = types.VertexPaint # (read only)
      '''
         @returns: VertexPaint
      '''
      
      weight_paint = types.VertexPaint # (read only)
      '''
         @returns: VertexPaint
      '''
      
      workspace_tool_type = str
      '''Action when dragging in the viewport
         @returns: enum in ['DEFAULT', 'FALLBACK']
      '''
      
   class TrackToConstraint(types.Constraint):
      '''Aim the constrained object toward the target
      '''
   
      head_tail = float
      '''Target along length of bone: Head=0, Tail=1
         @returns: float in [0, 1]
      '''
      
      subtarget = str
      '''Armature bone, mesh or lattice vertex group, ...
         @returns: string, (never None)
      '''
      
      target = types.Object
      '''Target object
         @returns: Object
      '''
      
      track_axis = str
      '''Axis that points to the target object
         @returns: enum in ['TRACK_X', 'TRACK_Y', 'TRACK_Z', 'TRACK_NEGATIVE_X', 'TRACK_NEGATIVE_Y', 'TRACK_NEGATIVE_Z']
      '''
      
      up_axis = str
      '''Axis that points upward
         @returns: enum in ['UP_X', 'UP_Y', 'UP_Z']
      '''
      
      use_bbone_shape = bool
      '''Follow shape of B-Bone segments when calculating Head/Tail position
         @returns: boolean
      '''
      
      use_target_z = bool
      '''Target's Z axis, not World Z axis, will constraint the Up direction
         @returns: boolean
      '''
      
   class TransformCacheConstraint(types.Constraint):
      '''Look up transformation from an external file
      '''
   
      cache_file = types.CacheFile
      '''
         @returns: CacheFile
      '''
      
      object_path = str
      '''Path to the object in the Alembic archive used to lookup the transform matrix
         @returns: string, (never None)
      '''
      
   class TransformConstraint(types.Constraint):
      '''Map transformations of the target to the object
      '''
   
      from_max_x = float
      '''Top range of X axis source motion
         @returns: float in [-inf, inf]
      '''
      
      from_max_x_rot = float
      '''Top range of X axis source motion
         @returns: float in [-inf, inf]
      '''
      
      from_max_x_scale = float
      '''Top range of X axis source motion
         @returns: float in [-inf, inf]
      '''
      
      from_max_y = float
      '''Top range of Y axis source motion
         @returns: float in [-inf, inf]
      '''
      
      from_max_y_rot = float
      '''Top range of Y axis source motion
         @returns: float in [-inf, inf]
      '''
      
      from_max_y_scale = float
      '''Top range of Y axis source motion
         @returns: float in [-inf, inf]
      '''
      
      from_max_z = float
      '''Top range of Z axis source motion
         @returns: float in [-inf, inf]
      '''
      
      from_max_z_rot = float
      '''Top range of Z axis source motion
         @returns: float in [-inf, inf]
      '''
      
      from_max_z_scale = float
      '''Top range of Z axis source motion
         @returns: float in [-inf, inf]
      '''
      
      from_min_x = float
      '''Bottom range of X axis source motion
         @returns: float in [-inf, inf]
      '''
      
      from_min_x_rot = float
      '''Bottom range of X axis source motion
         @returns: float in [-inf, inf]
      '''
      
      from_min_x_scale = float
      '''Bottom range of X axis source motion
         @returns: float in [-inf, inf]
      '''
      
      from_min_y = float
      '''Bottom range of Y axis source motion
         @returns: float in [-inf, inf]
      '''
      
      from_min_y_rot = float
      '''Bottom range of Y axis source motion
         @returns: float in [-inf, inf]
      '''
      
      from_min_y_scale = float
      '''Bottom range of Y axis source motion
         @returns: float in [-inf, inf]
      '''
      
      from_min_z = float
      '''Bottom range of Z axis source motion
         @returns: float in [-inf, inf]
      '''
      
      from_min_z_rot = float
      '''Bottom range of Z axis source motion
         @returns: float in [-inf, inf]
      '''
      
      from_min_z_scale = float
      '''Bottom range of Z axis source motion
         @returns: float in [-inf, inf]
      '''
      
      from_rotation_mode = str
      '''Specify the type of rotation channels to use
         @returns: enum in ['AUTO', 'XYZ', 'XZY', 'YXZ', 'YZX', 'ZXY', 'ZYX', 'QUATERNION', 'SWING_TWIST_X', 'SWING_TWIST_Y', 'SWING_TWIST_Z']
      '''
      
      map_from = str
      '''The transformation type to use from the target
         @returns: enum in ['LOCATION', 'ROTATION', 'SCALE']
      '''
      
      map_to = str
      '''The transformation type to affect of the constrained object
         @returns: enum in ['LOCATION', 'ROTATION', 'SCALE']
      '''
      
      map_to_x_from = str
      '''The source axis constrained object's X axis uses
         @returns: enum in ['X', 'Y', 'Z']
      '''
      
      map_to_y_from = str
      '''The source axis constrained object's Y axis uses
         @returns: enum in ['X', 'Y', 'Z']
      '''
      
      map_to_z_from = str
      '''The source axis constrained object's Z axis uses
         @returns: enum in ['X', 'Y', 'Z']
      '''
      
      mix_mode = str
      '''Specify how to combine the new location with original
         @returns: enum in ['REPLACE', 'ADD']
      '''
      
      mix_mode_rot = str
      '''Specify how to combine the new rotation with original
         @returns: enum in ['REPLACE', 'ADD', 'BEFORE', 'AFTER']
      '''
      
      mix_mode_scale = str
      '''Specify how to combine the new scale with original
         @returns: enum in ['REPLACE', 'MULTIPLY']
      '''
      
      subtarget = str
      '''Armature bone, mesh or lattice vertex group, ...
         @returns: string, (never None)
      '''
      
      target = types.Object
      '''Target object
         @returns: Object
      '''
      
      to_euler_order = str
      '''Explicitly specify the output euler rotation order
         @returns: enum in ['AUTO', 'XYZ', 'XZY', 'YXZ', 'YZX', 'ZXY', 'ZYX']
      '''
      
      to_max_x = float
      '''Top range of X axis destination motion
         @returns: float in [-inf, inf]
      '''
      
      to_max_x_rot = float
      '''Top range of X axis destination motion
         @returns: float in [-inf, inf]
      '''
      
      to_max_x_scale = float
      '''Top range of X axis destination motion
         @returns: float in [-inf, inf]
      '''
      
      to_max_y = float
      '''Top range of Y axis destination motion
         @returns: float in [-inf, inf]
      '''
      
      to_max_y_rot = float
      '''Top range of Y axis destination motion
         @returns: float in [-inf, inf]
      '''
      
      to_max_y_scale = float
      '''Top range of Y axis destination motion
         @returns: float in [-inf, inf]
      '''
      
      to_max_z = float
      '''Top range of Z axis destination motion
         @returns: float in [-inf, inf]
      '''
      
      to_max_z_rot = float
      '''Top range of Z axis destination motion
         @returns: float in [-inf, inf]
      '''
      
      to_max_z_scale = float
      '''Top range of Z axis destination motion
         @returns: float in [-inf, inf]
      '''
      
      to_min_x = float
      '''Bottom range of X axis destination motion
         @returns: float in [-inf, inf]
      '''
      
      to_min_x_rot = float
      '''Bottom range of X axis destination motion
         @returns: float in [-inf, inf]
      '''
      
      to_min_x_scale = float
      '''Bottom range of X axis destination motion
         @returns: float in [-inf, inf]
      '''
      
      to_min_y = float
      '''Bottom range of Y axis destination motion
         @returns: float in [-inf, inf]
      '''
      
      to_min_y_rot = float
      '''Bottom range of Y axis destination motion
         @returns: float in [-inf, inf]
      '''
      
      to_min_y_scale = float
      '''Bottom range of Y axis destination motion
         @returns: float in [-inf, inf]
      '''
      
      to_min_z = float
      '''Bottom range of Z axis destination motion
         @returns: float in [-inf, inf]
      '''
      
      to_min_z_rot = float
      '''Bottom range of Z axis destination motion
         @returns: float in [-inf, inf]
      '''
      
      to_min_z_scale = float
      '''Bottom range of Z axis destination motion
         @returns: float in [-inf, inf]
      '''
      
      use_motion_extrapolate = bool
      '''Extrapolate ranges
         @returns: boolean
      '''
      
   class TransformOrientation(types.bpy_struct):
      '''
      '''
   
      matrix = float
      '''
         @returns: float multi-dimensional array of 3 * 3 items in [-inf, inf]
      '''
      
      name = str
      '''Name of the custom transform orientation
         @returns: string, (never None)
      '''
      
   class TransformOrientationSlot(types.bpy_struct):
      '''
      '''
   
      custom_orientation = types.TransformOrientation # (read only)
      '''
         @returns: TransformOrientation
      '''
      
      type = str
      '''Transformation orientation
         @returns: enum in ['GLOBAL', 'LOCAL', 'NORMAL', 'GIMBAL', 'VIEW', 'CURSOR']
      '''
      
      use = bool
      '''Use scene orientation instead of a custom setting
         @returns: boolean
      '''
      
   class TransformSequence(types.EffectSequence):
      '''Sequence strip applying affine transformations to other strips
      '''
   
      input_1 = types.Sequence
      '''First input for the effect strip
         @returns: Sequence, (never None)
      '''
      
      input_count = int # (read only)
      '''
         @returns: int in [0, inf]
      '''
      
      interpolation = str
      '''Method to determine how missing pixels are created
         @returns: enum in ['NONE', 'BILINEAR', 'BICUBIC']
      '''
      
      rotation_start = float
      '''Degrees to rotate the input
         @returns: float in [-inf, inf]
      '''
      
      scale_start_x = float
      '''Amount to scale the input in the X axis
         @returns: float in [0, inf]
      '''
      
      scale_start_y = float
      '''Amount to scale the input in the Y axis
         @returns: float in [0, inf]
      '''
      
      translate_start_x = float
      '''Amount to move the input on the X axis
         @returns: float in [-inf, inf]
      '''
      
      translate_start_y = float
      '''Amount to move the input on the Y axis
         @returns: float in [-inf, inf]
      '''
      
      translation_unit = str
      '''Unit of measure to translate the input
         @returns: enum in ['PIXELS', 'PERCENT']
      '''
      
      use_uniform_scale = bool
      '''Scale uniformly, preserving aspect ratio
         @returns: boolean
      '''
      
   class TriangulateModifier(types.Modifier):
      '''Triangulate Mesh
      '''
   
      keep_custom_normals = bool
      '''Try to preserve custom normals (WARNING: depending on chosen triangulation method, shading may not be fully preserved, 'Fixed' method usually gives the best result here)
         @returns: boolean
      '''
      
      min_vertices = int
      '''Triangulate only polygons with vertex count greater than or equal to this number
         @returns: int in [4, inf]
      '''
      
      ngon_method = str
      '''Method for splitting the polygons into triangles
         @returns: enum in ['BEAUTY', 'CLIP']
      '''
      
      quad_method = str
      '''Method for splitting the quads into triangles
         @returns: enum in ['BEAUTY', 'FIXED', 'FIXED_ALTERNATE', 'SHORTEST_DIAGONAL']
      '''
      
   class UDIMTile(types.bpy_struct):
      '''Properties of the UDIM tile
      '''
   
      label = str
      '''Tile label
         @returns: string, (never None)
      '''
      
      number = int
      '''Number of the position that this tile covers
         @returns: int in [-inf, inf]
      '''
      
   class UDIMTiles(types.bpy_struct):
      '''Collection of UDIM tiles
      '''
   
      active = types.UDIMTile
      '''Active Image Tile
         @returns: UDIMTile, (never None)
      '''
      
      active_index = int
      '''Active index in tiles array
         @returns: int in [0, inf]
      '''
      
      def new(tile_number, label=""):
         '''Add a tile to the image
            Arguments:
            @tile_number (int): Number of the newly created tile
               in [1, inf]
            @label (str): Optional label for the tile
               (optional, never None)
      
            @returns (types.UDIMTile): Newly created image tile
               
         '''
      
         return types.UDIMTile

      def get(tile_number):
         '''Get a tile based on its tile number
            Arguments:
            @tile_number (int): Number of the tile
               in [0, inf]
      
            @returns (types.UDIMTile): The tile
               
         '''
      
         return types.UDIMTile

      def remove(tile):
         '''Remove an image tile
            Arguments:
            @tile (UDIMTile): Image tile to remove
               (never None)
      
         '''
      
         pass

   class UILayout(types.bpy_struct):
      '''User interface layout in a panel or header
      '''
   
      activate_init = bool
      '''When true, buttons defined in popups will be activated on first display (use so you can type into a field without having to click on it first)
         @returns: boolean
      '''
      
      active = bool
      '''
         @returns: boolean
      '''
      
      active_default = bool
      '''When true, an operator button defined after this will be activated when pressing return(use with popup dialogs)
         @returns: boolean
      '''
      
      alert = bool
      '''
         @returns: boolean
      '''
      
      alignment = str
      '''
         @returns: enum in ['EXPAND', 'LEFT', 'CENTER', 'RIGHT']
      '''
      
      direction = str # (read only)
      '''
         @returns: enum in ['HORIZONTAL', 'VERTICAL']
      '''
      
      emboss = str
      '''
         @returns: enum in ['NORMAL', 'NONE', 'PULLDOWN_MENU', 'RADIAL_MENU']
      '''
      
      enabled = bool
      '''When false, this (sub)layout is grayed out
         @returns: boolean
      '''
      
      operator_context = str
      '''
         @returns: enum in ['INVOKE_DEFAULT', 'INVOKE_REGION_WIN', 'INVOKE_REGION_CHANNELS', 'INVOKE_REGION_PREVIEW', 'INVOKE_AREA', 'INVOKE_SCREEN', 'EXEC_DEFAULT', 'EXEC_REGION_WIN', 'EXEC_REGION_CHANNELS', 'EXEC_REGION_PREVIEW', 'EXEC_AREA', 'EXEC_SCREEN']
      '''
      
      scale_x = float
      '''Scale factor along the X for items in this (sub)layout
         @returns: float in [0, inf]
      '''
      
      scale_y = float
      '''Scale factor along the Y for items in this (sub)layout
         @returns: float in [0, inf]
      '''
      
      ui_units_x = float
      '''Fixed Size along the X for items in this (sub)layout
         @returns: float in [0, inf]
      '''
      
      ui_units_y = float
      '''Fixed Size along the Y for items in this (sub)layout
         @returns: float in [0, inf]
      '''
      
      use_property_decorate = bool
      '''
         @returns: boolean
      '''
      
      use_property_split = bool
      '''
         @returns: boolean
      '''
      
      def row(align=False):
         '''Sub-layout. Items placed in this sublayout are placed next to each other in a row
            Arguments:
            @align (bool): Align buttons to each other
               (optional)
      
            @returns (types.UILayout): Sub-layout to put items in
               
         '''
      
         return types.UILayout

      def column(align=False):
         '''Sub-layout. Items placed in this sublayout are placed under each other in a column
            Arguments:
            @align (bool): Align buttons to each other
               (optional)
      
            @returns (types.UILayout): Sub-layout to put items in
               
         '''
      
         return types.UILayout

      def column_flow(columns=0, align=False):
         '''column_flow
            Arguments:
            @columns (int): Number of columns, 0 is automatic
               in [0, inf], (optional)
            @align (bool): Align buttons to each other
               (optional)
      
            @returns (types.UILayout): Sub-layout to put items in
               
         '''
      
         return types.UILayout

      def grid_flow(row_major=False, columns=0, even_columns=False, even_rows=False, align=False):
         '''grid_flow
            Arguments:
            @row_major (bool): Fill row by row, instead of column by column
               (optional)
            @columns (int): Number of columns, positive are absolute fixed numbers, 0 is automatic, negative are automatic multiple numbers along major axis (e.g. -2 will only produce 2, 4, 6 etc. columns for row major layout, and 2, 4, 6 etc. rows for column major layout)
               in [-inf, inf], (optional)
            @even_columns (bool): All columns will have the same width
               (optional)
            @even_rows (bool): All rows will have the same height
               (optional)
            @align (bool): Align buttons to each other
               (optional)
      
            @returns (types.UILayout): Sub-layout to put items in
               
         '''
      
         return types.UILayout

      def box():
         '''Sublayout (items placed in this sublayout are placed under each other in a column and are surrounded by a box)
            @returns (types.UILayout): Sub-layout to put items in
               
         '''
      
         return types.UILayout

      def split(factor=0.0, align=False):
         '''split
            Arguments:
            @factor (float): Percentage of width to split at (leave unset for automatic calculation)
               in [0, 1], (optional)
            @align (bool): Align buttons to each other
               (optional)
      
            @returns (types.UILayout): Sub-layout to put items in
               
         '''
      
         return types.UILayout

      def menu_pie():
         '''Sublayout. Items placed in this sublayout are placed in a radial fashion around the menu center)
            @returns (types.UILayout): Sub-layout to put items in
               
         '''
      
         return types.UILayout

      @classmethod
      def icon(data):
         '''Return the custom icon for this data, use it e.g. to get materials or texture icons
            Arguments:
            @data (AnyType): Data from which to take the icon
               (never None)
      
            @returns (int): Icon identifier
               in [0, inf]
         '''
      
         return int

      @classmethod
      def enum_item_name(data, property, identifier):
         '''Return the UI name for this enum item
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @identifier (str): Identifier of the enum item
               (never None)
      
            @returns (str): UI name of the enum item
               (never None)
         '''
      
         return str

      @classmethod
      def enum_item_description(data, property, identifier):
         '''Return the UI description for this enum item
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @identifier (str): Identifier of the enum item
               (never None)
      
            @returns (str): UI description of the enum item
               (never None)
         '''
      
         return str

      @classmethod
      def enum_item_icon(data, property, identifier):
         '''Return the icon for this enum item
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @identifier (str): Identifier of the enum item
               (never None)
      
            @returns (int): Icon identifier
               in [0, inf]
         '''
      
         return int

      def prop(data, property, text="", text_ctxt="", translate=True, icon='NONE', expand=False, slider=False, toggle=-1, icon_only=False, event=False, full_event=False, emboss=True, index=-1, icon_value=0, invert_checkbox=False):
         '''Item. Exposes an RNA item and places it into the layout
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @text (str): Override automatic text of the item
               (optional)
            @text_ctxt (str): Override automatic translation context of the given text
               (optional)
            @translate (bool): Translate the given text, when UI translation is enabled
               (optional)
            @icon (str): Override automatic icon of the item
               in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_RIGHT', 'DISCLOSURE_TRI_DOWN', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'DUPLICATE', 'TRASH', 'COLLECTION_NEW', 'OPTIONS', 'NODE', 'NODE_SEL', 'WINDOW', 'WORKSPACE', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ADD', 'REMOVE', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'CHECKMARK', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'FCURVE_SNAPSHOT', 'OBJECT_HIDDEN', 'TOPBAR', 'STATUSBAR', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'UNLINKED', 'LINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'DRIVER_DISTANCE', 'DRIVER_ROTATIONAL_DIFFERENCE', 'DRIVER_TRANSFORM', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'FILE_NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'THREE_DOTS', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BRUSHES_ALL', 'LIGHT', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'OUTPUT', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TOOL_SETTINGS', 'SHADERFX', 'MODIFIER', 'BLANK1', 'FAKE_USER_OFF', 'FAKE_USER_ON', 'VIEW3D', 'GRAPH', 'OUTLINER', 'PROPERTIES', 'FILEBROWSER', 'IMAGE', 'INFO', 'SEQUENCE', 'TEXT', 'SOUND', 'ACTION', 'NLA', 'PREFERENCES', 'TIME', 'NODETREE', 'CONSOLE', 'TRACKER', 'ASSET_MANAGER', 'NODE_COMPOSITING', 'NODE_TEXTURE', 'NODE_MATERIAL', 'UV', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'UV_DATA', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'TRACKING', 'TRACKING_BACKWARDS', 'TRACKING_FORWARDS', 'TRACKING_BACKWARDS_SINGLE', 'TRACKING_FORWARDS_SINGLE', 'TRACKING_CLEAR_BACKWARDS', 'TRACKING_CLEAR_FORWARDS', 'TRACKING_REFINE_BACKWARDS', 'TRACKING_REFINE_FORWARDS', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LIGHT_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'COMMUNITY', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'EXPERIMENTAL', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'PRESET', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'LIBRARY_DATA_OVERRIDE', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'FACE_MAPS', 'RNA', 'RNA_ADD', 'MOUSE_LMB', 'MOUSE_MMB', 'MOUSE_RMB', 'MOUSE_MOVE', 'MOUSE_LMB_DRAG', 'MOUSE_MMB_DRAG', 'MOUSE_RMB_DRAG', 'MEMORY', 'PRESET_NEW', 'DECORATE', 'DECORATE_KEYFRAME', 'DECORATE_ANIMATE', 'DECORATE_DRIVER', 'DECORATE_LINKED', 'DECORATE_LIBRARY_OVERRIDE', 'DECORATE_UNLOCKED', 'DECORATE_LOCKED', 'DECORATE_OVERRIDE', 'FUND', 'TRACKER_DATA', 'HEART', 'ORPHAN_DATA', 'USER', 'SYSTEM', 'SETTINGS', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LIGHT', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'OUTLINER_OB_FORCE_FIELD', 'OUTLINER_OB_GROUP_INSTANCE', 'OUTLINER_OB_GREASEPENCIL', 'OUTLINER_OB_LIGHTPROBE', 'OUTLINER_OB_IMAGE', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'HIDE_ON', 'HIDE_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_RENDER_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_INSTANCED_OFF', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LIGHT', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_LIGHTPROBE', 'OUTLINER_DATA_GP_LAYER', 'OUTLINER_DATA_GREASEPENCIL', 'GP_SELECT_POINTS', 'GP_SELECT_STROKES', 'GP_MULTIFRAME_EDITING', 'GP_ONLY_SELECTED', 'GP_SELECT_BETWEEN_STROKES', 'MODIFIER_OFF', 'MODIFIER_ON', 'ONIONSKIN_OFF', 'ONIONSKIN_ON', 'RESTRICT_VIEW_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_INSTANCED_ON', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'EMPTY_SINGLE_ARROW', 'LIGHT_POINT', 'LIGHT_SUN', 'LIGHT_SPOT', 'LIGHT_HEMI', 'LIGHT_AREA', 'CUBE', 'SPHERE', 'CONE', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'EMPTY_AXIS', 'STROKE', 'EMPTY_ARROWS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'LIGHTPROBE_CUBEMAP', 'LIGHTPROBE_PLANAR', 'LIGHTPROBE_GRID', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'RIGID_BODY', 'RIGID_BODY_CONSTRAINT', 'IMAGE_PLANE', 'IMAGE_BACKGROUND', 'IMAGE_REFERENCE', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'NODE_TOP', 'NODE_SIDE', 'NODE_CORNER', 'ANCHOR_TOP', 'ANCHOR_BOTTOM', 'ANCHOR_LEFT', 'ANCHOR_RIGHT', 'ANCHOR_CENTER', 'SELECT_SET', 'SELECT_EXTEND', 'SELECT_SUBTRACT', 'SELECT_INTERSECT', 'SELECT_DIFFERENCE', 'ALIGN_LEFT', 'ALIGN_CENTER', 'ALIGN_RIGHT', 'ALIGN_JUSTIFY', 'ALIGN_FLUSH', 'ALIGN_TOP', 'ALIGN_MIDDLE', 'ALIGN_BOTTOM', 'BOLD', 'ITALIC', 'UNDERLINE', 'SMALL_CAPS', 'CON_ACTION', 'HOLDOUT_OFF', 'HOLDOUT_ON', 'INDIRECT_ONLY_OFF', 'INDIRECT_ONLY_ON', 'CON_CAMERASOLVER', 'CON_FOLLOWTRACK', 'CON_OBJECTSOLVER', 'CON_LOCLIKE', 'CON_ROTLIKE', 'CON_SIZELIKE', 'CON_TRANSLIKE', 'CON_DISTLIMIT', 'CON_LOCLIMIT', 'CON_ROTLIMIT', 'CON_SIZELIMIT', 'CON_SAMEVOL', 'CON_TRANSFORM', 'CON_TRANSFORM_CACHE', 'CON_CLAMPTO', 'CON_KINEMATIC', 'CON_LOCKTRACK', 'CON_SPLINEIK', 'CON_STRETCHTO', 'CON_TRACKTO', 'CON_ARMATURE', 'CON_CHILDOF', 'CON_FLOOR', 'CON_FOLLOWPATH', 'CON_PIVOT', 'CON_SHRINKWRAP', 'MODIFIER_DATA', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'MOD_TINT', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_FLUID', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'MOD_PARTICLE_INSTANCE', 'MOD_HUE_SATURATION', 'MOD_NOISE', 'MOD_OFFSET', 'MOD_SIMPLIFY', 'MOD_THICKNESS', 'MOD_INSTANCE', 'MOD_TIME', 'MOD_OPACITY', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_SOUND', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'KEYFRAME_HLT', 'KEYFRAME', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'CURSOR', 'PIVOT_BOUNDBOX', 'PIVOT_CURSOR', 'PIVOT_INDIVIDUAL', 'PIVOT_MEDIAN', 'PIVOT_ACTIVE', 'CENTER_ONLY', 'ROOTCURVE', 'SMOOTHCURVE', 'SPHERECURVE', 'INVERSESQUARECURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'PROP_PROJECTED', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'SNAP_FACE_CENTER', 'SNAP_PERPENDICULAR', 'SNAP_MIDPOINT', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'OBJECT_ORIGIN', 'ORIENTATION_GLOBAL', 'ORIENTATION_GIMBAL', 'ORIENTATION_LOCAL', 'ORIENTATION_NORMAL', 'ORIENTATION_VIEW', 'COPYDOWN', 'PASTEDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'VIS_SEL_11', 'VIS_SEL_10', 'VIS_SEL_01', 'VIS_SEL_00', 'AUTOMERGE_OFF', 'AUTOMERGE_ON', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'TRANSFORM_ORIGINS', 'GIZMO', 'ORIENTATION_CURSOR', 'NORMALS_VERTEX', 'NORMALS_FACE', 'NORMALS_VERTEX_FACE', 'SHADING_BBOX', 'SHADING_WIRE', 'SHADING_SOLID', 'SHADING_RENDERED', 'SHADING_TEXTURE', 'OVERLAY', 'XRAY', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'LAYER_USED', 'LAYER_ACTIVE', 'OUTLINER_OB_HAIR', 'OUTLINER_DATA_HAIR', 'HAIR_DATA', 'OUTLINER_OB_POINTCLOUD', 'OUTLINER_DATA_POINTCLOUD', 'POINTCLOUD_DATA', 'OUTLINER_OB_VOLUME', 'OUTLINER_DATA_VOLUME', 'VOLUME_DATA', 'HOME', 'DOCUMENTS', 'TEMP', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'SHORTDISPLAY', 'LONGDISPLAY', 'IMGDISPLAY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'FOLDER_REDIRECT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'SORT_DESC', 'SORT_ASC', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_ARCHIVE', 'FILE_CACHE', 'FILE_VOLUME', 'FILE_3D', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'MATSHADERBALL', 'MATCLOTH', 'MATFLUID', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'DISC', 'DESKTOP', 'EXTERNAL_DRIVE', 'NETWORK_DRIVE', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'SEQ_STRIP_META', 'SEQ_STRIP_DUPLICATE', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'HANDLE_AUTOCLAMPED', 'HANDLE_AUTO', 'HANDLE_ALIGNED', 'HANDLE_VECTOR', 'HANDLE_FREE', 'VIEW_PERSPECTIVE', 'VIEW_ORTHO', 'VIEW_CAMERA', 'VIEW_PAN', 'VIEW_ZOOM', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'GPBRUSH_SMOOTH', 'GPBRUSH_THICKNESS', 'GPBRUSH_STRENGTH', 'GPBRUSH_GRAB', 'GPBRUSH_PUSH', 'GPBRUSH_TWIST', 'GPBRUSH_PINCH', 'GPBRUSH_RANDOMIZE', 'GPBRUSH_CLONE', 'GPBRUSH_WEIGHT', 'GPBRUSH_PENCIL', 'GPBRUSH_PEN', 'GPBRUSH_INK', 'GPBRUSH_INKNOISE', 'GPBRUSH_BLOCK', 'GPBRUSH_MARKER', 'GPBRUSH_FILL', 'GPBRUSH_AIRBRUSH', 'GPBRUSH_CHISEL', 'GPBRUSH_ERASE_SOFT', 'GPBRUSH_ERASE_HARD', 'GPBRUSH_ERASE_STROKE', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'HANDLETYPE_FREE_VEC', 'HANDLETYPE_ALIGNED_VEC', 'HANDLETYPE_VECTOR_VEC', 'HANDLETYPE_AUTO_VEC', 'HANDLETYPE_AUTO_CLAMP_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC', 'EVENT_A', 'EVENT_B', 'EVENT_C', 'EVENT_D', 'EVENT_E', 'EVENT_F', 'EVENT_G', 'EVENT_H', 'EVENT_I', 'EVENT_J', 'EVENT_K', 'EVENT_L', 'EVENT_M', 'EVENT_N', 'EVENT_O', 'EVENT_P', 'EVENT_Q', 'EVENT_R', 'EVENT_S', 'EVENT_T', 'EVENT_U', 'EVENT_V', 'EVENT_W', 'EVENT_X', 'EVENT_Y', 'EVENT_Z', 'EVENT_SHIFT', 'EVENT_CTRL', 'EVENT_ALT', 'EVENT_OS', 'EVENT_F1', 'EVENT_F2', 'EVENT_F3', 'EVENT_F4', 'EVENT_F5', 'EVENT_F6', 'EVENT_F7', 'EVENT_F8', 'EVENT_F9', 'EVENT_F10', 'EVENT_F11', 'EVENT_F12', 'EVENT_ESC', 'EVENT_TAB', 'EVENT_PAGEUP', 'EVENT_PAGEDOWN', 'EVENT_RETURN', 'EVENT_SPACEKEY'], (optional)
            @expand (bool): Expand button to show more detail
               (optional)
            @slider (bool): Use slider widget for numeric values
               (optional)
            @toggle (int): Use toggle widget for boolean values, or a checkbox when disabled (the default is -1 which uses toggle only when an icon is displayed)
               in [-1, 1], (optional)
            @icon_only (bool): Draw only icons in buttons, no text
               (optional)
            @event (bool): Use button to input key events
               (optional)
            @full_event (bool): Use button to input full events including modifiers
               (optional)
            @emboss (bool): Draw the button itself, not just the icon/text
               (optional)
            @index (int): The index of this button, when set a single member of an array can be accessed, when set to -1 all array members are used
               in [-2, inf], (optional)
            @icon_value (int): Override automatic icon of the item
               in [0, inf], (optional)
            @invert_checkbox (bool): Draw checkbox value inverted
               (optional)
      
         '''
      
         pass

      def props_enum(data, property):
         '''props_enum
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
      
         '''
      
         pass

      def prop_menu_enum(data, property, text="", text_ctxt="", translate=True, icon='NONE'):
         '''prop_menu_enum
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @text (str): Override automatic text of the item
               (optional)
            @text_ctxt (str): Override automatic translation context of the given text
               (optional)
            @translate (bool): Translate the given text, when UI translation is enabled
               (optional)
            @icon (str): Override automatic icon of the item
               in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_RIGHT', 'DISCLOSURE_TRI_DOWN', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'DUPLICATE', 'TRASH', 'COLLECTION_NEW', 'OPTIONS', 'NODE', 'NODE_SEL', 'WINDOW', 'WORKSPACE', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ADD', 'REMOVE', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'CHECKMARK', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'FCURVE_SNAPSHOT', 'OBJECT_HIDDEN', 'TOPBAR', 'STATUSBAR', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'UNLINKED', 'LINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'DRIVER_DISTANCE', 'DRIVER_ROTATIONAL_DIFFERENCE', 'DRIVER_TRANSFORM', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'FILE_NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'THREE_DOTS', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BRUSHES_ALL', 'LIGHT', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'OUTPUT', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TOOL_SETTINGS', 'SHADERFX', 'MODIFIER', 'BLANK1', 'FAKE_USER_OFF', 'FAKE_USER_ON', 'VIEW3D', 'GRAPH', 'OUTLINER', 'PROPERTIES', 'FILEBROWSER', 'IMAGE', 'INFO', 'SEQUENCE', 'TEXT', 'SOUND', 'ACTION', 'NLA', 'PREFERENCES', 'TIME', 'NODETREE', 'CONSOLE', 'TRACKER', 'ASSET_MANAGER', 'NODE_COMPOSITING', 'NODE_TEXTURE', 'NODE_MATERIAL', 'UV', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'UV_DATA', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'TRACKING', 'TRACKING_BACKWARDS', 'TRACKING_FORWARDS', 'TRACKING_BACKWARDS_SINGLE', 'TRACKING_FORWARDS_SINGLE', 'TRACKING_CLEAR_BACKWARDS', 'TRACKING_CLEAR_FORWARDS', 'TRACKING_REFINE_BACKWARDS', 'TRACKING_REFINE_FORWARDS', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LIGHT_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'COMMUNITY', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'EXPERIMENTAL', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'PRESET', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'LIBRARY_DATA_OVERRIDE', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'FACE_MAPS', 'RNA', 'RNA_ADD', 'MOUSE_LMB', 'MOUSE_MMB', 'MOUSE_RMB', 'MOUSE_MOVE', 'MOUSE_LMB_DRAG', 'MOUSE_MMB_DRAG', 'MOUSE_RMB_DRAG', 'MEMORY', 'PRESET_NEW', 'DECORATE', 'DECORATE_KEYFRAME', 'DECORATE_ANIMATE', 'DECORATE_DRIVER', 'DECORATE_LINKED', 'DECORATE_LIBRARY_OVERRIDE', 'DECORATE_UNLOCKED', 'DECORATE_LOCKED', 'DECORATE_OVERRIDE', 'FUND', 'TRACKER_DATA', 'HEART', 'ORPHAN_DATA', 'USER', 'SYSTEM', 'SETTINGS', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LIGHT', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'OUTLINER_OB_FORCE_FIELD', 'OUTLINER_OB_GROUP_INSTANCE', 'OUTLINER_OB_GREASEPENCIL', 'OUTLINER_OB_LIGHTPROBE', 'OUTLINER_OB_IMAGE', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'HIDE_ON', 'HIDE_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_RENDER_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_INSTANCED_OFF', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LIGHT', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_LIGHTPROBE', 'OUTLINER_DATA_GP_LAYER', 'OUTLINER_DATA_GREASEPENCIL', 'GP_SELECT_POINTS', 'GP_SELECT_STROKES', 'GP_MULTIFRAME_EDITING', 'GP_ONLY_SELECTED', 'GP_SELECT_BETWEEN_STROKES', 'MODIFIER_OFF', 'MODIFIER_ON', 'ONIONSKIN_OFF', 'ONIONSKIN_ON', 'RESTRICT_VIEW_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_INSTANCED_ON', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'EMPTY_SINGLE_ARROW', 'LIGHT_POINT', 'LIGHT_SUN', 'LIGHT_SPOT', 'LIGHT_HEMI', 'LIGHT_AREA', 'CUBE', 'SPHERE', 'CONE', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'EMPTY_AXIS', 'STROKE', 'EMPTY_ARROWS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'LIGHTPROBE_CUBEMAP', 'LIGHTPROBE_PLANAR', 'LIGHTPROBE_GRID', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'RIGID_BODY', 'RIGID_BODY_CONSTRAINT', 'IMAGE_PLANE', 'IMAGE_BACKGROUND', 'IMAGE_REFERENCE', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'NODE_TOP', 'NODE_SIDE', 'NODE_CORNER', 'ANCHOR_TOP', 'ANCHOR_BOTTOM', 'ANCHOR_LEFT', 'ANCHOR_RIGHT', 'ANCHOR_CENTER', 'SELECT_SET', 'SELECT_EXTEND', 'SELECT_SUBTRACT', 'SELECT_INTERSECT', 'SELECT_DIFFERENCE', 'ALIGN_LEFT', 'ALIGN_CENTER', 'ALIGN_RIGHT', 'ALIGN_JUSTIFY', 'ALIGN_FLUSH', 'ALIGN_TOP', 'ALIGN_MIDDLE', 'ALIGN_BOTTOM', 'BOLD', 'ITALIC', 'UNDERLINE', 'SMALL_CAPS', 'CON_ACTION', 'HOLDOUT_OFF', 'HOLDOUT_ON', 'INDIRECT_ONLY_OFF', 'INDIRECT_ONLY_ON', 'CON_CAMERASOLVER', 'CON_FOLLOWTRACK', 'CON_OBJECTSOLVER', 'CON_LOCLIKE', 'CON_ROTLIKE', 'CON_SIZELIKE', 'CON_TRANSLIKE', 'CON_DISTLIMIT', 'CON_LOCLIMIT', 'CON_ROTLIMIT', 'CON_SIZELIMIT', 'CON_SAMEVOL', 'CON_TRANSFORM', 'CON_TRANSFORM_CACHE', 'CON_CLAMPTO', 'CON_KINEMATIC', 'CON_LOCKTRACK', 'CON_SPLINEIK', 'CON_STRETCHTO', 'CON_TRACKTO', 'CON_ARMATURE', 'CON_CHILDOF', 'CON_FLOOR', 'CON_FOLLOWPATH', 'CON_PIVOT', 'CON_SHRINKWRAP', 'MODIFIER_DATA', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'MOD_TINT', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_FLUID', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'MOD_PARTICLE_INSTANCE', 'MOD_HUE_SATURATION', 'MOD_NOISE', 'MOD_OFFSET', 'MOD_SIMPLIFY', 'MOD_THICKNESS', 'MOD_INSTANCE', 'MOD_TIME', 'MOD_OPACITY', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_SOUND', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'KEYFRAME_HLT', 'KEYFRAME', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'CURSOR', 'PIVOT_BOUNDBOX', 'PIVOT_CURSOR', 'PIVOT_INDIVIDUAL', 'PIVOT_MEDIAN', 'PIVOT_ACTIVE', 'CENTER_ONLY', 'ROOTCURVE', 'SMOOTHCURVE', 'SPHERECURVE', 'INVERSESQUARECURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'PROP_PROJECTED', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'SNAP_FACE_CENTER', 'SNAP_PERPENDICULAR', 'SNAP_MIDPOINT', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'OBJECT_ORIGIN', 'ORIENTATION_GLOBAL', 'ORIENTATION_GIMBAL', 'ORIENTATION_LOCAL', 'ORIENTATION_NORMAL', 'ORIENTATION_VIEW', 'COPYDOWN', 'PASTEDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'VIS_SEL_11', 'VIS_SEL_10', 'VIS_SEL_01', 'VIS_SEL_00', 'AUTOMERGE_OFF', 'AUTOMERGE_ON', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'TRANSFORM_ORIGINS', 'GIZMO', 'ORIENTATION_CURSOR', 'NORMALS_VERTEX', 'NORMALS_FACE', 'NORMALS_VERTEX_FACE', 'SHADING_BBOX', 'SHADING_WIRE', 'SHADING_SOLID', 'SHADING_RENDERED', 'SHADING_TEXTURE', 'OVERLAY', 'XRAY', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'LAYER_USED', 'LAYER_ACTIVE', 'OUTLINER_OB_HAIR', 'OUTLINER_DATA_HAIR', 'HAIR_DATA', 'OUTLINER_OB_POINTCLOUD', 'OUTLINER_DATA_POINTCLOUD', 'POINTCLOUD_DATA', 'OUTLINER_OB_VOLUME', 'OUTLINER_DATA_VOLUME', 'VOLUME_DATA', 'HOME', 'DOCUMENTS', 'TEMP', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'SHORTDISPLAY', 'LONGDISPLAY', 'IMGDISPLAY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'FOLDER_REDIRECT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'SORT_DESC', 'SORT_ASC', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_ARCHIVE', 'FILE_CACHE', 'FILE_VOLUME', 'FILE_3D', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'MATSHADERBALL', 'MATCLOTH', 'MATFLUID', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'DISC', 'DESKTOP', 'EXTERNAL_DRIVE', 'NETWORK_DRIVE', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'SEQ_STRIP_META', 'SEQ_STRIP_DUPLICATE', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'HANDLE_AUTOCLAMPED', 'HANDLE_AUTO', 'HANDLE_ALIGNED', 'HANDLE_VECTOR', 'HANDLE_FREE', 'VIEW_PERSPECTIVE', 'VIEW_ORTHO', 'VIEW_CAMERA', 'VIEW_PAN', 'VIEW_ZOOM', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'GPBRUSH_SMOOTH', 'GPBRUSH_THICKNESS', 'GPBRUSH_STRENGTH', 'GPBRUSH_GRAB', 'GPBRUSH_PUSH', 'GPBRUSH_TWIST', 'GPBRUSH_PINCH', 'GPBRUSH_RANDOMIZE', 'GPBRUSH_CLONE', 'GPBRUSH_WEIGHT', 'GPBRUSH_PENCIL', 'GPBRUSH_PEN', 'GPBRUSH_INK', 'GPBRUSH_INKNOISE', 'GPBRUSH_BLOCK', 'GPBRUSH_MARKER', 'GPBRUSH_FILL', 'GPBRUSH_AIRBRUSH', 'GPBRUSH_CHISEL', 'GPBRUSH_ERASE_SOFT', 'GPBRUSH_ERASE_HARD', 'GPBRUSH_ERASE_STROKE', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'HANDLETYPE_FREE_VEC', 'HANDLETYPE_ALIGNED_VEC', 'HANDLETYPE_VECTOR_VEC', 'HANDLETYPE_AUTO_VEC', 'HANDLETYPE_AUTO_CLAMP_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC', 'EVENT_A', 'EVENT_B', 'EVENT_C', 'EVENT_D', 'EVENT_E', 'EVENT_F', 'EVENT_G', 'EVENT_H', 'EVENT_I', 'EVENT_J', 'EVENT_K', 'EVENT_L', 'EVENT_M', 'EVENT_N', 'EVENT_O', 'EVENT_P', 'EVENT_Q', 'EVENT_R', 'EVENT_S', 'EVENT_T', 'EVENT_U', 'EVENT_V', 'EVENT_W', 'EVENT_X', 'EVENT_Y', 'EVENT_Z', 'EVENT_SHIFT', 'EVENT_CTRL', 'EVENT_ALT', 'EVENT_OS', 'EVENT_F1', 'EVENT_F2', 'EVENT_F3', 'EVENT_F4', 'EVENT_F5', 'EVENT_F6', 'EVENT_F7', 'EVENT_F8', 'EVENT_F9', 'EVENT_F10', 'EVENT_F11', 'EVENT_F12', 'EVENT_ESC', 'EVENT_TAB', 'EVENT_PAGEUP', 'EVENT_PAGEDOWN', 'EVENT_RETURN', 'EVENT_SPACEKEY'], (optional)
      
         '''
      
         pass

      def prop_with_popover(data, property, text="", text_ctxt="", translate=True, icon='NONE', icon_only=False, panel):
         '''prop_with_popover
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @text (str): Override automatic text of the item
               (optional)
            @text_ctxt (str): Override automatic translation context of the given text
               (optional)
            @translate (bool): Translate the given text, when UI translation is enabled
               (optional)
            @icon (str): Override automatic icon of the item
               in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_RIGHT', 'DISCLOSURE_TRI_DOWN', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'DUPLICATE', 'TRASH', 'COLLECTION_NEW', 'OPTIONS', 'NODE', 'NODE_SEL', 'WINDOW', 'WORKSPACE', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ADD', 'REMOVE', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'CHECKMARK', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'FCURVE_SNAPSHOT', 'OBJECT_HIDDEN', 'TOPBAR', 'STATUSBAR', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'UNLINKED', 'LINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'DRIVER_DISTANCE', 'DRIVER_ROTATIONAL_DIFFERENCE', 'DRIVER_TRANSFORM', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'FILE_NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'THREE_DOTS', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BRUSHES_ALL', 'LIGHT', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'OUTPUT', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TOOL_SETTINGS', 'SHADERFX', 'MODIFIER', 'BLANK1', 'FAKE_USER_OFF', 'FAKE_USER_ON', 'VIEW3D', 'GRAPH', 'OUTLINER', 'PROPERTIES', 'FILEBROWSER', 'IMAGE', 'INFO', 'SEQUENCE', 'TEXT', 'SOUND', 'ACTION', 'NLA', 'PREFERENCES', 'TIME', 'NODETREE', 'CONSOLE', 'TRACKER', 'ASSET_MANAGER', 'NODE_COMPOSITING', 'NODE_TEXTURE', 'NODE_MATERIAL', 'UV', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'UV_DATA', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'TRACKING', 'TRACKING_BACKWARDS', 'TRACKING_FORWARDS', 'TRACKING_BACKWARDS_SINGLE', 'TRACKING_FORWARDS_SINGLE', 'TRACKING_CLEAR_BACKWARDS', 'TRACKING_CLEAR_FORWARDS', 'TRACKING_REFINE_BACKWARDS', 'TRACKING_REFINE_FORWARDS', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LIGHT_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'COMMUNITY', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'EXPERIMENTAL', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'PRESET', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'LIBRARY_DATA_OVERRIDE', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'FACE_MAPS', 'RNA', 'RNA_ADD', 'MOUSE_LMB', 'MOUSE_MMB', 'MOUSE_RMB', 'MOUSE_MOVE', 'MOUSE_LMB_DRAG', 'MOUSE_MMB_DRAG', 'MOUSE_RMB_DRAG', 'MEMORY', 'PRESET_NEW', 'DECORATE', 'DECORATE_KEYFRAME', 'DECORATE_ANIMATE', 'DECORATE_DRIVER', 'DECORATE_LINKED', 'DECORATE_LIBRARY_OVERRIDE', 'DECORATE_UNLOCKED', 'DECORATE_LOCKED', 'DECORATE_OVERRIDE', 'FUND', 'TRACKER_DATA', 'HEART', 'ORPHAN_DATA', 'USER', 'SYSTEM', 'SETTINGS', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LIGHT', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'OUTLINER_OB_FORCE_FIELD', 'OUTLINER_OB_GROUP_INSTANCE', 'OUTLINER_OB_GREASEPENCIL', 'OUTLINER_OB_LIGHTPROBE', 'OUTLINER_OB_IMAGE', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'HIDE_ON', 'HIDE_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_RENDER_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_INSTANCED_OFF', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LIGHT', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_LIGHTPROBE', 'OUTLINER_DATA_GP_LAYER', 'OUTLINER_DATA_GREASEPENCIL', 'GP_SELECT_POINTS', 'GP_SELECT_STROKES', 'GP_MULTIFRAME_EDITING', 'GP_ONLY_SELECTED', 'GP_SELECT_BETWEEN_STROKES', 'MODIFIER_OFF', 'MODIFIER_ON', 'ONIONSKIN_OFF', 'ONIONSKIN_ON', 'RESTRICT_VIEW_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_INSTANCED_ON', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'EMPTY_SINGLE_ARROW', 'LIGHT_POINT', 'LIGHT_SUN', 'LIGHT_SPOT', 'LIGHT_HEMI', 'LIGHT_AREA', 'CUBE', 'SPHERE', 'CONE', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'EMPTY_AXIS', 'STROKE', 'EMPTY_ARROWS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'LIGHTPROBE_CUBEMAP', 'LIGHTPROBE_PLANAR', 'LIGHTPROBE_GRID', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'RIGID_BODY', 'RIGID_BODY_CONSTRAINT', 'IMAGE_PLANE', 'IMAGE_BACKGROUND', 'IMAGE_REFERENCE', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'NODE_TOP', 'NODE_SIDE', 'NODE_CORNER', 'ANCHOR_TOP', 'ANCHOR_BOTTOM', 'ANCHOR_LEFT', 'ANCHOR_RIGHT', 'ANCHOR_CENTER', 'SELECT_SET', 'SELECT_EXTEND', 'SELECT_SUBTRACT', 'SELECT_INTERSECT', 'SELECT_DIFFERENCE', 'ALIGN_LEFT', 'ALIGN_CENTER', 'ALIGN_RIGHT', 'ALIGN_JUSTIFY', 'ALIGN_FLUSH', 'ALIGN_TOP', 'ALIGN_MIDDLE', 'ALIGN_BOTTOM', 'BOLD', 'ITALIC', 'UNDERLINE', 'SMALL_CAPS', 'CON_ACTION', 'HOLDOUT_OFF', 'HOLDOUT_ON', 'INDIRECT_ONLY_OFF', 'INDIRECT_ONLY_ON', 'CON_CAMERASOLVER', 'CON_FOLLOWTRACK', 'CON_OBJECTSOLVER', 'CON_LOCLIKE', 'CON_ROTLIKE', 'CON_SIZELIKE', 'CON_TRANSLIKE', 'CON_DISTLIMIT', 'CON_LOCLIMIT', 'CON_ROTLIMIT', 'CON_SIZELIMIT', 'CON_SAMEVOL', 'CON_TRANSFORM', 'CON_TRANSFORM_CACHE', 'CON_CLAMPTO', 'CON_KINEMATIC', 'CON_LOCKTRACK', 'CON_SPLINEIK', 'CON_STRETCHTO', 'CON_TRACKTO', 'CON_ARMATURE', 'CON_CHILDOF', 'CON_FLOOR', 'CON_FOLLOWPATH', 'CON_PIVOT', 'CON_SHRINKWRAP', 'MODIFIER_DATA', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'MOD_TINT', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_FLUID', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'MOD_PARTICLE_INSTANCE', 'MOD_HUE_SATURATION', 'MOD_NOISE', 'MOD_OFFSET', 'MOD_SIMPLIFY', 'MOD_THICKNESS', 'MOD_INSTANCE', 'MOD_TIME', 'MOD_OPACITY', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_SOUND', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'KEYFRAME_HLT', 'KEYFRAME', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'CURSOR', 'PIVOT_BOUNDBOX', 'PIVOT_CURSOR', 'PIVOT_INDIVIDUAL', 'PIVOT_MEDIAN', 'PIVOT_ACTIVE', 'CENTER_ONLY', 'ROOTCURVE', 'SMOOTHCURVE', 'SPHERECURVE', 'INVERSESQUARECURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'PROP_PROJECTED', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'SNAP_FACE_CENTER', 'SNAP_PERPENDICULAR', 'SNAP_MIDPOINT', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'OBJECT_ORIGIN', 'ORIENTATION_GLOBAL', 'ORIENTATION_GIMBAL', 'ORIENTATION_LOCAL', 'ORIENTATION_NORMAL', 'ORIENTATION_VIEW', 'COPYDOWN', 'PASTEDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'VIS_SEL_11', 'VIS_SEL_10', 'VIS_SEL_01', 'VIS_SEL_00', 'AUTOMERGE_OFF', 'AUTOMERGE_ON', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'TRANSFORM_ORIGINS', 'GIZMO', 'ORIENTATION_CURSOR', 'NORMALS_VERTEX', 'NORMALS_FACE', 'NORMALS_VERTEX_FACE', 'SHADING_BBOX', 'SHADING_WIRE', 'SHADING_SOLID', 'SHADING_RENDERED', 'SHADING_TEXTURE', 'OVERLAY', 'XRAY', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'LAYER_USED', 'LAYER_ACTIVE', 'OUTLINER_OB_HAIR', 'OUTLINER_DATA_HAIR', 'HAIR_DATA', 'OUTLINER_OB_POINTCLOUD', 'OUTLINER_DATA_POINTCLOUD', 'POINTCLOUD_DATA', 'OUTLINER_OB_VOLUME', 'OUTLINER_DATA_VOLUME', 'VOLUME_DATA', 'HOME', 'DOCUMENTS', 'TEMP', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'SHORTDISPLAY', 'LONGDISPLAY', 'IMGDISPLAY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'FOLDER_REDIRECT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'SORT_DESC', 'SORT_ASC', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_ARCHIVE', 'FILE_CACHE', 'FILE_VOLUME', 'FILE_3D', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'MATSHADERBALL', 'MATCLOTH', 'MATFLUID', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'DISC', 'DESKTOP', 'EXTERNAL_DRIVE', 'NETWORK_DRIVE', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'SEQ_STRIP_META', 'SEQ_STRIP_DUPLICATE', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'HANDLE_AUTOCLAMPED', 'HANDLE_AUTO', 'HANDLE_ALIGNED', 'HANDLE_VECTOR', 'HANDLE_FREE', 'VIEW_PERSPECTIVE', 'VIEW_ORTHO', 'VIEW_CAMERA', 'VIEW_PAN', 'VIEW_ZOOM', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'GPBRUSH_SMOOTH', 'GPBRUSH_THICKNESS', 'GPBRUSH_STRENGTH', 'GPBRUSH_GRAB', 'GPBRUSH_PUSH', 'GPBRUSH_TWIST', 'GPBRUSH_PINCH', 'GPBRUSH_RANDOMIZE', 'GPBRUSH_CLONE', 'GPBRUSH_WEIGHT', 'GPBRUSH_PENCIL', 'GPBRUSH_PEN', 'GPBRUSH_INK', 'GPBRUSH_INKNOISE', 'GPBRUSH_BLOCK', 'GPBRUSH_MARKER', 'GPBRUSH_FILL', 'GPBRUSH_AIRBRUSH', 'GPBRUSH_CHISEL', 'GPBRUSH_ERASE_SOFT', 'GPBRUSH_ERASE_HARD', 'GPBRUSH_ERASE_STROKE', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'HANDLETYPE_FREE_VEC', 'HANDLETYPE_ALIGNED_VEC', 'HANDLETYPE_VECTOR_VEC', 'HANDLETYPE_AUTO_VEC', 'HANDLETYPE_AUTO_CLAMP_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC', 'EVENT_A', 'EVENT_B', 'EVENT_C', 'EVENT_D', 'EVENT_E', 'EVENT_F', 'EVENT_G', 'EVENT_H', 'EVENT_I', 'EVENT_J', 'EVENT_K', 'EVENT_L', 'EVENT_M', 'EVENT_N', 'EVENT_O', 'EVENT_P', 'EVENT_Q', 'EVENT_R', 'EVENT_S', 'EVENT_T', 'EVENT_U', 'EVENT_V', 'EVENT_W', 'EVENT_X', 'EVENT_Y', 'EVENT_Z', 'EVENT_SHIFT', 'EVENT_CTRL', 'EVENT_ALT', 'EVENT_OS', 'EVENT_F1', 'EVENT_F2', 'EVENT_F3', 'EVENT_F4', 'EVENT_F5', 'EVENT_F6', 'EVENT_F7', 'EVENT_F8', 'EVENT_F9', 'EVENT_F10', 'EVENT_F11', 'EVENT_F12', 'EVENT_ESC', 'EVENT_TAB', 'EVENT_PAGEUP', 'EVENT_PAGEDOWN', 'EVENT_RETURN', 'EVENT_SPACEKEY'], (optional)
            @icon_only (bool): Draw only icons in tabs, no text
               (optional)
            @panel (str): Identifier of the panel
               (never None)
      
         '''
      
         pass

      def prop_with_menu(data, property, text="", text_ctxt="", translate=True, icon='NONE', icon_only=False, menu):
         '''prop_with_menu
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @text (str): Override automatic text of the item
               (optional)
            @text_ctxt (str): Override automatic translation context of the given text
               (optional)
            @translate (bool): Translate the given text, when UI translation is enabled
               (optional)
            @icon (str): Override automatic icon of the item
               in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_RIGHT', 'DISCLOSURE_TRI_DOWN', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'DUPLICATE', 'TRASH', 'COLLECTION_NEW', 'OPTIONS', 'NODE', 'NODE_SEL', 'WINDOW', 'WORKSPACE', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ADD', 'REMOVE', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'CHECKMARK', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'FCURVE_SNAPSHOT', 'OBJECT_HIDDEN', 'TOPBAR', 'STATUSBAR', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'UNLINKED', 'LINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'DRIVER_DISTANCE', 'DRIVER_ROTATIONAL_DIFFERENCE', 'DRIVER_TRANSFORM', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'FILE_NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'THREE_DOTS', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BRUSHES_ALL', 'LIGHT', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'OUTPUT', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TOOL_SETTINGS', 'SHADERFX', 'MODIFIER', 'BLANK1', 'FAKE_USER_OFF', 'FAKE_USER_ON', 'VIEW3D', 'GRAPH', 'OUTLINER', 'PROPERTIES', 'FILEBROWSER', 'IMAGE', 'INFO', 'SEQUENCE', 'TEXT', 'SOUND', 'ACTION', 'NLA', 'PREFERENCES', 'TIME', 'NODETREE', 'CONSOLE', 'TRACKER', 'ASSET_MANAGER', 'NODE_COMPOSITING', 'NODE_TEXTURE', 'NODE_MATERIAL', 'UV', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'UV_DATA', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'TRACKING', 'TRACKING_BACKWARDS', 'TRACKING_FORWARDS', 'TRACKING_BACKWARDS_SINGLE', 'TRACKING_FORWARDS_SINGLE', 'TRACKING_CLEAR_BACKWARDS', 'TRACKING_CLEAR_FORWARDS', 'TRACKING_REFINE_BACKWARDS', 'TRACKING_REFINE_FORWARDS', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LIGHT_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'COMMUNITY', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'EXPERIMENTAL', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'PRESET', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'LIBRARY_DATA_OVERRIDE', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'FACE_MAPS', 'RNA', 'RNA_ADD', 'MOUSE_LMB', 'MOUSE_MMB', 'MOUSE_RMB', 'MOUSE_MOVE', 'MOUSE_LMB_DRAG', 'MOUSE_MMB_DRAG', 'MOUSE_RMB_DRAG', 'MEMORY', 'PRESET_NEW', 'DECORATE', 'DECORATE_KEYFRAME', 'DECORATE_ANIMATE', 'DECORATE_DRIVER', 'DECORATE_LINKED', 'DECORATE_LIBRARY_OVERRIDE', 'DECORATE_UNLOCKED', 'DECORATE_LOCKED', 'DECORATE_OVERRIDE', 'FUND', 'TRACKER_DATA', 'HEART', 'ORPHAN_DATA', 'USER', 'SYSTEM', 'SETTINGS', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LIGHT', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'OUTLINER_OB_FORCE_FIELD', 'OUTLINER_OB_GROUP_INSTANCE', 'OUTLINER_OB_GREASEPENCIL', 'OUTLINER_OB_LIGHTPROBE', 'OUTLINER_OB_IMAGE', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'HIDE_ON', 'HIDE_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_RENDER_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_INSTANCED_OFF', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LIGHT', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_LIGHTPROBE', 'OUTLINER_DATA_GP_LAYER', 'OUTLINER_DATA_GREASEPENCIL', 'GP_SELECT_POINTS', 'GP_SELECT_STROKES', 'GP_MULTIFRAME_EDITING', 'GP_ONLY_SELECTED', 'GP_SELECT_BETWEEN_STROKES', 'MODIFIER_OFF', 'MODIFIER_ON', 'ONIONSKIN_OFF', 'ONIONSKIN_ON', 'RESTRICT_VIEW_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_INSTANCED_ON', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'EMPTY_SINGLE_ARROW', 'LIGHT_POINT', 'LIGHT_SUN', 'LIGHT_SPOT', 'LIGHT_HEMI', 'LIGHT_AREA', 'CUBE', 'SPHERE', 'CONE', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'EMPTY_AXIS', 'STROKE', 'EMPTY_ARROWS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'LIGHTPROBE_CUBEMAP', 'LIGHTPROBE_PLANAR', 'LIGHTPROBE_GRID', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'RIGID_BODY', 'RIGID_BODY_CONSTRAINT', 'IMAGE_PLANE', 'IMAGE_BACKGROUND', 'IMAGE_REFERENCE', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'NODE_TOP', 'NODE_SIDE', 'NODE_CORNER', 'ANCHOR_TOP', 'ANCHOR_BOTTOM', 'ANCHOR_LEFT', 'ANCHOR_RIGHT', 'ANCHOR_CENTER', 'SELECT_SET', 'SELECT_EXTEND', 'SELECT_SUBTRACT', 'SELECT_INTERSECT', 'SELECT_DIFFERENCE', 'ALIGN_LEFT', 'ALIGN_CENTER', 'ALIGN_RIGHT', 'ALIGN_JUSTIFY', 'ALIGN_FLUSH', 'ALIGN_TOP', 'ALIGN_MIDDLE', 'ALIGN_BOTTOM', 'BOLD', 'ITALIC', 'UNDERLINE', 'SMALL_CAPS', 'CON_ACTION', 'HOLDOUT_OFF', 'HOLDOUT_ON', 'INDIRECT_ONLY_OFF', 'INDIRECT_ONLY_ON', 'CON_CAMERASOLVER', 'CON_FOLLOWTRACK', 'CON_OBJECTSOLVER', 'CON_LOCLIKE', 'CON_ROTLIKE', 'CON_SIZELIKE', 'CON_TRANSLIKE', 'CON_DISTLIMIT', 'CON_LOCLIMIT', 'CON_ROTLIMIT', 'CON_SIZELIMIT', 'CON_SAMEVOL', 'CON_TRANSFORM', 'CON_TRANSFORM_CACHE', 'CON_CLAMPTO', 'CON_KINEMATIC', 'CON_LOCKTRACK', 'CON_SPLINEIK', 'CON_STRETCHTO', 'CON_TRACKTO', 'CON_ARMATURE', 'CON_CHILDOF', 'CON_FLOOR', 'CON_FOLLOWPATH', 'CON_PIVOT', 'CON_SHRINKWRAP', 'MODIFIER_DATA', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'MOD_TINT', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_FLUID', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'MOD_PARTICLE_INSTANCE', 'MOD_HUE_SATURATION', 'MOD_NOISE', 'MOD_OFFSET', 'MOD_SIMPLIFY', 'MOD_THICKNESS', 'MOD_INSTANCE', 'MOD_TIME', 'MOD_OPACITY', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_SOUND', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'KEYFRAME_HLT', 'KEYFRAME', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'CURSOR', 'PIVOT_BOUNDBOX', 'PIVOT_CURSOR', 'PIVOT_INDIVIDUAL', 'PIVOT_MEDIAN', 'PIVOT_ACTIVE', 'CENTER_ONLY', 'ROOTCURVE', 'SMOOTHCURVE', 'SPHERECURVE', 'INVERSESQUARECURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'PROP_PROJECTED', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'SNAP_FACE_CENTER', 'SNAP_PERPENDICULAR', 'SNAP_MIDPOINT', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'OBJECT_ORIGIN', 'ORIENTATION_GLOBAL', 'ORIENTATION_GIMBAL', 'ORIENTATION_LOCAL', 'ORIENTATION_NORMAL', 'ORIENTATION_VIEW', 'COPYDOWN', 'PASTEDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'VIS_SEL_11', 'VIS_SEL_10', 'VIS_SEL_01', 'VIS_SEL_00', 'AUTOMERGE_OFF', 'AUTOMERGE_ON', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'TRANSFORM_ORIGINS', 'GIZMO', 'ORIENTATION_CURSOR', 'NORMALS_VERTEX', 'NORMALS_FACE', 'NORMALS_VERTEX_FACE', 'SHADING_BBOX', 'SHADING_WIRE', 'SHADING_SOLID', 'SHADING_RENDERED', 'SHADING_TEXTURE', 'OVERLAY', 'XRAY', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'LAYER_USED', 'LAYER_ACTIVE', 'OUTLINER_OB_HAIR', 'OUTLINER_DATA_HAIR', 'HAIR_DATA', 'OUTLINER_OB_POINTCLOUD', 'OUTLINER_DATA_POINTCLOUD', 'POINTCLOUD_DATA', 'OUTLINER_OB_VOLUME', 'OUTLINER_DATA_VOLUME', 'VOLUME_DATA', 'HOME', 'DOCUMENTS', 'TEMP', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'SHORTDISPLAY', 'LONGDISPLAY', 'IMGDISPLAY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'FOLDER_REDIRECT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'SORT_DESC', 'SORT_ASC', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_ARCHIVE', 'FILE_CACHE', 'FILE_VOLUME', 'FILE_3D', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'MATSHADERBALL', 'MATCLOTH', 'MATFLUID', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'DISC', 'DESKTOP', 'EXTERNAL_DRIVE', 'NETWORK_DRIVE', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'SEQ_STRIP_META', 'SEQ_STRIP_DUPLICATE', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'HANDLE_AUTOCLAMPED', 'HANDLE_AUTO', 'HANDLE_ALIGNED', 'HANDLE_VECTOR', 'HANDLE_FREE', 'VIEW_PERSPECTIVE', 'VIEW_ORTHO', 'VIEW_CAMERA', 'VIEW_PAN', 'VIEW_ZOOM', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'GPBRUSH_SMOOTH', 'GPBRUSH_THICKNESS', 'GPBRUSH_STRENGTH', 'GPBRUSH_GRAB', 'GPBRUSH_PUSH', 'GPBRUSH_TWIST', 'GPBRUSH_PINCH', 'GPBRUSH_RANDOMIZE', 'GPBRUSH_CLONE', 'GPBRUSH_WEIGHT', 'GPBRUSH_PENCIL', 'GPBRUSH_PEN', 'GPBRUSH_INK', 'GPBRUSH_INKNOISE', 'GPBRUSH_BLOCK', 'GPBRUSH_MARKER', 'GPBRUSH_FILL', 'GPBRUSH_AIRBRUSH', 'GPBRUSH_CHISEL', 'GPBRUSH_ERASE_SOFT', 'GPBRUSH_ERASE_HARD', 'GPBRUSH_ERASE_STROKE', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'HANDLETYPE_FREE_VEC', 'HANDLETYPE_ALIGNED_VEC', 'HANDLETYPE_VECTOR_VEC', 'HANDLETYPE_AUTO_VEC', 'HANDLETYPE_AUTO_CLAMP_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC', 'EVENT_A', 'EVENT_B', 'EVENT_C', 'EVENT_D', 'EVENT_E', 'EVENT_F', 'EVENT_G', 'EVENT_H', 'EVENT_I', 'EVENT_J', 'EVENT_K', 'EVENT_L', 'EVENT_M', 'EVENT_N', 'EVENT_O', 'EVENT_P', 'EVENT_Q', 'EVENT_R', 'EVENT_S', 'EVENT_T', 'EVENT_U', 'EVENT_V', 'EVENT_W', 'EVENT_X', 'EVENT_Y', 'EVENT_Z', 'EVENT_SHIFT', 'EVENT_CTRL', 'EVENT_ALT', 'EVENT_OS', 'EVENT_F1', 'EVENT_F2', 'EVENT_F3', 'EVENT_F4', 'EVENT_F5', 'EVENT_F6', 'EVENT_F7', 'EVENT_F8', 'EVENT_F9', 'EVENT_F10', 'EVENT_F11', 'EVENT_F12', 'EVENT_ESC', 'EVENT_TAB', 'EVENT_PAGEUP', 'EVENT_PAGEDOWN', 'EVENT_RETURN', 'EVENT_SPACEKEY'], (optional)
            @icon_only (bool): Draw only icons in tabs, no text
               (optional)
            @menu (str): Identifier of the menu
               (never None)
      
         '''
      
         pass

      def prop_tabs_enum(data, property, icon_only=False):
         '''prop_tabs_enum
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @icon_only (bool): Draw only icons in tabs, no text
               (optional)
      
         '''
      
         pass

      def prop_enum(data, property, value, text="", text_ctxt="", translate=True, icon='NONE'):
         '''prop_enum
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @value (str): Enum property value
               (never None)
            @text (str): Override automatic text of the item
               (optional)
            @text_ctxt (str): Override automatic translation context of the given text
               (optional)
            @translate (bool): Translate the given text, when UI translation is enabled
               (optional)
            @icon (str): Override automatic icon of the item
               in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_RIGHT', 'DISCLOSURE_TRI_DOWN', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'DUPLICATE', 'TRASH', 'COLLECTION_NEW', 'OPTIONS', 'NODE', 'NODE_SEL', 'WINDOW', 'WORKSPACE', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ADD', 'REMOVE', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'CHECKMARK', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'FCURVE_SNAPSHOT', 'OBJECT_HIDDEN', 'TOPBAR', 'STATUSBAR', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'UNLINKED', 'LINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'DRIVER_DISTANCE', 'DRIVER_ROTATIONAL_DIFFERENCE', 'DRIVER_TRANSFORM', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'FILE_NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'THREE_DOTS', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BRUSHES_ALL', 'LIGHT', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'OUTPUT', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TOOL_SETTINGS', 'SHADERFX', 'MODIFIER', 'BLANK1', 'FAKE_USER_OFF', 'FAKE_USER_ON', 'VIEW3D', 'GRAPH', 'OUTLINER', 'PROPERTIES', 'FILEBROWSER', 'IMAGE', 'INFO', 'SEQUENCE', 'TEXT', 'SOUND', 'ACTION', 'NLA', 'PREFERENCES', 'TIME', 'NODETREE', 'CONSOLE', 'TRACKER', 'ASSET_MANAGER', 'NODE_COMPOSITING', 'NODE_TEXTURE', 'NODE_MATERIAL', 'UV', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'UV_DATA', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'TRACKING', 'TRACKING_BACKWARDS', 'TRACKING_FORWARDS', 'TRACKING_BACKWARDS_SINGLE', 'TRACKING_FORWARDS_SINGLE', 'TRACKING_CLEAR_BACKWARDS', 'TRACKING_CLEAR_FORWARDS', 'TRACKING_REFINE_BACKWARDS', 'TRACKING_REFINE_FORWARDS', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LIGHT_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'COMMUNITY', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'EXPERIMENTAL', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'PRESET', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'LIBRARY_DATA_OVERRIDE', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'FACE_MAPS', 'RNA', 'RNA_ADD', 'MOUSE_LMB', 'MOUSE_MMB', 'MOUSE_RMB', 'MOUSE_MOVE', 'MOUSE_LMB_DRAG', 'MOUSE_MMB_DRAG', 'MOUSE_RMB_DRAG', 'MEMORY', 'PRESET_NEW', 'DECORATE', 'DECORATE_KEYFRAME', 'DECORATE_ANIMATE', 'DECORATE_DRIVER', 'DECORATE_LINKED', 'DECORATE_LIBRARY_OVERRIDE', 'DECORATE_UNLOCKED', 'DECORATE_LOCKED', 'DECORATE_OVERRIDE', 'FUND', 'TRACKER_DATA', 'HEART', 'ORPHAN_DATA', 'USER', 'SYSTEM', 'SETTINGS', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LIGHT', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'OUTLINER_OB_FORCE_FIELD', 'OUTLINER_OB_GROUP_INSTANCE', 'OUTLINER_OB_GREASEPENCIL', 'OUTLINER_OB_LIGHTPROBE', 'OUTLINER_OB_IMAGE', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'HIDE_ON', 'HIDE_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_RENDER_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_INSTANCED_OFF', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LIGHT', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_LIGHTPROBE', 'OUTLINER_DATA_GP_LAYER', 'OUTLINER_DATA_GREASEPENCIL', 'GP_SELECT_POINTS', 'GP_SELECT_STROKES', 'GP_MULTIFRAME_EDITING', 'GP_ONLY_SELECTED', 'GP_SELECT_BETWEEN_STROKES', 'MODIFIER_OFF', 'MODIFIER_ON', 'ONIONSKIN_OFF', 'ONIONSKIN_ON', 'RESTRICT_VIEW_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_INSTANCED_ON', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'EMPTY_SINGLE_ARROW', 'LIGHT_POINT', 'LIGHT_SUN', 'LIGHT_SPOT', 'LIGHT_HEMI', 'LIGHT_AREA', 'CUBE', 'SPHERE', 'CONE', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'EMPTY_AXIS', 'STROKE', 'EMPTY_ARROWS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'LIGHTPROBE_CUBEMAP', 'LIGHTPROBE_PLANAR', 'LIGHTPROBE_GRID', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'RIGID_BODY', 'RIGID_BODY_CONSTRAINT', 'IMAGE_PLANE', 'IMAGE_BACKGROUND', 'IMAGE_REFERENCE', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'NODE_TOP', 'NODE_SIDE', 'NODE_CORNER', 'ANCHOR_TOP', 'ANCHOR_BOTTOM', 'ANCHOR_LEFT', 'ANCHOR_RIGHT', 'ANCHOR_CENTER', 'SELECT_SET', 'SELECT_EXTEND', 'SELECT_SUBTRACT', 'SELECT_INTERSECT', 'SELECT_DIFFERENCE', 'ALIGN_LEFT', 'ALIGN_CENTER', 'ALIGN_RIGHT', 'ALIGN_JUSTIFY', 'ALIGN_FLUSH', 'ALIGN_TOP', 'ALIGN_MIDDLE', 'ALIGN_BOTTOM', 'BOLD', 'ITALIC', 'UNDERLINE', 'SMALL_CAPS', 'CON_ACTION', 'HOLDOUT_OFF', 'HOLDOUT_ON', 'INDIRECT_ONLY_OFF', 'INDIRECT_ONLY_ON', 'CON_CAMERASOLVER', 'CON_FOLLOWTRACK', 'CON_OBJECTSOLVER', 'CON_LOCLIKE', 'CON_ROTLIKE', 'CON_SIZELIKE', 'CON_TRANSLIKE', 'CON_DISTLIMIT', 'CON_LOCLIMIT', 'CON_ROTLIMIT', 'CON_SIZELIMIT', 'CON_SAMEVOL', 'CON_TRANSFORM', 'CON_TRANSFORM_CACHE', 'CON_CLAMPTO', 'CON_KINEMATIC', 'CON_LOCKTRACK', 'CON_SPLINEIK', 'CON_STRETCHTO', 'CON_TRACKTO', 'CON_ARMATURE', 'CON_CHILDOF', 'CON_FLOOR', 'CON_FOLLOWPATH', 'CON_PIVOT', 'CON_SHRINKWRAP', 'MODIFIER_DATA', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'MOD_TINT', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_FLUID', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'MOD_PARTICLE_INSTANCE', 'MOD_HUE_SATURATION', 'MOD_NOISE', 'MOD_OFFSET', 'MOD_SIMPLIFY', 'MOD_THICKNESS', 'MOD_INSTANCE', 'MOD_TIME', 'MOD_OPACITY', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_SOUND', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'KEYFRAME_HLT', 'KEYFRAME', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'CURSOR', 'PIVOT_BOUNDBOX', 'PIVOT_CURSOR', 'PIVOT_INDIVIDUAL', 'PIVOT_MEDIAN', 'PIVOT_ACTIVE', 'CENTER_ONLY', 'ROOTCURVE', 'SMOOTHCURVE', 'SPHERECURVE', 'INVERSESQUARECURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'PROP_PROJECTED', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'SNAP_FACE_CENTER', 'SNAP_PERPENDICULAR', 'SNAP_MIDPOINT', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'OBJECT_ORIGIN', 'ORIENTATION_GLOBAL', 'ORIENTATION_GIMBAL', 'ORIENTATION_LOCAL', 'ORIENTATION_NORMAL', 'ORIENTATION_VIEW', 'COPYDOWN', 'PASTEDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'VIS_SEL_11', 'VIS_SEL_10', 'VIS_SEL_01', 'VIS_SEL_00', 'AUTOMERGE_OFF', 'AUTOMERGE_ON', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'TRANSFORM_ORIGINS', 'GIZMO', 'ORIENTATION_CURSOR', 'NORMALS_VERTEX', 'NORMALS_FACE', 'NORMALS_VERTEX_FACE', 'SHADING_BBOX', 'SHADING_WIRE', 'SHADING_SOLID', 'SHADING_RENDERED', 'SHADING_TEXTURE', 'OVERLAY', 'XRAY', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'LAYER_USED', 'LAYER_ACTIVE', 'OUTLINER_OB_HAIR', 'OUTLINER_DATA_HAIR', 'HAIR_DATA', 'OUTLINER_OB_POINTCLOUD', 'OUTLINER_DATA_POINTCLOUD', 'POINTCLOUD_DATA', 'OUTLINER_OB_VOLUME', 'OUTLINER_DATA_VOLUME', 'VOLUME_DATA', 'HOME', 'DOCUMENTS', 'TEMP', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'SHORTDISPLAY', 'LONGDISPLAY', 'IMGDISPLAY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'FOLDER_REDIRECT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'SORT_DESC', 'SORT_ASC', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_ARCHIVE', 'FILE_CACHE', 'FILE_VOLUME', 'FILE_3D', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'MATSHADERBALL', 'MATCLOTH', 'MATFLUID', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'DISC', 'DESKTOP', 'EXTERNAL_DRIVE', 'NETWORK_DRIVE', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'SEQ_STRIP_META', 'SEQ_STRIP_DUPLICATE', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'HANDLE_AUTOCLAMPED', 'HANDLE_AUTO', 'HANDLE_ALIGNED', 'HANDLE_VECTOR', 'HANDLE_FREE', 'VIEW_PERSPECTIVE', 'VIEW_ORTHO', 'VIEW_CAMERA', 'VIEW_PAN', 'VIEW_ZOOM', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'GPBRUSH_SMOOTH', 'GPBRUSH_THICKNESS', 'GPBRUSH_STRENGTH', 'GPBRUSH_GRAB', 'GPBRUSH_PUSH', 'GPBRUSH_TWIST', 'GPBRUSH_PINCH', 'GPBRUSH_RANDOMIZE', 'GPBRUSH_CLONE', 'GPBRUSH_WEIGHT', 'GPBRUSH_PENCIL', 'GPBRUSH_PEN', 'GPBRUSH_INK', 'GPBRUSH_INKNOISE', 'GPBRUSH_BLOCK', 'GPBRUSH_MARKER', 'GPBRUSH_FILL', 'GPBRUSH_AIRBRUSH', 'GPBRUSH_CHISEL', 'GPBRUSH_ERASE_SOFT', 'GPBRUSH_ERASE_HARD', 'GPBRUSH_ERASE_STROKE', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'HANDLETYPE_FREE_VEC', 'HANDLETYPE_ALIGNED_VEC', 'HANDLETYPE_VECTOR_VEC', 'HANDLETYPE_AUTO_VEC', 'HANDLETYPE_AUTO_CLAMP_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC', 'EVENT_A', 'EVENT_B', 'EVENT_C', 'EVENT_D', 'EVENT_E', 'EVENT_F', 'EVENT_G', 'EVENT_H', 'EVENT_I', 'EVENT_J', 'EVENT_K', 'EVENT_L', 'EVENT_M', 'EVENT_N', 'EVENT_O', 'EVENT_P', 'EVENT_Q', 'EVENT_R', 'EVENT_S', 'EVENT_T', 'EVENT_U', 'EVENT_V', 'EVENT_W', 'EVENT_X', 'EVENT_Y', 'EVENT_Z', 'EVENT_SHIFT', 'EVENT_CTRL', 'EVENT_ALT', 'EVENT_OS', 'EVENT_F1', 'EVENT_F2', 'EVENT_F3', 'EVENT_F4', 'EVENT_F5', 'EVENT_F6', 'EVENT_F7', 'EVENT_F8', 'EVENT_F9', 'EVENT_F10', 'EVENT_F11', 'EVENT_F12', 'EVENT_ESC', 'EVENT_TAB', 'EVENT_PAGEUP', 'EVENT_PAGEDOWN', 'EVENT_RETURN', 'EVENT_SPACEKEY'], (optional)
      
         '''
      
         pass

      def prop_search(data, property, search_data, search_property, text="", text_ctxt="", translate=True, icon='NONE'):
         '''prop_search
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @search_data (AnyType): Data from which to take collection to search in
               (never None)
            @search_property (str): Identifier of search collection property
               (never None)
            @text (str): Override automatic text of the item
               (optional)
            @text_ctxt (str): Override automatic translation context of the given text
               (optional)
            @translate (bool): Translate the given text, when UI translation is enabled
               (optional)
            @icon (str): Override automatic icon of the item
               in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_RIGHT', 'DISCLOSURE_TRI_DOWN', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'DUPLICATE', 'TRASH', 'COLLECTION_NEW', 'OPTIONS', 'NODE', 'NODE_SEL', 'WINDOW', 'WORKSPACE', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ADD', 'REMOVE', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'CHECKMARK', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'FCURVE_SNAPSHOT', 'OBJECT_HIDDEN', 'TOPBAR', 'STATUSBAR', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'UNLINKED', 'LINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'DRIVER_DISTANCE', 'DRIVER_ROTATIONAL_DIFFERENCE', 'DRIVER_TRANSFORM', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'FILE_NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'THREE_DOTS', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BRUSHES_ALL', 'LIGHT', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'OUTPUT', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TOOL_SETTINGS', 'SHADERFX', 'MODIFIER', 'BLANK1', 'FAKE_USER_OFF', 'FAKE_USER_ON', 'VIEW3D', 'GRAPH', 'OUTLINER', 'PROPERTIES', 'FILEBROWSER', 'IMAGE', 'INFO', 'SEQUENCE', 'TEXT', 'SOUND', 'ACTION', 'NLA', 'PREFERENCES', 'TIME', 'NODETREE', 'CONSOLE', 'TRACKER', 'ASSET_MANAGER', 'NODE_COMPOSITING', 'NODE_TEXTURE', 'NODE_MATERIAL', 'UV', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'UV_DATA', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'TRACKING', 'TRACKING_BACKWARDS', 'TRACKING_FORWARDS', 'TRACKING_BACKWARDS_SINGLE', 'TRACKING_FORWARDS_SINGLE', 'TRACKING_CLEAR_BACKWARDS', 'TRACKING_CLEAR_FORWARDS', 'TRACKING_REFINE_BACKWARDS', 'TRACKING_REFINE_FORWARDS', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LIGHT_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'COMMUNITY', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'EXPERIMENTAL', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'PRESET', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'LIBRARY_DATA_OVERRIDE', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'FACE_MAPS', 'RNA', 'RNA_ADD', 'MOUSE_LMB', 'MOUSE_MMB', 'MOUSE_RMB', 'MOUSE_MOVE', 'MOUSE_LMB_DRAG', 'MOUSE_MMB_DRAG', 'MOUSE_RMB_DRAG', 'MEMORY', 'PRESET_NEW', 'DECORATE', 'DECORATE_KEYFRAME', 'DECORATE_ANIMATE', 'DECORATE_DRIVER', 'DECORATE_LINKED', 'DECORATE_LIBRARY_OVERRIDE', 'DECORATE_UNLOCKED', 'DECORATE_LOCKED', 'DECORATE_OVERRIDE', 'FUND', 'TRACKER_DATA', 'HEART', 'ORPHAN_DATA', 'USER', 'SYSTEM', 'SETTINGS', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LIGHT', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'OUTLINER_OB_FORCE_FIELD', 'OUTLINER_OB_GROUP_INSTANCE', 'OUTLINER_OB_GREASEPENCIL', 'OUTLINER_OB_LIGHTPROBE', 'OUTLINER_OB_IMAGE', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'HIDE_ON', 'HIDE_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_RENDER_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_INSTANCED_OFF', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LIGHT', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_LIGHTPROBE', 'OUTLINER_DATA_GP_LAYER', 'OUTLINER_DATA_GREASEPENCIL', 'GP_SELECT_POINTS', 'GP_SELECT_STROKES', 'GP_MULTIFRAME_EDITING', 'GP_ONLY_SELECTED', 'GP_SELECT_BETWEEN_STROKES', 'MODIFIER_OFF', 'MODIFIER_ON', 'ONIONSKIN_OFF', 'ONIONSKIN_ON', 'RESTRICT_VIEW_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_INSTANCED_ON', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'EMPTY_SINGLE_ARROW', 'LIGHT_POINT', 'LIGHT_SUN', 'LIGHT_SPOT', 'LIGHT_HEMI', 'LIGHT_AREA', 'CUBE', 'SPHERE', 'CONE', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'EMPTY_AXIS', 'STROKE', 'EMPTY_ARROWS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'LIGHTPROBE_CUBEMAP', 'LIGHTPROBE_PLANAR', 'LIGHTPROBE_GRID', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'RIGID_BODY', 'RIGID_BODY_CONSTRAINT', 'IMAGE_PLANE', 'IMAGE_BACKGROUND', 'IMAGE_REFERENCE', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'NODE_TOP', 'NODE_SIDE', 'NODE_CORNER', 'ANCHOR_TOP', 'ANCHOR_BOTTOM', 'ANCHOR_LEFT', 'ANCHOR_RIGHT', 'ANCHOR_CENTER', 'SELECT_SET', 'SELECT_EXTEND', 'SELECT_SUBTRACT', 'SELECT_INTERSECT', 'SELECT_DIFFERENCE', 'ALIGN_LEFT', 'ALIGN_CENTER', 'ALIGN_RIGHT', 'ALIGN_JUSTIFY', 'ALIGN_FLUSH', 'ALIGN_TOP', 'ALIGN_MIDDLE', 'ALIGN_BOTTOM', 'BOLD', 'ITALIC', 'UNDERLINE', 'SMALL_CAPS', 'CON_ACTION', 'HOLDOUT_OFF', 'HOLDOUT_ON', 'INDIRECT_ONLY_OFF', 'INDIRECT_ONLY_ON', 'CON_CAMERASOLVER', 'CON_FOLLOWTRACK', 'CON_OBJECTSOLVER', 'CON_LOCLIKE', 'CON_ROTLIKE', 'CON_SIZELIKE', 'CON_TRANSLIKE', 'CON_DISTLIMIT', 'CON_LOCLIMIT', 'CON_ROTLIMIT', 'CON_SIZELIMIT', 'CON_SAMEVOL', 'CON_TRANSFORM', 'CON_TRANSFORM_CACHE', 'CON_CLAMPTO', 'CON_KINEMATIC', 'CON_LOCKTRACK', 'CON_SPLINEIK', 'CON_STRETCHTO', 'CON_TRACKTO', 'CON_ARMATURE', 'CON_CHILDOF', 'CON_FLOOR', 'CON_FOLLOWPATH', 'CON_PIVOT', 'CON_SHRINKWRAP', 'MODIFIER_DATA', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'MOD_TINT', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_FLUID', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'MOD_PARTICLE_INSTANCE', 'MOD_HUE_SATURATION', 'MOD_NOISE', 'MOD_OFFSET', 'MOD_SIMPLIFY', 'MOD_THICKNESS', 'MOD_INSTANCE', 'MOD_TIME', 'MOD_OPACITY', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_SOUND', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'KEYFRAME_HLT', 'KEYFRAME', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'CURSOR', 'PIVOT_BOUNDBOX', 'PIVOT_CURSOR', 'PIVOT_INDIVIDUAL', 'PIVOT_MEDIAN', 'PIVOT_ACTIVE', 'CENTER_ONLY', 'ROOTCURVE', 'SMOOTHCURVE', 'SPHERECURVE', 'INVERSESQUARECURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'PROP_PROJECTED', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'SNAP_FACE_CENTER', 'SNAP_PERPENDICULAR', 'SNAP_MIDPOINT', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'OBJECT_ORIGIN', 'ORIENTATION_GLOBAL', 'ORIENTATION_GIMBAL', 'ORIENTATION_LOCAL', 'ORIENTATION_NORMAL', 'ORIENTATION_VIEW', 'COPYDOWN', 'PASTEDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'VIS_SEL_11', 'VIS_SEL_10', 'VIS_SEL_01', 'VIS_SEL_00', 'AUTOMERGE_OFF', 'AUTOMERGE_ON', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'TRANSFORM_ORIGINS', 'GIZMO', 'ORIENTATION_CURSOR', 'NORMALS_VERTEX', 'NORMALS_FACE', 'NORMALS_VERTEX_FACE', 'SHADING_BBOX', 'SHADING_WIRE', 'SHADING_SOLID', 'SHADING_RENDERED', 'SHADING_TEXTURE', 'OVERLAY', 'XRAY', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'LAYER_USED', 'LAYER_ACTIVE', 'OUTLINER_OB_HAIR', 'OUTLINER_DATA_HAIR', 'HAIR_DATA', 'OUTLINER_OB_POINTCLOUD', 'OUTLINER_DATA_POINTCLOUD', 'POINTCLOUD_DATA', 'OUTLINER_OB_VOLUME', 'OUTLINER_DATA_VOLUME', 'VOLUME_DATA', 'HOME', 'DOCUMENTS', 'TEMP', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'SHORTDISPLAY', 'LONGDISPLAY', 'IMGDISPLAY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'FOLDER_REDIRECT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'SORT_DESC', 'SORT_ASC', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_ARCHIVE', 'FILE_CACHE', 'FILE_VOLUME', 'FILE_3D', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'MATSHADERBALL', 'MATCLOTH', 'MATFLUID', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'DISC', 'DESKTOP', 'EXTERNAL_DRIVE', 'NETWORK_DRIVE', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'SEQ_STRIP_META', 'SEQ_STRIP_DUPLICATE', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'HANDLE_AUTOCLAMPED', 'HANDLE_AUTO', 'HANDLE_ALIGNED', 'HANDLE_VECTOR', 'HANDLE_FREE', 'VIEW_PERSPECTIVE', 'VIEW_ORTHO', 'VIEW_CAMERA', 'VIEW_PAN', 'VIEW_ZOOM', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'GPBRUSH_SMOOTH', 'GPBRUSH_THICKNESS', 'GPBRUSH_STRENGTH', 'GPBRUSH_GRAB', 'GPBRUSH_PUSH', 'GPBRUSH_TWIST', 'GPBRUSH_PINCH', 'GPBRUSH_RANDOMIZE', 'GPBRUSH_CLONE', 'GPBRUSH_WEIGHT', 'GPBRUSH_PENCIL', 'GPBRUSH_PEN', 'GPBRUSH_INK', 'GPBRUSH_INKNOISE', 'GPBRUSH_BLOCK', 'GPBRUSH_MARKER', 'GPBRUSH_FILL', 'GPBRUSH_AIRBRUSH', 'GPBRUSH_CHISEL', 'GPBRUSH_ERASE_SOFT', 'GPBRUSH_ERASE_HARD', 'GPBRUSH_ERASE_STROKE', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'HANDLETYPE_FREE_VEC', 'HANDLETYPE_ALIGNED_VEC', 'HANDLETYPE_VECTOR_VEC', 'HANDLETYPE_AUTO_VEC', 'HANDLETYPE_AUTO_CLAMP_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC', 'EVENT_A', 'EVENT_B', 'EVENT_C', 'EVENT_D', 'EVENT_E', 'EVENT_F', 'EVENT_G', 'EVENT_H', 'EVENT_I', 'EVENT_J', 'EVENT_K', 'EVENT_L', 'EVENT_M', 'EVENT_N', 'EVENT_O', 'EVENT_P', 'EVENT_Q', 'EVENT_R', 'EVENT_S', 'EVENT_T', 'EVENT_U', 'EVENT_V', 'EVENT_W', 'EVENT_X', 'EVENT_Y', 'EVENT_Z', 'EVENT_SHIFT', 'EVENT_CTRL', 'EVENT_ALT', 'EVENT_OS', 'EVENT_F1', 'EVENT_F2', 'EVENT_F3', 'EVENT_F4', 'EVENT_F5', 'EVENT_F6', 'EVENT_F7', 'EVENT_F8', 'EVENT_F9', 'EVENT_F10', 'EVENT_F11', 'EVENT_F12', 'EVENT_ESC', 'EVENT_TAB', 'EVENT_PAGEUP', 'EVENT_PAGEDOWN', 'EVENT_RETURN', 'EVENT_SPACEKEY'], (optional)
      
         '''
      
         pass

      def operator(operator, text="", text_ctxt="", translate=True, icon='NONE', emboss=True, depress=False, icon_value=0):
         '''Item. Places a button into the layout to call an Operator
            Arguments:
            @operator (str): Identifier of the operator
               (never None)
            @text (str): Override automatic text of the item
               (optional)
            @text_ctxt (str): Override automatic translation context of the given text
               (optional)
            @translate (bool): Translate the given text, when UI translation is enabled
               (optional)
            @icon (str): Override automatic icon of the item
               in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_RIGHT', 'DISCLOSURE_TRI_DOWN', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'DUPLICATE', 'TRASH', 'COLLECTION_NEW', 'OPTIONS', 'NODE', 'NODE_SEL', 'WINDOW', 'WORKSPACE', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ADD', 'REMOVE', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'CHECKMARK', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'FCURVE_SNAPSHOT', 'OBJECT_HIDDEN', 'TOPBAR', 'STATUSBAR', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'UNLINKED', 'LINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'DRIVER_DISTANCE', 'DRIVER_ROTATIONAL_DIFFERENCE', 'DRIVER_TRANSFORM', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'FILE_NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'THREE_DOTS', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BRUSHES_ALL', 'LIGHT', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'OUTPUT', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TOOL_SETTINGS', 'SHADERFX', 'MODIFIER', 'BLANK1', 'FAKE_USER_OFF', 'FAKE_USER_ON', 'VIEW3D', 'GRAPH', 'OUTLINER', 'PROPERTIES', 'FILEBROWSER', 'IMAGE', 'INFO', 'SEQUENCE', 'TEXT', 'SOUND', 'ACTION', 'NLA', 'PREFERENCES', 'TIME', 'NODETREE', 'CONSOLE', 'TRACKER', 'ASSET_MANAGER', 'NODE_COMPOSITING', 'NODE_TEXTURE', 'NODE_MATERIAL', 'UV', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'UV_DATA', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'TRACKING', 'TRACKING_BACKWARDS', 'TRACKING_FORWARDS', 'TRACKING_BACKWARDS_SINGLE', 'TRACKING_FORWARDS_SINGLE', 'TRACKING_CLEAR_BACKWARDS', 'TRACKING_CLEAR_FORWARDS', 'TRACKING_REFINE_BACKWARDS', 'TRACKING_REFINE_FORWARDS', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LIGHT_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'COMMUNITY', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'EXPERIMENTAL', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'PRESET', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'LIBRARY_DATA_OVERRIDE', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'FACE_MAPS', 'RNA', 'RNA_ADD', 'MOUSE_LMB', 'MOUSE_MMB', 'MOUSE_RMB', 'MOUSE_MOVE', 'MOUSE_LMB_DRAG', 'MOUSE_MMB_DRAG', 'MOUSE_RMB_DRAG', 'MEMORY', 'PRESET_NEW', 'DECORATE', 'DECORATE_KEYFRAME', 'DECORATE_ANIMATE', 'DECORATE_DRIVER', 'DECORATE_LINKED', 'DECORATE_LIBRARY_OVERRIDE', 'DECORATE_UNLOCKED', 'DECORATE_LOCKED', 'DECORATE_OVERRIDE', 'FUND', 'TRACKER_DATA', 'HEART', 'ORPHAN_DATA', 'USER', 'SYSTEM', 'SETTINGS', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LIGHT', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'OUTLINER_OB_FORCE_FIELD', 'OUTLINER_OB_GROUP_INSTANCE', 'OUTLINER_OB_GREASEPENCIL', 'OUTLINER_OB_LIGHTPROBE', 'OUTLINER_OB_IMAGE', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'HIDE_ON', 'HIDE_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_RENDER_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_INSTANCED_OFF', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LIGHT', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_LIGHTPROBE', 'OUTLINER_DATA_GP_LAYER', 'OUTLINER_DATA_GREASEPENCIL', 'GP_SELECT_POINTS', 'GP_SELECT_STROKES', 'GP_MULTIFRAME_EDITING', 'GP_ONLY_SELECTED', 'GP_SELECT_BETWEEN_STROKES', 'MODIFIER_OFF', 'MODIFIER_ON', 'ONIONSKIN_OFF', 'ONIONSKIN_ON', 'RESTRICT_VIEW_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_INSTANCED_ON', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'EMPTY_SINGLE_ARROW', 'LIGHT_POINT', 'LIGHT_SUN', 'LIGHT_SPOT', 'LIGHT_HEMI', 'LIGHT_AREA', 'CUBE', 'SPHERE', 'CONE', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'EMPTY_AXIS', 'STROKE', 'EMPTY_ARROWS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'LIGHTPROBE_CUBEMAP', 'LIGHTPROBE_PLANAR', 'LIGHTPROBE_GRID', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'RIGID_BODY', 'RIGID_BODY_CONSTRAINT', 'IMAGE_PLANE', 'IMAGE_BACKGROUND', 'IMAGE_REFERENCE', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'NODE_TOP', 'NODE_SIDE', 'NODE_CORNER', 'ANCHOR_TOP', 'ANCHOR_BOTTOM', 'ANCHOR_LEFT', 'ANCHOR_RIGHT', 'ANCHOR_CENTER', 'SELECT_SET', 'SELECT_EXTEND', 'SELECT_SUBTRACT', 'SELECT_INTERSECT', 'SELECT_DIFFERENCE', 'ALIGN_LEFT', 'ALIGN_CENTER', 'ALIGN_RIGHT', 'ALIGN_JUSTIFY', 'ALIGN_FLUSH', 'ALIGN_TOP', 'ALIGN_MIDDLE', 'ALIGN_BOTTOM', 'BOLD', 'ITALIC', 'UNDERLINE', 'SMALL_CAPS', 'CON_ACTION', 'HOLDOUT_OFF', 'HOLDOUT_ON', 'INDIRECT_ONLY_OFF', 'INDIRECT_ONLY_ON', 'CON_CAMERASOLVER', 'CON_FOLLOWTRACK', 'CON_OBJECTSOLVER', 'CON_LOCLIKE', 'CON_ROTLIKE', 'CON_SIZELIKE', 'CON_TRANSLIKE', 'CON_DISTLIMIT', 'CON_LOCLIMIT', 'CON_ROTLIMIT', 'CON_SIZELIMIT', 'CON_SAMEVOL', 'CON_TRANSFORM', 'CON_TRANSFORM_CACHE', 'CON_CLAMPTO', 'CON_KINEMATIC', 'CON_LOCKTRACK', 'CON_SPLINEIK', 'CON_STRETCHTO', 'CON_TRACKTO', 'CON_ARMATURE', 'CON_CHILDOF', 'CON_FLOOR', 'CON_FOLLOWPATH', 'CON_PIVOT', 'CON_SHRINKWRAP', 'MODIFIER_DATA', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'MOD_TINT', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_FLUID', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'MOD_PARTICLE_INSTANCE', 'MOD_HUE_SATURATION', 'MOD_NOISE', 'MOD_OFFSET', 'MOD_SIMPLIFY', 'MOD_THICKNESS', 'MOD_INSTANCE', 'MOD_TIME', 'MOD_OPACITY', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_SOUND', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'KEYFRAME_HLT', 'KEYFRAME', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'CURSOR', 'PIVOT_BOUNDBOX', 'PIVOT_CURSOR', 'PIVOT_INDIVIDUAL', 'PIVOT_MEDIAN', 'PIVOT_ACTIVE', 'CENTER_ONLY', 'ROOTCURVE', 'SMOOTHCURVE', 'SPHERECURVE', 'INVERSESQUARECURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'PROP_PROJECTED', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'SNAP_FACE_CENTER', 'SNAP_PERPENDICULAR', 'SNAP_MIDPOINT', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'OBJECT_ORIGIN', 'ORIENTATION_GLOBAL', 'ORIENTATION_GIMBAL', 'ORIENTATION_LOCAL', 'ORIENTATION_NORMAL', 'ORIENTATION_VIEW', 'COPYDOWN', 'PASTEDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'VIS_SEL_11', 'VIS_SEL_10', 'VIS_SEL_01', 'VIS_SEL_00', 'AUTOMERGE_OFF', 'AUTOMERGE_ON', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'TRANSFORM_ORIGINS', 'GIZMO', 'ORIENTATION_CURSOR', 'NORMALS_VERTEX', 'NORMALS_FACE', 'NORMALS_VERTEX_FACE', 'SHADING_BBOX', 'SHADING_WIRE', 'SHADING_SOLID', 'SHADING_RENDERED', 'SHADING_TEXTURE', 'OVERLAY', 'XRAY', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'LAYER_USED', 'LAYER_ACTIVE', 'OUTLINER_OB_HAIR', 'OUTLINER_DATA_HAIR', 'HAIR_DATA', 'OUTLINER_OB_POINTCLOUD', 'OUTLINER_DATA_POINTCLOUD', 'POINTCLOUD_DATA', 'OUTLINER_OB_VOLUME', 'OUTLINER_DATA_VOLUME', 'VOLUME_DATA', 'HOME', 'DOCUMENTS', 'TEMP', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'SHORTDISPLAY', 'LONGDISPLAY', 'IMGDISPLAY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'FOLDER_REDIRECT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'SORT_DESC', 'SORT_ASC', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_ARCHIVE', 'FILE_CACHE', 'FILE_VOLUME', 'FILE_3D', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'MATSHADERBALL', 'MATCLOTH', 'MATFLUID', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'DISC', 'DESKTOP', 'EXTERNAL_DRIVE', 'NETWORK_DRIVE', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'SEQ_STRIP_META', 'SEQ_STRIP_DUPLICATE', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'HANDLE_AUTOCLAMPED', 'HANDLE_AUTO', 'HANDLE_ALIGNED', 'HANDLE_VECTOR', 'HANDLE_FREE', 'VIEW_PERSPECTIVE', 'VIEW_ORTHO', 'VIEW_CAMERA', 'VIEW_PAN', 'VIEW_ZOOM', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'GPBRUSH_SMOOTH', 'GPBRUSH_THICKNESS', 'GPBRUSH_STRENGTH', 'GPBRUSH_GRAB', 'GPBRUSH_PUSH', 'GPBRUSH_TWIST', 'GPBRUSH_PINCH', 'GPBRUSH_RANDOMIZE', 'GPBRUSH_CLONE', 'GPBRUSH_WEIGHT', 'GPBRUSH_PENCIL', 'GPBRUSH_PEN', 'GPBRUSH_INK', 'GPBRUSH_INKNOISE', 'GPBRUSH_BLOCK', 'GPBRUSH_MARKER', 'GPBRUSH_FILL', 'GPBRUSH_AIRBRUSH', 'GPBRUSH_CHISEL', 'GPBRUSH_ERASE_SOFT', 'GPBRUSH_ERASE_HARD', 'GPBRUSH_ERASE_STROKE', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'HANDLETYPE_FREE_VEC', 'HANDLETYPE_ALIGNED_VEC', 'HANDLETYPE_VECTOR_VEC', 'HANDLETYPE_AUTO_VEC', 'HANDLETYPE_AUTO_CLAMP_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC', 'EVENT_A', 'EVENT_B', 'EVENT_C', 'EVENT_D', 'EVENT_E', 'EVENT_F', 'EVENT_G', 'EVENT_H', 'EVENT_I', 'EVENT_J', 'EVENT_K', 'EVENT_L', 'EVENT_M', 'EVENT_N', 'EVENT_O', 'EVENT_P', 'EVENT_Q', 'EVENT_R', 'EVENT_S', 'EVENT_T', 'EVENT_U', 'EVENT_V', 'EVENT_W', 'EVENT_X', 'EVENT_Y', 'EVENT_Z', 'EVENT_SHIFT', 'EVENT_CTRL', 'EVENT_ALT', 'EVENT_OS', 'EVENT_F1', 'EVENT_F2', 'EVENT_F3', 'EVENT_F4', 'EVENT_F5', 'EVENT_F6', 'EVENT_F7', 'EVENT_F8', 'EVENT_F9', 'EVENT_F10', 'EVENT_F11', 'EVENT_F12', 'EVENT_ESC', 'EVENT_TAB', 'EVENT_PAGEUP', 'EVENT_PAGEDOWN', 'EVENT_RETURN', 'EVENT_SPACEKEY'], (optional)
            @emboss (bool): Draw the button itself, not just the icon/text
               (optional)
            @depress (bool): Draw pressed in
               (optional)
            @icon_value (int): Override automatic icon of the item
               in [0, inf], (optional)
      
            @returns (types.OperatorProperties): Operator properties to fill in
               
         '''
      
         return types.OperatorProperties

      def operator_menu_hold(operator, text="", text_ctxt="", translate=True, icon='NONE', emboss=True, depress=False, icon_value=0, menu):
         '''Item. Places a button into the layout to call an Operator
            Arguments:
            @operator (str): Identifier of the operator
               (never None)
            @text (str): Override automatic text of the item
               (optional)
            @text_ctxt (str): Override automatic translation context of the given text
               (optional)
            @translate (bool): Translate the given text, when UI translation is enabled
               (optional)
            @icon (str): Override automatic icon of the item
               in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_RIGHT', 'DISCLOSURE_TRI_DOWN', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'DUPLICATE', 'TRASH', 'COLLECTION_NEW', 'OPTIONS', 'NODE', 'NODE_SEL', 'WINDOW', 'WORKSPACE', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ADD', 'REMOVE', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'CHECKMARK', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'FCURVE_SNAPSHOT', 'OBJECT_HIDDEN', 'TOPBAR', 'STATUSBAR', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'UNLINKED', 'LINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'DRIVER_DISTANCE', 'DRIVER_ROTATIONAL_DIFFERENCE', 'DRIVER_TRANSFORM', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'FILE_NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'THREE_DOTS', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BRUSHES_ALL', 'LIGHT', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'OUTPUT', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TOOL_SETTINGS', 'SHADERFX', 'MODIFIER', 'BLANK1', 'FAKE_USER_OFF', 'FAKE_USER_ON', 'VIEW3D', 'GRAPH', 'OUTLINER', 'PROPERTIES', 'FILEBROWSER', 'IMAGE', 'INFO', 'SEQUENCE', 'TEXT', 'SOUND', 'ACTION', 'NLA', 'PREFERENCES', 'TIME', 'NODETREE', 'CONSOLE', 'TRACKER', 'ASSET_MANAGER', 'NODE_COMPOSITING', 'NODE_TEXTURE', 'NODE_MATERIAL', 'UV', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'UV_DATA', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'TRACKING', 'TRACKING_BACKWARDS', 'TRACKING_FORWARDS', 'TRACKING_BACKWARDS_SINGLE', 'TRACKING_FORWARDS_SINGLE', 'TRACKING_CLEAR_BACKWARDS', 'TRACKING_CLEAR_FORWARDS', 'TRACKING_REFINE_BACKWARDS', 'TRACKING_REFINE_FORWARDS', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LIGHT_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'COMMUNITY', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'EXPERIMENTAL', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'PRESET', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'LIBRARY_DATA_OVERRIDE', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'FACE_MAPS', 'RNA', 'RNA_ADD', 'MOUSE_LMB', 'MOUSE_MMB', 'MOUSE_RMB', 'MOUSE_MOVE', 'MOUSE_LMB_DRAG', 'MOUSE_MMB_DRAG', 'MOUSE_RMB_DRAG', 'MEMORY', 'PRESET_NEW', 'DECORATE', 'DECORATE_KEYFRAME', 'DECORATE_ANIMATE', 'DECORATE_DRIVER', 'DECORATE_LINKED', 'DECORATE_LIBRARY_OVERRIDE', 'DECORATE_UNLOCKED', 'DECORATE_LOCKED', 'DECORATE_OVERRIDE', 'FUND', 'TRACKER_DATA', 'HEART', 'ORPHAN_DATA', 'USER', 'SYSTEM', 'SETTINGS', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LIGHT', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'OUTLINER_OB_FORCE_FIELD', 'OUTLINER_OB_GROUP_INSTANCE', 'OUTLINER_OB_GREASEPENCIL', 'OUTLINER_OB_LIGHTPROBE', 'OUTLINER_OB_IMAGE', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'HIDE_ON', 'HIDE_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_RENDER_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_INSTANCED_OFF', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LIGHT', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_LIGHTPROBE', 'OUTLINER_DATA_GP_LAYER', 'OUTLINER_DATA_GREASEPENCIL', 'GP_SELECT_POINTS', 'GP_SELECT_STROKES', 'GP_MULTIFRAME_EDITING', 'GP_ONLY_SELECTED', 'GP_SELECT_BETWEEN_STROKES', 'MODIFIER_OFF', 'MODIFIER_ON', 'ONIONSKIN_OFF', 'ONIONSKIN_ON', 'RESTRICT_VIEW_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_INSTANCED_ON', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'EMPTY_SINGLE_ARROW', 'LIGHT_POINT', 'LIGHT_SUN', 'LIGHT_SPOT', 'LIGHT_HEMI', 'LIGHT_AREA', 'CUBE', 'SPHERE', 'CONE', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'EMPTY_AXIS', 'STROKE', 'EMPTY_ARROWS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'LIGHTPROBE_CUBEMAP', 'LIGHTPROBE_PLANAR', 'LIGHTPROBE_GRID', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'RIGID_BODY', 'RIGID_BODY_CONSTRAINT', 'IMAGE_PLANE', 'IMAGE_BACKGROUND', 'IMAGE_REFERENCE', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'NODE_TOP', 'NODE_SIDE', 'NODE_CORNER', 'ANCHOR_TOP', 'ANCHOR_BOTTOM', 'ANCHOR_LEFT', 'ANCHOR_RIGHT', 'ANCHOR_CENTER', 'SELECT_SET', 'SELECT_EXTEND', 'SELECT_SUBTRACT', 'SELECT_INTERSECT', 'SELECT_DIFFERENCE', 'ALIGN_LEFT', 'ALIGN_CENTER', 'ALIGN_RIGHT', 'ALIGN_JUSTIFY', 'ALIGN_FLUSH', 'ALIGN_TOP', 'ALIGN_MIDDLE', 'ALIGN_BOTTOM', 'BOLD', 'ITALIC', 'UNDERLINE', 'SMALL_CAPS', 'CON_ACTION', 'HOLDOUT_OFF', 'HOLDOUT_ON', 'INDIRECT_ONLY_OFF', 'INDIRECT_ONLY_ON', 'CON_CAMERASOLVER', 'CON_FOLLOWTRACK', 'CON_OBJECTSOLVER', 'CON_LOCLIKE', 'CON_ROTLIKE', 'CON_SIZELIKE', 'CON_TRANSLIKE', 'CON_DISTLIMIT', 'CON_LOCLIMIT', 'CON_ROTLIMIT', 'CON_SIZELIMIT', 'CON_SAMEVOL', 'CON_TRANSFORM', 'CON_TRANSFORM_CACHE', 'CON_CLAMPTO', 'CON_KINEMATIC', 'CON_LOCKTRACK', 'CON_SPLINEIK', 'CON_STRETCHTO', 'CON_TRACKTO', 'CON_ARMATURE', 'CON_CHILDOF', 'CON_FLOOR', 'CON_FOLLOWPATH', 'CON_PIVOT', 'CON_SHRINKWRAP', 'MODIFIER_DATA', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'MOD_TINT', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_FLUID', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'MOD_PARTICLE_INSTANCE', 'MOD_HUE_SATURATION', 'MOD_NOISE', 'MOD_OFFSET', 'MOD_SIMPLIFY', 'MOD_THICKNESS', 'MOD_INSTANCE', 'MOD_TIME', 'MOD_OPACITY', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_SOUND', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'KEYFRAME_HLT', 'KEYFRAME', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'CURSOR', 'PIVOT_BOUNDBOX', 'PIVOT_CURSOR', 'PIVOT_INDIVIDUAL', 'PIVOT_MEDIAN', 'PIVOT_ACTIVE', 'CENTER_ONLY', 'ROOTCURVE', 'SMOOTHCURVE', 'SPHERECURVE', 'INVERSESQUARECURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'PROP_PROJECTED', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'SNAP_FACE_CENTER', 'SNAP_PERPENDICULAR', 'SNAP_MIDPOINT', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'OBJECT_ORIGIN', 'ORIENTATION_GLOBAL', 'ORIENTATION_GIMBAL', 'ORIENTATION_LOCAL', 'ORIENTATION_NORMAL', 'ORIENTATION_VIEW', 'COPYDOWN', 'PASTEDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'VIS_SEL_11', 'VIS_SEL_10', 'VIS_SEL_01', 'VIS_SEL_00', 'AUTOMERGE_OFF', 'AUTOMERGE_ON', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'TRANSFORM_ORIGINS', 'GIZMO', 'ORIENTATION_CURSOR', 'NORMALS_VERTEX', 'NORMALS_FACE', 'NORMALS_VERTEX_FACE', 'SHADING_BBOX', 'SHADING_WIRE', 'SHADING_SOLID', 'SHADING_RENDERED', 'SHADING_TEXTURE', 'OVERLAY', 'XRAY', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'LAYER_USED', 'LAYER_ACTIVE', 'OUTLINER_OB_HAIR', 'OUTLINER_DATA_HAIR', 'HAIR_DATA', 'OUTLINER_OB_POINTCLOUD', 'OUTLINER_DATA_POINTCLOUD', 'POINTCLOUD_DATA', 'OUTLINER_OB_VOLUME', 'OUTLINER_DATA_VOLUME', 'VOLUME_DATA', 'HOME', 'DOCUMENTS', 'TEMP', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'SHORTDISPLAY', 'LONGDISPLAY', 'IMGDISPLAY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'FOLDER_REDIRECT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'SORT_DESC', 'SORT_ASC', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_ARCHIVE', 'FILE_CACHE', 'FILE_VOLUME', 'FILE_3D', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'MATSHADERBALL', 'MATCLOTH', 'MATFLUID', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'DISC', 'DESKTOP', 'EXTERNAL_DRIVE', 'NETWORK_DRIVE', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'SEQ_STRIP_META', 'SEQ_STRIP_DUPLICATE', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'HANDLE_AUTOCLAMPED', 'HANDLE_AUTO', 'HANDLE_ALIGNED', 'HANDLE_VECTOR', 'HANDLE_FREE', 'VIEW_PERSPECTIVE', 'VIEW_ORTHO', 'VIEW_CAMERA', 'VIEW_PAN', 'VIEW_ZOOM', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'GPBRUSH_SMOOTH', 'GPBRUSH_THICKNESS', 'GPBRUSH_STRENGTH', 'GPBRUSH_GRAB', 'GPBRUSH_PUSH', 'GPBRUSH_TWIST', 'GPBRUSH_PINCH', 'GPBRUSH_RANDOMIZE', 'GPBRUSH_CLONE', 'GPBRUSH_WEIGHT', 'GPBRUSH_PENCIL', 'GPBRUSH_PEN', 'GPBRUSH_INK', 'GPBRUSH_INKNOISE', 'GPBRUSH_BLOCK', 'GPBRUSH_MARKER', 'GPBRUSH_FILL', 'GPBRUSH_AIRBRUSH', 'GPBRUSH_CHISEL', 'GPBRUSH_ERASE_SOFT', 'GPBRUSH_ERASE_HARD', 'GPBRUSH_ERASE_STROKE', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'HANDLETYPE_FREE_VEC', 'HANDLETYPE_ALIGNED_VEC', 'HANDLETYPE_VECTOR_VEC', 'HANDLETYPE_AUTO_VEC', 'HANDLETYPE_AUTO_CLAMP_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC', 'EVENT_A', 'EVENT_B', 'EVENT_C', 'EVENT_D', 'EVENT_E', 'EVENT_F', 'EVENT_G', 'EVENT_H', 'EVENT_I', 'EVENT_J', 'EVENT_K', 'EVENT_L', 'EVENT_M', 'EVENT_N', 'EVENT_O', 'EVENT_P', 'EVENT_Q', 'EVENT_R', 'EVENT_S', 'EVENT_T', 'EVENT_U', 'EVENT_V', 'EVENT_W', 'EVENT_X', 'EVENT_Y', 'EVENT_Z', 'EVENT_SHIFT', 'EVENT_CTRL', 'EVENT_ALT', 'EVENT_OS', 'EVENT_F1', 'EVENT_F2', 'EVENT_F3', 'EVENT_F4', 'EVENT_F5', 'EVENT_F6', 'EVENT_F7', 'EVENT_F8', 'EVENT_F9', 'EVENT_F10', 'EVENT_F11', 'EVENT_F12', 'EVENT_ESC', 'EVENT_TAB', 'EVENT_PAGEUP', 'EVENT_PAGEDOWN', 'EVENT_RETURN', 'EVENT_SPACEKEY'], (optional)
            @emboss (bool): Draw the button itself, not just the icon/text
               (optional)
            @depress (bool): Draw pressed in
               (optional)
            @icon_value (int): Override automatic icon of the item
               in [0, inf], (optional)
            @menu (str): Identifier of the menu
               (never None)
      
            @returns (types.OperatorProperties): Operator properties to fill in
               
         '''
      
         return types.OperatorProperties

      def operator_enum(operator, property):
         '''operator_enum
            Arguments:
            @operator (str): Identifier of the operator
               (never None)
            @property (str): Identifier of property in operator
               (never None)
      
         '''
      
         pass

      def operator_menu_enum(operator, property, text="", text_ctxt="", translate=True, icon='NONE'):
         '''operator_menu_enum
            Arguments:
            @operator (str): Identifier of the operator
               (never None)
            @property (str): Identifier of property in operator
               (never None)
            @text (str): Override automatic text of the item
               (optional)
            @text_ctxt (str): Override automatic translation context of the given text
               (optional)
            @translate (bool): Translate the given text, when UI translation is enabled
               (optional)
            @icon (str): Override automatic icon of the item
               in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_RIGHT', 'DISCLOSURE_TRI_DOWN', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'DUPLICATE', 'TRASH', 'COLLECTION_NEW', 'OPTIONS', 'NODE', 'NODE_SEL', 'WINDOW', 'WORKSPACE', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ADD', 'REMOVE', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'CHECKMARK', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'FCURVE_SNAPSHOT', 'OBJECT_HIDDEN', 'TOPBAR', 'STATUSBAR', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'UNLINKED', 'LINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'DRIVER_DISTANCE', 'DRIVER_ROTATIONAL_DIFFERENCE', 'DRIVER_TRANSFORM', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'FILE_NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'THREE_DOTS', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BRUSHES_ALL', 'LIGHT', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'OUTPUT', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TOOL_SETTINGS', 'SHADERFX', 'MODIFIER', 'BLANK1', 'FAKE_USER_OFF', 'FAKE_USER_ON', 'VIEW3D', 'GRAPH', 'OUTLINER', 'PROPERTIES', 'FILEBROWSER', 'IMAGE', 'INFO', 'SEQUENCE', 'TEXT', 'SOUND', 'ACTION', 'NLA', 'PREFERENCES', 'TIME', 'NODETREE', 'CONSOLE', 'TRACKER', 'ASSET_MANAGER', 'NODE_COMPOSITING', 'NODE_TEXTURE', 'NODE_MATERIAL', 'UV', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'UV_DATA', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'TRACKING', 'TRACKING_BACKWARDS', 'TRACKING_FORWARDS', 'TRACKING_BACKWARDS_SINGLE', 'TRACKING_FORWARDS_SINGLE', 'TRACKING_CLEAR_BACKWARDS', 'TRACKING_CLEAR_FORWARDS', 'TRACKING_REFINE_BACKWARDS', 'TRACKING_REFINE_FORWARDS', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LIGHT_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'COMMUNITY', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'EXPERIMENTAL', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'PRESET', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'LIBRARY_DATA_OVERRIDE', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'FACE_MAPS', 'RNA', 'RNA_ADD', 'MOUSE_LMB', 'MOUSE_MMB', 'MOUSE_RMB', 'MOUSE_MOVE', 'MOUSE_LMB_DRAG', 'MOUSE_MMB_DRAG', 'MOUSE_RMB_DRAG', 'MEMORY', 'PRESET_NEW', 'DECORATE', 'DECORATE_KEYFRAME', 'DECORATE_ANIMATE', 'DECORATE_DRIVER', 'DECORATE_LINKED', 'DECORATE_LIBRARY_OVERRIDE', 'DECORATE_UNLOCKED', 'DECORATE_LOCKED', 'DECORATE_OVERRIDE', 'FUND', 'TRACKER_DATA', 'HEART', 'ORPHAN_DATA', 'USER', 'SYSTEM', 'SETTINGS', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LIGHT', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'OUTLINER_OB_FORCE_FIELD', 'OUTLINER_OB_GROUP_INSTANCE', 'OUTLINER_OB_GREASEPENCIL', 'OUTLINER_OB_LIGHTPROBE', 'OUTLINER_OB_IMAGE', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'HIDE_ON', 'HIDE_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_RENDER_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_INSTANCED_OFF', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LIGHT', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_LIGHTPROBE', 'OUTLINER_DATA_GP_LAYER', 'OUTLINER_DATA_GREASEPENCIL', 'GP_SELECT_POINTS', 'GP_SELECT_STROKES', 'GP_MULTIFRAME_EDITING', 'GP_ONLY_SELECTED', 'GP_SELECT_BETWEEN_STROKES', 'MODIFIER_OFF', 'MODIFIER_ON', 'ONIONSKIN_OFF', 'ONIONSKIN_ON', 'RESTRICT_VIEW_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_INSTANCED_ON', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'EMPTY_SINGLE_ARROW', 'LIGHT_POINT', 'LIGHT_SUN', 'LIGHT_SPOT', 'LIGHT_HEMI', 'LIGHT_AREA', 'CUBE', 'SPHERE', 'CONE', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'EMPTY_AXIS', 'STROKE', 'EMPTY_ARROWS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'LIGHTPROBE_CUBEMAP', 'LIGHTPROBE_PLANAR', 'LIGHTPROBE_GRID', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'RIGID_BODY', 'RIGID_BODY_CONSTRAINT', 'IMAGE_PLANE', 'IMAGE_BACKGROUND', 'IMAGE_REFERENCE', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'NODE_TOP', 'NODE_SIDE', 'NODE_CORNER', 'ANCHOR_TOP', 'ANCHOR_BOTTOM', 'ANCHOR_LEFT', 'ANCHOR_RIGHT', 'ANCHOR_CENTER', 'SELECT_SET', 'SELECT_EXTEND', 'SELECT_SUBTRACT', 'SELECT_INTERSECT', 'SELECT_DIFFERENCE', 'ALIGN_LEFT', 'ALIGN_CENTER', 'ALIGN_RIGHT', 'ALIGN_JUSTIFY', 'ALIGN_FLUSH', 'ALIGN_TOP', 'ALIGN_MIDDLE', 'ALIGN_BOTTOM', 'BOLD', 'ITALIC', 'UNDERLINE', 'SMALL_CAPS', 'CON_ACTION', 'HOLDOUT_OFF', 'HOLDOUT_ON', 'INDIRECT_ONLY_OFF', 'INDIRECT_ONLY_ON', 'CON_CAMERASOLVER', 'CON_FOLLOWTRACK', 'CON_OBJECTSOLVER', 'CON_LOCLIKE', 'CON_ROTLIKE', 'CON_SIZELIKE', 'CON_TRANSLIKE', 'CON_DISTLIMIT', 'CON_LOCLIMIT', 'CON_ROTLIMIT', 'CON_SIZELIMIT', 'CON_SAMEVOL', 'CON_TRANSFORM', 'CON_TRANSFORM_CACHE', 'CON_CLAMPTO', 'CON_KINEMATIC', 'CON_LOCKTRACK', 'CON_SPLINEIK', 'CON_STRETCHTO', 'CON_TRACKTO', 'CON_ARMATURE', 'CON_CHILDOF', 'CON_FLOOR', 'CON_FOLLOWPATH', 'CON_PIVOT', 'CON_SHRINKWRAP', 'MODIFIER_DATA', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'MOD_TINT', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_FLUID', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'MOD_PARTICLE_INSTANCE', 'MOD_HUE_SATURATION', 'MOD_NOISE', 'MOD_OFFSET', 'MOD_SIMPLIFY', 'MOD_THICKNESS', 'MOD_INSTANCE', 'MOD_TIME', 'MOD_OPACITY', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_SOUND', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'KEYFRAME_HLT', 'KEYFRAME', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'CURSOR', 'PIVOT_BOUNDBOX', 'PIVOT_CURSOR', 'PIVOT_INDIVIDUAL', 'PIVOT_MEDIAN', 'PIVOT_ACTIVE', 'CENTER_ONLY', 'ROOTCURVE', 'SMOOTHCURVE', 'SPHERECURVE', 'INVERSESQUARECURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'PROP_PROJECTED', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'SNAP_FACE_CENTER', 'SNAP_PERPENDICULAR', 'SNAP_MIDPOINT', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'OBJECT_ORIGIN', 'ORIENTATION_GLOBAL', 'ORIENTATION_GIMBAL', 'ORIENTATION_LOCAL', 'ORIENTATION_NORMAL', 'ORIENTATION_VIEW', 'COPYDOWN', 'PASTEDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'VIS_SEL_11', 'VIS_SEL_10', 'VIS_SEL_01', 'VIS_SEL_00', 'AUTOMERGE_OFF', 'AUTOMERGE_ON', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'TRANSFORM_ORIGINS', 'GIZMO', 'ORIENTATION_CURSOR', 'NORMALS_VERTEX', 'NORMALS_FACE', 'NORMALS_VERTEX_FACE', 'SHADING_BBOX', 'SHADING_WIRE', 'SHADING_SOLID', 'SHADING_RENDERED', 'SHADING_TEXTURE', 'OVERLAY', 'XRAY', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'LAYER_USED', 'LAYER_ACTIVE', 'OUTLINER_OB_HAIR', 'OUTLINER_DATA_HAIR', 'HAIR_DATA', 'OUTLINER_OB_POINTCLOUD', 'OUTLINER_DATA_POINTCLOUD', 'POINTCLOUD_DATA', 'OUTLINER_OB_VOLUME', 'OUTLINER_DATA_VOLUME', 'VOLUME_DATA', 'HOME', 'DOCUMENTS', 'TEMP', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'SHORTDISPLAY', 'LONGDISPLAY', 'IMGDISPLAY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'FOLDER_REDIRECT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'SORT_DESC', 'SORT_ASC', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_ARCHIVE', 'FILE_CACHE', 'FILE_VOLUME', 'FILE_3D', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'MATSHADERBALL', 'MATCLOTH', 'MATFLUID', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'DISC', 'DESKTOP', 'EXTERNAL_DRIVE', 'NETWORK_DRIVE', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'SEQ_STRIP_META', 'SEQ_STRIP_DUPLICATE', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'HANDLE_AUTOCLAMPED', 'HANDLE_AUTO', 'HANDLE_ALIGNED', 'HANDLE_VECTOR', 'HANDLE_FREE', 'VIEW_PERSPECTIVE', 'VIEW_ORTHO', 'VIEW_CAMERA', 'VIEW_PAN', 'VIEW_ZOOM', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'GPBRUSH_SMOOTH', 'GPBRUSH_THICKNESS', 'GPBRUSH_STRENGTH', 'GPBRUSH_GRAB', 'GPBRUSH_PUSH', 'GPBRUSH_TWIST', 'GPBRUSH_PINCH', 'GPBRUSH_RANDOMIZE', 'GPBRUSH_CLONE', 'GPBRUSH_WEIGHT', 'GPBRUSH_PENCIL', 'GPBRUSH_PEN', 'GPBRUSH_INK', 'GPBRUSH_INKNOISE', 'GPBRUSH_BLOCK', 'GPBRUSH_MARKER', 'GPBRUSH_FILL', 'GPBRUSH_AIRBRUSH', 'GPBRUSH_CHISEL', 'GPBRUSH_ERASE_SOFT', 'GPBRUSH_ERASE_HARD', 'GPBRUSH_ERASE_STROKE', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'HANDLETYPE_FREE_VEC', 'HANDLETYPE_ALIGNED_VEC', 'HANDLETYPE_VECTOR_VEC', 'HANDLETYPE_AUTO_VEC', 'HANDLETYPE_AUTO_CLAMP_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC', 'EVENT_A', 'EVENT_B', 'EVENT_C', 'EVENT_D', 'EVENT_E', 'EVENT_F', 'EVENT_G', 'EVENT_H', 'EVENT_I', 'EVENT_J', 'EVENT_K', 'EVENT_L', 'EVENT_M', 'EVENT_N', 'EVENT_O', 'EVENT_P', 'EVENT_Q', 'EVENT_R', 'EVENT_S', 'EVENT_T', 'EVENT_U', 'EVENT_V', 'EVENT_W', 'EVENT_X', 'EVENT_Y', 'EVENT_Z', 'EVENT_SHIFT', 'EVENT_CTRL', 'EVENT_ALT', 'EVENT_OS', 'EVENT_F1', 'EVENT_F2', 'EVENT_F3', 'EVENT_F4', 'EVENT_F5', 'EVENT_F6', 'EVENT_F7', 'EVENT_F8', 'EVENT_F9', 'EVENT_F10', 'EVENT_F11', 'EVENT_F12', 'EVENT_ESC', 'EVENT_TAB', 'EVENT_PAGEUP', 'EVENT_PAGEDOWN', 'EVENT_RETURN', 'EVENT_SPACEKEY'], (optional)
      
         '''
      
         pass

      def label(text="", text_ctxt="", translate=True, icon='NONE', icon_value=0):
         '''Item. Displays text and/or icon in the layout
            Arguments:
            @text (str): Override automatic text of the item
               (optional)
            @text_ctxt (str): Override automatic translation context of the given text
               (optional)
            @translate (bool): Translate the given text, when UI translation is enabled
               (optional)
            @icon (str): Override automatic icon of the item
               in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_RIGHT', 'DISCLOSURE_TRI_DOWN', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'DUPLICATE', 'TRASH', 'COLLECTION_NEW', 'OPTIONS', 'NODE', 'NODE_SEL', 'WINDOW', 'WORKSPACE', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ADD', 'REMOVE', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'CHECKMARK', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'FCURVE_SNAPSHOT', 'OBJECT_HIDDEN', 'TOPBAR', 'STATUSBAR', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'UNLINKED', 'LINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'DRIVER_DISTANCE', 'DRIVER_ROTATIONAL_DIFFERENCE', 'DRIVER_TRANSFORM', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'FILE_NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'THREE_DOTS', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BRUSHES_ALL', 'LIGHT', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'OUTPUT', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TOOL_SETTINGS', 'SHADERFX', 'MODIFIER', 'BLANK1', 'FAKE_USER_OFF', 'FAKE_USER_ON', 'VIEW3D', 'GRAPH', 'OUTLINER', 'PROPERTIES', 'FILEBROWSER', 'IMAGE', 'INFO', 'SEQUENCE', 'TEXT', 'SOUND', 'ACTION', 'NLA', 'PREFERENCES', 'TIME', 'NODETREE', 'CONSOLE', 'TRACKER', 'ASSET_MANAGER', 'NODE_COMPOSITING', 'NODE_TEXTURE', 'NODE_MATERIAL', 'UV', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'UV_DATA', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'TRACKING', 'TRACKING_BACKWARDS', 'TRACKING_FORWARDS', 'TRACKING_BACKWARDS_SINGLE', 'TRACKING_FORWARDS_SINGLE', 'TRACKING_CLEAR_BACKWARDS', 'TRACKING_CLEAR_FORWARDS', 'TRACKING_REFINE_BACKWARDS', 'TRACKING_REFINE_FORWARDS', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LIGHT_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'COMMUNITY', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'EXPERIMENTAL', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'PRESET', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'LIBRARY_DATA_OVERRIDE', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'FACE_MAPS', 'RNA', 'RNA_ADD', 'MOUSE_LMB', 'MOUSE_MMB', 'MOUSE_RMB', 'MOUSE_MOVE', 'MOUSE_LMB_DRAG', 'MOUSE_MMB_DRAG', 'MOUSE_RMB_DRAG', 'MEMORY', 'PRESET_NEW', 'DECORATE', 'DECORATE_KEYFRAME', 'DECORATE_ANIMATE', 'DECORATE_DRIVER', 'DECORATE_LINKED', 'DECORATE_LIBRARY_OVERRIDE', 'DECORATE_UNLOCKED', 'DECORATE_LOCKED', 'DECORATE_OVERRIDE', 'FUND', 'TRACKER_DATA', 'HEART', 'ORPHAN_DATA', 'USER', 'SYSTEM', 'SETTINGS', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LIGHT', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'OUTLINER_OB_FORCE_FIELD', 'OUTLINER_OB_GROUP_INSTANCE', 'OUTLINER_OB_GREASEPENCIL', 'OUTLINER_OB_LIGHTPROBE', 'OUTLINER_OB_IMAGE', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'HIDE_ON', 'HIDE_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_RENDER_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_INSTANCED_OFF', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LIGHT', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_LIGHTPROBE', 'OUTLINER_DATA_GP_LAYER', 'OUTLINER_DATA_GREASEPENCIL', 'GP_SELECT_POINTS', 'GP_SELECT_STROKES', 'GP_MULTIFRAME_EDITING', 'GP_ONLY_SELECTED', 'GP_SELECT_BETWEEN_STROKES', 'MODIFIER_OFF', 'MODIFIER_ON', 'ONIONSKIN_OFF', 'ONIONSKIN_ON', 'RESTRICT_VIEW_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_INSTANCED_ON', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'EMPTY_SINGLE_ARROW', 'LIGHT_POINT', 'LIGHT_SUN', 'LIGHT_SPOT', 'LIGHT_HEMI', 'LIGHT_AREA', 'CUBE', 'SPHERE', 'CONE', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'EMPTY_AXIS', 'STROKE', 'EMPTY_ARROWS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'LIGHTPROBE_CUBEMAP', 'LIGHTPROBE_PLANAR', 'LIGHTPROBE_GRID', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'RIGID_BODY', 'RIGID_BODY_CONSTRAINT', 'IMAGE_PLANE', 'IMAGE_BACKGROUND', 'IMAGE_REFERENCE', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'NODE_TOP', 'NODE_SIDE', 'NODE_CORNER', 'ANCHOR_TOP', 'ANCHOR_BOTTOM', 'ANCHOR_LEFT', 'ANCHOR_RIGHT', 'ANCHOR_CENTER', 'SELECT_SET', 'SELECT_EXTEND', 'SELECT_SUBTRACT', 'SELECT_INTERSECT', 'SELECT_DIFFERENCE', 'ALIGN_LEFT', 'ALIGN_CENTER', 'ALIGN_RIGHT', 'ALIGN_JUSTIFY', 'ALIGN_FLUSH', 'ALIGN_TOP', 'ALIGN_MIDDLE', 'ALIGN_BOTTOM', 'BOLD', 'ITALIC', 'UNDERLINE', 'SMALL_CAPS', 'CON_ACTION', 'HOLDOUT_OFF', 'HOLDOUT_ON', 'INDIRECT_ONLY_OFF', 'INDIRECT_ONLY_ON', 'CON_CAMERASOLVER', 'CON_FOLLOWTRACK', 'CON_OBJECTSOLVER', 'CON_LOCLIKE', 'CON_ROTLIKE', 'CON_SIZELIKE', 'CON_TRANSLIKE', 'CON_DISTLIMIT', 'CON_LOCLIMIT', 'CON_ROTLIMIT', 'CON_SIZELIMIT', 'CON_SAMEVOL', 'CON_TRANSFORM', 'CON_TRANSFORM_CACHE', 'CON_CLAMPTO', 'CON_KINEMATIC', 'CON_LOCKTRACK', 'CON_SPLINEIK', 'CON_STRETCHTO', 'CON_TRACKTO', 'CON_ARMATURE', 'CON_CHILDOF', 'CON_FLOOR', 'CON_FOLLOWPATH', 'CON_PIVOT', 'CON_SHRINKWRAP', 'MODIFIER_DATA', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'MOD_TINT', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_FLUID', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'MOD_PARTICLE_INSTANCE', 'MOD_HUE_SATURATION', 'MOD_NOISE', 'MOD_OFFSET', 'MOD_SIMPLIFY', 'MOD_THICKNESS', 'MOD_INSTANCE', 'MOD_TIME', 'MOD_OPACITY', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_SOUND', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'KEYFRAME_HLT', 'KEYFRAME', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'CURSOR', 'PIVOT_BOUNDBOX', 'PIVOT_CURSOR', 'PIVOT_INDIVIDUAL', 'PIVOT_MEDIAN', 'PIVOT_ACTIVE', 'CENTER_ONLY', 'ROOTCURVE', 'SMOOTHCURVE', 'SPHERECURVE', 'INVERSESQUARECURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'PROP_PROJECTED', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'SNAP_FACE_CENTER', 'SNAP_PERPENDICULAR', 'SNAP_MIDPOINT', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'OBJECT_ORIGIN', 'ORIENTATION_GLOBAL', 'ORIENTATION_GIMBAL', 'ORIENTATION_LOCAL', 'ORIENTATION_NORMAL', 'ORIENTATION_VIEW', 'COPYDOWN', 'PASTEDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'VIS_SEL_11', 'VIS_SEL_10', 'VIS_SEL_01', 'VIS_SEL_00', 'AUTOMERGE_OFF', 'AUTOMERGE_ON', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'TRANSFORM_ORIGINS', 'GIZMO', 'ORIENTATION_CURSOR', 'NORMALS_VERTEX', 'NORMALS_FACE', 'NORMALS_VERTEX_FACE', 'SHADING_BBOX', 'SHADING_WIRE', 'SHADING_SOLID', 'SHADING_RENDERED', 'SHADING_TEXTURE', 'OVERLAY', 'XRAY', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'LAYER_USED', 'LAYER_ACTIVE', 'OUTLINER_OB_HAIR', 'OUTLINER_DATA_HAIR', 'HAIR_DATA', 'OUTLINER_OB_POINTCLOUD', 'OUTLINER_DATA_POINTCLOUD', 'POINTCLOUD_DATA', 'OUTLINER_OB_VOLUME', 'OUTLINER_DATA_VOLUME', 'VOLUME_DATA', 'HOME', 'DOCUMENTS', 'TEMP', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'SHORTDISPLAY', 'LONGDISPLAY', 'IMGDISPLAY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'FOLDER_REDIRECT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'SORT_DESC', 'SORT_ASC', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_ARCHIVE', 'FILE_CACHE', 'FILE_VOLUME', 'FILE_3D', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'MATSHADERBALL', 'MATCLOTH', 'MATFLUID', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'DISC', 'DESKTOP', 'EXTERNAL_DRIVE', 'NETWORK_DRIVE', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'SEQ_STRIP_META', 'SEQ_STRIP_DUPLICATE', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'HANDLE_AUTOCLAMPED', 'HANDLE_AUTO', 'HANDLE_ALIGNED', 'HANDLE_VECTOR', 'HANDLE_FREE', 'VIEW_PERSPECTIVE', 'VIEW_ORTHO', 'VIEW_CAMERA', 'VIEW_PAN', 'VIEW_ZOOM', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'GPBRUSH_SMOOTH', 'GPBRUSH_THICKNESS', 'GPBRUSH_STRENGTH', 'GPBRUSH_GRAB', 'GPBRUSH_PUSH', 'GPBRUSH_TWIST', 'GPBRUSH_PINCH', 'GPBRUSH_RANDOMIZE', 'GPBRUSH_CLONE', 'GPBRUSH_WEIGHT', 'GPBRUSH_PENCIL', 'GPBRUSH_PEN', 'GPBRUSH_INK', 'GPBRUSH_INKNOISE', 'GPBRUSH_BLOCK', 'GPBRUSH_MARKER', 'GPBRUSH_FILL', 'GPBRUSH_AIRBRUSH', 'GPBRUSH_CHISEL', 'GPBRUSH_ERASE_SOFT', 'GPBRUSH_ERASE_HARD', 'GPBRUSH_ERASE_STROKE', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'HANDLETYPE_FREE_VEC', 'HANDLETYPE_ALIGNED_VEC', 'HANDLETYPE_VECTOR_VEC', 'HANDLETYPE_AUTO_VEC', 'HANDLETYPE_AUTO_CLAMP_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC', 'EVENT_A', 'EVENT_B', 'EVENT_C', 'EVENT_D', 'EVENT_E', 'EVENT_F', 'EVENT_G', 'EVENT_H', 'EVENT_I', 'EVENT_J', 'EVENT_K', 'EVENT_L', 'EVENT_M', 'EVENT_N', 'EVENT_O', 'EVENT_P', 'EVENT_Q', 'EVENT_R', 'EVENT_S', 'EVENT_T', 'EVENT_U', 'EVENT_V', 'EVENT_W', 'EVENT_X', 'EVENT_Y', 'EVENT_Z', 'EVENT_SHIFT', 'EVENT_CTRL', 'EVENT_ALT', 'EVENT_OS', 'EVENT_F1', 'EVENT_F2', 'EVENT_F3', 'EVENT_F4', 'EVENT_F5', 'EVENT_F6', 'EVENT_F7', 'EVENT_F8', 'EVENT_F9', 'EVENT_F10', 'EVENT_F11', 'EVENT_F12', 'EVENT_ESC', 'EVENT_TAB', 'EVENT_PAGEUP', 'EVENT_PAGEDOWN', 'EVENT_RETURN', 'EVENT_SPACEKEY'], (optional)
            @icon_value (int): Override automatic icon of the item
               in [0, inf], (optional)
      
         '''
      
         pass

      def menu(menu, text="", text_ctxt="", translate=True, icon='NONE', icon_value=0):
         '''menu
            Arguments:
            @menu (str): Identifier of the menu
               (never None)
            @text (str): Override automatic text of the item
               (optional)
            @text_ctxt (str): Override automatic translation context of the given text
               (optional)
            @translate (bool): Translate the given text, when UI translation is enabled
               (optional)
            @icon (str): Override automatic icon of the item
               in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_RIGHT', 'DISCLOSURE_TRI_DOWN', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'DUPLICATE', 'TRASH', 'COLLECTION_NEW', 'OPTIONS', 'NODE', 'NODE_SEL', 'WINDOW', 'WORKSPACE', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ADD', 'REMOVE', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'CHECKMARK', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'FCURVE_SNAPSHOT', 'OBJECT_HIDDEN', 'TOPBAR', 'STATUSBAR', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'UNLINKED', 'LINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'DRIVER_DISTANCE', 'DRIVER_ROTATIONAL_DIFFERENCE', 'DRIVER_TRANSFORM', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'FILE_NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'THREE_DOTS', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BRUSHES_ALL', 'LIGHT', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'OUTPUT', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TOOL_SETTINGS', 'SHADERFX', 'MODIFIER', 'BLANK1', 'FAKE_USER_OFF', 'FAKE_USER_ON', 'VIEW3D', 'GRAPH', 'OUTLINER', 'PROPERTIES', 'FILEBROWSER', 'IMAGE', 'INFO', 'SEQUENCE', 'TEXT', 'SOUND', 'ACTION', 'NLA', 'PREFERENCES', 'TIME', 'NODETREE', 'CONSOLE', 'TRACKER', 'ASSET_MANAGER', 'NODE_COMPOSITING', 'NODE_TEXTURE', 'NODE_MATERIAL', 'UV', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'UV_DATA', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'TRACKING', 'TRACKING_BACKWARDS', 'TRACKING_FORWARDS', 'TRACKING_BACKWARDS_SINGLE', 'TRACKING_FORWARDS_SINGLE', 'TRACKING_CLEAR_BACKWARDS', 'TRACKING_CLEAR_FORWARDS', 'TRACKING_REFINE_BACKWARDS', 'TRACKING_REFINE_FORWARDS', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LIGHT_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'COMMUNITY', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'EXPERIMENTAL', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'PRESET', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'LIBRARY_DATA_OVERRIDE', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'FACE_MAPS', 'RNA', 'RNA_ADD', 'MOUSE_LMB', 'MOUSE_MMB', 'MOUSE_RMB', 'MOUSE_MOVE', 'MOUSE_LMB_DRAG', 'MOUSE_MMB_DRAG', 'MOUSE_RMB_DRAG', 'MEMORY', 'PRESET_NEW', 'DECORATE', 'DECORATE_KEYFRAME', 'DECORATE_ANIMATE', 'DECORATE_DRIVER', 'DECORATE_LINKED', 'DECORATE_LIBRARY_OVERRIDE', 'DECORATE_UNLOCKED', 'DECORATE_LOCKED', 'DECORATE_OVERRIDE', 'FUND', 'TRACKER_DATA', 'HEART', 'ORPHAN_DATA', 'USER', 'SYSTEM', 'SETTINGS', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LIGHT', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'OUTLINER_OB_FORCE_FIELD', 'OUTLINER_OB_GROUP_INSTANCE', 'OUTLINER_OB_GREASEPENCIL', 'OUTLINER_OB_LIGHTPROBE', 'OUTLINER_OB_IMAGE', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'HIDE_ON', 'HIDE_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_RENDER_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_INSTANCED_OFF', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LIGHT', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_LIGHTPROBE', 'OUTLINER_DATA_GP_LAYER', 'OUTLINER_DATA_GREASEPENCIL', 'GP_SELECT_POINTS', 'GP_SELECT_STROKES', 'GP_MULTIFRAME_EDITING', 'GP_ONLY_SELECTED', 'GP_SELECT_BETWEEN_STROKES', 'MODIFIER_OFF', 'MODIFIER_ON', 'ONIONSKIN_OFF', 'ONIONSKIN_ON', 'RESTRICT_VIEW_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_INSTANCED_ON', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'EMPTY_SINGLE_ARROW', 'LIGHT_POINT', 'LIGHT_SUN', 'LIGHT_SPOT', 'LIGHT_HEMI', 'LIGHT_AREA', 'CUBE', 'SPHERE', 'CONE', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'EMPTY_AXIS', 'STROKE', 'EMPTY_ARROWS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'LIGHTPROBE_CUBEMAP', 'LIGHTPROBE_PLANAR', 'LIGHTPROBE_GRID', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'RIGID_BODY', 'RIGID_BODY_CONSTRAINT', 'IMAGE_PLANE', 'IMAGE_BACKGROUND', 'IMAGE_REFERENCE', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'NODE_TOP', 'NODE_SIDE', 'NODE_CORNER', 'ANCHOR_TOP', 'ANCHOR_BOTTOM', 'ANCHOR_LEFT', 'ANCHOR_RIGHT', 'ANCHOR_CENTER', 'SELECT_SET', 'SELECT_EXTEND', 'SELECT_SUBTRACT', 'SELECT_INTERSECT', 'SELECT_DIFFERENCE', 'ALIGN_LEFT', 'ALIGN_CENTER', 'ALIGN_RIGHT', 'ALIGN_JUSTIFY', 'ALIGN_FLUSH', 'ALIGN_TOP', 'ALIGN_MIDDLE', 'ALIGN_BOTTOM', 'BOLD', 'ITALIC', 'UNDERLINE', 'SMALL_CAPS', 'CON_ACTION', 'HOLDOUT_OFF', 'HOLDOUT_ON', 'INDIRECT_ONLY_OFF', 'INDIRECT_ONLY_ON', 'CON_CAMERASOLVER', 'CON_FOLLOWTRACK', 'CON_OBJECTSOLVER', 'CON_LOCLIKE', 'CON_ROTLIKE', 'CON_SIZELIKE', 'CON_TRANSLIKE', 'CON_DISTLIMIT', 'CON_LOCLIMIT', 'CON_ROTLIMIT', 'CON_SIZELIMIT', 'CON_SAMEVOL', 'CON_TRANSFORM', 'CON_TRANSFORM_CACHE', 'CON_CLAMPTO', 'CON_KINEMATIC', 'CON_LOCKTRACK', 'CON_SPLINEIK', 'CON_STRETCHTO', 'CON_TRACKTO', 'CON_ARMATURE', 'CON_CHILDOF', 'CON_FLOOR', 'CON_FOLLOWPATH', 'CON_PIVOT', 'CON_SHRINKWRAP', 'MODIFIER_DATA', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'MOD_TINT', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_FLUID', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'MOD_PARTICLE_INSTANCE', 'MOD_HUE_SATURATION', 'MOD_NOISE', 'MOD_OFFSET', 'MOD_SIMPLIFY', 'MOD_THICKNESS', 'MOD_INSTANCE', 'MOD_TIME', 'MOD_OPACITY', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_SOUND', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'KEYFRAME_HLT', 'KEYFRAME', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'CURSOR', 'PIVOT_BOUNDBOX', 'PIVOT_CURSOR', 'PIVOT_INDIVIDUAL', 'PIVOT_MEDIAN', 'PIVOT_ACTIVE', 'CENTER_ONLY', 'ROOTCURVE', 'SMOOTHCURVE', 'SPHERECURVE', 'INVERSESQUARECURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'PROP_PROJECTED', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'SNAP_FACE_CENTER', 'SNAP_PERPENDICULAR', 'SNAP_MIDPOINT', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'OBJECT_ORIGIN', 'ORIENTATION_GLOBAL', 'ORIENTATION_GIMBAL', 'ORIENTATION_LOCAL', 'ORIENTATION_NORMAL', 'ORIENTATION_VIEW', 'COPYDOWN', 'PASTEDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'VIS_SEL_11', 'VIS_SEL_10', 'VIS_SEL_01', 'VIS_SEL_00', 'AUTOMERGE_OFF', 'AUTOMERGE_ON', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'TRANSFORM_ORIGINS', 'GIZMO', 'ORIENTATION_CURSOR', 'NORMALS_VERTEX', 'NORMALS_FACE', 'NORMALS_VERTEX_FACE', 'SHADING_BBOX', 'SHADING_WIRE', 'SHADING_SOLID', 'SHADING_RENDERED', 'SHADING_TEXTURE', 'OVERLAY', 'XRAY', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'LAYER_USED', 'LAYER_ACTIVE', 'OUTLINER_OB_HAIR', 'OUTLINER_DATA_HAIR', 'HAIR_DATA', 'OUTLINER_OB_POINTCLOUD', 'OUTLINER_DATA_POINTCLOUD', 'POINTCLOUD_DATA', 'OUTLINER_OB_VOLUME', 'OUTLINER_DATA_VOLUME', 'VOLUME_DATA', 'HOME', 'DOCUMENTS', 'TEMP', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'SHORTDISPLAY', 'LONGDISPLAY', 'IMGDISPLAY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'FOLDER_REDIRECT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'SORT_DESC', 'SORT_ASC', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_ARCHIVE', 'FILE_CACHE', 'FILE_VOLUME', 'FILE_3D', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'MATSHADERBALL', 'MATCLOTH', 'MATFLUID', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'DISC', 'DESKTOP', 'EXTERNAL_DRIVE', 'NETWORK_DRIVE', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'SEQ_STRIP_META', 'SEQ_STRIP_DUPLICATE', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'HANDLE_AUTOCLAMPED', 'HANDLE_AUTO', 'HANDLE_ALIGNED', 'HANDLE_VECTOR', 'HANDLE_FREE', 'VIEW_PERSPECTIVE', 'VIEW_ORTHO', 'VIEW_CAMERA', 'VIEW_PAN', 'VIEW_ZOOM', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'GPBRUSH_SMOOTH', 'GPBRUSH_THICKNESS', 'GPBRUSH_STRENGTH', 'GPBRUSH_GRAB', 'GPBRUSH_PUSH', 'GPBRUSH_TWIST', 'GPBRUSH_PINCH', 'GPBRUSH_RANDOMIZE', 'GPBRUSH_CLONE', 'GPBRUSH_WEIGHT', 'GPBRUSH_PENCIL', 'GPBRUSH_PEN', 'GPBRUSH_INK', 'GPBRUSH_INKNOISE', 'GPBRUSH_BLOCK', 'GPBRUSH_MARKER', 'GPBRUSH_FILL', 'GPBRUSH_AIRBRUSH', 'GPBRUSH_CHISEL', 'GPBRUSH_ERASE_SOFT', 'GPBRUSH_ERASE_HARD', 'GPBRUSH_ERASE_STROKE', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'HANDLETYPE_FREE_VEC', 'HANDLETYPE_ALIGNED_VEC', 'HANDLETYPE_VECTOR_VEC', 'HANDLETYPE_AUTO_VEC', 'HANDLETYPE_AUTO_CLAMP_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC', 'EVENT_A', 'EVENT_B', 'EVENT_C', 'EVENT_D', 'EVENT_E', 'EVENT_F', 'EVENT_G', 'EVENT_H', 'EVENT_I', 'EVENT_J', 'EVENT_K', 'EVENT_L', 'EVENT_M', 'EVENT_N', 'EVENT_O', 'EVENT_P', 'EVENT_Q', 'EVENT_R', 'EVENT_S', 'EVENT_T', 'EVENT_U', 'EVENT_V', 'EVENT_W', 'EVENT_X', 'EVENT_Y', 'EVENT_Z', 'EVENT_SHIFT', 'EVENT_CTRL', 'EVENT_ALT', 'EVENT_OS', 'EVENT_F1', 'EVENT_F2', 'EVENT_F3', 'EVENT_F4', 'EVENT_F5', 'EVENT_F6', 'EVENT_F7', 'EVENT_F8', 'EVENT_F9', 'EVENT_F10', 'EVENT_F11', 'EVENT_F12', 'EVENT_ESC', 'EVENT_TAB', 'EVENT_PAGEUP', 'EVENT_PAGEDOWN', 'EVENT_RETURN', 'EVENT_SPACEKEY'], (optional)
            @icon_value (int): Override automatic icon of the item
               in [0, inf], (optional)
      
         '''
      
         pass

      def menu_contents(menu):
         '''menu_contents
            Arguments:
            @menu (str): Identifier of the menu
               (never None)
      
         '''
      
         pass

      def popover(panel, text="", text_ctxt="", translate=True, icon='NONE', icon_value=0):
         '''popover
            Arguments:
            @panel (str): Identifier of the panel
               (never None)
            @text (str): Override automatic text of the item
               (optional)
            @text_ctxt (str): Override automatic translation context of the given text
               (optional)
            @translate (bool): Translate the given text, when UI translation is enabled
               (optional)
            @icon (str): Override automatic icon of the item
               in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_RIGHT', 'DISCLOSURE_TRI_DOWN', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'DUPLICATE', 'TRASH', 'COLLECTION_NEW', 'OPTIONS', 'NODE', 'NODE_SEL', 'WINDOW', 'WORKSPACE', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ADD', 'REMOVE', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'CHECKMARK', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'FCURVE_SNAPSHOT', 'OBJECT_HIDDEN', 'TOPBAR', 'STATUSBAR', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'UNLINKED', 'LINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'DRIVER_DISTANCE', 'DRIVER_ROTATIONAL_DIFFERENCE', 'DRIVER_TRANSFORM', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'FILE_NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'THREE_DOTS', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BRUSHES_ALL', 'LIGHT', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'OUTPUT', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TOOL_SETTINGS', 'SHADERFX', 'MODIFIER', 'BLANK1', 'FAKE_USER_OFF', 'FAKE_USER_ON', 'VIEW3D', 'GRAPH', 'OUTLINER', 'PROPERTIES', 'FILEBROWSER', 'IMAGE', 'INFO', 'SEQUENCE', 'TEXT', 'SOUND', 'ACTION', 'NLA', 'PREFERENCES', 'TIME', 'NODETREE', 'CONSOLE', 'TRACKER', 'ASSET_MANAGER', 'NODE_COMPOSITING', 'NODE_TEXTURE', 'NODE_MATERIAL', 'UV', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'UV_DATA', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'TRACKING', 'TRACKING_BACKWARDS', 'TRACKING_FORWARDS', 'TRACKING_BACKWARDS_SINGLE', 'TRACKING_FORWARDS_SINGLE', 'TRACKING_CLEAR_BACKWARDS', 'TRACKING_CLEAR_FORWARDS', 'TRACKING_REFINE_BACKWARDS', 'TRACKING_REFINE_FORWARDS', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LIGHT_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'COMMUNITY', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'EXPERIMENTAL', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'PRESET', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'LIBRARY_DATA_OVERRIDE', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'FACE_MAPS', 'RNA', 'RNA_ADD', 'MOUSE_LMB', 'MOUSE_MMB', 'MOUSE_RMB', 'MOUSE_MOVE', 'MOUSE_LMB_DRAG', 'MOUSE_MMB_DRAG', 'MOUSE_RMB_DRAG', 'MEMORY', 'PRESET_NEW', 'DECORATE', 'DECORATE_KEYFRAME', 'DECORATE_ANIMATE', 'DECORATE_DRIVER', 'DECORATE_LINKED', 'DECORATE_LIBRARY_OVERRIDE', 'DECORATE_UNLOCKED', 'DECORATE_LOCKED', 'DECORATE_OVERRIDE', 'FUND', 'TRACKER_DATA', 'HEART', 'ORPHAN_DATA', 'USER', 'SYSTEM', 'SETTINGS', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LIGHT', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'OUTLINER_OB_FORCE_FIELD', 'OUTLINER_OB_GROUP_INSTANCE', 'OUTLINER_OB_GREASEPENCIL', 'OUTLINER_OB_LIGHTPROBE', 'OUTLINER_OB_IMAGE', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'HIDE_ON', 'HIDE_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_RENDER_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_INSTANCED_OFF', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LIGHT', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_LIGHTPROBE', 'OUTLINER_DATA_GP_LAYER', 'OUTLINER_DATA_GREASEPENCIL', 'GP_SELECT_POINTS', 'GP_SELECT_STROKES', 'GP_MULTIFRAME_EDITING', 'GP_ONLY_SELECTED', 'GP_SELECT_BETWEEN_STROKES', 'MODIFIER_OFF', 'MODIFIER_ON', 'ONIONSKIN_OFF', 'ONIONSKIN_ON', 'RESTRICT_VIEW_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_INSTANCED_ON', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'EMPTY_SINGLE_ARROW', 'LIGHT_POINT', 'LIGHT_SUN', 'LIGHT_SPOT', 'LIGHT_HEMI', 'LIGHT_AREA', 'CUBE', 'SPHERE', 'CONE', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'EMPTY_AXIS', 'STROKE', 'EMPTY_ARROWS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'LIGHTPROBE_CUBEMAP', 'LIGHTPROBE_PLANAR', 'LIGHTPROBE_GRID', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'RIGID_BODY', 'RIGID_BODY_CONSTRAINT', 'IMAGE_PLANE', 'IMAGE_BACKGROUND', 'IMAGE_REFERENCE', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'NODE_TOP', 'NODE_SIDE', 'NODE_CORNER', 'ANCHOR_TOP', 'ANCHOR_BOTTOM', 'ANCHOR_LEFT', 'ANCHOR_RIGHT', 'ANCHOR_CENTER', 'SELECT_SET', 'SELECT_EXTEND', 'SELECT_SUBTRACT', 'SELECT_INTERSECT', 'SELECT_DIFFERENCE', 'ALIGN_LEFT', 'ALIGN_CENTER', 'ALIGN_RIGHT', 'ALIGN_JUSTIFY', 'ALIGN_FLUSH', 'ALIGN_TOP', 'ALIGN_MIDDLE', 'ALIGN_BOTTOM', 'BOLD', 'ITALIC', 'UNDERLINE', 'SMALL_CAPS', 'CON_ACTION', 'HOLDOUT_OFF', 'HOLDOUT_ON', 'INDIRECT_ONLY_OFF', 'INDIRECT_ONLY_ON', 'CON_CAMERASOLVER', 'CON_FOLLOWTRACK', 'CON_OBJECTSOLVER', 'CON_LOCLIKE', 'CON_ROTLIKE', 'CON_SIZELIKE', 'CON_TRANSLIKE', 'CON_DISTLIMIT', 'CON_LOCLIMIT', 'CON_ROTLIMIT', 'CON_SIZELIMIT', 'CON_SAMEVOL', 'CON_TRANSFORM', 'CON_TRANSFORM_CACHE', 'CON_CLAMPTO', 'CON_KINEMATIC', 'CON_LOCKTRACK', 'CON_SPLINEIK', 'CON_STRETCHTO', 'CON_TRACKTO', 'CON_ARMATURE', 'CON_CHILDOF', 'CON_FLOOR', 'CON_FOLLOWPATH', 'CON_PIVOT', 'CON_SHRINKWRAP', 'MODIFIER_DATA', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'MOD_TINT', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_FLUID', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'MOD_PARTICLE_INSTANCE', 'MOD_HUE_SATURATION', 'MOD_NOISE', 'MOD_OFFSET', 'MOD_SIMPLIFY', 'MOD_THICKNESS', 'MOD_INSTANCE', 'MOD_TIME', 'MOD_OPACITY', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_SOUND', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'KEYFRAME_HLT', 'KEYFRAME', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'CURSOR', 'PIVOT_BOUNDBOX', 'PIVOT_CURSOR', 'PIVOT_INDIVIDUAL', 'PIVOT_MEDIAN', 'PIVOT_ACTIVE', 'CENTER_ONLY', 'ROOTCURVE', 'SMOOTHCURVE', 'SPHERECURVE', 'INVERSESQUARECURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'PROP_PROJECTED', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'SNAP_FACE_CENTER', 'SNAP_PERPENDICULAR', 'SNAP_MIDPOINT', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'OBJECT_ORIGIN', 'ORIENTATION_GLOBAL', 'ORIENTATION_GIMBAL', 'ORIENTATION_LOCAL', 'ORIENTATION_NORMAL', 'ORIENTATION_VIEW', 'COPYDOWN', 'PASTEDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'VIS_SEL_11', 'VIS_SEL_10', 'VIS_SEL_01', 'VIS_SEL_00', 'AUTOMERGE_OFF', 'AUTOMERGE_ON', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'TRANSFORM_ORIGINS', 'GIZMO', 'ORIENTATION_CURSOR', 'NORMALS_VERTEX', 'NORMALS_FACE', 'NORMALS_VERTEX_FACE', 'SHADING_BBOX', 'SHADING_WIRE', 'SHADING_SOLID', 'SHADING_RENDERED', 'SHADING_TEXTURE', 'OVERLAY', 'XRAY', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'LAYER_USED', 'LAYER_ACTIVE', 'OUTLINER_OB_HAIR', 'OUTLINER_DATA_HAIR', 'HAIR_DATA', 'OUTLINER_OB_POINTCLOUD', 'OUTLINER_DATA_POINTCLOUD', 'POINTCLOUD_DATA', 'OUTLINER_OB_VOLUME', 'OUTLINER_DATA_VOLUME', 'VOLUME_DATA', 'HOME', 'DOCUMENTS', 'TEMP', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'SHORTDISPLAY', 'LONGDISPLAY', 'IMGDISPLAY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'FOLDER_REDIRECT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'SORT_DESC', 'SORT_ASC', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_ARCHIVE', 'FILE_CACHE', 'FILE_VOLUME', 'FILE_3D', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'MATSHADERBALL', 'MATCLOTH', 'MATFLUID', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'DISC', 'DESKTOP', 'EXTERNAL_DRIVE', 'NETWORK_DRIVE', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'SEQ_STRIP_META', 'SEQ_STRIP_DUPLICATE', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'HANDLE_AUTOCLAMPED', 'HANDLE_AUTO', 'HANDLE_ALIGNED', 'HANDLE_VECTOR', 'HANDLE_FREE', 'VIEW_PERSPECTIVE', 'VIEW_ORTHO', 'VIEW_CAMERA', 'VIEW_PAN', 'VIEW_ZOOM', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'GPBRUSH_SMOOTH', 'GPBRUSH_THICKNESS', 'GPBRUSH_STRENGTH', 'GPBRUSH_GRAB', 'GPBRUSH_PUSH', 'GPBRUSH_TWIST', 'GPBRUSH_PINCH', 'GPBRUSH_RANDOMIZE', 'GPBRUSH_CLONE', 'GPBRUSH_WEIGHT', 'GPBRUSH_PENCIL', 'GPBRUSH_PEN', 'GPBRUSH_INK', 'GPBRUSH_INKNOISE', 'GPBRUSH_BLOCK', 'GPBRUSH_MARKER', 'GPBRUSH_FILL', 'GPBRUSH_AIRBRUSH', 'GPBRUSH_CHISEL', 'GPBRUSH_ERASE_SOFT', 'GPBRUSH_ERASE_HARD', 'GPBRUSH_ERASE_STROKE', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'HANDLETYPE_FREE_VEC', 'HANDLETYPE_ALIGNED_VEC', 'HANDLETYPE_VECTOR_VEC', 'HANDLETYPE_AUTO_VEC', 'HANDLETYPE_AUTO_CLAMP_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC', 'EVENT_A', 'EVENT_B', 'EVENT_C', 'EVENT_D', 'EVENT_E', 'EVENT_F', 'EVENT_G', 'EVENT_H', 'EVENT_I', 'EVENT_J', 'EVENT_K', 'EVENT_L', 'EVENT_M', 'EVENT_N', 'EVENT_O', 'EVENT_P', 'EVENT_Q', 'EVENT_R', 'EVENT_S', 'EVENT_T', 'EVENT_U', 'EVENT_V', 'EVENT_W', 'EVENT_X', 'EVENT_Y', 'EVENT_Z', 'EVENT_SHIFT', 'EVENT_CTRL', 'EVENT_ALT', 'EVENT_OS', 'EVENT_F1', 'EVENT_F2', 'EVENT_F3', 'EVENT_F4', 'EVENT_F5', 'EVENT_F6', 'EVENT_F7', 'EVENT_F8', 'EVENT_F9', 'EVENT_F10', 'EVENT_F11', 'EVENT_F12', 'EVENT_ESC', 'EVENT_TAB', 'EVENT_PAGEUP', 'EVENT_PAGEDOWN', 'EVENT_RETURN', 'EVENT_SPACEKEY'], (optional)
            @icon_value (int): Override automatic icon of the item
               in [0, inf], (optional)
      
         '''
      
         pass

      def popover_group(space_type, region_type, context, category):
         '''popover_group
            Arguments:
            @space_type (str): in ['EMPTY', 'VIEW_3D', 'IMAGE_EDITOR', 'NODE_EDITOR', 'SEQUENCE_EDITOR', 'CLIP_EDITOR', 'DOPESHEET_EDITOR', 'GRAPH_EDITOR', 'NLA_EDITOR', 'TEXT_EDITOR', 'CONSOLE', 'INFO', 'TOPBAR', 'STATUSBAR', 'OUTLINER', 'PROPERTIES', 'FILE_BROWSER', 'PREFERENCES']
            @region_type (str): in ['WINDOW', 'HEADER', 'CHANNELS', 'TEMPORARY', 'UI', 'TOOLS', 'TOOL_PROPS', 'PREVIEW', 'HUD', 'NAVIGATION_BAR', 'EXECUTE', 'FOOTER', 'TOOL_HEADER']
            @context (str): panel type context
               (never None)
            @category (str): panel type category
               (never None)
      
         '''
      
         pass

      def separator(factor=1.0):
         '''Item. Inserts empty space into the layout between items
            Arguments:
            @factor (float): Percentage of width to space (leave unset for default space)
               in [0, inf], (optional)
      
         '''
      
         pass

      def separator_spacer():
         '''Item. Inserts horizontal spacing empty space into the layout between items
         '''
      
         pass

      def context_pointer_set(name, data):
         '''context_pointer_set
            Arguments:
            @name (str): Name of entry in the context
               (never None)
            @data (AnyType): Pointer to put in context
               
      
         '''
      
         pass

      def template_header():
         '''Inserts common Space header UI (editor type selector)
         '''
      
         pass

      def template_ID(data, property, new="", open="", unlink="", filter='ALL', live_icon=False, text="", text_ctxt="", translate=True):
         '''template_ID
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @new (str): Operator identifier to create a new ID block
               (optional, never None)
            @open (str): Operator identifier to open a file for creating a new ID block
               (optional, never None)
            @unlink (str): Operator identifier to unlink the ID block
               (optional, never None)
            @filter (str): Optionally limit the items which can be selected
               in ['ALL', 'AVAILABLE'], (optional)
            @live_icon (bool): Show preview instead of fixed icon
               (optional)
            @text (str): Override automatic text of the item
               (optional)
            @text_ctxt (str): Override automatic translation context of the given text
               (optional)
            @translate (bool): Translate the given text, when UI translation is enabled
               (optional)
      
         '''
      
         pass

      def template_ID_preview(data, property, new="", open="", unlink="", rows=0, cols=0, filter='ALL', hide_buttons=False):
         '''template_ID_preview
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @new (str): Operator identifier to create a new ID block
               (optional, never None)
            @open (str): Operator identifier to open a file for creating a new ID block
               (optional, never None)
            @unlink (str): Operator identifier to unlink the ID block
               (optional, never None)
            @rows (int): in [0, inf], (optional)
            @cols (int): in [0, inf], (optional)
            @filter (str): Optionally limit the items which can be selected
               in ['ALL', 'AVAILABLE'], (optional)
            @hide_buttons (bool): Show only list, no buttons
               (optional)
      
         '''
      
         pass

      def template_any_ID(data, property, type_property, text="", text_ctxt="", translate=True):
         '''template_any_ID
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @type_property (str): Identifier of property in data giving the type of the ID-blocks to use
               (never None)
            @text (str): Override automatic text of the item
               (optional)
            @text_ctxt (str): Override automatic translation context of the given text
               (optional)
            @translate (bool): Translate the given text, when UI translation is enabled
               (optional)
      
         '''
      
         pass

      def template_ID_tabs(data, property, new="", menu="", filter='ALL'):
         '''template_ID_tabs
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @new (str): Operator identifier to create a new ID block
               (optional, never None)
            @menu (str): Context menu identifier
               (optional, never None)
            @filter (str): Optionally limit the items which can be selected
               in ['ALL', 'AVAILABLE'], (optional)
      
         '''
      
         pass

      def template_search(data, property, search_data, search_property, new="", unlink=""):
         '''template_search
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @search_data (AnyType): Data from which to take collection to search in
               (never None)
            @search_property (str): Identifier of search collection property
               (never None)
            @new (str): Operator identifier to create a new item for the collection
               (optional, never None)
            @unlink (str): Operator identifier to unlink or delete the active item from the collection
               (optional, never None)
      
         '''
      
         pass

      def template_search_preview(data, property, search_data, search_property, new="", unlink="", rows=0, cols=0):
         '''template_search_preview
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @search_data (AnyType): Data from which to take collection to search in
               (never None)
            @search_property (str): Identifier of search collection property
               (never None)
            @new (str): Operator identifier to create a new item for the collection
               (optional, never None)
            @unlink (str): Operator identifier to unlink or delete the active item from the collection
               (optional, never None)
            @rows (int): in [0, inf], (optional)
            @cols (int): in [0, inf], (optional)
      
         '''
      
         pass

      def template_path_builder(data, property, root, text="", text_ctxt="", translate=True):
         '''template_path_builder
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @root (ID): ID-block from which path is evaluated from
               
            @text (str): Override automatic text of the item
               (optional)
            @text_ctxt (str): Override automatic translation context of the given text
               (optional)
            @translate (bool): Translate the given text, when UI translation is enabled
               (optional)
      
         '''
      
         pass

      def template_modifier(data):
         '''Generates the UI layout for modifiers
            Arguments:
            @data (Modifier): Modifier data
               (never None)
      
            @returns (types.UILayout): Sub-layout to put items in
               
         '''
      
         return types.UILayout

      def template_greasepencil_modifier(data):
         '''Generates the UI layout for grease pencil modifiers
            Arguments:
            @data (GpencilModifier): Modifier data
               (never None)
      
            @returns (types.UILayout): Sub-layout to put items in
               
         '''
      
         return types.UILayout

      def template_shaderfx(data):
         '''Generates the UI layout for shader effect
            Arguments:
            @data (ShaderFx): Shader data
               (never None)
      
            @returns (types.UILayout): Sub-layout to put items in
               
         '''
      
         return types.UILayout

      def template_greasepencil_color(data, property, rows=0, cols=0, scale=1.0, filter='ALL'):
         '''template_greasepencil_color
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @rows (int): in [0, inf], (optional)
            @cols (int): in [0, inf], (optional)
            @scale (float): in [0.1, 1.5], (optional)
            @filter (str): Optionally limit the items which can be selected
               in ['ALL', 'AVAILABLE'], (optional)
      
         '''
      
         pass

      def template_constraint(data):
         '''Generates the UI layout for constraints
            Arguments:
            @data (Constraint): Constraint data
               (never None)
      
            @returns (types.UILayout): Sub-layout to put items in
               
         '''
      
         return types.UILayout

      def template_preview(id, show_buttons=True, parent=None, slot=None, preview_id=""):
         '''Item. A preview window for materials, textures, lights or worlds
            Arguments:
            @id (ID): ID data-block
               
            @show_buttons (bool): Show preview buttons?
               (optional)
            @parent (ID): ID data-block
               (optional)
            @slot (TextureSlot): Texture slot
               (optional)
            @preview_id (str): Identifier of this preview widget, if not set the ID type will be used (i.e. all previews of materials without explicit ID will have the same size...)
               (optional, never None)
      
         '''
      
         pass

      def template_curve_mapping(data, property, type='NONE', levels=False, brush=False, use_negative_slope=False, show_tone=False):
         '''Item. A curve mapping widget used for e.g falloff curves for lights
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @type (str): Type of curves to display
               in ['NONE', 'VECTOR', 'COLOR', 'HUE'], (optional)
            @levels (bool): Show black/white levels
               (optional)
            @brush (bool): Show brush options
               (optional)
            @use_negative_slope (bool): Use a negative slope by default
               (optional)
            @show_tone (bool): Show tone options
               (optional)
      
         '''
      
         pass

      def template_curveprofile(data, property):
         '''A profile path editor used for custom profiles
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
      
         '''
      
         pass

      def template_color_ramp(data, property, expand=False):
         '''Item. A color ramp widget
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @expand (bool): Expand button to show more detail
               (optional)
      
         '''
      
         pass

      def template_icon(icon_value, scale=1.0):
         '''Display a large icon
            Arguments:
            @icon_value (int): in [0, inf]
            @scale (float): Scale the icon size (by the button size)
               in [1, 100], (optional)
      
         '''
      
         pass

      def template_icon_view(data, property, show_labels=False, scale=6.0, scale_popup=5.0):
         '''Enum. Large widget showing Icon previews
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @show_labels (bool): Show enum label in preview buttons
               (optional)
            @scale (float): Scale the button icon size (by the button size)
               in [1, 100], (optional)
            @scale_popup (float): Scale the popup icon size (by the button size)
               in [1, 100], (optional)
      
         '''
      
         pass

      def template_histogram(data, property):
         '''Item. A histogramm widget to analyze imaga data
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
      
         '''
      
         pass

      def template_waveform(data, property):
         '''Item. A waveform widget to analyze imaga data
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
      
         '''
      
         pass

      def template_vectorscope(data, property):
         '''Item. A vectorscope widget to analyze imaga data
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
      
         '''
      
         pass

      def template_layers(data, property, used_layers_data, used_layers_property, active_layer):
         '''template_layers
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @used_layers_data (AnyType): Data from which to take property
               
            @used_layers_property (str): Identifier of property in data
               (never None)
            @active_layer (int): in [0, inf]
      
         '''
      
         pass

      def template_color_picker(data, property, value_slider=False, lock=False, lock_luminosity=False, cubic=False):
         '''Item. A color wheel widget to pick colors
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @value_slider (bool): Display the value slider to the right of the color wheel
               (optional)
            @lock (bool): Lock the color wheel display to value 1.0 regardless of actual color
               (optional)
            @lock_luminosity (bool): Keep the color at its original vector length
               (optional)
            @cubic (bool): Cubic saturation for picking values close to white
               (optional)
      
         '''
      
         pass

      def template_palette(data, property, color=False):
         '''Item. A palette used to pick colors
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @color (bool): Display the colors as colors or values
               (optional)
      
         '''
      
         pass

      def template_image_layers(image, image_user):
         '''template_image_layers
            Arguments:
            @image (Image): 
            @image_user (ImageUser): 
      
         '''
      
         pass

      def template_image(data, property, image_user, compact=False, multiview=False):
         '''Item(s). User interface for selecting images and their source paths
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @image_user (ImageUser): (never None)
            @compact (bool): Use more compact layout
               (optional)
            @multiview (bool): Expose Multi-View options
               (optional)
      
         '''
      
         pass

      def template_image_settings(image_settings, color_management=False):
         '''User interface for setting image format options
            Arguments:
            @image_settings (ImageFormatSettings): (never None)
            @color_management (bool): Show color management settings
               (optional)
      
         '''
      
         pass

      def template_image_stereo_3d(stereo_3d_format):
         '''User interface for setting image stereo 3d options
            Arguments:
            @stereo_3d_format (Stereo3dFormat): (never None)
      
         '''
      
         pass

      def template_image_views(image_settings):
         '''User interface for setting image views output options
            Arguments:
            @image_settings (ImageFormatSettings): (never None)
      
         '''
      
         pass

      def template_movieclip(data, property, compact=False):
         '''Item(s). User interface for selecting movie clips and their source paths
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @compact (bool): Use more compact layout
               (optional)
      
         '''
      
         pass

      def template_track(data, property):
         '''Item. A movie-track widget to preview tracking image.
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
      
         '''
      
         pass

      def template_marker(data, property, clip_user, track, compact=False):
         '''Item. A widget to control single marker settings.
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @clip_user (MovieClipUser): (never None)
            @track (MovieTrackingTrack): (never None)
            @compact (bool): Use more compact layout
               (optional)
      
         '''
      
         pass

      def template_movieclip_information(data, property, clip_user):
         '''Item. Movie clip information data.
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
            @clip_user (MovieClipUser): (never None)
      
         '''
      
         pass

      def template_list(listtype_name, list_id, dataptr, propname, active_dataptr, active_propname, item_dyntip_propname="", rows=5, maxrows=5, type='DEFAULT', columns=9, sort_reverse=False, sort_lock=False):
         '''Item. A list widget to display data, e.g. vertexgroups.
            Arguments:
            @listtype_name (str): Identifier of the list type to use
               (never None)
            @list_id (str): Identifier of this list widget (mandatory when using default "UI_UL_list" class). If this not an empty string, the uilist gets a custom ID, otherwise it takes the name of the class used to define the uilist (for example, if the class name is "OBJECT_UL_vgroups", and list_id is not set by the script, then bl_idname = "OBJECT_UL_vgroups")
               (never None)
            @dataptr (AnyType): Data from which to take the Collection property
               
            @propname (str): Identifier of the Collection property in data
               (never None)
            @active_dataptr (AnyType): Data from which to take the integer property, index of the active item
               (never None)
            @active_propname (str): Identifier of the integer property in active_data, index of the active item
               (never None)
            @item_dyntip_propname (str): Identifier of a string property in items, to use as tooltip content
               (optional, never None)
            @rows (int): Default and minimum number of rows to display
               in [0, inf], (optional)
            @maxrows (int): Default maximum number of rows to display
               in [0, inf], (optional)
            @type (str): Type of layout to use
               in ['DEFAULT', 'COMPACT', 'GRID'], (optional)
            @columns (int): Number of items to display per row, for GRID layout
               in [0, inf], (optional)
            @sort_reverse (bool): Display items in reverse order by default
               (optional)
            @sort_lock (bool): Lock display order to default value
               (optional)
      
         '''
      
         pass

      def template_running_jobs():
         '''template_running_jobs
         '''
      
         pass

      def template_operator_search():
         '''template_operator_search
         '''
      
         pass

      def template_menu_search():
         '''template_menu_search
         '''
      
         pass

      def template_header_3D_mode():
         '''
         '''
      
         pass

      def template_edit_mode_selection():
         '''Inserts common 3DView Edit modes header UI (selector for selection mode)
         '''
      
         pass

      def template_reports_banner():
         '''template_reports_banner
         '''
      
         pass

      def template_input_status():
         '''template_input_status
         '''
      
         pass

      def template_node_link(ntree, node, socket):
         '''template_node_link
            Arguments:
            @ntree (NodeTree): 
            @node (Node): 
            @socket (NodeSocket): 
      
         '''
      
         pass

      def template_node_view(ntree, node, socket):
         '''template_node_view
            Arguments:
            @ntree (NodeTree): 
            @node (Node): 
            @socket (NodeSocket): 
      
         '''
      
         pass

      def template_texture_user():
         '''template_texture_user
         '''
      
         pass

      def template_keymap_item_properties(item):
         '''template_keymap_item_properties
            Arguments:
            @item (KeyMapItem): (never None)
      
         '''
      
         pass

      def template_component_menu(data, property, name=""):
         '''Item. Display expanded property in a popup menu
            Arguments:
            @data (AnyType): Data from which to take property
               
            @property (str): Identifier of property in data
               (never None)
            @name (str): (optional, never None)
      
         '''
      
         pass

      def template_colorspace_settings(data, property):
         '''Item. A widget to control input color space settings.
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
      
         '''
      
         pass

      def template_colormanaged_view_settings(data, property):
         '''Item. A widget to control color managed view settings settings.
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
      
         '''
      
         pass

      def template_node_socket(color=(0.0, 0.0, 0.0, 1.0)):
         '''Node Socket Icon
            Arguments:
            @color (float): array of 4 items in [0, 1], (optional)
      
         '''
      
         pass

      def template_cache_file(data, property):
         '''Item(s). User interface for selecting cache files and their source paths
            Arguments:
            @data (AnyType): Data from which to take property
               (never None)
            @property (str): Identifier of property in data
               (never None)
      
         '''
      
         pass

      def template_recent_files(rows=5):
         '''Show list of recently saved .blend files
            Arguments:
            @rows (int): Maximum number of items to show
               in [1, inf], (optional)
      
            @returns (int): Number of items drawn
               in [0, inf]
         '''
      
         return int

      def template_file_select_path(params):
         '''Item. A text button to set the active file browser path.
            Arguments:
            @params (FileSelectParams): 
      
         '''
      
         pass

      def template_event_from_keymap_item(item, text="", text_ctxt="", translate=True):
         '''Display keymap item as icons/text
            Arguments:
            @item (KeyMapItem): (never None)
            @text (str): Override automatic text of the item
               (optional)
            @text_ctxt (str): Override automatic translation context of the given text
               (optional)
            @translate (bool): Translate the given text, when UI translation is enabled
               (optional)
      
         '''
      
         pass

   class UIList(types.bpy_struct):
      '''UI list containing the elements of a collection
      '''
   
      bitflag_filter_item = int # (read only)
      '''The value of the reserved bitflag 'FILTER_ITEM' (in filter_flags values)
         @returns: int in [0, inf]
      '''
      
      bl_idname = str
      '''If this is set, the uilist gets a custom ID, otherwise it takes the name of the class used to define the uilist (for example, if the class name is "OBJECT_UL_vgroups", and bl_idname is not set by the script, then bl_idname = "OBJECT_UL_vgroups")
         @returns: string, (never None)
      '''
      
      filter_name = str
      '''Only show items matching this name (use '*' as wildcard)
         @returns: string, (never None)
      '''
      
      layout_type = str # (read only)
      '''
         @returns: enum in ['DEFAULT', 'COMPACT', 'GRID']
      '''
      
      use_filter_invert = bool
      '''Invert filtering (show hidden items, and vice-versa)
         @returns: boolean
      '''
      
      use_filter_show = bool
      '''Show filtering options
         @returns: boolean
      '''
      
      use_filter_sort_alpha = bool
      '''Sort items by their name
         @returns: boolean
      '''
      
      use_filter_sort_lock = bool
      '''Lock the order of shown items (user cannot change it)
         @returns: boolean
      '''
      
      use_filter_sort_reverse = bool
      '''Reverse the order of shown items
         @returns: boolean
      '''
      
      def draw_item(context, layout, data, item, icon, active_data, active_property, index=0, flt_flag=0):
         '''Draw an item in the list (NOTE: when you define your own draw_item function, you may want to check given 'item' is of the right type...)
            Arguments:
            @context (Context): 
            @layout (UILayout): Layout to draw the item
               (never None)
            @data (AnyType): Data from which to take Collection property
               
            @item (AnyType): Item of the collection property
               
            @icon (int): Icon of the item in the collection
               in [0, inf]
            @active_data (AnyType): Data from which to take property for the active element
               (never None)
            @active_property (str): Identifier of property in active_data, for the active element
               (optional argument, never None)
            @index (int): Index of the item in the collection
               in [0, inf], (optional)
            @flt_flag (int): The filter-flag result for this item
               in [0, inf], (optional)
      
         '''
      
         pass

      def draw_filter(context, layout):
         '''Draw filtering options
            Arguments:
            @context (Context): 
            @layout (UILayout): Layout to draw the item
               (never None)
      
         '''
      
         pass

      def filter_items(context, data, property):
         '''Filter and/or re-order items of the collection (output filter results in filter_flags, and reorder results in filter_neworder arrays)
            Arguments:
            @context (Context): 
            @data (AnyType): Data from which to take Collection property
               
            @property (str): Identifier of property in data, for the collection
               (never None)
      
            @returns: 
            (
               filter_flags(int):An array of filter flags, one for each item in the collection (NOTE: FILTER_ITEM bit is reserved, it defines whether the item is shown or not)
               array of 1 items in [0, inf]
               filter_neworder(int):An array of indices, one for each item in the collection, mapping the org index to the new one
               array of 1 items in [0, inf]
            )
         '''
      
         pass

      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class UIPieMenu(types.bpy_struct):
      '''
      '''
   
      layout = types.UILayout # (read only)
      '''
         @returns: UILayout
      '''
      
   class UIPopover(types.bpy_struct):
      '''
      '''
   
      layout = types.UILayout # (read only)
      '''
         @returns: UILayout
      '''
      
   class UIPopupMenu(types.bpy_struct):
      '''
      '''
   
      layout = types.UILayout # (read only)
      '''
         @returns: UILayout
      '''
      
   class UI_UL_list(types.UIList):
      '''
      '''
   
      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      def filter_items_by_name(pattern, bitflag, items, propname='name', flags=None, reverse=False):
         '''Set FILTER_ITEM for items which name matches filter_name one (case-insensitive).
            pattern is the filtering pattern.
            propname is the name of the string property to use for filtering.
            flags must be a list of integers the same length as items, or None!
            return a list of flags (based on given flags if not None),
            or an empty list if no flags were given and no filtering has been done.
            
         '''
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
      @classmethod
      def sort_items_by_name(cls, items, propname='name'):
         '''Re-order items using their names (case-insensitive).
            propname is the name of the string property to use for sorting.
            return a list mapping org_idx -> new_idx,
            or an empty list if no sorting has been done.
            
         '''
      
         pass
      
      def sort_items_helper(sort_data, key, reverse=False):
         '''Common sorting utility. Returns a neworder list mapping org_idx -> new_idx.
            sort_data must be an (unordered) list of tuples [(org_idx, ...), (org_idx, ...), ...].
            key must be the same kind of callable you would use for sorted() builtin function.
            reverse will reverse the sorting!
            
         '''
      
         pass
      
   class UVLoopLayers(types.bpy_struct):
      '''Collection of uv loop layers
      '''
   
      active = types.MeshUVLoopLayer
      '''Active UV loop layer
         @returns: MeshUVLoopLayer
      '''
      
      active_index = int
      '''Active UV loop layer index
         @returns: int in [0, inf]
      '''
      
      def new(name="UVMap", do_init=True):
         '''Add a UV map layer to Mesh
            Arguments:
            @name (str): UV map name
               (optional, never None)
            @do_init (bool): Whether new layer's data should be initialized by copying current active one, or if none is active, with a default UVmap
               (optional)
      
            @returns (types.MeshUVLoopLayer): The newly created layer
               
         '''
      
         return types.MeshUVLoopLayer

      def remove(layer):
         '''Remove a vertex color layer
            Arguments:
            @layer (MeshUVLoopLayer): The layer to remove
               (never None)
      
         '''
      
         pass

   class UVProjectModifier(types.Modifier):
      '''UV projection modifier to set UVs from a projector
      '''
   
      aspect_x = float
      '''
         @returns: float in [1, inf]
      '''
      
      aspect_y = float
      '''
         @returns: float in [1, inf]
      '''
      
      projector_count = int
      '''Number of projectors to use
         @returns: int in [1, 10]
      '''
      
      projectors = types.UVProjector # (read only)
      '''
         @returns: Collection of UVProjector
      '''
      
      scale_x = float
      '''
         @returns: float in [0, inf]
      '''
      
      scale_y = float
      '''
         @returns: float in [0, inf]
      '''
      
      uv_layer = str
      '''UV map name
         @returns: string, (never None)
      '''
      
   class UVProjector(types.bpy_struct):
      '''UV projector used by the UV project modifier
      '''
   
      object = types.Object
      '''Object to use as projector transform
         @returns: Object
      '''
      
   class UVWarpModifier(types.Modifier):
      '''Add target position to uv coordinates
      '''
   
      axis_u = str
      '''Pole axis for rotation
         @returns: enum in ['X', 'Y', 'Z']
      '''
      
      axis_v = str
      '''Pole axis for rotation
         @returns: enum in ['X', 'Y', 'Z']
      '''
      
      bone_from = str
      '''Bone defining offset
         @returns: string, (never None)
      '''
      
      bone_to = str
      '''Bone defining offset
         @returns: string, (never None)
      '''
      
      center = float
      '''Center point for rotate/scale
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      invert_vertex_group = bool
      '''Invert vertex group influence
         @returns: boolean
      '''
      
      object_from = types.Object
      '''Object defining offset
         @returns: Object
      '''
      
      object_to = types.Object
      '''Object defining offset
         @returns: Object
      '''
      
      offset = float
      '''2D Offset for the warp
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      rotation = float
      '''2D Rotation for the warp
         @returns: float in [-inf, inf]
      '''
      
      scale = float
      '''2D Scale for the warp
         @returns: float array of 2 items in [-inf, inf]
      '''
      
      uv_layer = str
      '''UV Layer name
         @returns: string, (never None)
      '''
      
      vertex_group = str
      '''Vertex group name
         @returns: string, (never None)
      '''
      
   class UnifiedPaintSettings(types.bpy_struct):
      '''Overrides for some of the active brush's settings
      '''
   
      color = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      secondary_color = float
      '''
         @returns: float array of 3 items in [0, 1]
      '''
      
      size = int
      '''Radius of the brush
         @returns: int in [1, 5000]
      '''
      
      strength = float
      '''How powerful the effect of the brush is when applied
         @returns: float in [0, 10]
      '''
      
      unprojected_radius = float
      '''Radius of brush in Blender units
         @returns: float in [0.001, inf]
      '''
      
      use_locked_size = str
      '''Measure brush size relative to the view or the scene
         @returns: enum in ['VIEW', 'SCENE']
      '''
      
      use_unified_color = bool
      '''Instead of per-brush color, the color is shared across brushes
         @returns: boolean
      '''
      
      use_unified_size = bool
      '''Instead of per-brush radius, the radius is shared across brushes
         @returns: boolean
      '''
      
      use_unified_strength = bool
      '''Instead of per-brush strength, the strength is shared across brushes
         @returns: boolean
      '''
      
      use_unified_weight = bool
      '''Instead of per-brush weight, the weight is shared across brushes
         @returns: boolean
      '''
      
      weight = float
      '''Weight to assign in vertex groups
         @returns: float in [0, 1]
      '''
      
   class UnitSettings(types.bpy_struct):
      '''
      '''
   
      length_unit = str
      '''Unit that will be used to display length values
         @returns: enum in ['DEFAULT']
      '''
      
      mass_unit = str
      '''Unit that will be used to display mass values
         @returns: enum in ['DEFAULT']
      '''
      
      scale_length = float
      '''Scale to use when converting between blender units and dimensions. When working at microscopic or astronomical scale, a small or large unit scale respectively can be used to avoid numerical precision problems
         @returns: float in [1e-09, inf]
      '''
      
      system = str
      '''The unit system to use for user interface controls
         @returns: enum in ['NONE', 'METRIC', 'IMPERIAL']
      '''
      
      system_rotation = str
      '''Unit to use for displaying/editing rotation values
         @returns: enum in ['DEGREES', 'RADIANS']
      '''
      
      time_unit = str
      '''Unit that will be used to display time values
         @returns: enum in ['DEFAULT']
      '''
      
      use_separate = bool
      '''Display units in pairs (e.g. 1m 0cm)
         @returns: boolean
      '''
      
   class UnknownType(types.bpy_struct):
      '''Stub RNA type used for pointers to unknown or internal data
      '''
   
   class UserSolidLight(types.bpy_struct):
      '''Light used for Studio lighting in solid draw mode
      '''
   
      diffuse_color = float
      '''Color of the light's diffuse highlight
         @returns: float array of 3 items in [0, inf]
      '''
      
      direction = float
      '''Direction that the light is shining
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      smooth = float
      '''Smooth the lighting from this light
         @returns: float in [0, 1]
      '''
      
      specular_color = float
      '''Color of the light's specular highlight
         @returns: float array of 3 items in [0, inf]
      '''
      
      use = bool
      '''Enable this light in solid draw mode
         @returns: boolean
      '''
      
   class UvSculpt(types.Paint):
      '''
      '''
   
   class VIEWLAYER_UL_linesets(types.UIList):
      '''
      '''
   
      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, index):
         
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class VOLUME_UL_grids(types.UIList):
      '''
      '''
   
      @classmethod
      def append(cls, draw_func):
         '''Append a draw function to this menu,
            takes the same arguments as the menus draw function
            
         '''
      
         pass
      
      def draw_item(self, context, layout, data, grid, icon, active_data, active_propname, index):
         
      
         pass
      
      @classmethod
      def is_extended(cls):
         
      
         pass
      
      @classmethod
      def prepend(cls, draw_func):
         '''Prepend a draw function to this menu, takes the same arguments as
            the menus draw function
            
         '''
      
         pass
      
      @classmethod
      def remove(cls, draw_func):
         '''Remove a draw function that has been added to this menu
            
         '''
      
         pass
      
   class VectorFont(types.ID):
      '''Vector font for Text objects
      '''
   
      filepath = str
      '''
         @returns: string, (never None)
      '''
      
      packed_file = types.PackedFile # (read only)
      '''
         @returns: PackedFile
      '''
      
      def pack():
         '''Pack the font into the current blend file
         '''
      
         pass

      def unpack(method='USE_LOCAL'):
         '''Unpack the font to the samples filename
            Arguments:
            @method (str): How to unpack
               in ['REMOVE', 'USE_LOCAL', 'WRITE_LOCAL', 'USE_ORIGINAL', 'WRITE_ORIGINAL'], (optional)
      
         '''
      
         pass

   class VertexFloatProperties(types.bpy_struct):
      '''Collection of float properties
      '''
   
      def new(name="Float Prop"):
         '''Add a float property layer to Mesh
            Arguments:
            @name (str): Float property name
               (optional, never None)
      
            @returns (types.MeshVertexFloatPropertyLayer): The newly created layer
               
         '''
      
         return types.MeshVertexFloatPropertyLayer

   class VertexGroup(types.bpy_struct):
      '''Group of vertices, used for armature deform and other purposes
      '''
   
      index = int # (read only)
      '''Index number of the vertex group
         @returns: int in [0, inf]
      '''
      
      lock_weight = bool
      '''Maintain the relative weights for the group
         @returns: boolean
      '''
      
      name = str
      '''Vertex group name
         @returns: string, (never None)
      '''
      
      def add(index, weight, type):
         '''Add vertices to the group
            Arguments:
            @index (int): Index List
               array of 1 items in [-inf, inf]
            @weight (float): Vertex weight
               in [0, 1]
            @type (str): Vertex assign mode
               in ['REPLACE', 'ADD', 'SUBTRACT']
      
         '''
      
         pass

      def remove(index):
         '''Remove a vertex from the group
            Arguments:
            @index (int): Index List
               array of 1 items in [-inf, inf]
      
         '''
      
         pass

      def weight(index):
         '''Get a vertex weight from the group
            Arguments:
            @index (int): The index of the vertex
               in [0, inf]
      
            @returns (float): Vertex weight
               in [0, 1]
         '''
      
         return float

   class VertexGroupElement(types.bpy_struct):
      '''Weight value of a vertex in a vertex group
      '''
   
      group = int # (read only)
      '''
         @returns: int in [0, inf]
      '''
      
      weight = float
      '''Vertex Weight
         @returns: float in [0, 1]
      '''
      
   class VertexGroups(types.bpy_struct):
      '''Collection of vertex groups
      '''
   
      active = types.VertexGroup
      '''Vertex groups of the object
         @returns: VertexGroup
      '''
      
      active_index = int
      '''Active index in vertex group array
         @returns: int in [0, 32767]
      '''
      
      def new(name="Group"):
         '''Add vertex group to object
            Arguments:
            @name (str): Vertex group name
               (optional, never None)
      
            @returns (types.VertexGroup): New vertex group
               
         '''
      
         return types.VertexGroup

      def remove(group):
         '''Delete vertex group from object
            Arguments:
            @group (VertexGroup): Vertex group to remove
               (never None)
      
         '''
      
         pass

      def clear():
         '''Delete all vertex groups from object
         '''
      
         pass

   class VertexIntProperties(types.bpy_struct):
      '''Collection of int properties
      '''
   
      def new(name="Int Prop"):
         '''Add a integer property layer to Mesh
            Arguments:
            @name (str): Int property name
               (optional, never None)
      
            @returns (types.MeshVertexIntPropertyLayer): The newly created layer
               
         '''
      
         return types.MeshVertexIntPropertyLayer

   class VertexPaint(types.Paint):
      '''Properties of vertex and weight paint mode
      '''
   
      radial_symmetry = int
      '''Number of times to copy strokes across the surface
         @returns: int array of 3 items in [1, 64]
      '''
      
      use_group_restrict = bool
      '''Restrict painting to vertices in the group
         @returns: boolean
      '''
      
   class VertexStringProperties(types.bpy_struct):
      '''Collection of string properties
      '''
   
      def new(name="String Prop"):
         '''Add a string property layer to Mesh
            Arguments:
            @name (str): String property name
               (optional, never None)
      
            @returns (types.MeshVertexStringPropertyLayer): The newly created layer
               
         '''
      
         return types.MeshVertexStringPropertyLayer

   class VertexWeightEditModifier(types.Modifier):
      '''Edit the weights of vertices in a group
      '''
   
      add_threshold = float
      '''Lower bound for a vertex's weight to be added to the vgroup
         @returns: float in [0, 1]
      '''
      
      default_weight = float
      '''Default weight a vertex will have if it is not in the vgroup
         @returns: float in [0, 1]
      '''
      
      falloff_type = str
      '''How weights are mapped to their new values
         @returns: enum in ['LINEAR', 'CURVE', 'SHARP', 'SMOOTH', 'ROOT', 'ICON_SPHERECURVE', 'RANDOM', 'STEP']
      '''
      
      invert_falloff = bool
      '''Invert the resulting falloff weight
         @returns: boolean
      '''
      
      invert_mask_vertex_group = bool
      '''Invert vertex group mask influence
         @returns: boolean
      '''
      
      map_curve = types.CurveMapping # (read only)
      '''Custom mapping curve
         @returns: CurveMapping
      '''
      
      mask_constant = float
      '''Global influence of current modifications on vgroup
         @returns: float in [-inf, inf]
      '''
      
      mask_tex_map_bone = str
      '''Which bone to take texture coordinates from
         @returns: string, (never None)
      '''
      
      mask_tex_map_object = types.Object
      '''Which object to take texture coordinates from
         @returns: Object
      '''
      
      mask_tex_mapping = str
      '''Which texture coordinates to use for mapping
         @returns: enum in ['LOCAL', 'GLOBAL', 'OBJECT', 'UV']
      '''
      
      mask_tex_use_channel = str
      '''Which texture channel to use for masking
         @returns: enum in ['INT', 'RED', 'GREEN', 'BLUE', 'HUE', 'SAT', 'VAL', 'ALPHA']
      '''
      
      mask_tex_uv_layer = str
      '''UV map name
         @returns: string, (never None)
      '''
      
      mask_texture = types.Texture
      '''Masking texture
         @returns: Texture
      '''
      
      mask_vertex_group = str
      '''Masking vertex group name
         @returns: string, (never None)
      '''
      
      remove_threshold = float
      '''Upper bound for a vertex's weight to be removed from the vgroup
         @returns: float in [0, 1]
      '''
      
      use_add = bool
      '''Add vertices with weight over threshold to vgroup
         @returns: boolean
      '''
      
      use_remove = bool
      '''Remove vertices with weight below threshold from vgroup
         @returns: boolean
      '''
      
      vertex_group = str
      '''Vertex group name
         @returns: string, (never None)
      '''
      
   class VertexWeightMixModifier(types.Modifier):
      '''Mix the weights of two vertex groups
      '''
   
      default_weight_a = float
      '''Default weight a vertex will have if it is not in the first A vgroup
         @returns: float in [0, 1]
      '''
      
      default_weight_b = float
      '''Default weight a vertex will have if it is not in the second B vgroup
         @returns: float in [0, 1]
      '''
      
      invert_mask_vertex_group = bool
      '''Invert vertex group mask influence
         @returns: boolean
      '''
      
      mask_constant = float
      '''Global influence of current modifications on vgroup
         @returns: float in [-inf, inf]
      '''
      
      mask_tex_map_bone = str
      '''Which bone to take texture coordinates from
         @returns: string, (never None)
      '''
      
      mask_tex_map_object = types.Object
      '''Which object to take texture coordinates from
         @returns: Object
      '''
      
      mask_tex_mapping = str
      '''Which texture coordinates to use for mapping
         @returns: enum in ['LOCAL', 'GLOBAL', 'OBJECT', 'UV']
      '''
      
      mask_tex_use_channel = str
      '''Which texture channel to use for masking
         @returns: enum in ['INT', 'RED', 'GREEN', 'BLUE', 'HUE', 'SAT', 'VAL', 'ALPHA']
      '''
      
      mask_tex_uv_layer = str
      '''UV map name
         @returns: string, (never None)
      '''
      
      mask_texture = types.Texture
      '''Masking texture
         @returns: Texture
      '''
      
      mask_vertex_group = str
      '''Masking vertex group name
         @returns: string, (never None)
      '''
      
      mix_mode = str
      '''How weights from vgroup B affect weights of vgroup A
         @returns: enum in ['SET', 'ADD', 'SUB', 'MUL', 'DIV', 'DIF', 'AVG']
      '''
      
      mix_set = str
      '''Which vertices should be affected
         @returns: enum in ['ALL', 'A', 'B', 'OR', 'AND']
      '''
      
      vertex_group_a = str
      '''First vertex group name
         @returns: string, (never None)
      '''
      
      vertex_group_b = str
      '''Second vertex group name
         @returns: string, (never None)
      '''
      
   class VertexWeightProximityModifier(types.Modifier):
      '''Set the weights of vertices in a group from a target object's distance
      '''
   
      falloff_type = str
      '''How weights are mapped to their new values
         @returns: enum in ['LINEAR', 'SHARP', 'SMOOTH', 'ROOT', 'ICON_SPHERECURVE', 'RANDOM', 'STEP']
      '''
      
      invert_falloff = bool
      '''Invert the resulting falloff weight
         @returns: boolean
      '''
      
      invert_mask_vertex_group = bool
      '''Invert vertex group mask influence
         @returns: boolean
      '''
      
      mask_constant = float
      '''Global influence of current modifications on vgroup
         @returns: float in [-inf, inf]
      '''
      
      mask_tex_map_bone = str
      '''Which bone to take texture coordinates from
         @returns: string, (never None)
      '''
      
      mask_tex_map_object = types.Object
      '''Which object to take texture coordinates from
         @returns: Object
      '''
      
      mask_tex_mapping = str
      '''Which texture coordinates to use for mapping
         @returns: enum in ['LOCAL', 'GLOBAL', 'OBJECT', 'UV']
      '''
      
      mask_tex_use_channel = str
      '''Which texture channel to use for masking
         @returns: enum in ['INT', 'RED', 'GREEN', 'BLUE', 'HUE', 'SAT', 'VAL', 'ALPHA']
      '''
      
      mask_tex_uv_layer = str
      '''UV map name
         @returns: string, (never None)
      '''
      
      mask_texture = types.Texture
      '''Masking texture
         @returns: Texture
      '''
      
      mask_vertex_group = str
      '''Masking vertex group name
         @returns: string, (never None)
      '''
      
      max_dist = float
      '''Distance mapping to weight 1.0
         @returns: float in [0, inf]
      '''
      
      min_dist = float
      '''Distance mapping to weight 0.0
         @returns: float in [0, inf]
      '''
      
      proximity_geometry = str
      '''Use the shortest computed distance to target object's geometry as weight
         @returns: enum set in {'VERTEX', 'EDGE', 'FACE'}
      '''
      
      proximity_mode = str
      '''Which distances to target object to use
         @returns: enum in ['OBJECT', 'GEOMETRY']
      '''
      
      target = types.Object
      '''Object to calculate vertices distances from
         @returns: Object
      '''
      
      vertex_group = str
      '''Vertex group name
         @returns: string, (never None)
      '''
      
   class View2D(types.bpy_struct):
      '''Scroll and zoom for a 2D region
      '''
   
      def region_to_view(x, y):
         '''Transform region coordinates to 2D view
            Arguments:
            @x (float): Region x coordinate
               in [-inf, inf]
            @y (float): Region y coordinate
               in [-inf, inf]
      
            @returns (float): View coordinates
               array of 2 items in [-inf, inf]
         '''
      
         return float

      def view_to_region(x, y, clip=True):
         '''Transform 2D view coordinates to region
            Arguments:
            @x (float): 2D View x coordinate
               in [-inf, inf]
            @y (float): 2D View y coordinate
               in [-inf, inf]
            @clip (bool): Clip coordinates to the visible region
               (optional)
      
            @returns (int): Region coordinates
               array of 2 items in [-inf, inf]
         '''
      
         return int

   class View3DCursor(types.bpy_struct):
      '''
      '''
   
      location = float
      '''
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      matrix = float
      '''Matrix combining loc/rot of the cursor
         @returns: float multi-dimensional array of 4 * 4 items in [-inf, inf]
      '''
      
      rotation_axis_angle = float
      '''Angle of Rotation for Axis-Angle rotation representation
         @returns: float array of 4 items in [-inf, inf]
      '''
      
      rotation_euler = float
      '''3D rotation
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      rotation_mode = str
      '''
         @returns: enum in ['QUATERNION', 'XYZ', 'XZY', 'YXZ', 'YZX', 'ZXY', 'ZYX', 'AXIS_ANGLE']
      '''
      
      rotation_quaternion = float
      '''Rotation in quaternions (keep normalized)
         @returns: float array of 4 items in [-inf, inf]
      '''
      
   class View3DOverlay(types.bpy_struct):
      '''Settings for display of overlays in the 3D viewport
      '''
   
      backwire_opacity = float
      '''Opacity when rendering transparent wires
         @returns: float in [0, 1]
      '''
      
      gpencil_fade_layer = float
      '''Fade layer opacity for Grease Pencil layers except the active one
         @returns: float in [0, 1]
      '''
      
      gpencil_fade_objects = float
      '''Fade factor
         @returns: float in [0, 1]
      '''
      
      gpencil_grid_opacity = float
      '''Canvas grid opacity
         @returns: float in [0.1, 1]
      '''
      
      gpencil_vertex_paint_opacity = float
      '''Vertex Paint mix factor
         @returns: float in [0, 1]
      '''
      
      grid_lines = int
      '''Number of grid lines to display in perspective view
         @returns: int in [0, 1024]
      '''
      
      grid_scale = float
      '''Multiplier for the distance between 3D View grid lines
         @returns: float in [0, inf]
      '''
      
      grid_scale_unit = float # (read only)
      '''Grid cell size scaled by scene unit system settings
         @returns: float in [-inf, inf]
      '''
      
      grid_subdivisions = int
      '''Number of subdivisions between grid lines
         @returns: int in [1, 1024]
      '''
      
      normals_length = float
      '''Display size for normals in the 3D view
         @returns: float in [1e-05, 100000]
      '''
      
      sculpt_mode_face_sets_opacity = float
      '''
         @returns: float in [0, 1]
      '''
      
      sculpt_mode_mask_opacity = float
      '''
         @returns: float in [0, 1]
      '''
      
      show_annotation = bool
      '''Show annotations for this view
         @returns: boolean
      '''
      
      show_axis_x = bool
      '''Show the X axis line
         @returns: boolean
      '''
      
      show_axis_y = bool
      '''Show the Y axis line
         @returns: boolean
      '''
      
      show_axis_z = bool
      '''Show the Z axis line
         @returns: boolean
      '''
      
      show_bones = bool
      '''Display bones (disable to show motion paths only)
         @returns: boolean
      '''
      
      show_cursor = bool
      '''Display 3D Cursor Overlay
         @returns: boolean
      '''
      
      show_curve_handles = bool
      '''Display Bezier handles in editmode
         @returns: boolean
      '''
      
      show_curve_normals = bool
      '''Display 3D curve normals in editmode
         @returns: boolean
      '''
      
      show_edge_bevel_weight = bool
      '''Display weights created for the Bevel modifier
         @returns: boolean
      '''
      
      show_edge_crease = bool
      '''Display creases created for Subdivision Surface modifier
         @returns: boolean
      '''
      
      show_edge_seams = bool
      '''Display UV unwrapping seams
         @returns: boolean
      '''
      
      show_edge_sharp = bool
      '''Display sharp edges, used with the Edge Split modifier
         @returns: boolean
      '''
      
      show_edges = bool
      '''Highlight selected edges
         @returns: boolean
      '''
      
      show_extra_edge_angle = bool
      '''Display selected edge angle, using global values when set in the transform panel
         @returns: boolean
      '''
      
      show_extra_edge_length = bool
      '''Display selected edge lengths, using global values when set in the transform panel
         @returns: boolean
      '''
      
      show_extra_face_angle = bool
      '''Display the angles in the selected edges, using global values when set in the transform panel
         @returns: boolean
      '''
      
      show_extra_face_area = bool
      '''Display the area of selected faces, using global values when set in the transform panel
         @returns: boolean
      '''
      
      show_extra_indices = bool
      '''Display the index numbers of selected vertices, edges, and faces
         @returns: boolean
      '''
      
      show_extras = bool
      '''Object details, including empty wire, cameras and other visual guides
         @returns: boolean
      '''
      
      show_face_center = bool
      '''Display face center
         @returns: boolean
      '''
      
      show_face_normals = bool
      '''Display face normals as lines
         @returns: boolean
      '''
      
      show_face_orientation = bool
      '''Show the Face Orientation Overlay
         @returns: boolean
      '''
      
      show_faces = bool
      '''Highlight selected faces
         @returns: boolean
      '''
      
      show_floor = bool
      '''Show the ground plane grid
         @returns: boolean
      '''
      
      show_freestyle_edge_marks = bool
      '''Display Freestyle edge marks, used with the Freestyle renderer
         @returns: boolean
      '''
      
      show_freestyle_face_marks = bool
      '''Display Freestyle face marks, used with the Freestyle renderer
         @returns: boolean
      '''
      
      show_look_dev = bool
      '''Show HDRI preview spheres
         @returns: boolean
      '''
      
      show_motion_paths = bool
      '''Show the Motion Paths Overlay
         @returns: boolean
      '''
      
      show_object_origins = bool
      '''Show object center dots
         @returns: boolean
      '''
      
      show_object_origins_all = bool
      '''Show the object origin center dot for all (selected and unselected) objects
         @returns: boolean
      '''
      
      show_occlude_wire = bool
      '''Use hidden wireframe display
         @returns: boolean
      '''
      
      show_onion_skins = bool
      '''Show the Onion Skinning Overlay
         @returns: boolean
      '''
      
      show_ortho_grid = bool
      '''Show grid in orthographic side view
         @returns: boolean
      '''
      
      show_outline_selected = bool
      '''Show an outline highlight around selected objects
         @returns: boolean
      '''
      
      show_overlays = bool
      '''Display overlays like gizmos and outlines
         @returns: boolean
      '''
      
      show_paint_wire = bool
      '''Use wireframe display in painting modes
         @returns: boolean
      '''
      
      show_relationship_lines = bool
      '''Show dashed lines indicating parent or constraint relationships
         @returns: boolean
      '''
      
      show_split_normals = bool
      '''Display vertex-per-face normals as lines
         @returns: boolean
      '''
      
      show_statvis = bool
      '''Display statistical information about the mesh
         @returns: boolean
      '''
      
      show_text = bool
      '''Display overlay text
         @returns: boolean
      '''
      
      show_vertex_normals = bool
      '''Display vertex normals as lines
         @returns: boolean
      '''
      
      show_weight = bool
      '''Display weights in editmode
         @returns: boolean
      '''
      
      show_wireframes = bool
      '''Show face edges wires
         @returns: boolean
      '''
      
      show_wpaint_contours = bool
      '''Show contour lines formed by points with the same interpolated weight
         @returns: boolean
      '''
      
      show_xray_bone = bool
      '''Show the bone selection overlay
         @returns: boolean
      '''
      
      texture_paint_mode_opacity = float
      '''Opacity of the texture paint mode stencil mask overlay
         @returns: float in [0, 1]
      '''
      
      use_gpencil_edit_lines = bool
      '''Show Edit Lines when editing strokes
         @returns: boolean
      '''
      
      use_gpencil_fade_gp_objects = bool
      '''Fade Grease Pencil Objects, except the active one
         @returns: boolean
      '''
      
      use_gpencil_fade_layers = bool
      '''Toggle fading of Grease Pencil layers except the active one
         @returns: boolean
      '''
      
      use_gpencil_fade_objects = bool
      '''Fade all viewport objects with a full color layer to improve visibility
         @returns: boolean
      '''
      
      use_gpencil_grid = bool
      '''Display a grid over grease pencil paper
         @returns: boolean
      '''
      
      use_gpencil_multiedit_line_only = bool
      '''Show Edit Lines only in multiframe
         @returns: boolean
      '''
      
      use_gpencil_onion_skin = bool
      '''Show ghosts of the keyframes before and after the current frame
         @returns: boolean
      '''
      
      use_gpencil_show_directions = bool
      '''Show stroke drawing direction with a bigger green dot (start) and smaller red dot (end) points
         @returns: boolean
      '''
      
      use_gpencil_show_material_name = bool
      '''Show material name assigned to each stroke
         @returns: boolean
      '''
      
      vertex_opacity = float
      '''Opacity for edit vertices
         @returns: float in [0, 1]
      '''
      
      vertex_paint_mode_opacity = float
      '''Opacity of the texture paint mode stencil mask overlay
         @returns: float in [0, 1]
      '''
      
      weight_paint_mode_opacity = float
      '''Opacity of the weight paint mode overlay
         @returns: float in [0, 1]
      '''
      
      wireframe_threshold = float
      '''Adjust the angle threshold for displaying edges (1.0 for all)
         @returns: float in [0, 1]
      '''
      
      xray_alpha_bone = float
      '''Opacity to use for bone selection
         @returns: float in [0, 1]
      '''
      
   class View3DShading(types.bpy_struct):
      '''Settings for shading in the 3D viewport
      '''
   
      background_color = float
      '''Color for custom background color
         @returns: float array of 3 items in [0, 1]
      '''
      
      background_type = str
      '''Way to draw the background
         @returns: enum in ['THEME', 'WORLD', 'VIEWPORT']
      '''
      
      cavity_ridge_factor = float
      '''Factor for the cavity ridges
         @returns: float in [0, 250]
      '''
      
      cavity_type = str
      '''Way to draw the cavity shading
         @returns: enum in ['WORLD', 'SCREEN', 'BOTH']
      '''
      
      cavity_valley_factor = float
      '''Factor for the cavity valleys
         @returns: float in [0, 250]
      '''
      
      color_type = str
      '''Color Type
         @returns: enum in ['MATERIAL', 'SINGLE', 'OBJECT', 'RANDOM', 'VERTEX', 'TEXTURE']
      '''
      
      curvature_ridge_factor = float
      '''Factor for the curvature ridges
         @returns: float in [0, 2]
      '''
      
      curvature_valley_factor = float
      '''Factor for the curvature valleys
         @returns: float in [0, 2]
      '''
      
      cycles = types.CyclesView3DShadingSettings # (read only)
      '''
         @returns: CyclesView3DShadingSettings
      '''
      
      light = str
      '''Lighting Method for Solid/Texture Viewport Shading
         @returns: enum in ['STUDIO', 'MATCAP', 'FLAT']
      '''
      
      object_outline_color = float
      '''Color for object outline
         @returns: float array of 3 items in [0, 1]
      '''
      
      render_pass = str
      '''Render Pass to show in the viewport
         @returns: enum in ['COMBINED', 'EMISSION', 'ENVIRONMENT', 'AO', 'SHADOW', 'DIFFUSE_LIGHT', 'DIFFUSE_COLOR', 'SPECULAR_LIGHT', 'SPECULAR_COLOR', 'VOLUME_TRANSMITTANCE', 'VOLUME_SCATTER', 'BLOOM', 'NORMAL', 'MIST']
      '''
      
      selected_studio_light = types.StudioLight # (read only)
      '''Selected StudioLight
         @returns: StudioLight
      '''
      
      shadow_intensity = float
      '''Darkness of shadows
         @returns: float in [0, 1]
      '''
      
      show_backface_culling = bool
      '''Use back face culling to hide the back side of faces
         @returns: boolean
      '''
      
      show_cavity = bool
      '''Show Cavity
         @returns: boolean
      '''
      
      show_object_outline = bool
      '''Show Object Outline
         @returns: boolean
      '''
      
      show_shadows = bool
      '''Show Shadow
         @returns: boolean
      '''
      
      show_specular_highlight = bool
      '''Render specular highlights
         @returns: boolean
      '''
      
      show_xray = bool
      '''Show whole scene transparent
         @returns: boolean
      '''
      
      show_xray_wireframe = bool
      '''Show whole scene transparent
         @returns: boolean
      '''
      
      single_color = float
      '''Color for single color mode
         @returns: float array of 3 items in [0, 1]
      '''
      
      studio_light = str
      '''Studio lighting setup
         @returns: enum in ['DEFAULT']
      '''
      
      studiolight_background_alpha = float
      '''Show the studiolight in the background
         @returns: float in [0, 1]
      '''
      
      studiolight_background_blur = float
      '''Blur the studiolight in the background
         @returns: float in [0, 1]
      '''
      
      studiolight_intensity = float
      '''Strength of the studiolight
         @returns: float in [0, inf]
      '''
      
      studiolight_rotate_z = float
      '''Rotation of the studiolight around the Z-Axis
         @returns: float in [-3.14159, 3.14159]
      '''
      
      type = str
      '''Method to display/shade objects in the 3D View
         @returns: enum in ['WIREFRAME', 'SOLID', 'MATERIAL', 'RENDERED']
      '''
      
      use_dof = bool
      '''Use depth of field on viewport using the values from the active camera
         @returns: boolean
      '''
      
      use_scene_lights = bool
      '''Render lights and light probes of the scene
         @returns: boolean
      '''
      
      use_scene_lights_render = bool
      '''Render lights and light probes of the scene
         @returns: boolean
      '''
      
      use_scene_world = bool
      '''Use scene world for lighting
         @returns: boolean
      '''
      
      use_scene_world_render = bool
      '''Use scene world for lighting
         @returns: boolean
      '''
      
      use_world_space_lighting = bool
      '''Make the lighting fixed and not follow the camera
         @returns: boolean
      '''
      
      wireframe_color_type = str
      '''Color Type
         @returns: enum in ['MATERIAL', 'SINGLE', 'OBJECT', 'RANDOM', 'VERTEX', 'TEXTURE']
      '''
      
      xray_alpha = float
      '''Amount of alpha to use
         @returns: float in [0, 1]
      '''
      
      xray_alpha_wireframe = float
      '''Amount of alpha to use
         @returns: float in [0, 1]
      '''
      
   class ViewLayer(types.bpy_struct):
      '''View layer
      '''
   
      active_layer_collection = types.LayerCollection
      '''Active layer collection in this view layer's hierarchy
         @returns: LayerCollection, (never None)
      '''
      
      cycles = types.CyclesRenderLayerSettings # (read only)
      '''Cycles ViewLayer Settings
         @returns: CyclesRenderLayerSettings
      '''
      
      depsgraph = types.Depsgraph # (read only)
      '''Dependencies in the scene data
         @returns: Depsgraph
      '''
      
      eevee = types.ViewLayerEEVEE # (read only)
      '''View layer settings for EEVEE
         @returns: ViewLayerEEVEE, (never None)
      '''
      
      freestyle_settings = types.FreestyleSettings # (read only)
      '''
         @returns: FreestyleSettings, (never None)
      '''
      
      invert_zmask = bool
      '''For Zmask, only render what is behind solid z values instead of in front
         @returns: boolean
      '''
      
      layer_collection = types.LayerCollection # (read only)
      '''Root of collections hierarchy of this view layer,its 'collection' pointer property is the same as the scene's master collection
         @returns: LayerCollection, (never None)
      '''
      
      material_override = types.Material
      '''Material to override all other materials in this view layer
         @returns: Material
      '''
      
      name = str
      '''View layer name
         @returns: string, (never None)
      '''
      
      objects = types.LayerObjects # (read only)
      '''All the objects in this layer
         @returns: LayerObjects Collection of Object
      '''
      
      pass_alpha_threshold = float
      '''Z, Index, normal, UV and vector passes are only affected by surfaces with alpha transparency equal to or higher than this threshold
         @returns: float in [0, 1]
      '''
      
      samples = int
      '''Override number of render samples for this view layer, 0 will use the scene setting
         @returns: int in [0, inf]
      '''
      
      use = bool
      '''Enable or disable rendering of this View Layer
         @returns: boolean
      '''
      
      use_all_z = bool
      '''Fill in Z values for solid faces in invisible layers, for masking
         @returns: boolean
      '''
      
      use_ao = bool
      '''Render Ambient Occlusion in this Layer
         @returns: boolean
      '''
      
      use_edge_enhance = bool
      '''Render Edge-enhance in this Layer (only works for Solid faces)
         @returns: boolean
      '''
      
      use_freestyle = bool
      '''Render stylized strokes in this Layer
         @returns: boolean
      '''
      
      use_halo = bool
      '''Render Halos in this Layer (on top of Solid)
         @returns: boolean
      '''
      
      use_pass_ambient_occlusion = bool
      '''Deliver Ambient Occlusion pass
         @returns: boolean
      '''
      
      use_pass_combined = bool
      '''Deliver full combined RGBA buffer
         @returns: boolean
      '''
      
      use_pass_diffuse_color = bool
      '''Deliver diffuse color pass
         @returns: boolean
      '''
      
      use_pass_diffuse_direct = bool
      '''Deliver diffuse direct pass
         @returns: boolean
      '''
      
      use_pass_diffuse_indirect = bool
      '''Deliver diffuse indirect pass
         @returns: boolean
      '''
      
      use_pass_emit = bool
      '''Deliver emission pass
         @returns: boolean
      '''
      
      use_pass_environment = bool
      '''Deliver environment lighting pass
         @returns: boolean
      '''
      
      use_pass_glossy_color = bool
      '''Deliver glossy color pass
         @returns: boolean
      '''
      
      use_pass_glossy_direct = bool
      '''Deliver glossy direct pass
         @returns: boolean
      '''
      
      use_pass_glossy_indirect = bool
      '''Deliver glossy indirect pass
         @returns: boolean
      '''
      
      use_pass_material_index = bool
      '''Deliver material index pass
         @returns: boolean
      '''
      
      use_pass_mist = bool
      '''Deliver mist factor pass (0.0-1.0)
         @returns: boolean
      '''
      
      use_pass_normal = bool
      '''Deliver normal pass
         @returns: boolean
      '''
      
      use_pass_object_index = bool
      '''Deliver object index pass
         @returns: boolean
      '''
      
      use_pass_shadow = bool
      '''Deliver shadow pass
         @returns: boolean
      '''
      
      use_pass_subsurface_color = bool
      '''Deliver subsurface color pass
         @returns: boolean
      '''
      
      use_pass_subsurface_direct = bool
      '''Deliver subsurface direct pass
         @returns: boolean
      '''
      
      use_pass_subsurface_indirect = bool
      '''Deliver subsurface indirect pass
         @returns: boolean
      '''
      
      use_pass_transmission_color = bool
      '''Deliver transmission color pass
         @returns: boolean
      '''
      
      use_pass_transmission_direct = bool
      '''Deliver transmission direct pass
         @returns: boolean
      '''
      
      use_pass_transmission_indirect = bool
      '''Deliver transmission indirect pass
         @returns: boolean
      '''
      
      use_pass_uv = bool
      '''Deliver texture UV pass
         @returns: boolean
      '''
      
      use_pass_vector = bool
      '''Deliver speed vector pass
         @returns: boolean
      '''
      
      use_pass_z = bool
      '''Deliver Z values pass
         @returns: boolean
      '''
      
      use_sky = bool
      '''Render Sky in this Layer
         @returns: boolean
      '''
      
      use_solid = bool
      '''Render Solid faces in this Layer
         @returns: boolean
      '''
      
      use_strand = bool
      '''Render Strands in this Layer
         @returns: boolean
      '''
      
      use_volumes = bool
      '''Render volumes in this Layer
         @returns: boolean
      '''
      
      use_zmask = bool
      '''Only render what's in front of the solid z values
         @returns: boolean
      '''
      
      use_ztransp = bool
      '''Render Z-Transparent faces in this Layer (on top of Solid and Halos)
         @returns: boolean
      '''
      
      @classmethod
      def update_render_passes():
         '''Requery the enabled render passes from the render engine
         '''
      
         pass

      def update():
         '''Update data tagged to be updated from previous access to data or operators
         '''
      
         pass

   class ViewLayerEEVEE(types.bpy_struct):
      '''View layer settings for EEVEE
      '''
   
      use_pass_bloom = bool
      '''Deliver bloom pass
         @returns: boolean
      '''
      
      use_pass_volume_scatter = bool
      '''Deliver volume scattering pass
         @returns: boolean
      '''
      
      use_pass_volume_transmittance = bool
      '''Deliver volume transmittance pass
         @returns: boolean
      '''
      
   class ViewLayers(types.bpy_struct):
      '''Collection of render layers
      '''
   
      def new(name):
         '''Add a view layer to scene
            Arguments:
            @name (str): New name for the view layer (not unique)
               (never None)
      
            @returns (types.ViewLayer): Newly created view layer
               
         '''
      
         return types.ViewLayer

      def remove(layer):
         '''Remove a view layer
            Arguments:
            @layer (ViewLayer): View layer to remove
               (never None)
      
         '''
      
         pass

   class Volume(types.ID):
      '''Volume data-block for 3D volume grids
      '''
   
      animation_data = types.AnimData # (read only)
      '''Animation data for this data-block
         @returns: AnimData
      '''
      
      display = types.VolumeDisplay # (read only)
      '''Volume display settings for 3d viewport
         @returns: VolumeDisplay
      '''
      
      filepath = str
      '''Volume file used by this Volume data-block
         @returns: string, (never None)
      '''
      
      frame_duration = int
      '''Number of frames of the sequence to use
         @returns: int in [0, 1048574]
      '''
      
      frame_offset = int
      '''Offset the number of the frame to use in the animation
         @returns: int in [-inf, inf]
      '''
      
      frame_start = int
      '''Global starting frame of the sequence, assuming first has a #1
         @returns: int in [-1048574, 1048574]
      '''
      
      grids = types.VolumeGrids # (read only)
      '''3D volume grids
         @returns: VolumeGrids Collection of VolumeGrid
      '''
      
      is_sequence = bool
      '''Whether the cache is separated in a series of files
         @returns: boolean
      '''
      
      materials = types.IDMaterials # (read only)
      '''
         @returns: IDMaterials Collection of Material
      '''
      
      packed_file = types.PackedFile # (read only)
      '''
         @returns: PackedFile
      '''
      
      render = types.VolumeRender # (read only)
      '''Volume render settings for 3d viewport
         @returns: VolumeRender
      '''
      
      sequence_mode = str
      '''Sequence playback mode
         @returns: enum in ['CLIP', 'EXTEND', 'REPEAT', 'PING_PONG']
      '''
      
   class VolumeDisplay(types.bpy_struct):
      '''Volume object display settings for 3d viewport
      '''
   
      density = float
      '''Thickness of volume drawing in the viewport
         @returns: float in [1e-05, inf]
      '''
      
      wireframe_detail = str
      '''Amount of detail for wireframe display
         @returns: enum in ['COARSE', 'FINE']
      '''
      
      wireframe_type = str
      '''Type of wireframe display
         @returns: enum in ['NONE', 'BOUNDS', 'BOXES', 'POINTS']
      '''
      
   class VolumeGrid(types.bpy_struct):
      '''3D volume grid
      '''
   
      channels = int # (read only)
      '''Number of dimensions of the grid data type
         @returns: int in [0, inf]
      '''
      
      data_type = str # (read only)
      '''Data type of voxel values
         @returns: enum in ['BOOLEAN', 'FLOAT', 'DOUBLE', 'INT', 'INT64', 'MASK', 'STRING', 'VECTOR_FLOAT', 'VECTOR_DOUBLE', 'VECTOR_INT', 'POINTS', 'UNKNOWN']
      '''
      
      is_loaded = bool # (read only)
      '''Grid tree is loaded in memory
         @returns: boolean
      '''
      
      matrix_object = float # (read only)
      '''Transformation matrix from voxel index to object space
         @returns: float multi-dimensional array of 4 * 4 items in [-inf, inf]
      '''
      
      name = str # (read only)
      '''Volume grid name
         @returns: string, (never None)
      '''
      
      def load():
         '''Load grid tree from file
            @returns (bool): True if grid tree was successfully loaded
               
         '''
      
         return bool

      def unload():
         '''Unload grid tree and voxel data from memory, leaving only metadata
         '''
      
         pass

   class VolumeGrids(types.bpy_struct):
      '''3D volume grids
      '''
   
      active_index = int
      '''Index of active volume grid
         @returns: int in [0, inf]
      '''
      
      error_message = str # (read only)
      '''If loading grids failed, error message with details
         @returns: string, (never None)
      '''
      
      frame = int # (read only)
      '''Frame number that volume grids will be loaded at, based on scene time and volume parameters
         @returns: int in [-inf, inf]
      '''
      
      frame_filepath = str # (read only)
      '''Volume file used for loading the volume at the current frame. Empty if the volume has not be loaded or the frame only exists in memory
         @returns: string, (never None)
      '''
      
      is_loaded = bool # (read only)
      '''List of grids and metadata are loaded in memory
         @returns: boolean
      '''
      
      def load():
         '''Load list of grids and metadata from file
            @returns (bool): True if grid list was successfully loaded
               
         '''
      
         return bool

      def unload():
         '''Unload all grid and voxel data from memory
         '''
      
         pass

   class VolumeRender(types.bpy_struct):
      '''Volume object render settings
      '''
   
      clipping = float
      '''Value under which voxels are considered empty space to optimize rendering
         @returns: float in [0, 1]
      '''
      
      space = str
      '''Specify volume density and step size  in object or world space
         @returns: enum in ['OBJECT', 'WORLD']
      '''
      
      step_size = float
      '''Distance between volume samples. Lower values render more detail at the cost of performance. If set to zero, the step size is automatically determined based on voxel size
         @returns: float in [0, inf]
      '''
      
   class VoronoiTexture(types.Texture):
      '''Procedural voronoi texture
      '''
   
      color_mode = str
      '''
         @returns: enum in ['INTENSITY', 'POSITION', 'POSITION_OUTLINE', 'POSITION_OUTLINE_INTENSITY']
      '''
      
      distance_metric = str
      '''Algorithm used to calculate distance of sample points to feature points
         @returns: enum in ['DISTANCE', 'DISTANCE_SQUARED', 'MANHATTAN', 'CHEBYCHEV', 'MINKOVSKY_HALF', 'MINKOVSKY_FOUR', 'MINKOVSKY']
      '''
      
      minkovsky_exponent = float
      '''Minkowski exponent
         @returns: float in [0.01, 10]
      '''
      
      nabla = float
      '''Size of derivative offset used for calculating normal
         @returns: float in [0.001, 0.1]
      '''
      
      noise_intensity = float
      '''Scales the intensity of the noise
         @returns: float in [0.01, 10]
      '''
      
      noise_scale = float
      '''Scaling for noise input
         @returns: float in [0.0001, inf]
      '''
      
      weight_1 = float
      '''Voronoi feature weight 1
         @returns: float in [-2, 2]
      '''
      
      weight_2 = float
      '''Voronoi feature weight 2
         @returns: float in [-2, 2]
      '''
      
      weight_3 = float
      '''Voronoi feature weight 3
         @returns: float in [-2, 2]
      '''
      
      weight_4 = float
      '''Voronoi feature weight 4
         @returns: float in [-2, 2]
      '''
      
      users_material = None # (readonly)
      '''Materials that use this texture
         
      '''
      
      
      users_object_modifier = None # (readonly)
      '''Object modifiers that use this texture
         
      '''
      
      
   class WalkNavigation(types.bpy_struct):
      '''Walk navigation settings
      '''
   
      jump_height = float
      '''Maximum height of a jump
         @returns: float in [0.1, 100]
      '''
      
      mouse_speed = float
      '''Speed factor for when looking around, high values mean faster mouse movement
         @returns: float in [0.01, 10]
      '''
      
      teleport_time = float
      '''Interval of time warp when teleporting in navigation mode
         @returns: float in [0, 10]
      '''
      
      use_gravity = bool
      '''Walk with gravity, or free navigate
         @returns: boolean
      '''
      
      use_mouse_reverse = bool
      '''Reverse the vertical movement of the mouse
         @returns: boolean
      '''
      
      view_height = float
      '''View distance from the floor when walking
         @returns: float in [0, 1000]
      '''
      
      walk_speed = float
      '''Base speed for walking and flying
         @returns: float in [0.01, 100]
      '''
      
      walk_speed_factor = float
      '''Multiplication factor when using the fast or slow modifiers
         @returns: float in [0.01, 10]
      '''
      
   class WarpModifier(types.Modifier):
      '''Warp modifier
      '''
   
      bone_from = str
      '''Bone to transform from
         @returns: string, (never None)
      '''
      
      bone_to = str
      '''Bone defining offset
         @returns: string, (never None)
      '''
      
      falloff_curve = types.CurveMapping # (read only)
      '''Custom falloff curve
         @returns: CurveMapping
      '''
      
      falloff_radius = float
      '''Radius to apply
         @returns: float in [-inf, inf]
      '''
      
      falloff_type = str
      '''
         @returns: enum in ['NONE', 'CURVE', 'SMOOTH', 'SPHERE', 'ROOT', 'INVERSE_SQUARE', 'SHARP', 'LINEAR', 'CONSTANT']
      '''
      
      invert_vertex_group = bool
      '''Invert vertex group influence
         @returns: boolean
      '''
      
      object_from = types.Object
      '''Object to transform from
         @returns: Object
      '''
      
      object_to = types.Object
      '''Object to transform to
         @returns: Object
      '''
      
      strength = float
      '''
         @returns: float in [-inf, inf]
      '''
      
      texture = types.Texture
      '''
         @returns: Texture
      '''
      
      texture_coords = str
      '''
         @returns: enum in ['LOCAL', 'GLOBAL', 'OBJECT', 'UV']
      '''
      
      texture_coords_bone = str
      '''Bone to set the texture coordinates
         @returns: string, (never None)
      '''
      
      texture_coords_object = types.Object
      '''Object to set the texture coordinates
         @returns: Object
      '''
      
      use_volume_preserve = bool
      '''Preserve volume when rotations are used
         @returns: boolean
      '''
      
      uv_layer = str
      '''UV map name
         @returns: string, (never None)
      '''
      
      vertex_group = str
      '''Vertex group name for modulating the deform
         @returns: string, (never None)
      '''
      
   class WaveModifier(types.Modifier):
      '''Wave effect modifier
      '''
   
      damping_time = float
      '''Number of frames in which the wave damps out after it dies
         @returns: float in [-1.04857e+06, 1.04857e+06]
      '''
      
      falloff_radius = float
      '''Distance after which it fades out
         @returns: float in [0, inf]
      '''
      
      height = float
      '''Height of the wave
         @returns: float in [-inf, inf]
      '''
      
      invert_vertex_group = bool
      '''Invert vertex group influence
         @returns: boolean
      '''
      
      lifetime = float
      '''Lifetime of the wave in frames, zero means infinite
         @returns: float in [-1.04857e+06, 1.04857e+06]
      '''
      
      narrowness = float
      '''Distance between the top and the base of a wave, the higher the value, the more narrow the wave
         @returns: float in [0, inf]
      '''
      
      speed = float
      '''Speed of the wave, towards the starting point when negative
         @returns: float in [-inf, inf]
      '''
      
      start_position_object = types.Object
      '''Object which defines the wave center
         @returns: Object
      '''
      
      start_position_x = float
      '''X coordinate of the start position
         @returns: float in [-inf, inf]
      '''
      
      start_position_y = float
      '''Y coordinate of the start position
         @returns: float in [-inf, inf]
      '''
      
      texture = types.Texture
      '''
         @returns: Texture
      '''
      
      texture_coords = str
      '''
         @returns: enum in ['LOCAL', 'GLOBAL', 'OBJECT', 'UV']
      '''
      
      texture_coords_bone = str
      '''Bone to set the texture coordinates
         @returns: string, (never None)
      '''
      
      texture_coords_object = types.Object
      '''Object to set the texture coordinates
         @returns: Object
      '''
      
      time_offset = float
      '''Either the starting frame (for positive speed) or ending frame (for negative speed.)
         @returns: float in [-1.04857e+06, 1.04857e+06]
      '''
      
      use_cyclic = bool
      '''Cyclic wave effect
         @returns: boolean
      '''
      
      use_normal = bool
      '''Displace along normals
         @returns: boolean
      '''
      
      use_normal_x = bool
      '''Enable displacement along the X normal
         @returns: boolean
      '''
      
      use_normal_y = bool
      '''Enable displacement along the Y normal
         @returns: boolean
      '''
      
      use_normal_z = bool
      '''Enable displacement along the Z normal
         @returns: boolean
      '''
      
      use_x = bool
      '''X axis motion
         @returns: boolean
      '''
      
      use_y = bool
      '''Y axis motion
         @returns: boolean
      '''
      
      uv_layer = str
      '''UV map name
         @returns: string, (never None)
      '''
      
      vertex_group = str
      '''Vertex group name for modulating the wave
         @returns: string, (never None)
      '''
      
      width = float
      '''Distance between the waves
         @returns: float in [0, inf]
      '''
      
   class WeightedNormalModifier(types.Modifier):
      '''
      '''
   
      face_influence = bool
      '''Use influence of face for weighting
         @returns: boolean
      '''
      
      invert_vertex_group = bool
      '''Invert vertex group influence
         @returns: boolean
      '''
      
      keep_sharp = bool
      '''Keep sharp edges as computed for default split normals, instead of setting a single weighted normal for each vertex
         @returns: boolean
      '''
      
      mode = str
      '''Weighted vertex normal mode to use
         @returns: enum in ['FACE_AREA', 'CORNER_ANGLE', 'FACE_AREA_WITH_ANGLE']
      '''
      
      thresh = float
      '''Threshold value for different weights to be considered equal
         @returns: float in [0, 10]
      '''
      
      vertex_group = str
      '''Vertex group name for modifying the selected areas
         @returns: string, (never None)
      '''
      
      weight = int
      '''Corrective factor applied to faces' weights, 50 is neutral, lower values increase weight of weak faces, higher values increase weight of strong faces
         @returns: int in [1, 100]
      '''
      
   class WeldModifier(types.Modifier):
      '''Weld modifier
      '''
   
      invert_vertex_group = bool
      '''Invert vertex group influence
         @returns: boolean
      '''
      
      max_interactions = int
      '''For a better performance, limits the number of elements found per vertex. (0 makes it infinite)
         @returns: int in [0, inf]
      '''
      
      merge_threshold = float
      '''Limit below which to merge vertices
         @returns: float in [0, inf]
      '''
      
      vertex_group = str
      '''Vertex group name for selecting the affected areas
         @returns: string, (never None)
      '''
      
   class WhiteBalanceModifier(types.SequenceModifier):
      '''White balance modifier for sequence strip
      '''
   
      white_value = float
      '''This color defines white in the strip
         @returns: float array of 3 items in [0, 1]
      '''
      
   class WholeCharacter(types.KeyingSetInfo):
      '''
      '''
   
      def addProp(ksi, ks, bone, prop, index=-1, use_groups=True):
         
      
         pass
      
      def doBBone(ksi, context, ks, pchan):
         
      
         pass
      
      def doCustomProps(ksi, ks, bone):
         
      
         pass
      
      def doLoc(ksi, ks, bone):
         
      
         pass
      
      def doRot3d(ksi, ks, bone):
         
      
         pass
      
      def doRot4d(ksi, ks, bone):
         
      
         pass
      
      def doScale(ksi, ks, bone):
         
      
         pass
      
      def generate(ksi, context, ks, bone):
         
      
         pass
      
      def iterator(ksi, context, ks):
         
      
         pass
      
      def poll(ksi, context):
         
      
         pass
      
   class WholeCharacterSelected(types.KeyingSetInfo):
      '''
      '''
   
      def addProp(ksi, ks, bone, prop, index=-1, use_groups=True):
         
      
         pass
      
      def doBBone(ksi, context, ks, pchan):
         
      
         pass
      
      def doCustomProps(ksi, ks, bone):
         
      
         pass
      
      def doLoc(ksi, ks, bone):
         
      
         pass
      
      def doRot3d(ksi, ks, bone):
         
      
         pass
      
      def doRot4d(ksi, ks, bone):
         
      
         pass
      
      def doScale(ksi, ks, bone):
         
      
         pass
      
      def generate(ksi, context, ks, bone):
         
      
         pass
      
      def iterator(ksi, context, ks):
         
      
         pass
      
      def poll(ksi, context):
         
      
         pass
      
   class Window(types.bpy_struct):
      '''Open window
      '''
   
      height = int # (read only)
      '''Window height
         @returns: int in [0, 32767]
      '''
      
      parent = types.Window # (read only)
      '''Active workspace and scene follow this window
         @returns: Window
      '''
      
      scene = types.Scene
      '''Active scene to be edited in the window
         @returns: Scene, (never None)
      '''
      
      screen = types.Screen
      '''Active workspace screen showing in the window
         @returns: Screen, (never None)
      '''
      
      stereo_3d_display = types.Stereo3dDisplay # (read only)
      '''Settings for stereo 3d display
         @returns: Stereo3dDisplay, (never None)
      '''
      
      view_layer = types.ViewLayer
      '''The active workspace view layer showing in the window
         @returns: ViewLayer, (never None)
      '''
      
      width = int # (read only)
      '''Window width
         @returns: int in [0, 32767]
      '''
      
      workspace = types.WorkSpace
      '''Active workspace showing in the window
         @returns: WorkSpace, (never None)
      '''
      
      x = int # (read only)
      '''Horizontal location of the window
         @returns: int in [-32768, 32767]
      '''
      
      y = int # (read only)
      '''Vertical location of the window
         @returns: int in [-32768, 32767]
      '''
      
      def cursor_warp(x, y):
         '''Set the cursor position
            Arguments:
            @x (int): in [-inf, inf]
            @y (int): in [-inf, inf]
      
         '''
      
         pass

      def cursor_set(cursor):
         '''Set the cursor
            Arguments:
            @cursor (str): in ['DEFAULT', 'NONE', 'WAIT', 'CROSSHAIR', 'MOVE_X', 'MOVE_Y', 'KNIFE', 'TEXT', 'PAINT_BRUSH', 'PAINT_CROSS', 'DOT', 'ERASER', 'HAND', 'SCROLL_X', 'SCROLL_Y', 'SCROLL_XY', 'EYEDROPPER']
      
         '''
      
         pass

      def cursor_modal_set(cursor):
         '''Restore the previous cursor after calling ``cursor_modal_set``
            Arguments:
            @cursor (str): in ['DEFAULT', 'NONE', 'WAIT', 'CROSSHAIR', 'MOVE_X', 'MOVE_Y', 'KNIFE', 'TEXT', 'PAINT_BRUSH', 'PAINT_CROSS', 'DOT', 'ERASER', 'HAND', 'SCROLL_X', 'SCROLL_Y', 'SCROLL_XY', 'EYEDROPPER']
      
         '''
      
         pass

      def cursor_modal_restore():
         '''cursor_modal_restore
         '''
      
         pass

      def event_simulate(type, value, unicode="", x=0, y=0, shift=False, ctrl=False, alt=False, oskey=False):
         '''event_simulate
            Arguments:
            @type (str): in ['NONE', 'LEFTMOUSE', 'MIDDLEMOUSE', 'RIGHTMOUSE', 'BUTTON4MOUSE', 'BUTTON5MOUSE', 'BUTTON6MOUSE', 'BUTTON7MOUSE', 'PEN', 'ERASER', 'MOUSEMOVE', 'INBETWEEN_MOUSEMOVE', 'TRACKPADPAN', 'TRACKPADZOOM', 'MOUSEROTATE', 'MOUSESMARTZOOM', 'WHEELUPMOUSE', 'WHEELDOWNMOUSE', 'WHEELINMOUSE', 'WHEELOUTMOUSE', 'EVT_TWEAK_L', 'EVT_TWEAK_M', 'EVT_TWEAK_R', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'ZERO', 'ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE', 'LEFT_CTRL', 'LEFT_ALT', 'LEFT_SHIFT', 'RIGHT_ALT', 'RIGHT_CTRL', 'RIGHT_SHIFT', 'OSKEY', 'APP', 'GRLESS', 'ESC', 'TAB', 'RET', 'SPACE', 'LINE_FEED', 'BACK_SPACE', 'DEL', 'SEMI_COLON', 'PERIOD', 'COMMA', 'QUOTE', 'ACCENT_GRAVE', 'MINUS', 'PLUS', 'SLASH', 'BACK_SLASH', 'EQUAL', 'LEFT_BRACKET', 'RIGHT_BRACKET', 'LEFT_ARROW', 'DOWN_ARROW', 'RIGHT_ARROW', 'UP_ARROW', 'NUMPAD_2', 'NUMPAD_4', 'NUMPAD_6', 'NUMPAD_8', 'NUMPAD_1', 'NUMPAD_3', 'NUMPAD_5', 'NUMPAD_7', 'NUMPAD_9', 'NUMPAD_PERIOD', 'NUMPAD_SLASH', 'NUMPAD_ASTERIX', 'NUMPAD_0', 'NUMPAD_MINUS', 'NUMPAD_ENTER', 'NUMPAD_PLUS', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12', 'F13', 'F14', 'F15', 'F16', 'F17', 'F18', 'F19', 'F20', 'F21', 'F22', 'F23', 'F24', 'PAUSE', 'INSERT', 'HOME', 'PAGE_UP', 'PAGE_DOWN', 'END', 'MEDIA_PLAY', 'MEDIA_STOP', 'MEDIA_FIRST', 'MEDIA_LAST', 'TEXTINPUT', 'WINDOW_DEACTIVATE', 'TIMER', 'TIMER0', 'TIMER1', 'TIMER2', 'TIMER_JOBS', 'TIMER_AUTOSAVE', 'TIMER_REPORT', 'TIMERREGION', 'NDOF_MOTION', 'NDOF_BUTTON_MENU', 'NDOF_BUTTON_FIT', 'NDOF_BUTTON_TOP', 'NDOF_BUTTON_BOTTOM', 'NDOF_BUTTON_LEFT', 'NDOF_BUTTON_RIGHT', 'NDOF_BUTTON_FRONT', 'NDOF_BUTTON_BACK', 'NDOF_BUTTON_ISO1', 'NDOF_BUTTON_ISO2', 'NDOF_BUTTON_ROLL_CW', 'NDOF_BUTTON_ROLL_CCW', 'NDOF_BUTTON_SPIN_CW', 'NDOF_BUTTON_SPIN_CCW', 'NDOF_BUTTON_TILT_CW', 'NDOF_BUTTON_TILT_CCW', 'NDOF_BUTTON_ROTATE', 'NDOF_BUTTON_PANZOOM', 'NDOF_BUTTON_DOMINANT', 'NDOF_BUTTON_PLUS', 'NDOF_BUTTON_MINUS', 'NDOF_BUTTON_ESC', 'NDOF_BUTTON_ALT', 'NDOF_BUTTON_SHIFT', 'NDOF_BUTTON_CTRL', 'NDOF_BUTTON_1', 'NDOF_BUTTON_2', 'NDOF_BUTTON_3', 'NDOF_BUTTON_4', 'NDOF_BUTTON_5', 'NDOF_BUTTON_6', 'NDOF_BUTTON_7', 'NDOF_BUTTON_8', 'NDOF_BUTTON_9', 'NDOF_BUTTON_10', 'NDOF_BUTTON_A', 'NDOF_BUTTON_B', 'NDOF_BUTTON_C', 'ACTIONZONE_AREA', 'ACTIONZONE_REGION', 'ACTIONZONE_FULLSCREEN']
            @value (str): in ['ANY', 'PRESS', 'RELEASE', 'CLICK', 'DOUBLE_CLICK', 'CLICK_DRAG', 'NORTH', 'NORTH_EAST', 'EAST', 'SOUTH_EAST', 'SOUTH', 'SOUTH_WEST', 'WEST', 'NORTH_WEST', 'NOTHING']
            @unicode (str): (optional)
            @x (int): in [-inf, inf], (optional)
            @y (int): in [-inf, inf], (optional)
            @shift (bool): (optional)
            @ctrl (bool): (optional)
            @alt (bool): (optional)
            @oskey (bool): (optional)
      
            @returns (types.Event): Added key map item
               
         '''
      
         return types.Event

   class WindowManager(types.ID):
      '''Window manager data-block defining open windows and other user interface data
      '''
   
      addon_filter = str
      '''Filter add-ons by category
         @returns: enum in []
      '''
      
      addon_search = str
      '''Search within the selected filter
         @returns: string, (never None)
      '''
      
      addon_support = str
      '''Display support level
         @returns: enum set in {'OFFICIAL', 'COMMUNITY', 'TESTING'}
      '''
      
      is_interface_locked = bool # (read only)
      '''If true, the interface is currently locked by a running job and data shouldn't be modified from application timers. Otherwise, the running job might conflict with the handler causing unexpected results or even crashes
         @returns: boolean
      '''
      
      keyconfigs = types.KeyConfigurations # (read only)
      '''Registered key configurations
         @returns: KeyConfigurations Collection of KeyConfig
      '''
      
      operators = types.Operator # (read only)
      '''Operator registry
         @returns: Collection of Operator
      '''
      
      preset_name = str
      '''Name for new preset
         @returns: string, (never None)
      '''
      
      windows = types.Window # (read only)
      '''Open windows
         @returns: Collection of Window
      '''
      
      xr_session_settings = types.XrSessionSettings # (read only)
      '''
         @returns: XrSessionSettings, (never None)
      '''
      
      xr_session_state = types.XrSessionState # (read only)
      '''Runtime state information about the VR session
         @returns: XrSessionState
      '''
      
      @classmethod
      def fileselect_add(operator):
         '''Opens a file selector with an operator. The string properties 'filepath', 'filename', 'directory' and a 'files' collection are assigned when present in the operator
            Arguments:
            @operator (Operator): Operator to call
               
      
         '''
      
         pass

      @classmethod
      def modal_handler_add(operator):
         '''Add a modal handler to the window manager, for the given modal operator (called by invoke() with self, just before returning {'RUNNING_MODAL'})
            Arguments:
            @operator (Operator): Operator to call
               
      
            @returns (bool): Whether adding the handler was successful
               
         '''
      
         return bool

      def event_timer_add(time_step, window=None):
         '''Add a timer to the given window, to generate periodic 'TIMER' events
            Arguments:
            @time_step (float): Interval in seconds between timer events
               in [0, inf]
            @window (Window): Window to attach the timer to, or None
               (optional)
      
            @returns (types.Timer): 
         '''
      
         return types.Timer

      def event_timer_remove(timer):
         '''event_timer_remove
            Arguments:
            @timer (Timer): (never None)
      
         '''
      
         pass

      @classmethod
      def gizmo_group_type_ensure(identifier):
         '''Activate an existing widget group (when the persistent option isn't set)
            Arguments:
            @identifier (str): Gizmo group type name
               (never None)
      
         '''
      
         pass

      @classmethod
      def gizmo_group_type_unlink_delayed(identifier):
         '''Unlink a widget group (when the persistent option is set)
            Arguments:
            @identifier (str): Gizmo group type name
               (never None)
      
         '''
      
         pass

      def progress_begin(min, max):
         '''Start progress report
            Arguments:
            @min (float): any value in range [0,9999]
               in [-inf, inf]
            @max (float): any value in range [min+1,9998]
               in [-inf, inf]
      
         '''
      
         pass

      def progress_update(value):
         '''Update the progress feedback
            Arguments:
            @value (float): Any value between min and max as set in progress_begin()
               in [-inf, inf]
      
         '''
      
         pass

      def progress_end():
         '''Terminate progress report
         '''
      
         pass

      @classmethod
      def invoke_props_popup(operator, event):
         '''Operator popup invoke (show operator properties and execute it automatically on changes)
            Arguments:
            @operator (Operator): Operator to call
               
            @event (Event): Event
               
      
            @returns (str): set in {'RUNNING_MODAL', 'CANCELLED', 'FINISHED', 'PASS_THROUGH', 'INTERFACE'}
         '''
      
         return str

      @classmethod
      def invoke_props_dialog(operator, width=300):
         '''Operator dialog (non-autoexec popup) invoke (show operator properties and only execute it on click on OK button)
            Arguments:
            @operator (Operator): Operator to call
               
            @width (int): Width of the popup
               in [0, inf], (optional)
      
            @returns (str): set in {'RUNNING_MODAL', 'CANCELLED', 'FINISHED', 'PASS_THROUGH', 'INTERFACE'}
         '''
      
         return str

      @classmethod
      def invoke_search_popup(operator):
         '''Operator search popup invoke which searches values of the operator's :class:`bpy.types.Operator.bl_property` (which must be an EnumProperty), executing it on confirmation
            Arguments:
            @operator (Operator): Operator to call
               
      
         '''
      
         pass

      @classmethod
      def invoke_popup(operator, width=300):
         '''Operator popup invoke (only shows operator's properties, without executing it)
            Arguments:
            @operator (Operator): Operator to call
               
            @width (int): Width of the popup
               in [0, inf], (optional)
      
            @returns (str): set in {'RUNNING_MODAL', 'CANCELLED', 'FINISHED', 'PASS_THROUGH', 'INTERFACE'}
         '''
      
         return str

      @classmethod
      def invoke_confirm(operator, event):
         '''Operator confirmation popup (only to let user confirm the execution, no operator properties shown)
            Arguments:
            @operator (Operator): Operator to call
               
            @event (Event): Event
               
      
            @returns (str): set in {'RUNNING_MODAL', 'CANCELLED', 'FINISHED', 'PASS_THROUGH', 'INTERFACE'}
         '''
      
         return str

      @classmethod
      def popmenu_begin__internal(title, icon='NONE'):
         '''popmenu_begin__internal
            Arguments:
            @title (str): (never None)
            @icon (str): in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_RIGHT', 'DISCLOSURE_TRI_DOWN', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'DUPLICATE', 'TRASH', 'COLLECTION_NEW', 'OPTIONS', 'NODE', 'NODE_SEL', 'WINDOW', 'WORKSPACE', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ADD', 'REMOVE', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'CHECKMARK', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'FCURVE_SNAPSHOT', 'OBJECT_HIDDEN', 'TOPBAR', 'STATUSBAR', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'UNLINKED', 'LINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'DRIVER_DISTANCE', 'DRIVER_ROTATIONAL_DIFFERENCE', 'DRIVER_TRANSFORM', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'FILE_NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'THREE_DOTS', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BRUSHES_ALL', 'LIGHT', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'OUTPUT', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TOOL_SETTINGS', 'SHADERFX', 'MODIFIER', 'BLANK1', 'FAKE_USER_OFF', 'FAKE_USER_ON', 'VIEW3D', 'GRAPH', 'OUTLINER', 'PROPERTIES', 'FILEBROWSER', 'IMAGE', 'INFO', 'SEQUENCE', 'TEXT', 'SOUND', 'ACTION', 'NLA', 'PREFERENCES', 'TIME', 'NODETREE', 'CONSOLE', 'TRACKER', 'ASSET_MANAGER', 'NODE_COMPOSITING', 'NODE_TEXTURE', 'NODE_MATERIAL', 'UV', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'UV_DATA', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'TRACKING', 'TRACKING_BACKWARDS', 'TRACKING_FORWARDS', 'TRACKING_BACKWARDS_SINGLE', 'TRACKING_FORWARDS_SINGLE', 'TRACKING_CLEAR_BACKWARDS', 'TRACKING_CLEAR_FORWARDS', 'TRACKING_REFINE_BACKWARDS', 'TRACKING_REFINE_FORWARDS', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LIGHT_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'COMMUNITY', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'EXPERIMENTAL', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'PRESET', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'LIBRARY_DATA_OVERRIDE', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'FACE_MAPS', 'RNA', 'RNA_ADD', 'MOUSE_LMB', 'MOUSE_MMB', 'MOUSE_RMB', 'MOUSE_MOVE', 'MOUSE_LMB_DRAG', 'MOUSE_MMB_DRAG', 'MOUSE_RMB_DRAG', 'MEMORY', 'PRESET_NEW', 'DECORATE', 'DECORATE_KEYFRAME', 'DECORATE_ANIMATE', 'DECORATE_DRIVER', 'DECORATE_LINKED', 'DECORATE_LIBRARY_OVERRIDE', 'DECORATE_UNLOCKED', 'DECORATE_LOCKED', 'DECORATE_OVERRIDE', 'FUND', 'TRACKER_DATA', 'HEART', 'ORPHAN_DATA', 'USER', 'SYSTEM', 'SETTINGS', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LIGHT', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'OUTLINER_OB_FORCE_FIELD', 'OUTLINER_OB_GROUP_INSTANCE', 'OUTLINER_OB_GREASEPENCIL', 'OUTLINER_OB_LIGHTPROBE', 'OUTLINER_OB_IMAGE', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'HIDE_ON', 'HIDE_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_RENDER_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_INSTANCED_OFF', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LIGHT', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_LIGHTPROBE', 'OUTLINER_DATA_GP_LAYER', 'OUTLINER_DATA_GREASEPENCIL', 'GP_SELECT_POINTS', 'GP_SELECT_STROKES', 'GP_MULTIFRAME_EDITING', 'GP_ONLY_SELECTED', 'GP_SELECT_BETWEEN_STROKES', 'MODIFIER_OFF', 'MODIFIER_ON', 'ONIONSKIN_OFF', 'ONIONSKIN_ON', 'RESTRICT_VIEW_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_INSTANCED_ON', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'EMPTY_SINGLE_ARROW', 'LIGHT_POINT', 'LIGHT_SUN', 'LIGHT_SPOT', 'LIGHT_HEMI', 'LIGHT_AREA', 'CUBE', 'SPHERE', 'CONE', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'EMPTY_AXIS', 'STROKE', 'EMPTY_ARROWS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'LIGHTPROBE_CUBEMAP', 'LIGHTPROBE_PLANAR', 'LIGHTPROBE_GRID', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'RIGID_BODY', 'RIGID_BODY_CONSTRAINT', 'IMAGE_PLANE', 'IMAGE_BACKGROUND', 'IMAGE_REFERENCE', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'NODE_TOP', 'NODE_SIDE', 'NODE_CORNER', 'ANCHOR_TOP', 'ANCHOR_BOTTOM', 'ANCHOR_LEFT', 'ANCHOR_RIGHT', 'ANCHOR_CENTER', 'SELECT_SET', 'SELECT_EXTEND', 'SELECT_SUBTRACT', 'SELECT_INTERSECT', 'SELECT_DIFFERENCE', 'ALIGN_LEFT', 'ALIGN_CENTER', 'ALIGN_RIGHT', 'ALIGN_JUSTIFY', 'ALIGN_FLUSH', 'ALIGN_TOP', 'ALIGN_MIDDLE', 'ALIGN_BOTTOM', 'BOLD', 'ITALIC', 'UNDERLINE', 'SMALL_CAPS', 'CON_ACTION', 'HOLDOUT_OFF', 'HOLDOUT_ON', 'INDIRECT_ONLY_OFF', 'INDIRECT_ONLY_ON', 'CON_CAMERASOLVER', 'CON_FOLLOWTRACK', 'CON_OBJECTSOLVER', 'CON_LOCLIKE', 'CON_ROTLIKE', 'CON_SIZELIKE', 'CON_TRANSLIKE', 'CON_DISTLIMIT', 'CON_LOCLIMIT', 'CON_ROTLIMIT', 'CON_SIZELIMIT', 'CON_SAMEVOL', 'CON_TRANSFORM', 'CON_TRANSFORM_CACHE', 'CON_CLAMPTO', 'CON_KINEMATIC', 'CON_LOCKTRACK', 'CON_SPLINEIK', 'CON_STRETCHTO', 'CON_TRACKTO', 'CON_ARMATURE', 'CON_CHILDOF', 'CON_FLOOR', 'CON_FOLLOWPATH', 'CON_PIVOT', 'CON_SHRINKWRAP', 'MODIFIER_DATA', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'MOD_TINT', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_FLUID', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'MOD_PARTICLE_INSTANCE', 'MOD_HUE_SATURATION', 'MOD_NOISE', 'MOD_OFFSET', 'MOD_SIMPLIFY', 'MOD_THICKNESS', 'MOD_INSTANCE', 'MOD_TIME', 'MOD_OPACITY', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_SOUND', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'KEYFRAME_HLT', 'KEYFRAME', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'CURSOR', 'PIVOT_BOUNDBOX', 'PIVOT_CURSOR', 'PIVOT_INDIVIDUAL', 'PIVOT_MEDIAN', 'PIVOT_ACTIVE', 'CENTER_ONLY', 'ROOTCURVE', 'SMOOTHCURVE', 'SPHERECURVE', 'INVERSESQUARECURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'PROP_PROJECTED', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'SNAP_FACE_CENTER', 'SNAP_PERPENDICULAR', 'SNAP_MIDPOINT', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'OBJECT_ORIGIN', 'ORIENTATION_GLOBAL', 'ORIENTATION_GIMBAL', 'ORIENTATION_LOCAL', 'ORIENTATION_NORMAL', 'ORIENTATION_VIEW', 'COPYDOWN', 'PASTEDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'VIS_SEL_11', 'VIS_SEL_10', 'VIS_SEL_01', 'VIS_SEL_00', 'AUTOMERGE_OFF', 'AUTOMERGE_ON', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'TRANSFORM_ORIGINS', 'GIZMO', 'ORIENTATION_CURSOR', 'NORMALS_VERTEX', 'NORMALS_FACE', 'NORMALS_VERTEX_FACE', 'SHADING_BBOX', 'SHADING_WIRE', 'SHADING_SOLID', 'SHADING_RENDERED', 'SHADING_TEXTURE', 'OVERLAY', 'XRAY', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'LAYER_USED', 'LAYER_ACTIVE', 'OUTLINER_OB_HAIR', 'OUTLINER_DATA_HAIR', 'HAIR_DATA', 'OUTLINER_OB_POINTCLOUD', 'OUTLINER_DATA_POINTCLOUD', 'POINTCLOUD_DATA', 'OUTLINER_OB_VOLUME', 'OUTLINER_DATA_VOLUME', 'VOLUME_DATA', 'HOME', 'DOCUMENTS', 'TEMP', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'SHORTDISPLAY', 'LONGDISPLAY', 'IMGDISPLAY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'FOLDER_REDIRECT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'SORT_DESC', 'SORT_ASC', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_ARCHIVE', 'FILE_CACHE', 'FILE_VOLUME', 'FILE_3D', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'MATSHADERBALL', 'MATCLOTH', 'MATFLUID', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'DISC', 'DESKTOP', 'EXTERNAL_DRIVE', 'NETWORK_DRIVE', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'SEQ_STRIP_META', 'SEQ_STRIP_DUPLICATE', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'HANDLE_AUTOCLAMPED', 'HANDLE_AUTO', 'HANDLE_ALIGNED', 'HANDLE_VECTOR', 'HANDLE_FREE', 'VIEW_PERSPECTIVE', 'VIEW_ORTHO', 'VIEW_CAMERA', 'VIEW_PAN', 'VIEW_ZOOM', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'GPBRUSH_SMOOTH', 'GPBRUSH_THICKNESS', 'GPBRUSH_STRENGTH', 'GPBRUSH_GRAB', 'GPBRUSH_PUSH', 'GPBRUSH_TWIST', 'GPBRUSH_PINCH', 'GPBRUSH_RANDOMIZE', 'GPBRUSH_CLONE', 'GPBRUSH_WEIGHT', 'GPBRUSH_PENCIL', 'GPBRUSH_PEN', 'GPBRUSH_INK', 'GPBRUSH_INKNOISE', 'GPBRUSH_BLOCK', 'GPBRUSH_MARKER', 'GPBRUSH_FILL', 'GPBRUSH_AIRBRUSH', 'GPBRUSH_CHISEL', 'GPBRUSH_ERASE_SOFT', 'GPBRUSH_ERASE_HARD', 'GPBRUSH_ERASE_STROKE', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'HANDLETYPE_FREE_VEC', 'HANDLETYPE_ALIGNED_VEC', 'HANDLETYPE_VECTOR_VEC', 'HANDLETYPE_AUTO_VEC', 'HANDLETYPE_AUTO_CLAMP_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC', 'EVENT_A', 'EVENT_B', 'EVENT_C', 'EVENT_D', 'EVENT_E', 'EVENT_F', 'EVENT_G', 'EVENT_H', 'EVENT_I', 'EVENT_J', 'EVENT_K', 'EVENT_L', 'EVENT_M', 'EVENT_N', 'EVENT_O', 'EVENT_P', 'EVENT_Q', 'EVENT_R', 'EVENT_S', 'EVENT_T', 'EVENT_U', 'EVENT_V', 'EVENT_W', 'EVENT_X', 'EVENT_Y', 'EVENT_Z', 'EVENT_SHIFT', 'EVENT_CTRL', 'EVENT_ALT', 'EVENT_OS', 'EVENT_F1', 'EVENT_F2', 'EVENT_F3', 'EVENT_F4', 'EVENT_F5', 'EVENT_F6', 'EVENT_F7', 'EVENT_F8', 'EVENT_F9', 'EVENT_F10', 'EVENT_F11', 'EVENT_F12', 'EVENT_ESC', 'EVENT_TAB', 'EVENT_PAGEUP', 'EVENT_PAGEDOWN', 'EVENT_RETURN', 'EVENT_SPACEKEY'], (optional)
      
            @returns (types.UIPopupMenu): (never None)
         '''
      
         return types.UIPopupMenu

      @classmethod
      def popmenu_end__internal(menu):
         '''popmenu_end__internal
            Arguments:
            @menu (UIPopupMenu): (never None)
      
         '''
      
         pass

      @classmethod
      def popover_begin__internal(ui_units_x=0, from_active_button=False):
         '''popover_begin__internal
            Arguments:
            @ui_units_x (int): in [0, inf], (optional)
            @from_active_button (bool): Use the active button for positioning
               (optional)
      
            @returns (types.UIPopover): (never None)
         '''
      
         return types.UIPopover

      @classmethod
      def popover_end__internal(menu, keymap=None):
         '''popover_end__internal
            Arguments:
            @menu (UIPopover): (never None)
            @keymap (KeyMap): Active key map
               (optional)
      
         '''
      
         pass

      @classmethod
      def piemenu_begin__internal(title, icon='NONE', event=None):
         '''piemenu_begin__internal
            Arguments:
            @title (str): (never None)
            @icon (str): in ['NONE', 'QUESTION', 'ERROR', 'CANCEL', 'TRIA_RIGHT', 'TRIA_DOWN', 'TRIA_LEFT', 'TRIA_UP', 'ARROW_LEFTRIGHT', 'PLUS', 'DISCLOSURE_TRI_RIGHT', 'DISCLOSURE_TRI_DOWN', 'RADIOBUT_OFF', 'RADIOBUT_ON', 'MENU_PANEL', 'BLENDER', 'GRIP', 'DOT', 'COLLAPSEMENU', 'X', 'DUPLICATE', 'TRASH', 'COLLECTION_NEW', 'OPTIONS', 'NODE', 'NODE_SEL', 'WINDOW', 'WORKSPACE', 'RIGHTARROW_THIN', 'BORDERMOVE', 'VIEWZOOM', 'ADD', 'REMOVE', 'PANEL_CLOSE', 'COPY_ID', 'EYEDROPPER', 'CHECKMARK', 'AUTO', 'CHECKBOX_DEHLT', 'CHECKBOX_HLT', 'UNLOCKED', 'LOCKED', 'UNPINNED', 'PINNED', 'SCREEN_BACK', 'RIGHTARROW', 'DOWNARROW_HLT', 'FCURVE_SNAPSHOT', 'OBJECT_HIDDEN', 'TOPBAR', 'STATUSBAR', 'PLUGIN', 'HELP', 'GHOST_ENABLED', 'COLOR', 'UNLINKED', 'LINKED', 'HAND', 'ZOOM_ALL', 'ZOOM_SELECTED', 'ZOOM_PREVIOUS', 'ZOOM_IN', 'ZOOM_OUT', 'DRIVER_DISTANCE', 'DRIVER_ROTATIONAL_DIFFERENCE', 'DRIVER_TRANSFORM', 'FREEZE', 'STYLUS_PRESSURE', 'GHOST_DISABLED', 'FILE_NEW', 'FILE_TICK', 'QUIT', 'URL', 'RECOVER_LAST', 'THREE_DOTS', 'FULLSCREEN_ENTER', 'FULLSCREEN_EXIT', 'BRUSHES_ALL', 'LIGHT', 'MATERIAL', 'TEXTURE', 'ANIM', 'WORLD', 'SCENE', 'OUTPUT', 'SCRIPT', 'PARTICLES', 'PHYSICS', 'SPEAKER', 'TOOL_SETTINGS', 'SHADERFX', 'MODIFIER', 'BLANK1', 'FAKE_USER_OFF', 'FAKE_USER_ON', 'VIEW3D', 'GRAPH', 'OUTLINER', 'PROPERTIES', 'FILEBROWSER', 'IMAGE', 'INFO', 'SEQUENCE', 'TEXT', 'SOUND', 'ACTION', 'NLA', 'PREFERENCES', 'TIME', 'NODETREE', 'CONSOLE', 'TRACKER', 'ASSET_MANAGER', 'NODE_COMPOSITING', 'NODE_TEXTURE', 'NODE_MATERIAL', 'UV', 'OBJECT_DATAMODE', 'EDITMODE_HLT', 'UV_DATA', 'VPAINT_HLT', 'TPAINT_HLT', 'WPAINT_HLT', 'SCULPTMODE_HLT', 'POSE_HLT', 'PARTICLEMODE', 'TRACKING', 'TRACKING_BACKWARDS', 'TRACKING_FORWARDS', 'TRACKING_BACKWARDS_SINGLE', 'TRACKING_FORWARDS_SINGLE', 'TRACKING_CLEAR_BACKWARDS', 'TRACKING_CLEAR_FORWARDS', 'TRACKING_REFINE_BACKWARDS', 'TRACKING_REFINE_FORWARDS', 'SCENE_DATA', 'RENDERLAYERS', 'WORLD_DATA', 'OBJECT_DATA', 'MESH_DATA', 'CURVE_DATA', 'META_DATA', 'LATTICE_DATA', 'LIGHT_DATA', 'MATERIAL_DATA', 'TEXTURE_DATA', 'ANIM_DATA', 'CAMERA_DATA', 'PARTICLE_DATA', 'LIBRARY_DATA_DIRECT', 'GROUP', 'ARMATURE_DATA', 'COMMUNITY', 'BONE_DATA', 'CONSTRAINT', 'SHAPEKEY_DATA', 'CONSTRAINT_BONE', 'CAMERA_STEREO', 'PACKAGE', 'UGLYPACKAGE', 'EXPERIMENTAL', 'BRUSH_DATA', 'IMAGE_DATA', 'FILE', 'FCURVE', 'FONT_DATA', 'RENDER_RESULT', 'SURFACE_DATA', 'EMPTY_DATA', 'PRESET', 'RENDER_ANIMATION', 'RENDER_STILL', 'LIBRARY_DATA_BROKEN', 'BOIDS', 'STRANDS', 'LIBRARY_DATA_INDIRECT', 'GREASEPENCIL', 'LINE_DATA', 'LIBRARY_DATA_OVERRIDE', 'GROUP_BONE', 'GROUP_VERTEX', 'GROUP_VCOL', 'GROUP_UVS', 'FACE_MAPS', 'RNA', 'RNA_ADD', 'MOUSE_LMB', 'MOUSE_MMB', 'MOUSE_RMB', 'MOUSE_MOVE', 'MOUSE_LMB_DRAG', 'MOUSE_MMB_DRAG', 'MOUSE_RMB_DRAG', 'MEMORY', 'PRESET_NEW', 'DECORATE', 'DECORATE_KEYFRAME', 'DECORATE_ANIMATE', 'DECORATE_DRIVER', 'DECORATE_LINKED', 'DECORATE_LIBRARY_OVERRIDE', 'DECORATE_UNLOCKED', 'DECORATE_LOCKED', 'DECORATE_OVERRIDE', 'FUND', 'TRACKER_DATA', 'HEART', 'ORPHAN_DATA', 'USER', 'SYSTEM', 'SETTINGS', 'OUTLINER_OB_EMPTY', 'OUTLINER_OB_MESH', 'OUTLINER_OB_CURVE', 'OUTLINER_OB_LATTICE', 'OUTLINER_OB_META', 'OUTLINER_OB_LIGHT', 'OUTLINER_OB_CAMERA', 'OUTLINER_OB_ARMATURE', 'OUTLINER_OB_FONT', 'OUTLINER_OB_SURFACE', 'OUTLINER_OB_SPEAKER', 'OUTLINER_OB_FORCE_FIELD', 'OUTLINER_OB_GROUP_INSTANCE', 'OUTLINER_OB_GREASEPENCIL', 'OUTLINER_OB_LIGHTPROBE', 'OUTLINER_OB_IMAGE', 'RESTRICT_COLOR_OFF', 'RESTRICT_COLOR_ON', 'HIDE_ON', 'HIDE_OFF', 'RESTRICT_SELECT_ON', 'RESTRICT_SELECT_OFF', 'RESTRICT_RENDER_ON', 'RESTRICT_RENDER_OFF', 'RESTRICT_INSTANCED_OFF', 'OUTLINER_DATA_EMPTY', 'OUTLINER_DATA_MESH', 'OUTLINER_DATA_CURVE', 'OUTLINER_DATA_LATTICE', 'OUTLINER_DATA_META', 'OUTLINER_DATA_LIGHT', 'OUTLINER_DATA_CAMERA', 'OUTLINER_DATA_ARMATURE', 'OUTLINER_DATA_FONT', 'OUTLINER_DATA_SURFACE', 'OUTLINER_DATA_SPEAKER', 'OUTLINER_DATA_LIGHTPROBE', 'OUTLINER_DATA_GP_LAYER', 'OUTLINER_DATA_GREASEPENCIL', 'GP_SELECT_POINTS', 'GP_SELECT_STROKES', 'GP_MULTIFRAME_EDITING', 'GP_ONLY_SELECTED', 'GP_SELECT_BETWEEN_STROKES', 'MODIFIER_OFF', 'MODIFIER_ON', 'ONIONSKIN_OFF', 'ONIONSKIN_ON', 'RESTRICT_VIEW_ON', 'RESTRICT_VIEW_OFF', 'RESTRICT_INSTANCED_ON', 'MESH_PLANE', 'MESH_CUBE', 'MESH_CIRCLE', 'MESH_UVSPHERE', 'MESH_ICOSPHERE', 'MESH_GRID', 'MESH_MONKEY', 'MESH_CYLINDER', 'MESH_TORUS', 'MESH_CONE', 'MESH_CAPSULE', 'EMPTY_SINGLE_ARROW', 'LIGHT_POINT', 'LIGHT_SUN', 'LIGHT_SPOT', 'LIGHT_HEMI', 'LIGHT_AREA', 'CUBE', 'SPHERE', 'CONE', 'META_PLANE', 'META_CUBE', 'META_BALL', 'META_ELLIPSOID', 'META_CAPSULE', 'SURFACE_NCURVE', 'SURFACE_NCIRCLE', 'SURFACE_NSURFACE', 'SURFACE_NCYLINDER', 'SURFACE_NSPHERE', 'SURFACE_NTORUS', 'EMPTY_AXIS', 'STROKE', 'EMPTY_ARROWS', 'CURVE_BEZCURVE', 'CURVE_BEZCIRCLE', 'CURVE_NCURVE', 'CURVE_NCIRCLE', 'CURVE_PATH', 'LIGHTPROBE_CUBEMAP', 'LIGHTPROBE_PLANAR', 'LIGHTPROBE_GRID', 'COLOR_RED', 'COLOR_GREEN', 'COLOR_BLUE', 'TRIA_RIGHT_BAR', 'TRIA_DOWN_BAR', 'TRIA_LEFT_BAR', 'TRIA_UP_BAR', 'FORCE_FORCE', 'FORCE_WIND', 'FORCE_VORTEX', 'FORCE_MAGNETIC', 'FORCE_HARMONIC', 'FORCE_CHARGE', 'FORCE_LENNARDJONES', 'FORCE_TEXTURE', 'FORCE_CURVE', 'FORCE_BOID', 'FORCE_TURBULENCE', 'FORCE_DRAG', 'FORCE_SMOKEFLOW', 'RIGID_BODY', 'RIGID_BODY_CONSTRAINT', 'IMAGE_PLANE', 'IMAGE_BACKGROUND', 'IMAGE_REFERENCE', 'NODE_INSERT_ON', 'NODE_INSERT_OFF', 'NODE_TOP', 'NODE_SIDE', 'NODE_CORNER', 'ANCHOR_TOP', 'ANCHOR_BOTTOM', 'ANCHOR_LEFT', 'ANCHOR_RIGHT', 'ANCHOR_CENTER', 'SELECT_SET', 'SELECT_EXTEND', 'SELECT_SUBTRACT', 'SELECT_INTERSECT', 'SELECT_DIFFERENCE', 'ALIGN_LEFT', 'ALIGN_CENTER', 'ALIGN_RIGHT', 'ALIGN_JUSTIFY', 'ALIGN_FLUSH', 'ALIGN_TOP', 'ALIGN_MIDDLE', 'ALIGN_BOTTOM', 'BOLD', 'ITALIC', 'UNDERLINE', 'SMALL_CAPS', 'CON_ACTION', 'HOLDOUT_OFF', 'HOLDOUT_ON', 'INDIRECT_ONLY_OFF', 'INDIRECT_ONLY_ON', 'CON_CAMERASOLVER', 'CON_FOLLOWTRACK', 'CON_OBJECTSOLVER', 'CON_LOCLIKE', 'CON_ROTLIKE', 'CON_SIZELIKE', 'CON_TRANSLIKE', 'CON_DISTLIMIT', 'CON_LOCLIMIT', 'CON_ROTLIMIT', 'CON_SIZELIMIT', 'CON_SAMEVOL', 'CON_TRANSFORM', 'CON_TRANSFORM_CACHE', 'CON_CLAMPTO', 'CON_KINEMATIC', 'CON_LOCKTRACK', 'CON_SPLINEIK', 'CON_STRETCHTO', 'CON_TRACKTO', 'CON_ARMATURE', 'CON_CHILDOF', 'CON_FLOOR', 'CON_FOLLOWPATH', 'CON_PIVOT', 'CON_SHRINKWRAP', 'MODIFIER_DATA', 'MOD_WAVE', 'MOD_BUILD', 'MOD_DECIM', 'MOD_MIRROR', 'MOD_SOFT', 'MOD_SUBSURF', 'HOOK', 'MOD_PHYSICS', 'MOD_PARTICLES', 'MOD_BOOLEAN', 'MOD_EDGESPLIT', 'MOD_ARRAY', 'MOD_UVPROJECT', 'MOD_DISPLACE', 'MOD_CURVE', 'MOD_LATTICE', 'MOD_TINT', 'MOD_ARMATURE', 'MOD_SHRINKWRAP', 'MOD_CAST', 'MOD_MESHDEFORM', 'MOD_BEVEL', 'MOD_SMOOTH', 'MOD_SIMPLEDEFORM', 'MOD_MASK', 'MOD_CLOTH', 'MOD_EXPLODE', 'MOD_FLUIDSIM', 'MOD_MULTIRES', 'MOD_FLUID', 'MOD_SOLIDIFY', 'MOD_SCREW', 'MOD_VERTEX_WEIGHT', 'MOD_DYNAMICPAINT', 'MOD_REMESH', 'MOD_OCEAN', 'MOD_WARP', 'MOD_SKIN', 'MOD_TRIANGULATE', 'MOD_WIREFRAME', 'MOD_DATA_TRANSFER', 'MOD_NORMALEDIT', 'MOD_PARTICLE_INSTANCE', 'MOD_HUE_SATURATION', 'MOD_NOISE', 'MOD_OFFSET', 'MOD_SIMPLIFY', 'MOD_THICKNESS', 'MOD_INSTANCE', 'MOD_TIME', 'MOD_OPACITY', 'REC', 'PLAY', 'FF', 'REW', 'PAUSE', 'PREV_KEYFRAME', 'NEXT_KEYFRAME', 'PLAY_SOUND', 'PLAY_REVERSE', 'PREVIEW_RANGE', 'ACTION_TWEAK', 'PMARKER_ACT', 'PMARKER_SEL', 'PMARKER', 'MARKER_HLT', 'MARKER', 'KEYFRAME_HLT', 'KEYFRAME', 'KEYINGSET', 'KEY_DEHLT', 'KEY_HLT', 'MUTE_IPO_OFF', 'MUTE_IPO_ON', 'DRIVER', 'SOLO_OFF', 'SOLO_ON', 'FRAME_PREV', 'FRAME_NEXT', 'NLA_PUSHDOWN', 'IPO_CONSTANT', 'IPO_LINEAR', 'IPO_BEZIER', 'IPO_SINE', 'IPO_QUAD', 'IPO_CUBIC', 'IPO_QUART', 'IPO_QUINT', 'IPO_EXPO', 'IPO_CIRC', 'IPO_BOUNCE', 'IPO_ELASTIC', 'IPO_BACK', 'IPO_EASE_IN', 'IPO_EASE_OUT', 'IPO_EASE_IN_OUT', 'NORMALIZE_FCURVES', 'VERTEXSEL', 'EDGESEL', 'FACESEL', 'CURSOR', 'PIVOT_BOUNDBOX', 'PIVOT_CURSOR', 'PIVOT_INDIVIDUAL', 'PIVOT_MEDIAN', 'PIVOT_ACTIVE', 'CENTER_ONLY', 'ROOTCURVE', 'SMOOTHCURVE', 'SPHERECURVE', 'INVERSESQUARECURVE', 'SHARPCURVE', 'LINCURVE', 'NOCURVE', 'RNDCURVE', 'PROP_OFF', 'PROP_ON', 'PROP_CON', 'PROP_PROJECTED', 'PARTICLE_POINT', 'PARTICLE_TIP', 'PARTICLE_PATH', 'SNAP_FACE_CENTER', 'SNAP_PERPENDICULAR', 'SNAP_MIDPOINT', 'SNAP_OFF', 'SNAP_ON', 'SNAP_NORMAL', 'SNAP_GRID', 'SNAP_VERTEX', 'SNAP_EDGE', 'SNAP_FACE', 'SNAP_VOLUME', 'SNAP_INCREMENT', 'STICKY_UVS_LOC', 'STICKY_UVS_DISABLE', 'STICKY_UVS_VERT', 'CLIPUV_DEHLT', 'CLIPUV_HLT', 'SNAP_PEEL_OBJECT', 'GRID', 'OBJECT_ORIGIN', 'ORIENTATION_GLOBAL', 'ORIENTATION_GIMBAL', 'ORIENTATION_LOCAL', 'ORIENTATION_NORMAL', 'ORIENTATION_VIEW', 'COPYDOWN', 'PASTEDOWN', 'PASTEFLIPUP', 'PASTEFLIPDOWN', 'VIS_SEL_11', 'VIS_SEL_10', 'VIS_SEL_01', 'VIS_SEL_00', 'AUTOMERGE_OFF', 'AUTOMERGE_ON', 'UV_VERTEXSEL', 'UV_EDGESEL', 'UV_FACESEL', 'UV_ISLANDSEL', 'UV_SYNC_SELECT', 'TRANSFORM_ORIGINS', 'GIZMO', 'ORIENTATION_CURSOR', 'NORMALS_VERTEX', 'NORMALS_FACE', 'NORMALS_VERTEX_FACE', 'SHADING_BBOX', 'SHADING_WIRE', 'SHADING_SOLID', 'SHADING_RENDERED', 'SHADING_TEXTURE', 'OVERLAY', 'XRAY', 'LOCKVIEW_OFF', 'LOCKVIEW_ON', 'AXIS_SIDE', 'AXIS_FRONT', 'AXIS_TOP', 'LAYER_USED', 'LAYER_ACTIVE', 'OUTLINER_OB_HAIR', 'OUTLINER_DATA_HAIR', 'HAIR_DATA', 'OUTLINER_OB_POINTCLOUD', 'OUTLINER_DATA_POINTCLOUD', 'POINTCLOUD_DATA', 'OUTLINER_OB_VOLUME', 'OUTLINER_DATA_VOLUME', 'VOLUME_DATA', 'HOME', 'DOCUMENTS', 'TEMP', 'SORTALPHA', 'SORTBYEXT', 'SORTTIME', 'SORTSIZE', 'SHORTDISPLAY', 'LONGDISPLAY', 'IMGDISPLAY', 'BOOKMARKS', 'FONTPREVIEW', 'FILTER', 'NEWFOLDER', 'FOLDER_REDIRECT', 'FILE_PARENT', 'FILE_REFRESH', 'FILE_FOLDER', 'FILE_BLANK', 'FILE_BLEND', 'FILE_IMAGE', 'FILE_MOVIE', 'FILE_SCRIPT', 'FILE_SOUND', 'FILE_FONT', 'FILE_TEXT', 'SORT_DESC', 'SORT_ASC', 'LINK_BLEND', 'APPEND_BLEND', 'IMPORT', 'EXPORT', 'LOOP_BACK', 'LOOP_FORWARDS', 'BACK', 'FORWARD', 'FILE_ARCHIVE', 'FILE_CACHE', 'FILE_VOLUME', 'FILE_3D', 'FILE_HIDDEN', 'FILE_BACKUP', 'DISK_DRIVE', 'MATPLANE', 'MATSPHERE', 'MATCUBE', 'MONKEY', 'HAIR', 'ALIASED', 'ANTIALIASED', 'MAT_SPHERE_SKY', 'MATSHADERBALL', 'MATCLOTH', 'MATFLUID', 'WORDWRAP_OFF', 'WORDWRAP_ON', 'SYNTAX_OFF', 'SYNTAX_ON', 'LINENUMBERS_OFF', 'LINENUMBERS_ON', 'SCRIPTPLUGINS', 'DISC', 'DESKTOP', 'EXTERNAL_DRIVE', 'NETWORK_DRIVE', 'SEQ_SEQUENCER', 'SEQ_PREVIEW', 'SEQ_LUMA_WAVEFORM', 'SEQ_CHROMA_SCOPE', 'SEQ_HISTOGRAM', 'SEQ_SPLITVIEW', 'SEQ_STRIP_META', 'SEQ_STRIP_DUPLICATE', 'IMAGE_RGB', 'IMAGE_RGB_ALPHA', 'IMAGE_ALPHA', 'IMAGE_ZDEPTH', 'HANDLE_AUTOCLAMPED', 'HANDLE_AUTO', 'HANDLE_ALIGNED', 'HANDLE_VECTOR', 'HANDLE_FREE', 'VIEW_PERSPECTIVE', 'VIEW_ORTHO', 'VIEW_CAMERA', 'VIEW_PAN', 'VIEW_ZOOM', 'BRUSH_BLOB', 'BRUSH_BLUR', 'BRUSH_CLAY', 'BRUSH_CLAY_STRIPS', 'BRUSH_CLONE', 'BRUSH_CREASE', 'BRUSH_FILL', 'BRUSH_FLATTEN', 'BRUSH_GRAB', 'BRUSH_INFLATE', 'BRUSH_LAYER', 'BRUSH_MASK', 'BRUSH_MIX', 'BRUSH_NUDGE', 'BRUSH_PINCH', 'BRUSH_SCRAPE', 'BRUSH_SCULPT_DRAW', 'BRUSH_SMEAR', 'BRUSH_SMOOTH', 'BRUSH_SNAKE_HOOK', 'BRUSH_SOFTEN', 'BRUSH_TEXDRAW', 'BRUSH_TEXFILL', 'BRUSH_TEXMASK', 'BRUSH_THUMB', 'BRUSH_ROTATE', 'GPBRUSH_SMOOTH', 'GPBRUSH_THICKNESS', 'GPBRUSH_STRENGTH', 'GPBRUSH_GRAB', 'GPBRUSH_PUSH', 'GPBRUSH_TWIST', 'GPBRUSH_PINCH', 'GPBRUSH_RANDOMIZE', 'GPBRUSH_CLONE', 'GPBRUSH_WEIGHT', 'GPBRUSH_PENCIL', 'GPBRUSH_PEN', 'GPBRUSH_INK', 'GPBRUSH_INKNOISE', 'GPBRUSH_BLOCK', 'GPBRUSH_MARKER', 'GPBRUSH_FILL', 'GPBRUSH_AIRBRUSH', 'GPBRUSH_CHISEL', 'GPBRUSH_ERASE_SOFT', 'GPBRUSH_ERASE_HARD', 'GPBRUSH_ERASE_STROKE', 'SMALL_TRI_RIGHT_VEC', 'KEYTYPE_KEYFRAME_VEC', 'KEYTYPE_BREAKDOWN_VEC', 'KEYTYPE_EXTREME_VEC', 'KEYTYPE_JITTER_VEC', 'KEYTYPE_MOVING_HOLD_VEC', 'HANDLETYPE_FREE_VEC', 'HANDLETYPE_ALIGNED_VEC', 'HANDLETYPE_VECTOR_VEC', 'HANDLETYPE_AUTO_VEC', 'HANDLETYPE_AUTO_CLAMP_VEC', 'COLORSET_01_VEC', 'COLORSET_02_VEC', 'COLORSET_03_VEC', 'COLORSET_04_VEC', 'COLORSET_05_VEC', 'COLORSET_06_VEC', 'COLORSET_07_VEC', 'COLORSET_08_VEC', 'COLORSET_09_VEC', 'COLORSET_10_VEC', 'COLORSET_11_VEC', 'COLORSET_12_VEC', 'COLORSET_13_VEC', 'COLORSET_14_VEC', 'COLORSET_15_VEC', 'COLORSET_16_VEC', 'COLORSET_17_VEC', 'COLORSET_18_VEC', 'COLORSET_19_VEC', 'COLORSET_20_VEC', 'EVENT_A', 'EVENT_B', 'EVENT_C', 'EVENT_D', 'EVENT_E', 'EVENT_F', 'EVENT_G', 'EVENT_H', 'EVENT_I', 'EVENT_J', 'EVENT_K', 'EVENT_L', 'EVENT_M', 'EVENT_N', 'EVENT_O', 'EVENT_P', 'EVENT_Q', 'EVENT_R', 'EVENT_S', 'EVENT_T', 'EVENT_U', 'EVENT_V', 'EVENT_W', 'EVENT_X', 'EVENT_Y', 'EVENT_Z', 'EVENT_SHIFT', 'EVENT_CTRL', 'EVENT_ALT', 'EVENT_OS', 'EVENT_F1', 'EVENT_F2', 'EVENT_F3', 'EVENT_F4', 'EVENT_F5', 'EVENT_F6', 'EVENT_F7', 'EVENT_F8', 'EVENT_F9', 'EVENT_F10', 'EVENT_F11', 'EVENT_F12', 'EVENT_ESC', 'EVENT_TAB', 'EVENT_PAGEUP', 'EVENT_PAGEDOWN', 'EVENT_RETURN', 'EVENT_SPACEKEY'], (optional)
            @event (Event): (optional, never None)
      
            @returns (types.UIPieMenu): (never None)
         '''
      
         return types.UIPieMenu

      @classmethod
      def piemenu_end__internal(menu):
         '''piemenu_end__internal
            Arguments:
            @menu (UIPieMenu): (never None)
      
         '''
      
         pass

      @classmethod
      def operator_properties_last(operator):
         '''operator_properties_last
            Arguments:
            @operator (str): (never None)
      
            @returns (types.OperatorProperties): (never None)
         '''
      
         return types.OperatorProperties

      def print_undo_steps():
         '''print_undo_steps
         '''
      
         pass

      #unable to describe the 'popover' method due to internal error

      def popup_menu(self, draw_func, title='', icon='NONE'):
         
      
         pass
      
      def popup_menu_pie(self, event, draw_func, title='', icon='NONE'):
         
      
         pass
      
   class WipeSequence(types.EffectSequence):
      '''Sequence strip creating a wipe transition
      '''
   
      angle = float
      '''Edge angle
         @returns: float in [-1.5708, 1.5708]
      '''
      
      blur_width = float
      '''Width of the blur edge, in percentage relative to the image size
         @returns: float in [0, 1]
      '''
      
      direction = str
      '''Wipe direction
         @returns: enum in ['OUT', 'IN']
      '''
      
      input_1 = types.Sequence
      '''First input for the effect strip
         @returns: Sequence, (never None)
      '''
      
      input_2 = types.Sequence
      '''Second input for the effect strip
         @returns: Sequence, (never None)
      '''
      
      input_count = int # (read only)
      '''
         @returns: int in [0, inf]
      '''
      
      transition_type = str
      '''
         @returns: enum in ['SINGLE', 'DOUBLE', 'IRIS', 'CLOCK']
      '''
      
   class WireframeModifier(types.Modifier):
      '''Wireframe effect modifier
      '''
   
      crease_weight = float
      '''Crease weight (if active)
         @returns: float in [-inf, inf]
      '''
      
      invert_vertex_group = bool
      '''Invert vertex group influence
         @returns: boolean
      '''
      
      material_offset = int
      '''Offset material index of generated faces
         @returns: int in [-32768, 32767]
      '''
      
      offset = float
      '''Offset the thickness from the center
         @returns: float in [-inf, inf]
      '''
      
      thickness = float
      '''Thickness factor
         @returns: float in [-inf, inf]
      '''
      
      thickness_vertex_group = float
      '''Thickness factor to use for zero vertex group influence
         @returns: float in [0, 1]
      '''
      
      use_boundary = bool
      '''Support face boundaries
         @returns: boolean
      '''
      
      use_crease = bool
      '''Crease hub edges for improved subsurf
         @returns: boolean
      '''
      
      use_even_offset = bool
      '''Scale the offset to give more even thickness
         @returns: boolean
      '''
      
      use_relative_offset = bool
      '''Scale the offset by surrounding geometry
         @returns: boolean
      '''
      
      use_replace = bool
      '''Remove original geometry
         @returns: boolean
      '''
      
      vertex_group = str
      '''Vertex group name for selecting the affected areas
         @returns: string, (never None)
      '''
      
   class WoodTexture(types.Texture):
      '''Procedural noise texture
      '''
   
      nabla = float
      '''Size of derivative offset used for calculating normal
         @returns: float in [0.001, 0.1]
      '''
      
      noise_basis = str
      '''Noise basis used for turbulence
         @returns: enum in ['BLENDER_ORIGINAL', 'ORIGINAL_PERLIN', 'IMPROVED_PERLIN', 'VORONOI_F1', 'VORONOI_F2', 'VORONOI_F3', 'VORONOI_F4', 'VORONOI_F2_F1', 'VORONOI_CRACKLE', 'CELL_NOISE']
      '''
      
      noise_basis_2 = str
      '''
         @returns: enum in ['SIN', 'SAW', 'TRI']
      '''
      
      noise_scale = float
      '''Scaling for noise input
         @returns: float in [0.0001, inf]
      '''
      
      noise_type = str
      '''
         @returns: enum in ['SOFT_NOISE', 'HARD_NOISE']
      '''
      
      turbulence = float
      '''Turbulence of the bandnoise and ringnoise types
         @returns: float in [0.0001, inf]
      '''
      
      wood_type = str
      '''
         @returns: enum in ['BANDS', 'RINGS', 'BANDNOISE', 'RINGNOISE']
      '''
      
      users_material = None # (readonly)
      '''Materials that use this texture
         
      '''
      
      
      users_object_modifier = None # (readonly)
      '''Object modifiers that use this texture
         
      '''
      
      
   class WorkSpace(types.ID):
      '''Workspace data-block, defining the working environment for the user
      '''
   
      object_mode = str
      '''Switch to this object mode when activating the workspace
         @returns: enum in ['OBJECT', 'EDIT', 'POSE', 'SCULPT', 'VERTEX_PAINT', 'WEIGHT_PAINT', 'TEXTURE_PAINT', 'PARTICLE_EDIT', 'EDIT_GPENCIL', 'SCULPT_GPENCIL', 'PAINT_GPENCIL', 'VERTEX_GPENCIL', 'WEIGHT_GPENCIL']
      '''
      
      owner_ids = types.wmOwnerIDs # (read only)
      '''
         @returns: wmOwnerIDs Collection of wmOwnerID
      '''
      
      screens = types.Screen # (read only)
      '''Screen layouts of a workspace
         @returns: Collection of Screen
      '''
      
      tools = types.wmTools # (read only)
      '''
         @returns: wmTools Collection of WorkSpaceTool
      '''
      
      use_filter_by_owner = bool
      '''Filter the UI by tags
         @returns: boolean
      '''
      
      @classmethod
      def status_text_set_internal(text):
         '''Set the status bar text, typically key shortcuts for modal operators
            Arguments:
            @text (str): New string for the status bar, None clears the text
               
      
         '''
      
         pass

      def status_text_set(self, text):
         '''Set the status text or None to clear,
            When text is a function, this will be called with the (header, context) arguments.
            
         '''
      
         pass
      
   class WorkSpaceTool(types.bpy_struct):
      '''
      '''
   
      has_datablock = bool # (read only)
      '''
         @returns: boolean
      '''
      
      idname = str
      '''
         @returns: string, (never None)
      '''
      
      idname_fallback = str
      '''
         @returns: string, (never None)
      '''
      
      index = int # (read only)
      '''
         @returns: int in [-inf, inf]
      '''
      
      mode = str # (read only)
      '''
         @returns: enum in ['DEFAULT']
      '''
      
      space_type = str # (read only)
      '''
         @returns: enum in ['EMPTY', 'VIEW_3D', 'IMAGE_EDITOR', 'NODE_EDITOR', 'SEQUENCE_EDITOR', 'CLIP_EDITOR', 'DOPESHEET_EDITOR', 'GRAPH_EDITOR', 'NLA_EDITOR', 'TEXT_EDITOR', 'CONSOLE', 'INFO', 'TOPBAR', 'STATUSBAR', 'OUTLINER', 'PROPERTIES', 'FILE_BROWSER', 'PREFERENCES']
      '''
      
      widget = str # (read only)
      '''
         @returns: string, (never None)
      '''
      
      def setup(idname, cursor='DEFAULT', keymap="", gizmo_group="", data_block="", operator="", index=0, idname_fallback="", keymap_fallback=""):
         '''Set the tool settings
            Arguments:
            @idname (str): (never None)
            @cursor (str): in ['DEFAULT', 'NONE', 'WAIT', 'CROSSHAIR', 'MOVE_X', 'MOVE_Y', 'KNIFE', 'TEXT', 'PAINT_BRUSH', 'PAINT_CROSS', 'DOT', 'ERASER', 'HAND', 'SCROLL_X', 'SCROLL_Y', 'SCROLL_XY', 'EYEDROPPER'], (optional)
            @keymap (str): (optional, never None)
            @gizmo_group (str): (optional, never None)
            @data_block (str): (optional, never None)
            @operator (str): (optional, never None)
            @index (int): in [-inf, inf], (optional)
            @idname_fallback (str): (optional, never None)
            @keymap_fallback (str): (optional, never None)
      
         '''
      
         pass

      def operator_properties(operator):
         '''operator_properties
            Arguments:
            @operator (str): (never None)
      
            @returns (types.OperatorProperties): (never None)
         '''
      
         return types.OperatorProperties

      def gizmo_group_properties(group):
         '''gizmo_group_properties
            Arguments:
            @group (str): (never None)
      
            @returns (types.GizmoGroupProperties): (never None)
         '''
      
         return types.GizmoGroupProperties

      def refresh_from_context():
         '''refresh_from_context
         '''
      
         pass

   class World(types.ID):
      '''World data-block describing the environment and ambient lighting of a scene
      '''
   
      animation_data = types.AnimData # (read only)
      '''Animation data for this data-block
         @returns: AnimData
      '''
      
      color = float
      '''Color of the background
         @returns: float array of 3 items in [0, inf]
      '''
      
      cycles = types.CyclesWorldSettings # (read only)
      '''Cycles world settings
         @returns: CyclesWorldSettings
      '''
      
      cycles_visibility = types.CyclesVisibilitySettings # (read only)
      '''Cycles visibility settings
         @returns: CyclesVisibilitySettings
      '''
      
      light_settings = types.WorldLighting # (read only)
      '''World lighting settings
         @returns: WorldLighting, (never None)
      '''
      
      mist_settings = types.WorldMistSettings # (read only)
      '''World mist settings
         @returns: WorldMistSettings, (never None)
      '''
      
      node_tree = types.NodeTree # (read only)
      '''Node tree for node based worlds
         @returns: NodeTree
      '''
      
      use_nodes = bool
      '''Use shader nodes to render the world
         @returns: boolean
      '''
      
   class WorldLighting(types.bpy_struct):
      '''Lighting for a World data-block
      '''
   
      ao_factor = float
      '''Factor for ambient occlusion blending
         @returns: float in [0, inf]
      '''
      
      distance = float
      '''Length of rays, defines how far away other faces give occlusion effect
         @returns: float in [-inf, inf]
      '''
      
      use_ambient_occlusion = bool
      '''Use Ambient Occlusion to add shadowing based on distance between objects
         @returns: boolean
      '''
      
   class WorldMistSettings(types.bpy_struct):
      '''Mist settings for a World data-block
      '''
   
      depth = float
      '''Distance over which the mist effect fades in
         @returns: float in [0, inf]
      '''
      
      falloff = str
      '''Type of transition used to fade mist
         @returns: enum in ['QUADRATIC', 'LINEAR', 'INVERSE_QUADRATIC']
      '''
      
      height = float
      '''Control how much mist density decreases with height
         @returns: float in [0, 100]
      '''
      
      intensity = float
      '''Overall minimum intensity of the mist effect
         @returns: float in [0, 1]
      '''
      
      start = float
      '''Starting distance of the mist, measured from the camera
         @returns: float in [0, inf]
      '''
      
      use_mist = bool
      '''Occlude objects with the environment color as they are further away
         @returns: boolean
      '''
      
   class XrSessionSettings(types.bpy_struct):
      '''
      '''
   
      base_pose_angle = float
      '''Rotation angle around the Z-Axis to apply the rotation deltas from the VR headset to
         @returns: float in [-inf, inf]
      '''
      
      base_pose_location = float
      '''Coordinates to apply translation deltas from the VR headset to
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      base_pose_object = types.Object
      '''Object to take the location and rotation to which translation and rotation deltas from the VR headset will be applied to
         @returns: Object
      '''
      
      base_pose_type = str
      '''Define where the location and rotation for the VR view come from, to which translation and rotation deltas from the VR headset will be applied to
         @returns: enum in ['SCENE_CAMERA', 'OBJECT', 'CUSTOM']
      '''
      
      clip_end = float
      '''VR viewport far clipping distance
         @returns: float in [1e-06, inf]
      '''
      
      clip_start = float
      '''VR viewport near clipping distance
         @returns: float in [1e-06, inf]
      '''
      
      shading = types.View3DShading # (read only)
      '''
         @returns: View3DShading, (never None)
      '''
      
      show_annotation = bool
      '''Show annotations for this view
         @returns: boolean
      '''
      
      show_floor = bool
      '''Show the ground plane grid
         @returns: boolean
      '''
      
      use_positional_tracking = bool
      '''Allow VR headsets to affect the location in virtual space, in addition to the rotation
         @returns: boolean
      '''
      
   class XrSessionState(types.bpy_struct):
      '''Runtime state information about the VR session
      '''
   
      viewer_pose_location = float # (read only)
      '''Last known location of the viewer pose (center between the eyes) in world space
         @returns: float array of 3 items in [-inf, inf]
      '''
      
      viewer_pose_rotation = float # (read only)
      '''Last known rotation of the viewer pose (center between the eyes) in world space
         @returns: float array of 4 items in [-inf, inf]
      '''
      
      @classmethod
      def is_running(context):
         '''Query if the VR session is currently running
            Arguments:
            @context (Context): (never None)
      
            @returns (bool): 
         '''
      
         return bool

   class wmOwnerID(types.bpy_struct):
      '''
      '''
   
      name = str
      '''
         @returns: string, (never None)
      '''
      
   class wmOwnerIDs(types.bpy_struct):
      '''
      '''
   
      def new(name):
         '''Add ui tag
            Arguments:
            @name (str): New name for the tag
               (never None)
      
            @returns (types.wmOwnerID): 
         '''
      
         return types.wmOwnerID

      def remove(owner_id):
         '''Remove ui tag
            Arguments:
            @owner_id (wmOwnerID): Tag to remove
               (never None)
      
         '''
      
         pass

      def clear():
         '''Remove all tags
         '''
      
         pass

   class wmTools(types.bpy_struct):
      '''
      '''
   
      def from_space_view3d_mode(mode, create=False):
         '''
            Arguments:
            @mode (str): in ['EDIT_MESH', 'EDIT_CURVE', 'EDIT_SURFACE', 'EDIT_TEXT', 'EDIT_ARMATURE', 'EDIT_METABALL', 'EDIT_LATTICE', 'POSE', 'SCULPT', 'PAINT_WEIGHT', 'PAINT_VERTEX', 'PAINT_TEXTURE', 'PARTICLE', 'OBJECT', 'PAINT_GPENCIL', 'EDIT_GPENCIL', 'SCULPT_GPENCIL', 'WEIGHT_GPENCIL', 'VERTEX_GPENCIL']
            @create (bool): (optional)
      
            @returns (types.WorkSpaceTool): 
         '''
      
         return types.WorkSpaceTool

      def from_space_image_mode(mode, create=False):
         '''
            Arguments:
            @mode (str): in ['VIEW', 'UV', 'PAINT', 'MASK']
            @create (bool): (optional)
      
            @returns (types.WorkSpaceTool): 
         '''
      
         return types.WorkSpaceTool

      def from_space_node(create=False):
         '''
            Arguments:
            @create (bool): (optional)
      
            @returns (types.WorkSpaceTool): 
         '''
      
         return types.WorkSpaceTool

      def from_space_sequencer(mode, create=False):
         '''
            Arguments:
            @mode (str): in ['SEQUENCER', 'PREVIEW', 'SEQUENCER_PREVIEW']
            @create (bool): (optional)
      
            @returns (types.WorkSpaceTool): 
         '''
      
         return types.WorkSpaceTool

context = types.Context


data = types.BlendData


